{"meta":{"title":"Fansichao Blog","subtitle":"其乐无求~","description":"诗意与远方, 意义与未来","author":"Fansichao","url":"http://fansichao.github.com/blog","root":"/blog/"},"pages":[{"title":"about","date":"2021-10-23T12:10:00.000Z","updated":"2021-10-23T12:10:00.666Z","comments":true,"path":"about/index.html","permalink":"http://fansichao.github.com/blog/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-10-23T12:15:47.000Z","updated":"2021-10-23T12:15:47.985Z","comments":true,"path":"categories/index.html","permalink":"http://fansichao.github.com/blog/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2021-10-23T11:54:09.212Z","updated":"2021-10-23T11:54:09.212Z","comments":false,"path":"/404.html","permalink":"http://fansichao.github.com/blog/404.html","excerpt":"","text":""},{"title":"书单","date":"2021-10-23T11:54:09.213Z","updated":"2021-10-23T11:54:09.213Z","comments":false,"path":"books/index.html","permalink":"http://fansichao.github.com/blog/books/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-10-23T11:54:09.216Z","updated":"2021-10-23T11:54:09.216Z","comments":false,"path":"tags/index.html","permalink":"http://fansichao.github.com/blog/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-10-23T11:54:09.216Z","updated":"2021-10-23T11:54:09.216Z","comments":false,"path":"repository/index.html","permalink":"http://fansichao.github.com/blog/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-10-23T11:54:09.215Z","updated":"2021-10-23T11:54:09.215Z","comments":true,"path":"links/index.html","permalink":"http://fansichao.github.com/blog/links/index.html","excerpt":"","text":""}],"posts":[{"title":"aaa","slug":"aaa","date":"2021-10-24T03:43:28.000Z","updated":"2021-10-24T03:43:49.458Z","comments":true,"path":"aaa.md/","link":"","permalink":"http://fansichao.github.com/blog/aaa.md/","excerpt":"","text":"","categories":[{"name":"xxx","slug":"xxx","permalink":"http://fansichao.github.com/blog/categories/xxx/"}],"tags":[{"name":"aaa","slug":"aaa","permalink":"http://fansichao.github.com/blog/tags/aaa/"}]},{"title":"","slug":"resources","date":"2021-10-23T11:54:51.339Z","updated":"2021-10-23T11:54:51.340Z","comments":true,"path":"resources.md/","link":"","permalink":"http://fansichao.github.com/blog/resources.md/","excerpt":"","text":"优质技术资源链接tags: 技术资源 2019 年 持续更新 网站 - 基础篇 - 为什么你要学习 Python 进阶篇 - Python 状况：为什么 PyPy 是 Python 的未来？ 前端 - Github-前端开发文章精髓-20k+ 工具 - 表格工具在线转换 Excel2MarkDown - Excel2Json - Excel2Sql - 全球各国网址 汇集了全国各国常用网址，并且分门别类,一键寻找所有素材网站,所有资源网站等 - fosshub 小工具 含有各种免费工具.很多知名科技，工具博主的神器都来源于此。 - 大数据导航是超强的数据导航网站 集成各类大数据相关网站. - 集成各种趋势数据、指数数据等 - 大数据工作者必备网站之一 - 工具 123 - 工具 123，全网第一家全在线、免下载工具网站,全站共收录 1780+个工具. - 技术资源 知乎-有哪些值得每天一看的网站？ 后端后端框架后端架构师技术图谱Python - 100 天从新手到大师 前端 JSJS 组件系列——表格组件神器：bootstrap table组件系列——表格组件神器：bootstrap table（二：父子表和行列调序）复选框 有趣的项目 seq2seq-couplet AI 自动对对联 nocode 无任何代码,新手必学项目,传奇项目 hangzhou_house_knowledge 杭州买房经历 呼吸不止,码字不停 有趣的项目呼吸不止,码字不停锻炼码字效率，暂停三秒，所有记录都会丢失。 多进程增量爬取智联招聘职位信息https://github.com/Python3SpiderOrg/zhilianzhaopin.githttps://www.zhihu.com/answer/974431591","categories":[],"tags":[]},{"title":"Google 机器学习速成课程","slug":"Tools/ml/google-course/readme","date":"2021-10-23T11:54:51.339Z","updated":"2021-10-23T11:54:51.339Z","comments":true,"path":"Tools/ml/google-course/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/google-course/readme.md/","excerpt":"","text":"Google 机器学习官网链接: 点击此处 快速链接 机器学习概念 机器学习工程 机器学习系统在现实世界里的应用 Google-tensorflow 在线测试网站","categories":[],"tags":[]},{"title":"","slug":"Tools/ml/google-course/03机器学习工程","date":"2021-10-23T11:54:51.288Z","updated":"2021-10-23T11:54:51.288Z","comments":true,"path":"Tools/ml/google-course/03机器学习工程.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/google-course/03%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B7%A5%E7%A8%8B.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"Tools/ml/google-course/04机器学习系统在现实世界里的应用","date":"2021-10-23T11:54:51.288Z","updated":"2021-10-23T11:54:51.288Z","comments":true,"path":"Tools/ml/google-course/04机器学习系统在现实世界里的应用.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/google-course/04%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F%E5%9C%A8%E7%8E%B0%E5%AE%9E%E4%B8%96%E7%95%8C%E9%87%8C%E7%9A%84%E5%BA%94%E7%94%A8.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"Tools/ml/google-course/01快速链接","date":"2021-10-23T11:54:51.287Z","updated":"2021-10-23T11:54:51.287Z","comments":true,"path":"Tools/ml/google-course/01快速链接.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/google-course/01%E5%BF%AB%E9%80%9F%E9%93%BE%E6%8E%A5.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"机器学习速成课程-机器学习概念","slug":"Tools/ml/google-course/02机器学习概念","date":"2021-10-23T11:54:51.287Z","updated":"2021-10-23T11:54:51.287Z","comments":true,"path":"Tools/ml/google-course/02机器学习概念.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/google-course/02%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5.md/","excerpt":"","text":"由于 Google 将会在 2021 年 7 月 30 日从此网站上移除《机器学习速成课程》。英语版本依然会提供. 所以对网站内容进行截图备份 Google 机器学习官网链接: 点击此处 框架处理-主要术语 深入了解机器学习线性回归 训练与损失 检查你的理解情况-问题 检查你的理解情况-答案 降低损失迭代方法 梯度下降法 学习速率 优化学习速率 随机梯度下降法 Playground 练习 检查你的理解情况-问题 检查你的理解情况-答案 使用 TF 的基本步骤-TODO需要练习 泛化过拟合的风险 训练集和测试集拆分数据 Playground 练习 验证集检查你的直觉 另一个划分 编程练习 表示法特征工程 良好特征的特点 数据清理 编程练习 特征组合对非线性规律进行编码 组合独热矢量 Payground 练习编程练习 检查你的理解情况 正则化: 简单性Playground 练习: 组合过度 L2 正则化 Lambda Playground 练习: L2 正则化 检查你的理解情况 逻辑回归计算概率 损失和正则化 分类阈值 阳性与阴性：正分类与负分类 准确率 精确率和召回率 分类指标 F1值： https://wikipedia.org/wiki/F1_score 检查你的理解情况：准确率、精确率、召回率 ROC 曲线和曲线下面积 检查你的理解情况：ROC 和曲线下面积 预测偏差 编程练习 正则化: 稀疏性L1 正则化 Playground 练习 编程练习 检查你的理解情况 神经网络神经网络是更复杂版本的特征组合。实质上，神经网络会学习适合您的相应特征组合。 学习目标 对神经网络有一定的了解，尤其是了解以下方面： 隐藏层 激活函数 结构 Playground 练习 编程练习 训练神经网络反向传播算法是最常见的一种神经网络训练算法。借助这种算法，梯度下降法在多层神经网络中将成为可行方法。TensorFlow 可自动处理反向传播算法，因此您不需要对该算法作深入研究。要了解它的工作原理，请参阅下面的反向传播算法的直观说明。滚动浏览开头的说明时，请注意以下几点： 数据如何流经图表。 我们可以如何借助动态规划避免计算图表中数量达指数级别的路径。这里的“动态规划”仅仅是指记录正向传播和反向传播的中间结果。 学习目标 在一定程度上了解反向传播算法。 最佳做法 编程练习 多类别神经网络前面您已经了解了二元分类模型，该模型可从两个可能的选项中选择其一，例如： 特定电子邮件是垃圾邮件还是非垃圾邮件。 特定肿瘤是恶性肿瘤还是良性肿瘤。 在本单元中，我们将研究多类别分类，这种模型可从多种可能的情况中进行选择。例如： 这条狗是小猎犬、巴吉度猎犬还是寻血猎犬？ 这朵花是西伯利亚鸢尾花、荷兰鸢尾花、蓝旗鸢尾花还是有髯鸢尾花？ 那架飞机是波音 747、空中客车 320、波音 777 还是 Embraer 190？ 这是一张苹果、熊、糖果、狗狗还是鸡蛋的图片？ 现实世界中的一些多类别问题需要从数百万个类别中进行选择。例如，一个几乎能够识别任何事物图片的多类别分类模型。 预计用时：5 分钟 学习目标 理解多类别分类问题，尤其是 Softmax。 在 TensorFlow 中制定 Softmax 解决方案。 一对多 Softmax 编程练习 嵌入嵌套是一种相对低维的空间，您可以将高维矢量映射到这种低维空间里。通过使用嵌套，可以让在大型输入（比如代表字词的稀疏矢量）上进行机器学习变得更加容易。在理想情况下，嵌套可以将语义上相似的不同输入映射到嵌套空间里的邻近处，以此来捕获输入的语义。一个模型学习到的嵌套，也可以被其他模型重用。 学习目标 学习嵌套的定义和用途。 学习嵌套如何编码语义关系。 学习如何使用嵌套。 学习如何训练有意义的嵌套（例如使用 word2vec） 协同过滤的目的 分类输入数据 转换到低纬度空间 获取嵌入 https://tensorflow.google.cn/tutorials/text/word2vec 编程练习","categories":[],"tags":[]},{"title":"","slug":"Tools/ml/docs/ml-04代码实践","date":"2021-10-23T11:54:51.287Z","updated":"2021-10-23T11:54:51.287Z","comments":true,"path":"Tools/ml/docs/ml-04代码实践.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/docs/ml-04%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"机器学习术语","slug":"Tools/ml/docs/ml-02相关术语","date":"2021-10-23T11:54:51.286Z","updated":"2021-10-23T11:54:51.286Z","comments":true,"path":"Tools/ml/docs/ml-02相关术语.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/docs/ml-02%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD.md/","excerpt":"","text":"有监督与无监督学习有监督学习 有监督学习是通过 现有训练数据集进行建模，再用模型对新的数据样本进行分类或者回归分析的机器学习 方法。 在监督式学习中，训练数据集一般包含样本特征变量及分类标签，机器使用不同 的算法通过这些数据推断出分类的方法，并用于新的样本中。目前有监督学习算法已经 比较成熟，并且在很多领域都有很好的表现。 无监督学习 无监督学习，或者说非监督式学习，则是在没有训练数据集的情况下，对没有标 签的数据进行分析并建立合适的模型，以便给出问题解决方案的方法。在无监督学习当中， 常见的两种任务类型是数据转换和聚类分析。 其中数据转换的目的是，把本来非常复杂的数据集通过非监督式学习算法进行转换， 使其变得更容易理解。常见的数据转换方法之一便是数据降维，即通过对特征变量较多 的数据集进行分析，将无关紧要的特征变量去除，保留关键特征变量（例如，把数据集 降至二维，方便进行数据可视化处理）。 而聚类算法则是通过把样本划归到不同分组的算法，每个分组中的元素都具有比较 接近的特征。目前，聚类算法主要应用在统计数据分析、图像分析、计算机视觉等领域 分类与回归分类和回归是有监督学习中两个最常见的方法。对于分类来说，机器学习的目标是 对样本的类标签进行预测，判断样本属于哪一个分类，结果是离散的数值。而对于回归 分析来说，其目标是要预测一个连续的数值或者是范围。 这样讲可能会有一点抽象，我们还是用小 C 的例子来理解一下这两个概念。 比如，小 C 在使用算法模型预测女神的电影喜好时，他可以将电影分为“女神喜欢的” 和“女神不喜欢的”两种类型，这就是二元分类，如果他要把电影分为“女神特别喜欢的” “女神有点喜欢的” “女神不怎么喜欢的”以及“女神讨厌的”四种类型，那么这就属 于多元分类。 但如果小 C 要使用算法模型预测女神对某部电影的评分，例如，女神会给“速度与 激情 8”打多少分，从 0 到 100，分数越高说明女神越喜欢，最终模型预测女神会给这部 电影打 88 分，这个过程就称为回归。小 C 需要将女神给其他电影的评分和相对应的电 影特征作为训练数据集，通过建立回归模型，来给“速度与激情 8”打分。 泛化、过拟合和欠拟合在有监督学习中，我们会在训练数据集上建立一个模型，之后会把这个模型用于新的， 之前从未见过的数据中，这个过程称为模型的泛化（generalization）。当然我们希望模 型对于新数据的预测能够尽可能准确，这样才能说模型泛化的准确度比较高。 那么我们用什么样的标准来判断一个模型的泛化是比较好的，还是比较差的呢？ 我们可以使用测试数据集对模型的表现进行评估。如果你在训练数据集上使用了一 个非常复杂的模型，以至于这个模型在拟合训练数据集时表现非常好，但是在测试数据 集的表现非常差，说明模型出现了过拟合（overfi tting）的问题。 相反，如果模型过于简单，连训练数据集的特点都不能完全考虑到的话，那么这样 的模型在训练数据集和测试数据集的得分都会非常差，这个时候我们说模型出现了欠拟 合（underfi tting）的问题。 而只有模型在训练数据集和测试数据集得分都比较高的情况下，我们才会认为模型 对数据拟合的程度刚刚好，同时泛化的表现也会更出色。 四大经典模型 朴素贝叶斯（分类） 决策树（分类） CART 回归树（预测） 集成学习 参考链接：https://www.cnblogs.com/ColleenHe/p/11564768.html 7 种回归模型 什么是回归分析？ 为什么使用回归分析？ 有哪些常用的回归模型？ 线性回归 逻辑回归 多项式回归 逐步回归 Ridge 回归 Lasso 回归 ElasticNet 回归 如何选择正确的模型？ 参考链接: Link 训练与损失损失函数参考链接：Link 损失函数（loss function）是用来估量你模型的预测值 f(x)与真实值 Y 的不一致程度 常用损失函数 均方误差(MSE) 绝对误差(MAE) Huber Loss(均方误差损失和绝对误差损失的综合体) 0-1 损失 对数损失函数 指数损失函数 降低损失降低损失的方法 迭代方法 梯度下降法 学习速率 优化学习速率 随机梯度下降法 全批量梯度下降法 小批量随机梯度下降法 随机梯度下降法 Link Link 什么是机器学习 机器学习是一种数据分析技术，让计算机执行人和动物与生俱来的活动：从经验中学习。机器学习算法使用计算方法直接从数据中“学习”信息，而不依赖于预定方程模型。当可用于学习的样本数量增加时，这些算法可自适应提高性能。 机器学习 维基百科 MATLAB 机器学习介绍 为什么要学习机器学习 主要工作原理 其他术语神经网络https://blog.csdn.net/blackyuanc/article/details/68951640 https://blog.csdn.net/qq_43328040/article/details/106823245 https://zhuanlan.zhihu.com/p/101544149","categories":[],"tags":[]},{"title":"","slug":"Tools/ml/docs/ml-03发展历程","date":"2021-10-23T11:54:51.286Z","updated":"2021-10-23T11:54:51.286Z","comments":true,"path":"Tools/ml/docs/ml-03发展历程.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/docs/ml-03%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"机器学习-01 学习指南","slug":"Tools/ml/docs/ml-01学习指南","date":"2021-10-23T11:54:51.285Z","updated":"2021-10-23T11:54:51.286Z","comments":true,"path":"Tools/ml/docs/ml-01学习指南.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/docs/ml-01%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.md/","excerpt":"","text":"目录大纲基础篇 相关术语 发展历程 效果演练 简单项目 进阶篇 自定义模型 实战篇 股票预测模型 参考资源课程链接: 机器学习-Google 课程 Coursera 吴恩达《Machine Learning》视频 资源网站: Tensorflow 神经网络测试网站 Github-BEGAN-tensorflow 人脸识别项目 AI 社区-含有丰富的已经训练好,可以直接使用的模型 附件资源: 书籍：《深入浅出 Python 机器学习》 周志华西瓜书笔记 https://github.com/Vay-keen/Machine-learning-learning-notes https://manongbook.com/download/25.html 如何快速入门 https://zhuanlan.zhihu.com/p/112484706","categories":[],"tags":[]},{"title":"Machine Learning","slug":"Tools/ml/README","date":"2021-10-23T11:54:51.255Z","updated":"2021-10-23T11:54:51.255Z","comments":true,"path":"Tools/ml/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ml/README.md/","excerpt":"","text":"目录大纲 code 相关代码 docs 相关文档 google-course Google机器学习课程 参考资源","categories":[],"tags":[]},{"title":"Vscode","slug":"Tools/Vscode/readme","date":"2021-10-23T11:54:51.255Z","updated":"2021-10-23T11:54:51.255Z","comments":true,"path":"Tools/Vscode/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Vscode/readme.md/","excerpt":"","text":"参考资源","categories":[],"tags":[]},{"title":"VScode-技术文档","slug":"Tools/Vscode/Win-VScode","date":"2021-10-23T11:54:51.254Z","updated":"2021-10-23T11:54:51.254Z","comments":true,"path":"Tools/Vscode/Win-VScode.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Vscode/Win-VScode.md/","excerpt":"","text":"tags: Win Vscode IDE 工具 2018 年 1.1. 软件介绍1.2. 软件下载&amp;安装Visual Studio CodeVisual Studio Code 官方文档 1.3. 小技巧1.3.1. 修改语言为中文步骤一: 在扩展中添加 中文简体语言包 步骤二: 打开配置文件 点击快捷键ctrl+shift+p，输入 Configure Display Language 步骤三: 修改配置文件 修改成如图所示即可&quot;locale&quot;:&quot;zh-cn&quot;。保存ctrl+s，重启 vscode 软件即可生效。 1.3.2. 打开用户设置步骤一: 打开设置文件 -&gt; 首选项 -&gt; 设置 步骤二: 打开用户设置文件 输入 settings，点击”在 settings.json 中编辑”即可进入用户设置。 1.3.3. 修改用户配置文件当前使用配置 12345678910111213141516171819202122232425&#123; &quot;python.linting.pylintEnabled&quot;: true, &quot;python.pythonPath&quot;: &quot;C:\\\\Users\\\\scfan\\\\Anaconda2\\\\python.exe&quot;, &quot;C_Cpp.errorSquiggles&quot;: &quot;Disabled&quot;, &quot;remote.onstartup&quot;: true, &quot;fileheader.customMade&quot;: &#123; &quot;Author&quot;: &quot;Scfan&quot;, &quot;Date&quot;: &quot;Do not edit&quot;, &quot;LastEditors&quot;: &quot;Scfan&quot;, &quot;LastEditTime&quot;: &quot;Do not edit&quot;, &quot;Description&quot;: &quot;工作&amp;学习&amp;生活&quot;, &quot;Email&quot;: &quot;123123@qq.com&quot;, &quot;Company&quot;: &quot;上海&quot;, &quot;version&quot;: &quot;V1.0&quot;, &#125;, &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;, &quot;workbench.colorTheme&quot;: &quot;Visual Studio Dark&quot;, &quot;files.autoSave&quot;: &quot;afterDelay&quot;, &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\WINDOWS\\\\System32\\\\cmd.exe&quot;, &quot;python.autoComplete.extraPaths&quot;: [&quot;C:/Users/scfan/AppData/Local/Programs/Python/Python37/python3&quot;, &quot;C:/Users/scfan/Anaconda2&quot;], &quot;python.jediEnabled&quot;: false, &quot;editor.tabCompletion&quot;: &quot;onlySnippets&quot;, &quot;emmet.triggerExpansionOnTab&quot;: true, &quot;editor.fontSize&quot;: 16,&#125; 1.4. 常用命令1.4.1. 基础界面命令 ctrl+y 取消撤销 ctrl+sheif+f 全局搜索文件，搜索所有文件中内容 vscode 怎么一次编辑多行 Vscode 快捷键https://www.cnblogs.com/hellofangfang/p/10511193.html 1.5. 详细插件使用Vscode 插件市场: https://marketplace.visualstudio.com 1.5.1. 插件快捷键简单列出如下插件的常用快捷键。 koroFileHeader ctrl+alt+t: 当前位置，生成函数注释。 ctrl+alt+i: 光标位置，生成头部注释。 1.5.2. vscode-icons(图标显示)根据文件类型显示对应图标。 1.5.3. koroFileHeader(自定义注释模板)使用说明: settings.json 自定义注释模板 ctrl+alt+t: 当前位置，生成函数注释。 ctrl+alt+i: 光标位置，生成头部注释。 1.5.4. Markdown Preview Enhanced(MarkDown 使用软件)使用说明: 参考链接: markdown-preview-enhanced 1.5.5. AutoFileName(文件路径自动补全)1.5.6. Sort Lines(代码行排序插件)选择要排序的行，按 F1 键排序并选择所需的排序。常规排序具有默认热键 F9。 1.5.7. Git History以图表的形式查看 git 日志git 存储库，方便文件备份。 步骤一: 配置关联到 github 仓库 pass ,详见网上参考链接: https://blog.csdn.net/lhb_11/article/details/77837078 步骤二: vscode 中 git 使用 ctrl+shift+p命令快捷键，输入 git，有全部提交选项 Vscode 侧边栏有文件修改未提交提示 暂存修改、放弃修改等，全部提交等 提交后,将本地修改 push 到 git 库上 1git push -u origin master 右上角按钮, git history 可以查看当前文件的修改日志。 1.5.8. GitLen 版本库显示文件最近的 commit 和作者，显示当前行 commit 信息 1.5.9. MarkDown TOC 目录 使用: 安装插件MarkDown TOC 在 MarkDown 文件中右键 MarkDown Sections:Delete 删除目录序号 MarkDown Sections: Insert\\Update 增加目录序号 MarkDown Toc:Delete 删除目录 MarkDown Toc: Insert\\Update 插入目录 官网链接: https://marketplace.visualstudio.com/items?itemName=AlanWalk.markdown-toc VSCode 中 Markdown 目录显示异常 1.5.10. Markdown AutoTOC 目录 说明: 自动生成 MarkDown 目录 使用: 安装插件Markdown AutoTOC 在文章头部输入[[toc]],即可自动生成文档目录 1.5.11. Excel to Markdown table 表复制Excel 便利复制到 MarkDown 中 安装插件Excel to Markdown table 使用命令Shift+Alt+V,即可复制 Excel 表格 1.5.12. MarkDown PDF官网链接: https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf 命令使用 下载插件Markdown PDF Menu 右键菜单 命令面板查看export 1.5.13. 待办事项树 Tree 安装插件TODO TREE 推荐用户配置 1234567891011121314151617&quot;todo-tree.defaultHighlight&quot;: &#123;&quot;icon&quot;: &quot;alert&quot;,&quot;type&quot;: &quot;text&quot;,&quot;foreground&quot;: &quot;red&quot;,&quot;background&quot;: &quot;white&quot;,&quot;iconColour&quot;: &quot;blue&quot;&#125;,&quot;todo-tree.customHighlight&quot;: &#123;&quot;TODO&quot;: &#123;&quot;icon&quot;: &quot;check&quot;,&quot;type&quot;: &quot;line&quot;&#125;,&quot;FIXME&quot;: &#123;&quot;foreground&quot;: &quot;black&quot;,&quot;iconColour&quot;: &quot;yellow&quot;&#125;&#125;, 重启 vscode 软件即可生效 左侧导航栏存一个 TODO TREE 1.5.14. 插件-sftp VScode 连接服务器步骤 1: 安装插件 sftp 步骤 2: 配置 stp-config 在 vscode 工作区.vscode 目录建 sftp.json 文件 内容如下 123456789101112131415161718192021&#123; &quot;host&quot;: &quot;IP地址&quot;, &quot;port&quot;: 22, &quot;username&quot;: &quot;用户&quot;, &quot;password&quot;: &quot;密码&quot;, &quot;protocol&quot;: &quot;sftp&quot;, &quot;agent&quot;: null, &quot;privateKeyPath&quot;: null, &quot;passphrase&quot;: null, &quot;passive&quot;: false, &quot;interactiveAuth&quot;: true, &quot;remotePath&quot;: &quot;远程服务器路径&quot;, &quot;uploadOnSave&quot;: true, &quot;syncMode&quot;: &quot;update&quot;, &quot;ignore&quot;: [&quot;**/.vscode/**&quot;, &quot;**/.git/**&quot;, &quot;**/.DS_Store&quot;], &quot;watcher&quot;: &#123; &quot;files&quot;: &quot;glob&quot;, &quot;autoUpload&quot;: true, &quot;autoDelete&quot;: true &#125;&#125; 步骤三: 重启 vscode，查看效果 1.6. 功能模块SFTP-远程服务器同步SFTP 插件使用 1.6.1. MarkDown 同步印象笔记参考链接: https://www.cnblogs.com/rengised/p/6985031.html 步骤 1: 安装软件 安装 Vscode 安装印象笔记 安装 vscode 插件 EverMonkey，Auto-Open Markdown Preview 重启 Vscode 步骤 2: 配置 EverMonkey EverMonkey 插件主要负责将 vscode 中的文章同步到印象笔记.使用命令ctrl+Shift+P打开输入栏,输入ever token国际版 International 中国版 China将 token 和 noteStoreUrl 配置到 vscode 的用户设置中,步骤为 File –&gt; Preferences –&gt; Settings 12evermonkey.token: your developer tokenevermonkey.noteStoreUrl: your API url 重启 Vscode 步骤 3:同步 MarkDown 到印象笔记 编写 MarkDown 文件，文件头部加入如下 12345---title: 文件名称tags: 标签(多个标签用逗号分隔)notebook: (所属的目录)--- 完成文章内容编写之后，输入 Ctrl+Shift+P 打开 command,输入 ever publish,提示成功后.快速提交文章的快捷键是 Alt+P其他步骤: 相关问题重要提示: 如果报 Evernote Error: 5 - Note.title，错误(这个错误坑了好一会)。说明是换行符有问题，请将 vscode 右下角的换行符从 CRLF 切换成 LF,然后再次执行 ever publish，就会有 blogs&gt;&gt;vscode 中使用印象笔记 created successfully.提示。如果还有错误，请到 git issue 查找相关问题。 1.6.2. VScode 编辑后自动保存参考链接: vscode 如何设置自动保存 左下角设置图标 -&gt; 设置 Auto Save = off 不自动保存，每次都需要用户自己手动保存 Auto Save = afterDelay 固定间隔时间，自动保存 Auto Save = onFocusChange 当焦点离开编辑器的当前窗口时，自动保存 onWindowChange 当编辑器窗口失去焦点时，自动保存,只有焦点离开整个编辑器，才会触发保存，在编辑器内部切换页签是不会自动保存的。 markdownlint 规范使用命令 查看所有警告 Ctrl+Shift+M 单个警告，下方自带 黄色线条 查看单个警告 F8或Shift+F8 MarkDown 代码规范检查 Vscode-LetCodehttps://blog.csdn.net/DlMmU/article/details/104129662 安装插件: leetcode 1.7. 新增功能1.7.1. 插件-PicGo MarkDwon 支持图片上传到 Github自动保存图片 参考链接: vscode 书写 Markdown 快速插入图片 picgo 2.0 插件使用 github 生成 token 的方法 PicGo 配置如下: PicGo 快捷键使用: Ctrl+alt+U 剪切板 Ctrl+alt+E 文件夹 Ctrl+alt+O 指定路径 1.8. 其他1.8.3. 快捷键使用在 Ctrl+P 下输入&gt;又可以回到主命令框 Ctrl+Shift+P 模式。在 Ctrl+P 窗口下还可以 1234567直接输入文件名，快速打开文件? 列出当前可执行的动作! 显示Errors或Warnings，也可以Ctrl+Shift+M: 跳转到行数，也可以Ctrl+G直接进入@ 跳转到symbol(搜索变量或者函数)，也可以Ctrl+Shift+O直接进入@:根据分类跳转symbol，查找属性或函数，也可以Ctrl+Shift+O后输入:进入# 6. 根据名字查找symbol，也可以Ctrl+T 官网快捷键文档 visualstudio 快捷键 快捷方式清单 Vimhttps://zhuanlan.zhihu.com/p/188499395 优质插件 待使用 Better Comments 写出不同类型的注释 Bracket Pair Colorizer2 花括号代码加颜色 CodeSnap 以代码片段生成漂亮的图片 Github Markdown Preview ：Github 方式的预览 MarkDown All in one ：Markdown 必备工具 Paste Json as Code: 支持将 Json 数据自动转换为某种语言的代码 Random Evertthing 根据数据类型自动生成随机数据，特别适合侧测试数据。 Settings Sync 同步 vs Code 扩展配置等。 参考资源vscode 怎么一次编辑多行 https://www.cnblogs.com/hellofangfang/p/10511193.html","categories":[],"tags":[]},{"title":"插件","slug":"Tools/Vscode/plugins","date":"2021-10-23T11:54:51.254Z","updated":"2021-10-23T11:54:51.255Z","comments":true,"path":"Tools/Vscode/plugins.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Vscode/plugins.md/","excerpt":"","text":"推荐清单1.8.1. 网上插件推荐清单参考链接: 精选插件清单: HTML Snippets: 超级实用且初级的 H5 代码片段以及提示 HTMLHint: html 代码检测 HTML CSS Support : 让 html 标签上写 class 智能提示当前项目所支持的样式。新版已经支持 scss 文件检索，这个也是必备插件之一 Auto Close Tag : 匹配标签，关闭对应的标签。很实用【HTML/XML】 Auto Rename Tag : 修改 html 标签，自动帮你完成尾部闭合标签的同步修改 Path Autocomplete : 路径智能补全 Path Intellisense : 路径智能提示 JavaScript Snippet Pack: 针对 js 的插件，包含了 js 的常用语法关键字，很实用； View InBrowser: 从浏览器中查看 html 文件，使用系统的当前默认浏览器 Class autocomplete for HTML: 编写 html 代码的朋友们对 html 代码的一大体现就是重复，如果纯用手敲不仅累还会影响项目进度，这款自动补全插件真的很棒； beautify : 格式化代码的工具，可以格式化 JSON|JS|HTML|CSS|SCSS,比内置格式化好用 Debugger for Chrome: 让 vscode 映射 chrome 的 debug 功能，静态页面都可以用 vscode 来打断点调试，真 666~ jQuery Code Snippets: jquery 重度患者必须品 vscode-icon: 让 vscode 资源树目录加上图标，必备良品！ VSCode Great Icons: 另一款资源树目录图标 colorize : 会给颜色代码增加一个当前匹配代码颜色的背景，非常好 Color Info: 提供你在 CSS 中使用颜色的相关信息。你只需在颜色上悬停光标，就可以预览色块中色彩模型的(HEX、 RGB、HSL 和 CMYK)相关信息了。 Bracket Pair Colorizer: 让括号拥有独立的颜色，易于区分。可以配合任意主题使用。 vscode-fileheader: 顶部注释模板，可定义作者、时间等信息，并会自动更新最后修改时间 Document This : js 的注释模板 (注意: 新版的 vscode 已经原生支持,在 function 上输入/** tab) filesize: 在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间 Code Runner : 代码编译运行看结果，支持众多语言 Bootstrap 3 Sinnpet: 常用 bootstrap 的可以下 GitLens: 丰富的 git 日志插件 vetur: vue 语法高亮、智能感知、Emmet 等 VueHelper: vue 代码提示 Bookmarks: 一个书签工具,还是很有必要的 tortoise-svn: SVN 的集成插件 1.8.2. 插件C/C++ [ms-vscode.cpptolls] 智能推导，调试和代码浏览 C/C++ Clang Command Adapter [mitaki28.vscode-clang] 使用 Clang 的命令来分析 C/C++/Object-C 的代码诊断，还有代码补全。 C/C++ Snippets [hars.cppsnippets] 有用的 C/C++代码片断，节省时间 C++ Algorithm Mnemonics [davidbroetje.algorithm-mnemonics-vscode] 写 C++不可能不接触 STL，这个插件能让你使用 STL 算法更有生产力 cppcheck [matthewferreira.cppcheck] 这个插件帮你方便的调用 cppcheck 这款 C++静态分析软件的命令来检查你的 C++代码隐患，包括越界，资源泄漏等 Clang-Format [xaver.clang-format] 把你的 C，C++ Java js 等代码格式化为 Clang 的代码风格 Python [donjayamanne.python] Python 的分析，运行，调试，代码格式化，重构，单元测试，代码片段，这些都支持 C# [ms-vscode.csharp] C#太重了，还是用 Visual Studio 把，别用 VSCode。 PowerShell [ms-vscode.powershell] PowerShell 脚本的语法高亮，代码补全，提示，代码片段，跳转等等 Bash Debug [rogalmic.bash-debug] bash 调试器的 GUI 前端 Bash Beautify [shakram02.bash-beautify] Bash 的格式化，美化代码风格 CMake [twxs.cmake] 对于我这种 C/C++需要跨平台构建的人，Cmake 是神物。其他构建系统都是渣渣。 主要功能是脚本代码着色，代码补全提示，常用代码块 CMake Tools [vector-of-bool.cmake-tools] 这个 Cmake 插件是对前一个的插件扩展，主要是 cmake 命令的支持方面，前一个插件是 cmake 脚本语言的支持 ESLint [dbaeumer.vscode-eslint] 经常写 js 的需要用，最好的 js 静态分析软件 hexdump for VSCode [slevesque.vscode-hexdump] 十六进制查看插件，以前都是用 BeyondCompare 的，这个就很方便集成进来了 HTML CSS Support [ecmel.vscode-html-css] 写前端的必备，确实，我业余会写下前端。主要支持 class，id 属性补全，远程 css。js，jade 模版，vue 文件等 HTML Snippets [abusaidm.html-snippets] 主要提供 HTML 5 的全部 TAG 不全，着色，还有有用的 TAG 片段 vscode-caniuse [agauniyal.vscode-caniuse] 检测用户使用的 Web 技术被各种主流浏览器支持的情况 Quokka.js [WallabyJs.quokka-vscode] 是一个调试工具插件，能够根据你正在编写的代码提供实时反馈。它易于配置，并能够预览变量的函数和计算值结果。另外，在使用 JSX 或 TypeScript 项目中，它能够开箱即用。 vscode-faker [deerawan.vscode-faker] 使用流行的 JavaScript 库 – Faker，能够帮你快速的插入用例数据。Faker 可以随机生成姓名、地址、图像、电话号码，或者经典的乱数假文段落，并且每个类别还包含了各种子类别，你可以根据自身的需求来使用这些数据。 Color Info [bierner.color-info] 这个便捷的插件，将为你提供你在 CSS 中使用颜色的相关信息。你只需在颜色上悬停光标，就可以预览色块中色彩模型的(HEX、 RGB、HSL 和 CMYK)相关信息了。 svg viewer [cssho.vscode-svgviewer] 此插件在 Visual Studio 代码中添加了许多实用的 SVG 程序，你无需离开编辑器，便可以打开 SVG 文件并查看它们。同时，它还包含了用于转换为 PNG 格式和生成数据 URI 模式的选项。 TODO Highlight [wayou.vscode-todo-highlight] 这个插件能够在你的代码中标记出所有的 TODO 注释，以便更容易追踪任何未完成的业务。在默认的情况下，它会查找 TODO 和 FIXME 关键字。当然，你也可以添加自定义表达式。 minify [HookyQR.minify] 这是一款用于压缩合并 JavaScript 和 CSS 文件的应用程序。它提供了大量自定义的设置，以及自动压缩保存并导出为.min 文件的选项。它能够分别通过 uglify-js、clean-css 和 html-minifier，与 JavaScript、CSS 和 HTML 协同工作。 change-case [wmaurer.change-case] 虽然 VSCode 内置了开箱即用的文本转换选项，但其只能进行文本大小写的转换。而此插件则添加了用于修改文本的更多命名格式，包括驼峰命名、下划线分隔命名，snake_case 命名以及 CONST_CAS 命名等。 Regex Previewer [chrmarti.regex] 这是一个用于实时测试正则表达式的实用工具。它可以将正则表达式模式应用在任何打开的文件上，并高亮所有的匹配项。 Auto Close Tag [formulahendry.auto-close-tag] 适用于 JSX、Vue、HTML，在打开标签并且键入 &lt;/ 的时候，能自动补全要闭合的标签 Auto Rename Tag [formulahendry.auto-rename-tag] 适用于 JSX、Vue、HTML，在修改标签名时，能在你修改开始(结束)标签的时候修改对应的结束(开始)标签，帮你减少 50% 的击键； Path Intellisense [christian-kohler.path-intellisense] 文件路径补全，在你用任何方式引入文件系统中的路径时提供智能提示和自动完成； npm Intellisense [christian-kohler.npm-intellisense] NPM 依赖补全，在你引入任何 node_modules 里面的依赖包时提供智能提示和自动完成； npm [eg2.vscode-npm-script] npm 集成到 VSCode 里面来了，很方便 Intellisense for CSS class names [Zignd.html-css-class-completion] CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示； Bracket Pair Colorizer [CoenraadS.bracket-pair-colorizer] 识别代码中的各种括号，并且标记上不同的颜色，方便你扫视到匹配的括号，在括号使用非常多的情况下能环节眼部压力，编辑器快捷键固然好用，但是在临近嵌套多的情况下却有些力不从心； NSIS Language Support [KrystofRiha.vscode-nsis] 提供 NSIS 打包(exe 安装包)软件的打包脚本 NSIS 语言的语法高亮等语言级的支持 Partial Diff [ryu1kn.partial-diff] 顾名思义，这个是文本比较的插件，而且是部分比较，没有 BeyondCompare 那样强大，它可以比较选中的文本差异 vscode-icons [robertohuertasm.vscode-icons] 专给 vscode 的图标插件，它根据不同的文件后缀类型，用相应的文件类型 LOGO 标记出文件区别。嗯，IDE 都有类似的功能 CSS Peek [pranaygp.vscode-css-peek] 使用此插件，你可以追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。 vue [jcbuisson.vue] 主要给 vue.js 框架提供语法高亮 Vue 2 Snippets [hollowtree.vue-snippets] 这个扩展是提供 Vue 2.0 版本的有用的代码片段和语法高亮 React Native Tools [vsmobile.vscode-react-native] 用 React Native 做移动端开发越来越流行了 React-Native/React/Redux sippets for es6/es7 [EQuimper.react-native-react-redux] React 全家桶的插件，提供代码片段 React/Redux/react-router [discountry.react-redux-react-router-snippets] React 全家桶，代码片段 JavaScript (ES6) code snippets [xabikos.javascriptsnippets] ES6 标准的 js 代码片段补全 Prettier - JavaScript formatter [esbenp.prettier-vscode] 可以格式化你的 js，typescript css 代码，让你的代码更好看 JavaScript Standard Style [chenxsan.vscode-standardjs] 以权威 js 标准风格来检测你的 js 代码 Babel JavaScript [mgmcdermott.vscode-language-babel] 如果你使用最新的 ES 标准来编写跨浏览器的 js 程序，那么这个就是你的好帮手了。主要提供语法高亮，React 的 jsx 都高亮 markdownlint [DavidAnson.vscode-markdownlint] 我经常用 MarkDown 写文章的，所以需要 MD 静态分析软件提示错误，warning。或者编写的风格问题 Code Runner [formulahendry.code-runner] 可以运行代码文件，和选择一段代码运行，支持 C，C++，Java，JS，PHP，Python，Perl，Ruby 等，你几乎所想到的语言都支持 IORun [hoangnc.io-run] 算法，IO，ACM 党最爱，如果你经常在 OJ 上刷题，那么就适合你。支持运行和测试竞赛代码。 多种语言 C，C++，Haskell 等等。 因为我做 LeetCode 上的题目 XML Tools [DotJoshJohnson.xml] XML 的格式化 XML 树结构，Xpath，Xquery 等都支持了 REST Client [humao.rest-client] 在 VSCode 中发送 http 请求，显示 http 回复 非常方便调试测试 RESTful 的接口 Ruby [rebornix.ruby] 计算理论的代码是用 Ruby 写的，在 github 上，有时候会写写 Ruby Haskell Syntax Highlighting [justusadam.language-haskell] Haskell 的语法高亮, 学 Haskell 是涨见识的 Haskell ghc-mod [hoovercj.vscode-ghc-mod] 通过 ghc-mod 提供 Haskell 的语言支持 Haskell GHCi debug viewer Phoityne [phoityne.phoityne-vscode] 这个插件是一个 ghci 的调试查看器 haskell-linter [hoovercj.haskell-linter] 一个 haskell 的代码静态分析工具, 其实就是 hlint 的封装 Haskelly [UCL.haskelly] 提供完全的，专家级的 Haskell 开发 Haskero [Vans.haskero] 功能比较齐全的 Haskell IDE Docker [PeterJausovec.vscode-docker] 提供 Dockerfile 和 docker-compose 文件的语法高亮，命令的高亮，还有代码提示与检测 Docker Explorer [formulahendry.docker-explorer] 管理 Docker 容器，镜像，Docker Hub 等 Git History [donjayamanne.githistory] 可以查看 Git log, file, 和 line 历史记录。 Document This [joelday.docthis] 自动生成详细的 TypeScript 和 js 的文档型注释 Setting Sync [Shan.code-settings-sync] 跨机器同步 VSCode 的配置，需要用到 github 的 gist Debugger for Chrome/ Debugger for Firefox 字面意思，无需多说 gitignore [codezombiech.gitignore] 帮助你更好的使用 gitignore 参考资源 VSCode 拓展插件推荐 Visual Studio Code 必备插件 VS Code 必备插件推荐 精选！15 个必备的 VSCode 插件","categories":[],"tags":[]},{"title":"Drools-规则引擎","slug":"Tools/Tips/drools-rule-engine","date":"2021-10-23T11:54:51.253Z","updated":"2021-10-23T11:54:51.253Z","comments":true,"path":"Tools/Tips/drools-rule-engine.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Tips/drools-rule-engine.md/","excerpt":"","text":"https://www.jianshu.com/p/16266526a114","categories":[],"tags":[]},{"title":"Gitbook-技术文档","slug":"Tools/Tips/gitbook","date":"2021-10-23T11:54:51.253Z","updated":"2021-10-23T11:54:51.253Z","comments":true,"path":"Tools/Tips/gitbook.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Tips/gitbook.md/","excerpt":"","text":"简单使用流程TODO 命令大全1234567891011121314151617181920212223242526# 初始化目录文件gitbook init# 列出gitbook所有的命令gitbook help# 输出gitbook-cli的帮助信息gitbook --help# 生成静态网页gitbook build# 生成静态网页并运行服务器gitbook serve# 生成时指定gitbook的版本, 本地没有会先下载gitbook build --gitbook=2.0.1# 列出本地所有的gitbook版本gitbook ls# 列出远程可用的gitbook版本gitbook ls-remote# 安装对应的gitbook版本gitbook fetch 标签/版本号# 更新到gitbook的最新版本gitbook update# 卸载对应的gitbook版本gitbook uninstall 2.0.1# 指定log的级别gitbook build --log=debug# 输出错误信息gitbook builid --debug 参考资源链接：https://blog.csdn.net/axi295309066/article/details/61420694/","categories":[],"tags":[]},{"title":"sbt - Java 打包工具","slug":"Tools/Tips/sbt","date":"2021-10-23T11:54:51.253Z","updated":"2021-10-23T11:54:51.253Z","comments":true,"path":"Tools/Tips/sbt.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Tips/sbt.md/","excerpt":"","text":"SBT 官方下载路径：传送门 常用命令tags: scala sbt Win10-sbt 打包1234567891011# 1. 切换到项目目录E:\\xxxxxx# 2. 进入sbt-shell. 指定 Jdk 环境E:\\Packages\\sbt\\sbt_tsc\\bin\\sbt# 实际此参数不会真实生效???# -java-home E:\\Packages\\jdk\\jdk1.8\\bin\\java.exe# 3. 打包指定项目xxxx/assembly 注意事项 第一次打包耗时非常久 项目目录和 sbt 目录必须在同一个磁盘下, 否则会报错。窗口闪现然后自动关闭 依赖环境 jdk1.8 + scala2.12.7","categories":[],"tags":[]},{"title":"VNC-技术文档","slug":"Tools/Tips/Win-VNC","date":"2021-10-23T11:54:51.252Z","updated":"2021-10-23T11:54:51.252Z","comments":true,"path":"Tools/Tips/Win-VNC.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Tips/Win-VNC.md/","excerpt":"","text":"安装 VNCVNC 服务，可以用于远程登录图形化界面。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647481.安装vnc相关包rpm –ivh tigervnc-server-1.1.0-24.el6.x86_64.rpmyum install vncyum install vnc-serveryum install tigervnc-server# 检查安装包是否已经安装rpm -qa | grep vncvnc-server-4.1.2-14.el5_3.1vnc-4.1.2-14.el5_3.12. 配置vncservers文件# vim /etc/sysconfig/vncservers 增加如下两行VNCSERVERS=&quot;1:oracle&quot; 设置登录“显示号”和用户VNCSERVERARGS[1]=&quot;-geometry 1024x768&quot; 设置屏幕分辨率3.配置xstartup文件编辑配置之前，需要使用vncserver命令创建默认配置文件[root@web~]# vncserver输入口令：qwe123确认口令：qwe123 # vim /root/.vnc/xstartup 加入最后一行 gnome-session &amp; set starting GNOME desktop (增加这一行，表使用gnome界面，否则是xfce界面) 4. 设置远程登录口令[root@web~]# vncpasswdPassword:qwe123Verifu:qwe1235.启动vncserver服务(1)主服务启动：[root@web~]# service vncserver start (只启动/etc/sysconfig/vncservers 所定义的界面)[root@web~]# vncserver :2 (启动root登录的第二个界面)6.停止vncserver服务[root@web~]# service vncserver stop(停止start时候所启动的界面:1，其它另启的界面:2不停止)[root@web~]# vncserver -kill :1 (停止某个界面，要用kill命令来杀掉界面1的进程)[root@web~]# vncserver -kill :2 (停止某个界面，要用kill命令来杀掉界面2的进程)通过 #service vncserver status 命令可以查看出有多少个进程pid号，表示启动了多少个界面。7.让vncserver服务随机启动默认状态下，vncserver服务不是开机自动启动，需要手工启动。[root@web~]# chkconfig --list vncserver[root@web~]# chkconfig vncserver on保存后，重启测试。8.客户端登录vncserver服务(1)先安装vncviewer来远程登录，(2)然后在地址栏输入“主机地址:1”(即主机IP加界面号的方式)# 重启VNC服务vncserver -kill :1vncserver :1 关闭防火墙需要关闭防火墙，或者配置相应的端口 VNC 服务使用的端口号与桌面号相关，VNC 使用 TCP 端口从 5900 开始，对应关系如下：桌面号为“1” —- 端口号为 5901桌面号为“2” —- 端口号为 5902桌面号为“3” —- 端口号为 5903……基于 Java 的 VNC 客户程序 Web 服务 TCP 端口从 5800 开始，也是与桌面号相关，对应关系如下桌面号为“1” —- 端口号为 5801桌面号为“2” —- 端口号为 5802桌面号为“3” —- 端口号为 5803……基于上面的介绍，如果 Linux 开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下 登录 vncServer 输入 IP:1 vnc viewer 客户端界面登录(192.168.1.70:1)： vnc viewer 客户端界面登录 输入密码(qwe123)： vnc viewer 客户端界面登录 登录后界面：github 路径 blob-&gt;raw 才可以使用 github 图片","categories":[],"tags":[]},{"title":"Virtualbox-技术文档","slug":"Tools/Tips/Win-Virtualbox","date":"2021-10-23T11:54:51.252Z","updated":"2021-10-23T11:54:51.252Z","comments":true,"path":"Tools/Tips/Win-Virtualbox.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Tips/Win-Virtualbox.md/","excerpt":"","text":"tags: 虚拟机 Virtualbox 2019 年 11 月 简介说明VirtualBox 号称是最强的免费虚拟机软件，它不仅具有丰富的特色，而且性能也很优异！它简单易用，可虚拟的系统包括 Windows(从 Windows 3.1 到 Windows10、Windows Server 2012，所有的 Windows 系统都支持)、Mac OS X、Linux、OpenBSD、Solaris、IBM OS2 甚至 Android 等操作系统！使用者可以在 VirtualBox 上安装并且运行上述的这些操作系统！ 与同性质的 VMware 及 Virtual PC 比较下，VirtualBox 独到之处包括远端桌面协定(RDP)、iSCSI 及 USB 的支持，VirtualBox 在客户端操作系统上已可以支持 USB 2.0 的硬件装置，不过要安装 VirtualBox Extension Pack。 注意事项: Win 命令,路径加双引号.(避免特殊字符的影响) Virtualbox 常用命令参考链接: VirtualBox 简用命令汇总 VBoxManage 常用命令用法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 格式转换 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 格式转换 VDI转VMDKVBoxManage clonehd &quot;source.vdi&quot; &quot;target.vmdk&quot; --format VMDK# 格式转换 VMDK转VDIVBoxManage clonehd &quot;source.vmdk&quot; &quot;target.vdi&quot; --format VDI# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 查看信息 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 查看有哪些虚拟机VBoxManage list vms# 查看虚拟的详细信息VBoxManage list vms --long# 查看运行着的虚拟机VBoxManage list runningvms# 列出VirtualBox当前正在使用的虚拟磁盘的信息VBoxManage list hdds# 列出虚拟机配置文件中加载的虚拟磁盘镜像的信息VBoxManage list dvds# 列出VirtualBox所能识别的所有客户机操作系统VBoxManage list ostypes# 显示主机的Hardware time、CPU、内存、操作系统及系统版本信息VBoxManage list hostinfo # (输出中的&quot;Processor count&quot;指的是CPU的线程数)# 列出所有VirtualBox支持的虚拟磁盘后端VBoxManage list hddbackends# 显示VirtualBox的一些全局设置信息，包括Guest Additions文件的路径VBoxManage list systemproperties# 显示虚拟机的配置信息VBoxManage showvminfo &lt;uuid&gt;|&lt;name&gt;# 详细显示虚拟机的配置信息VBoxManage showvminfo &lt;uuid&gt;|&lt;name&gt; [--details]# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 开启 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 开启虚拟机在后台运行VBoxManage startvm backup -type headless# 开启虚拟机并开启远程桌面连接的支持VBoxManage startvm &lt;vm_name&gt; -type vrdp# 改变虚拟机的远程连接端口,用于多个vbox虚拟机同时运行VBoxManage controlvm &lt;vm_name&gt; vrdpprot &lt;ports&gt;# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 关闭 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 关闭虚拟机VBoxManage controlvm &lt;vm_name&gt; acpipowerbutton# 强制关闭虚拟机VBoxManage controlvm &lt;vm_name&gt; poweroff# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 快照 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 为名为centos7创建一张叫base的快照VBoxManage snapshot &quot;centos7&quot; take base# 为虚拟机centos7删除名为base的快照VBoxManage snapshot &quot;centos7&quot; delete base# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 扩展包 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 增加一个新的扩展包VBoxManage extpack install &lt;.vbox-extpack&gt;# 卸载指定扩展包VBoxManage extpack uninstall &lt;name&gt;# 显示已安装的扩展包VBoxManage list extpacks# 移除安装扩展包失败或卸载扩展包失败时可能遗留下来的文件和目录VBoxManage extpack cleanup 功能配置配置非 root 用户可以访问主机文件参考链接: virtualbox+centos 下非 root 用户访问不了共享目录 问题原因: 共享目录用户组为 vboxsf,和非 root 用户属于不同用户组,所以无法访问。 解决方法: 1234567# 1. root用户下usermod -a -G wheel userName# 2.当前用户下sudo usermod -aG vboxsf $(whoami)# 3. 重启或注销用户su - $(whoami)# 即可正常查看主机文件 动态磁盘和固定磁盘互相转换参考链接: Virtualbox 固定磁盘和动态磁盘之间进行转换 前置说明: 虚拟机已关机且备份(导出 OVA 格式等) 将动态磁盘转为固定磁盘实际操作步骤 12345678910111213141516171819202122232425262728293031323334353637383940# 切换目录[C:\\~]$ cd C:\\Program Files\\Oracle\\VirtualBox[C:\\Program Files\\Oracle\\VirtualBox]$# 列出当前硬盘信息[C:\\Program Files\\Oracle\\VirtualBox]$ VBoxManage.exe list hddsUUID: 782ec60c-da8e-4308-994c-fff7e8e3594dParent UUID: baseState: locked writeType: normal (base)Location: D:\\10-软件数据\\Virtualbox\\CentOS7.5_My HugeGraph\\CentOS7.5_My HugeGraph-disk001.vmdkStorage format: VMDKCapacity: 204800 MBytesEncryption: disabled# 将固定磁盘转换为动态磁盘[C:\\Program Files\\Oracle\\VirtualBox]$ VBoxManage.exe clonemedium disk &quot;D:\\10-软件数据\\Virtualbox\\CentOS7.5_My HugeGraph\\CentOS7.5_My HugeGraph-disk001.vmdk&quot; &quot;D:\\10-软件数据\\Virtualbox\\CentOS7.5_My HugeGraph\\Centos75.vdi&quot; -variant Standard0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%Clone medium created in format &#x27;VMDK&#x27;. UUID: 38a0c1d3-cc6f-427c-8dc4-fb33a50a0b24# 将动态磁盘转为固定磁盘# [C:\\Program Files\\Oracle\\VirtualBox]$ VBoxManage.exe clonemedium disk &quot;D:\\10-软件数据\\Virtualbox\\CentOS7.5_My HugeGraph\\CentOS7.5_My HugeGraph-disk001.vmdk&quot; &quot;D:\\10-软件数据\\Virtualbox\\CentOS7.5_My HugeGraph\\Centos75_fixed.vdi&quot; -variant Fixed# 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%# Clone medium created in format &#x27;VMDK&#x27;. UUID: 4f4952d3-6754-4267-8ffa-0e06f12d1449# 列出当前硬盘信息[C:\\Program Files\\Oracle\\VirtualBox]$ VBoxManage.exe list hddsUUID: 782ec60c-da8e-4308-994c-fff7e8e3594dParent UUID: baseState: createdType: normal (base)Location: D:\\10-软件数据\\Virtualbox\\CentOS7.5_My HugeGraph\\CentOS7.5_My HugeGraph-disk001.vmdkStorage format: VMDKCapacity: 204800 MBytesEncryption: disabledUUID: 4f4952d3-6754-4267-8ffa-0e06f12d1449Parent UUID: baseState: createdType: normal (base)Location: D:\\10-软件数据\\Virtualbox\\CentOS7.5_My HugeGraph\\Centos75_fixed.vdiStorage format: VMDKCapacity: 204800 MBytesEncryption: disabled 断开虚拟机和原有硬盘的关联,然后 添加新硬盘 删除原有硬盘(可以点击查看硬盘,会显示硬盘是否分配,未分配的硬盘根据需要可以对应删除掉)() Virtualbox 硬盘扩容Virtualbox 硬盘压缩虚拟机硬盘 vmdk 压缩瘦身并挂载到 VirtualBox 附件参考链接问题Virtualbox 虚拟机网络缓慢-解决方法背景说明: 问题原因: 服务器项目运行缓慢，服务器网络缓慢。 网络配置: 三网卡配置 仅主机 host+nat 网络+桥接网卡 步骤 1：查看网络延迟 12345# 正常应该是0.1s内(env) [scfan@fdm ~]$ time curl -s http://www.baidu.com &gt; /dev/nullreal 0m5.608suser 0m0.004ssys 0m0.004s 步骤 2: 参阅文档 参考资源: VirtualBox 虚拟机里网络很慢的解决方法 发现可能是由于 DNS 问题导致的。 步骤 3：修改 Virtualbox 参数 123456# 先关闭虚拟机# 修改 natdnshostresolver &amp; natdnsproxy 参数C:\\Windows\\system32&gt;cd C:\\Program Files\\Oracle\\VirtualBoxC:\\Program Files\\Oracle\\VirtualBox&gt; VBoxManage modifyvm &quot;CentOS7.5_My HugeGraph&quot; --natdnshostresolver1 onC:\\Program Files\\Oracle\\VirtualBox&gt; VBoxManage modifyvm &quot;CentOS7.5_My HugeGraph&quot; --natdnsproxy1 on 步骤 4：重启虚拟机后发现并没有修复问题 12345[root@fdm network-scripts]# time curl -s http://www.baidu.com &gt; /dev/nullreal 0m5.616suser 0m0.001ssys 0m0.005s 步骤 5：配置 DNS 1234567891011# 查看 /etc/resolv.conf 文件 [root@fdm network-scripts]# cat /etc/resolv.conf# Generated by NetworkManagersearch DHCPnameserver 192.168.100.58nameserver 192.168.1.1nameserver 192.168.0.1# NOTE: the libc resolver may not support more than 3 nameservers.# The nameservers listed below may not be recognized.nameserver 114.114.114.114nameserver 192.168.172.2 TODO 发现 192.168.100.58 一般网络下无法访问，导致网络延迟高，删除后正常 偶发 未解决 参考链接 ：CentOS 7 下，如何设置DNS服务器 # 临时修改 [root@fdm ~]# cat /etc/resolv.conf # Generated by NetworkManager search DHCP # nameserver 192.168.100.58 # nameserver 192.168.172.2 # nameserver 114.114.114.114 # nameserver 192.168.1.1 # nameserver 192.168.0.1 # NOTE: the libc resolver may not support more than 3 nameservers. # The nameservers listed below may not be recognized. 修改 /etc/NetworkManager/NetworkManager.conf 添加。禁止从NetworkManager自动覆盖resolv.conf文件 [main] #plugins=ifcfg-rh,ibft dns=none [root@fdm network-scripts]# time curl -s http://www.baidu.com &gt; /dev/null real 0m0.009s user 0m0.004s sys 0m0.002s ···","categories":[],"tags":[]},{"title":"代码行数统计工具","slug":"Tools/Tips/code-line-statis","date":"2021-10-23T11:54:51.252Z","updated":"2021-10-23T11:54:51.252Z","comments":true,"path":"Tools/Tips/code-line-statis.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Tips/code-line-statis.md/","excerpt":"","text":"Win-项目代码统计工具推荐工具： SourceCode 统计项目代码行数，支持统计不同后缀代码、注释等等. 使用介绍 展示样例 参考链接：SourceCount 代码统计工具使用","categories":[],"tags":[]},{"title":"ReadMe","slug":"Tools/Tips/README","date":"2021-10-23T11:54:51.251Z","updated":"2021-10-23T11:54:51.251Z","comments":true,"path":"Tools/Tips/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Tips/README.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Win10-开发环境部署","slug":"Tools/Server/Win10","date":"2021-10-23T11:54:51.251Z","updated":"2021-10-23T11:54:51.251Z","comments":true,"path":"Tools/Server/Win10.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Server/Win10.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"技术工具","slug":"Tools/README","date":"2021-10-23T11:54:51.250Z","updated":"2021-10-23T11:54:51.250Z","comments":true,"path":"Tools/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/README.md/","excerpt":"","text":"常用工具 Anaconda-环境管理器 Chrome-谷歌浏览器 Docker-容器 Git-版本库工具 GitHub-版本库网站 Graph-图库 Pycharm-代码编辑器 Vsocde-代码编辑器 技术专栏 BigData-大数据专栏 Crawl-爬虫专栏 Databases-数据库专栏 Django-Python 后端框架","categories":[],"tags":[]},{"title":"CentOS8-开发环境部署","slug":"Tools/Server/CentOS8","date":"2021-10-23T11:54:51.250Z","updated":"2021-10-23T11:54:51.250Z","comments":true,"path":"Tools/Server/CentOS8.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Server/CentOS8.md/","excerpt":"","text":"服务部署12# 如果防火墙已开启，必须开放端口，否则容器无法启动firewall-cmd --zone=public --add-port=3306/tcp --permanent Centos8.2 容器配置 1234567891011121314# 拉取镜像docker pull mysql# 检查镜像docker images# 创建容器sudo docker run -p 3306:3306 --name mysql \\-v /data/docker/mysql/conf:/etc/mysql \\-v /data/docker/mysql/logs:/var/log/mysql \\-v /data/docker/mysql/data:/var/lib/mysql \\-v /data/docker/mysql/mysql-files:/var/lib/mysql-files \\-e MYSQL_ROOT_PASSWORD=123456 \\-d mysql:5.7# 检查容器是否正确运行docker container ls mysql 配置 1234567891011121314# Mysql 默认配置host: 127.0.0.1port: 3306user: rootpassword: 123456# sudo docker exec -it mysql bash# 设置远程访问权限mysql -uroot -p123456use mysql;select host,user,password from user;grant all privileges on *.* to root@&#x27;%&#x27; identified by &quot;password&quot;;flush privileges;select host,user,password from user; FDM 项目部署Mysql 配置 1234567891011mysql -uroot -p123456 -- CREATE DATABASE IF NOT EXISTS yourdbname DEFAULT CHARSET utf8 COLLATE utf8_general_ci;use mysql;CREATE DATABASE fdm;CREATE USER &#x27;fdm&#x27;@&#x27;*&#x27; IDENTIFIED BY &#x27;qwe123&#x27;;grant select on fdm.* to fdm@&#x27;*&#x27;;GRANT ALL PRIVILEGES ON fdm.* TO fdm@&quot;*&quot;;GRANT ALL PRIVILEGES ON *.* TO fdm@&quot;*&quot;;flush privileges; Docker 配置 12345678910# 创建网络docker network create --subnet=172.18.0.0/16 extnetworkdocker load -i img_fdm_server_centos8.tardocker run --privileged=true -m 85G -itd --name yinsho_fdm_centos8 --net extnetwork10 --ip 172.18.10.10 -p 80:80 -p 3000:3000 -p 443:443 -v /data/docker_data/fdm_server:/data img_fdm_server_centos8 /usr/sbin/initdocker run --privileged=true -m 8G -itd --name yinsho_fdm_centos8 -p 80:80 -p 3000:3000 -p 443:443 -v /data/docker_data/fdm_server:/data img_fdm_server_centos8 /usr/sbin/init","categories":[],"tags":[]},{"title":"README","slug":"Tools/Server/README","date":"2021-10-23T11:54:51.250Z","updated":"2021-10-23T11:54:51.250Z","comments":true,"path":"Tools/Server/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Server/README.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Pycharm-IDE环境编辑器","slug":"Tools/Pycharm/Win-Pycharm","date":"2021-10-23T11:54:51.249Z","updated":"2021-10-23T11:54:51.249Z","comments":true,"path":"Tools/Pycharm/Win-Pycharm.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Pycharm/Win-Pycharm.md/","excerpt":"","text":"tags: Python IDE工具 Pycharm 必备工具 2020年 02月 环境说明: Win10 家庭版 Python3.6.0 简介说明Pycharm 常用命令Pycharm 常用快捷键1.编辑Ctrl + Space 基本的代码完成(类、方法、属性) Ctrl + Alt + Space 快速导入任意类 Ctrl + Shift + Enter 语句完成 Ctrl + Z 撤销上次操作 Ctrl + Shift + Z 重做,恢复上次的撤销 Ctrl + / 行注释/取消注释 Ctrl + Shift + / 块注释 Alt + Enter 快速修正 Ctrl + Alt + L 代码格式化 Ctrl + Alt + O 优化导入 Ctrl + Alt + I 自动缩进 Ctrl + Shift + J 添加智能线 2、查找/替换(Search/Replace)F3 下一个 Shift + F3 前一个 Ctrl + R 替换 Ctrl + Shift + R 全局替换 Ctrl + Shift + F 全局查找(可以在整个项目中查找某个字符串什么的，如查找某个函数名) 常用代码快速运行：Ctrl+Shift+F10 代码换行：Shift+Enter 行注释/取消行注释：Ctrl+/ 块注释：Ctrl+Shift+/ 快速查看文档：Ctrl + q Ctrl+鼠标点击函数名，查看内置函数介绍。 快速复制当前行 Crtl+D 代码格式化：Ctrl + Alt + L 自动缩进：Ctrl + Alt + I 缩进/取消缩进：Tab / Shift + Tab 添加书签：Ctrl + B 附件参考资源 PyCharm 快捷键 在 PyCharm 切换 Python2 和 Python3在 PyCharm 切换 Python2 和 Python3","categories":[],"tags":[]},{"title":"Crack-破解版","slug":"Tools/Pycharm/crack","date":"2021-10-23T11:54:51.249Z","updated":"2021-10-23T11:54:51.249Z","comments":true,"path":"Tools/Pycharm/crack.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Pycharm/crack.md/","excerpt":"","text":"https://cloud.tencent.com/developer/article/1633857","categories":[],"tags":[]},{"title":"","slug":"Tools/NodeJs/install","date":"2021-10-23T11:54:51.248Z","updated":"2021-10-23T11:54:51.248Z","comments":true,"path":"Tools/NodeJs/install.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/NodeJs/install.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"Tools/Pycharm/README","date":"2021-10-23T11:54:51.248Z","updated":"2021-10-23T11:54:51.248Z","comments":true,"path":"Tools/Pycharm/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Pycharm/README.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hexo静态博客使用文档","slug":"Tools/Hexo/hexo","date":"2021-10-23T11:54:51.247Z","updated":"2021-10-24T04:27:30.987Z","comments":true,"path":"Tools/Hexo/hexo.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Hexo/hexo.md/","excerpt":"","text":"Hexo 简介 Hexo 基础配置 Hexo 博客配置 折叠隐藏部分文字 添加文章创建时间和更新时间 修改文章 URL 生成方式 个人博客绑定域名配置 博客评论配置 设置博客置顶 配置私密博客 hexo-hide-posts 配置 看板娘 配置 hexo-related-popular-posts hexo-easy-tags-plugin hexo-permalink-pinyin hexo-notify hexo-seo-link-visualizer hexo-encrypt Resources Hexo 简介 Hexo 官网 hexo 原理分析 Hexo 基础配置 node.js 下载 1234567# 下载 node.js 并安装npm install -g hexo-clinpm install hexo# 配置 hexo 的 环境变量C:\\Users\\scfan\\AppData\\Roaming\\npm\\node_modules\\hexo\\bin配置之后重新打开 gitbash, 则会有 hexo 命令 Hexo 博客配置 Hexo 官方插件网 折叠隐藏部分文字 1234567891011121314151617&lt;details&gt; &lt;summary&gt;隐藏内容的标题&lt;/summary&gt;- 支持MarkDown语法- 支持代码块等等 ```python import os ``` // 防止排版错误：因为这是代码块内的代码。使用时可删除- 支持表格 |文字|文字| |-|-| |文字|文字|&lt;/details&gt; 隐藏内容的标题 支持 MarkDown 语法 支持代码块等等 1import os 支持表格 文字 文字 文字 文字 Hexo 博客如何折叠(显示/隐藏)部分文字 添加文章创建时间和更新时间 本博客采用更新时间 modified 。 创建时间 date 配置方法详见如下 配置自动更新时间 themes\\next\\layout\\_macro\\post.swig 1234567891011121314151617181920212223242526272829303132333435&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt; &lt;font color=&quot;#F05050&quot;&gt;[置顶]&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &#123;% endif %&#125; # 添加如下内容 !!! 去除此注释. &lt;span class=&quot;post-time&quot;&gt; &#123;% if theme.post_meta.created_at %&#125; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;fa fa-calendar-o&quot;&gt;&lt;/i&gt; &lt;/span&gt; &#123;% if theme.post_meta.item_text %&#125; &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.posted&#x27;) &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;time title=&quot;&#123;&#123; __(&#x27;post.created&#x27;) &#125;&#125;&quot; itemprop=&quot;dateCreated datePublished&quot; datetime=&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;&gt; &#123;&#123; date(post.date, config.date_format) &#125;&#125; &lt;/time&gt; &#123;% endif %&#125; &#123;% if theme.post_meta.created_at and theme.post_meta.updated_at %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &#123;% endif %&#125; &#123;% if theme.post_meta.updated_at %&#125; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;fa fa-calendar-check-o&quot;&gt;&lt;/i&gt; &lt;/span&gt; &#123;% if theme.post_meta.item_text %&#125; &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.modified&#x27;) &#125;&#125;&amp;#58;&lt;/span&gt; &#123;% endif %&#125; &lt;time title=&quot;&#123;&#123; __(&#x27;post.modified&#x27;) &#125;&#125;&quot; itemprop=&quot;dateModified&quot; datetime=&quot;&#123;&#123; moment(post.updated).format() &#125;&#125;&quot;&gt; &#123;&#123; date(post.updated, config.date_format) &#125;&#125; &lt;/time&gt; &#123;% endif %&#125; &lt;/span&gt; 配置文章展示项 themes\\next\\_config.yml 123456# Post meta display settingspost_meta: item_text: true created_at: true updated_at: true categories: true 配置展示的名称 themes\\next\\languages\\zh-Hans.yml 12345post: created: 创建于 modified: 更新于 sticky: 置顶 posted: 发表于 参考链接 Hexo 官方文档 hexo 添加文章更新时间 修改文章 URL 生成方式 1234# _config.yml 文件# permalink: :year/:month/:day/:title/permalink: :url_path/ 个人博客绑定域名配置 Hexo 个人博客绑定域名配置 博客评论配置 123456789101112131415161718192021# themes\\next\\layout\\_partials\\comments.swig&#123;% elseif theme.gitalk.enable %&#125; &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; &lt;/div&gt;# _config.ymlgitalk: enable: true ClientID: xxxxx ClientSecret: xxxxxx repo: fansichao.github.io owner: fansichao adminUser: fansichao IdPrefix: labels: comments perPage: 10 pagerDirection: last createIssueManually: false distractionFreeMode: false enableHotKey: true 配置详见 Gittalk-github 参考 设置博客置顶 12# 文章中配置 top: true 即可top: true 配置私密博客 hexo-hide-posts 效果：博客在首页会被隐藏，实际通过链接仍可以访问 12345678910111213141516# 步骤1：_config.yml 配置# 隐藏文章 hexo-hide-postshide_posts: # 可以改成其他你喜欢的名字 filter: hidden # 指定你想要传递隐藏文章的 generator，比如让所有隐藏文章在存档页面可见 # 常见的 generators 有：index, tag, category, archive, sitemap, feed, etc. public_generators: [] # 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录 noindex: true# 步骤2：博客配置hidden: true# 查看隐藏的文章列表hexo hidden:list hexo-hide-posts 配置 看板娘 看板娘 hexo-helper-live2d 华丽的看板娘 live2d-widget 配置 hexo-related-popular-posts 生成到相关帖子或热门帖子的链接列表。 12345678910&lt;!-- hexo-related-popular-posts --&gt;&#123;% if not is_index %&#125; &lt;h3&gt;相关文章&lt;/h3&gt; &#123;&#123; popular_posts(&#123; maxCount: 10 , ulClass: &#x27;popular-posts&#x27; , PPMixingRate: 0.0 , isImage: false, isDate: false, isExcerpt: false&#125; , post) &#125;&#125;&#123;% endif %&#125;https://github.com/tea3/hexo-related-popular-posts/issues/4 hexo-related-popular-posts hexo-easy-tags-plugin 支持 标签的大小写、空格、下划线等统一 hexo-easy-tags-plugin hexo-permalink-pinyin 可将中文标题转换为音译的永久链接。 hexo-permalink-pinyin hexo-notify Hexo 的通知插件。 hexo-notify hexo-seo-link-visualizer TODO 未成功 分析链接并可视化 Hexo 的站点结构。 hexo-seo-link-visualizer hexo-encrypt 文章加密 TODO 可用, 但是未显示加密页面 hexo-encrypt Resources 适合做笔记的博客主题 适合做笔记本的博客 类似印象笔记的博客 [很好的文章展示博客](","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"hexo","slug":"module/hexo","permalink":"http://fansichao.github.com/blog/categories/module/hexo/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"hexo","slug":"hexo","permalink":"http://fansichao.github.com/blog/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://fansichao.github.com/blog/tags/blog/"}]},{"title":"CMD - 常用命令","slug":"Tools/NodeJs/cmd","date":"2021-10-23T11:54:51.247Z","updated":"2021-10-23T11:54:51.248Z","comments":true,"path":"Tools/NodeJs/cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/NodeJs/cmd.md/","excerpt":"","text":"环境说明: node v14.18.0 常用命令12345678910# 测试部署npm run dev# 产品部署 npm run build# 列出相关 module 模块yum module list nodejspython -m http.server 9991 彻底删除/卸载 NodeJs1234567891011# 卸载包管理工具安装的 nodejsyum remove nodejs npm -y# 卸载手动安装的 nodejswhereis noderm -rf node-xxx # 删除残留rm /usr/local/bin/noderm /usr/local/bin/npmrm /home/xxx/.npm","categories":[],"tags":[]},{"title":"Neo4j-数据导入","slug":"Tools/Graph/neo4j-load","date":"2021-10-23T11:54:51.246Z","updated":"2021-10-23T11:54:51.246Z","comments":true,"path":"Tools/Graph/neo4j-load.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/neo4j-load.md/","excerpt":"","text":"Version Neo4j-3.3.5 数据导入数据导入的几种方式 Cypher create 语句，为每一条数据写一个 create Cypher load csv 语句，将数据转成 CSV 格式，通过 LOAD CSV 读取数据。 官方提供的 neo4j-import 工具，未来将被 neo4j-admin import 代替 官方提供的 Java API - BatchInserter 大牛编写的 batch-import 工具 neo4j-apoc load.csv + apoc.load.relationship 针对实际业务场景，定制化开发 参考链接: 海量数据导入 Neo4j 的几种方式 Neo4j 批量导入数据的几种方式 使用 batch-import 工具向 neo4j 中导入海量数据 batch-import 已经编译好的工具 3.0，对应 neo4j-3.0.4 batch-import 的 github batch-import 的相关说明 本节主要说明三种导入方式 loadcsv、neo4j-import、batch-import 本文数据导入使用唯一 ID(node) 数据导入的注意事项 如果设定唯一主键时，ID 必须唯一 边中的 ID 必须存在于节点中，否则关系导入会跳过。 Neo4j-import注意事项 文件格式文件格式样例 1234# cust.csvid:ID,certno,name,label,cust_certtype:string,cust_namespell:string,birthday:int,sex:string,address:string,mob_phone:string# tran.csv:START_ID,:END_ID,Type,tran_date:int,amount:int,count:int 文件格式说明 文件中 ID 必须唯一 导入命令12345678910111213neo4j-import适应场景neo4j-import参数 (bin/neo4j-import help) - 指定最大进程数 --processors &lt;max processor count&gt; - 跳过重复节点 --skip-duplicate-nodes &lt;true/false&gt; - 跳过异常关系 --skip-bad-relationships &lt;true/false&gt; - 最大跳过数量 --bad-tolerance &lt;max number of bad entries, or true for unlimited&gt; - 跳过异常行(例如行列数异常) --ignore-extra-columns &lt;true/false&gt;命令样例:bin/neo4j-import --bad-tolerance=1000000 --skip-duplicate-nodes=true --skip-bad-relationships=true --into data/databases/graph.db --id-type string --nodes:cust import/c.csv --relationships:tran import/t.csv batch-import注意事项: batch-import 不支持多进程调用。 batch-import 版本必须和 neo4j 版本一致。 (否则导致数据库自动升级后虽然正常使用，但是 batch-import 已经无法读取升级后的数据库了) 文件格式123456# cust.csvid:string:id_index,certno:string:id_index,name,Label:label,cust_certtype:string,cust_namespell:string,birthday:int,sex:string,address:string,mob_phone:string874018718864465,874018718864465,鞠瑜,cust,其他证件,juyu,19801010,男,河北省岩市龙潭东莞街d座 188848,15767524738# tran.csvid:string:id_index,certno:string:id_index,Type,tran_date:int,amount:int,count:int874018718864465,411224195908138440,tran,20180108,20,2 文件格式说明： id:string:id_index ID 唯一,指定类型,设置索引 导入命令123456789101112131415161718192021222324252627# batch-import命令sh import.sh /home/fdm/neo4j_test/neo4j-community-3.0.4/data/databases/fdm.db /home/fdm/import_data/c.csv /home/fdm/import_data/t.csv# batch-import3.0已经编译好的软件包https://github.com/mo9527/batch-import-tool# batch.properties配置文件dump_configuration=falsecache_type=noneuse_memory_mapped_buffers=trueneostore.propertystore.db.index.keys.mapped_memory=1000Mneostore.propertystore.db.index.mapped_memory=10Mneostore.nodestore.db.mapped_memory=10240Mneostore.relationshipstore.db.mapped_memory=10240Mneostore.propertystore.db.mapped_memory=5120Mneostore.propertystore.db.strings.mapped_memory=2000M#batch_import.csv.quotes=true#batch_import.csv.delim=,workInfoId#contactRecordId deviceId workInfoId#batch_array_separator=,batch_import.csv.quotes=truebatch_import.csv.delim=,batch_import.keep_db=truebatch_import.node_index.id_index=exactbatch_import.node_index.id_index2=exactbatch_import.node_index.id_index3=exact Load-csv文件格式1234567891011121314151617load csv 导入格式要求# cust.csvid,certno,name,label,cust_certtype,cust_namespell,birthday,sex,address,mob_phone# tran.csvstart_id,end_id,type,tran_date,amount,count# create 节点LOAD CSV WITH HEADERS FROM &quot;file:///cust.csv&quot; AS line create(p:cust&#123;id:line.id,certno:line.certno,name:line.name,label:line.label,cust_certtype:line.cust_certtype,cust_namespell:line.cust_namespell,birthday:toInteger(line.birthday),sex:line.sex,address:line.address,mob_phone:line.mob_phone&#125;)# 创建索引CREATE INDEX ON :cust(id)# create 边LOAD CSV WITH HEADERS FROM &quot;file:///tran.csv&quot; AS line match(from:cust&#123;id:line.start_id&#125;),(to:cust&#123;id:line.end_id&#125;) create (from)-[r:tran&#123; type:line. type,tran_date:line.tran_date,amount:line.amount,count:line.count&#125;]-&gt;(to) 其他说明特殊说明csv 数据导入失败：可能性有多种 文件 head 头不对。 存在节点和交易关系头不对的情况 节点或交易边数据，ID 存在重复。 csv 文件中 ID 必须唯一。且所有实体表中的:ID 是必须写的，并且 ID 全局唯一，也就是三个表格中的 ID 都是唯一的，不可以有重复，在关系表中，不可以存在没有 ID 指向的实体。 参考资源 Neo4j 语句入门 Neo4j 数据导入参考博客 Python-Neo4j 语法 官网 Neo4j 语法简图 性能测试neo4j-import 方式 IMPORT DONE in 1m 17s 799ms. Imported:7295460 nodes10000000 relationships112954600 properties real 1m19.456suser 5m51.375ssys 0m15.706s 耗时 79.73S 速度 216,916.30 条/s","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://fansichao.github.com/blog/tags/Neo4j/"}]},{"title":"ReadMe-Graph 图库","slug":"Tools/Graph/readme","date":"2021-10-23T11:54:51.246Z","updated":"2021-10-23T11:54:51.246Z","comments":true,"path":"Tools/Graph/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/readme.md/","excerpt":"","text":"目录索引Neo4j-图数据库 Neo4j-info : Neo4j 简介说明 Neo4j-install : Neo4j 软件安装 Neo4j-config : Neo4j 配置说明 Neo4j-function : 函数说明 Neo4j-load : 数据导入 Neo4j-Cmd : 常用命令 HugeGraph-图数据库 HugeGraph-info : 简介说明 HugeGragh-Install : 软件安装 HugeGragh-Load : 数据导入 HugeGragh-Cmd : 常用命令 HugeGragh-Issue : 问题记录 Gremlin - 图库管理 Gremlin-cmd : 常用命令 参考资源","categories":[],"tags":[]},{"title":"Neo4j-功能模块","slug":"Tools/Graph/neo4j-function","date":"2021-10-23T11:54:51.245Z","updated":"2021-10-23T11:54:51.245Z","comments":true,"path":"Tools/Graph/neo4j-function.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/neo4j-function.md/","excerpt":"","text":"功能清单用户管理(可选配置)1234567891011121314151617181920Neo4j密码配置(可视化界面)1. 新增用户# 用户 密码 是否需要修改密码# CALL dbms.security.createUser(name,password,requridchangepassword)# 命令样例CALL dbms.security.createUser(&#x27;fdm&#x27;,&#x27;qwe123&#x27;,true)2.修改密码# 修改密码:server change-password# 直接修改密码， password参数不能为空，或者跟原密码相同。CALL dbms.security.changePassword(&#x27;password&#x27;)3.其他命令# 查看当前用户CALL dbms.security.showCurrentUser()# 查看所有用户：CALL dbms.security.listUsers()# 删除用户CALL dbms.security.deleteUser(&quot;username&quot;) Neo4j 用户管理-参考链接 Neo4j 数据预热使用 bin/neo4j-shell 进入 neo4j 命令行界面，执行以下语句预热： 123MATCH (n)OPTIONAL MATCH (n)-[r]-&gt;()RETURN count(n.prop) + count(r.prop); 建立 index 可以使得查询性能得到巨大提升。如果不建立 index，则需要对每个 node 的每一个属性进行遍历，所以比较慢。 并且 index 建立之后，新加入的数据都会自动编入到 index 中。 注意 index 是建立在 label 上的，不是在 node 上，所以一个 node 有多个 label，需要对每一个 label 都建立 index. Neo4j-系统预热 检查 Neo4j 是否启动检查 neo4j 是否启动,通常 10s 左右可以启动成功。https://neo4j.com/docs/operations-manual/current/configuration/wait-for-start/ 执行语句查询超时配置方法 1: 配置 conf/neo4j.conf 参数 1234# TODO 存在偶发不生效的情况# query timeoutdbms.lock.acquisition.timeout=60sdbms.transaction.timeout=60s 优点 便于控制 超时时会抛出异常，便于把控 缺点 偶发失效 无法动态控制变更,需要重启服务. 方法 2: 配置 runTimeboxed 123CALL apoc.cypher.runTimeboxed(&#x27; 执行命令&#x27; ,&#123;&#123;&#125;&#125;, 90000) # ms 毫秒 优点 精准控制 必定生效 缺点 修改大量语句 超时时返回数据为空 正常返回时和没有 CALL 数据结构不同 Neo4j 官方超时配置","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://fansichao.github.com/blog/tags/Neo4j/"}]},{"title":"Neo4j-部署文档","slug":"Tools/Graph/neo4j-install","date":"2021-10-23T11:54:51.245Z","updated":"2021-10-23T11:54:51.246Z","comments":true,"path":"Tools/Graph/neo4j-install.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/neo4j-install.md/","excerpt":"","text":"部署 Version Neo4j-3.3.5 CentOS8.1.19 容器部署参考 Docker-Neo4j 安装文档 宿主机部署解压即用 环境依赖 Java1.8+ 系统文件数 40000+ 配置系统文件数 1234567# vi /etc/security/limits.conffdm soft nofile 65535fdm hard nofile 65535sysctl -p# 修改后重新进入ssh# fdm为用户名称 建议配置 apoc-3.3.0.3-all.jar 以支持 Neo4j 更多功能 基础使用12345678910111213# 重启服务[fdm@5e272144faf5 neo4j-community-3.3.5]$ bin/neo4j restartStopping Neo4j.. stoppedStarting Neo4j.Started neo4j (pid 1420). It is available at http://0.0.0.0:7474/There may be a short delay until the server is ready.See /home/fdm/neo4j/neo4j-community-3.3.5/logs/neo4j.log for current status.# 查看前端页面0.0.0.0:7474默认用户名 neo4j默认密码 qwe123","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://fansichao.github.com/blog/tags/Neo4j/"}]},{"title":"Neo4j图库目录","slug":"Tools/Graph/neo4j-info","date":"2021-10-23T11:54:51.245Z","updated":"2021-10-23T11:54:51.245Z","comments":true,"path":"Tools/Graph/neo4j-info.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/neo4j-info.md/","excerpt":"","text":"介绍Neo4j 官网 Neo4j 是目前最流行的图形数据库，支持完整的事务，在属性图中，图是由顶点(Vertex)，边(Edge)和属性(Property)组成的，顶点和边都可以设置属性，顶点也称作节点，边也称作关系，每个节点和关系都可以由一个或多个属性。Neo4j 创建的图是用顶点和边构建一个有向图，其查询语言 cypher 已经成为事实上的标准。 它包括如下几个显著特点： 完整的 ACID 支持 高可用性 轻易扩展到上亿级别的节点和关系 通过遍历工具高速检索数据 其他的图形数据库还包括 Oracle NoSQL 数据库，OrientDB，HypherGraphDB，GraphBase，InfiniteGraph，AllegroGraph。 软件目录说明： bin 目录：用于存储 Neo4j 的可执行程序； conf 目录：用于控制 Neo4j 启动的配置文件； data 目录：用于存储核心数据库文件； plugins 目录：用于存储 Neo4j 的插件； import 目录：用于存放 load csv 文件,作为根目录(配置文件中可修改) 目前累积最多它有 34.4 亿个节点，344 亿的关系，和 6870 亿条属性。 Neo4j 语法Cypher 是图形数据库 Neo4j 的声明式查询语言。 CQL 代表 Cypher 查询语言。 像 Oracle 数据库具有查询语言 SQL，Neo4j 具有 CQL 作为查询语言。 neo4j 入门教程 Neo4j 术语/概念基础术语/概念 下面介绍下 neo4j 的几个核心概念： Nodes(节点，类似地铁图里的一个地铁站)图谱的基本单位主要是节点和关系，他们都可以包含属性，一个节点就是一行数据，一个关系也是一行数据，里面的属性就是数据库里面的 row 里面的字段。除了属性之外，关系和节点还可以有零到多个标签，标签也可以认为是一个特殊分组方式。 Relationships(关系，类似两个相邻地铁站之间路线)关系的功能是组织和连接节点，一个关系连接 2 个节点，一个开始节点和一个结束节点。当所有的点被连接起来，就形成了一张图谱，通过关系可以组织节点形成任意的结构，比如 list，tree，map，tuple，或者更复杂的结构。关系拥有方向进和出，代表一种指向。 Properties(属性，类似地铁站的名字，位置，大小，进出口数量等)属性非常类似数据库里面的字段，只有节点和关系可以拥有 0 到多个属性，属性类型基本和 java 的数据类型一致，分为 数值，字符串，布尔，以及其他的一些类型，字段名必须是字符串。 Labels(标签，类似地铁站的属于哪个区)标签通过形容一种角色或者给节点加上一种类型，一个节点可以有多个类型，通过类型区分一类节点，这样在查询时候可以更加方便和高效，除此之外标签在给属性建立索引或者约束时候也会用到。label 名称必须是非空的 unicode 字符串，另外 lables 最大标记容量是 int 的最大值，近似 21 亿。 Traversal(遍历，类似我们看地图找路径)查询时候通常是遍历图谱然后找到路径，在遍历时通常会有一个开始节点，然后根据 cpyher 提供的查询语句，遍历相关路径上的节点和关系，从而得到最终的结果。 Paths(路径，类似从一个地铁站到另一个地铁站的所有的到达路径)路径是一个或多个节点通过关系连接起来的产物，例如得到图谱查询或者遍历的结果。 Schema(模式，类似存储数据的结构)neo4j 是一个无模式或者 less 模式的图谱数据库，像 mongodb，solr，lucene 或者 es 一样，你可以使用它不需要定义任何 schema， Indexes(索引)遍历图通过需要大量的随机读写，如果没有索引，则可能意味着每次都是全图扫描，这样效率非常低下，为了获得更好的性能，我们可以在字段属性上构建索引，这样任何查询操作都会使用索引，从而大幅度提升 seek 性能， 构建索引是一个异步请求，并不会立刻生效，会再后台创建直至成功后，才能最终生效。如果创建失败，可以重建索引，先删除索引，在创建即可，然后从 log 里面找出创建失败的原因然后分析。 Constraints(约束)约束可以定义在某个字段上，限制字段值唯一，创建约束会自动创建索引。 参考链接: Neo4j 术语与概念 Neo4j-index相关资源内部资源 Neo4j 安装部署 Neo4j 配置详解 Neo4j 数据导入 Neo4j 功能模块 Neo4j 常用命令 外部资源 Neo4j 的使用与 java 调用案例 Neo4j-admin import 大数据量导入 neo4j 之’neo4j-import(neo4j-admin import)实战’ 图形数据库 Neo4j 开发实战 Neo4j 学习笔记(1)——使用 Java API 实现简单的增删改查 如何使用 org.neo4j.graphdb.Relationship 的最佳示例 neo4j 遍历和图算法 Graph 图库排名","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"index","slug":"index","permalink":"http://fansichao.github.com/blog/tags/index/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://fansichao.github.com/blog/tags/Neo4j/"}]},{"title":"Neo4j-常用命令","slug":"Tools/Graph/neo4j-cmd","date":"2021-10-23T11:54:51.244Z","updated":"2021-10-23T11:54:51.244Z","comments":true,"path":"Tools/Graph/neo4j-cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/neo4j-cmd.md/","excerpt":"","text":"Neo4j 运算符 运算名称 运算符 常规运算 DISTINCT, ., [] 算数运算 +, -, *, /, %, ^ 比较运算 =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=, IS NULL, IS NOT NULL 逻辑运算 AND, OR, XOR, NOT 字符串操作 + List 操作 +, IN, [x], [x .. y] 正则操作 =~ 字符串匹配 STARTS WITH, ENDS WITH, CONTAINS 路径查询1234567891011121314151617181920212223# 节点之间的最短路径MATCH p=shortestPath((a)-[*]-&gt;(b))# 节点之前的所有最短路径MATCH P = allShortestPaths((c:cust &#123;id:&#x27;xxx&#x27;&#125;)-[*..5]-(t:cust &#123;id:&#x27;xxxx&#x27;&#125;)) return P# shortestPath &amp; allShortestPaths 对比分析cypher提供了两个查询最短路径的特殊函数 shortestPath 和 allShortestPath在真实测试中发现，allShortestPath在已有两点间短路径情况下，会忽略两点之间额外更长的路径allShortestPath ，因为它不会返回任何长度大于较短路径的路径# true-读取属性记录call apoc.warmup.run(true)# 两个节点间所有路径 (数据量较大时会存在性能问题)MATCH p=(n1 &#123;thingId:&quot;11&quot;&#125;)-[r*0..6]-(n2 &#123;thingId:&quot;222&quot;&#125;)# 所有路径(按路径长度排序)，并且仅限制返回的项目的深度和数量MATCH p =(a)-[*2..5]-(b)RETURN p, length(p)order by length(p)LIMIT 5; Cypher 语法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# Create 语句# Create语法CREATE (&lt;node-name&gt;:&lt;label-name&gt;&#123;&lt;Property1-name&gt;...&lt;Propertyn-name&gt;&#125;)- node-name 节点名称。Neo4j使用。不能使用它来访问节点详细信息- label-name 标签名称 使用此标签名称来访问节点详细信息。- Property1-name 属性# Create 节点+标签 + 属性CREATE (node_name:label1:label2&#123;id:123,name:&quot;Lokesh&quot;,sal:35000,deptno:10&#125;)# Match - 查询指定节点match (lab:label1)where lab.name = &#x27;Lokesh&#x27;RETURN lab.name,lab.id# label1 标签名称# lab 标签名称重命名。类似 as# Match - 查询指定节点,创建关系MATCH (cust:Customer),(cc:CreditCard)WHERE cust.id = &quot;1001&quot; AND cc.id= &quot;5001&quot;CREATE (cust)-[r:DO_SHOPPING_WITH&#123;shopdate:&quot;12/12/2014&quot;,price:55000&#125;]-&gt;(cc)RETURN r# Sort排序 - 对 Match 结果升序或降序排序MATCH (emp:Employee)RETURN emp.empid,emp.name,emp.salary,emp.deptnoORDER BY emp.name DESC# UNION - 数据合并(字段名称类型必须一致) 不返回重复行MATCH (cc:CreditCard)RETURN cc.id as id,cc.number as number,cc.name as name, cc.valid_from as valid_from,cc.valid_to as valid_toUNIONMATCH (dc:DebitCard)RETURN dc.id as id,dc.number as number,dc.name as name, dc.valid_from as valid_from,dc.valid_to as valid_to# UNION ALL - 数据合并(字段名称类型必须一致) 返回重复行MATCH (cc:CreditCard)RETURN cc.id as id,cc.number as number,cc.name as name, cc.valid_from as valid_from,cc.valid_to as valid_toUNION ALLMATCH (dc:DebitCard)RETURN dc.id as id,dc.number as number,dc.name as name, dc.valid_from as valid_from,dc.valid_to as valid_to# Limit 过滤或限制查询返回的行数. 去掉CQL查询结果集底部的结果MATCH (emp:Employee)RETURN empLIMIT 2# skip 过滤或限制查询返回的行数. 去掉CQL查询结果集顶部的结果MATCH (emp:Employee)RETURN empSKIP 2# Merge 合并Neo4j使用CQL MERGE命令- 创建节点，关系和属性- 为从数据库检索数据- 命令使用：Create+Match组合MERGE (gp2:GoogleProfile2&#123; Id: 201402,Name:&quot;Nokia&quot;&#125;)CREATE命令总是向数据库添加新的节点Merge命令只有在不存在时创建节点。存在时更新# NULLNeo4j CQL将空值视为对节点或关系的属性的缺失值或未定义值。当我们创建一个具有现有节点标签名称但未指定其属性值的节点时，它将创建一个具有NULL属性值的新节点。# 查看存在 id 属性的节点MATCH (e:Employee)WHERE e.id IS NOT NULLRETURN e.id,e.name,e.sal,e.deptno# 移除属性MATCH (n &#123; name: &#x27;Andres&#x27; &#125;)SET n.name = NULL RETURN n.name, n.age# IN 查询集合MATCH (e:Employee)WHERE e.id IN [123,124]RETURN e.id,e.name,e.sal,e.deptno Cypher 删除 两种删除方式。DELETE REMOVE Delete 用于删除节点和关系。Remove 用于删除标签和属性。 Delete 和 Remove 都需要和 Match 配合使用。 123456789101112131415# 删除节点MATCH (e: Employee) DELETE e# 删除节点及关系MATCH (cc: CreditCard)-[rel]-(c:Customer)DELETE cc,c,rel# 删除属性MATCH (book &#123; id:122 &#125;)REMOVE book.priceRETURN book# 删除匹配 label1 数据. 标签 label2.MATCH (m:label1)REMOVE m:label2 Cypher 更新 set 方式更新数据。可以和 match 等配合使用 12345678910# 更新节点属性MATCH (dc:DebitCard)SET dc.atm_pin = 3456RETURN dc# 移除属性MATCH (n &#123; name: &#x27;Andres&#x27; &#125;)SET n.name = NULL RETURN n.name, n.age ssh 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127一，创建节点1，创建空的节点CREATE (n)CREATE (a),(b)2，创建带标签的节点CREATE (n:Person)CREATE (n:Person:Swedish)3，创建带标签和属性的节点CREATE (n:Person &#123; name: &#x27;Andres&#x27;, title: &#x27;Developer&#x27; &#125;)二，创建关系创建节点之前的关系1，在两个节点之间创建关系在两个节点之间创建关系，并设置关系类型MATCH (a:Person),(b:Person)WHERE a.name = &#x27;A&#x27; AND b.name = &#x27;B&#x27;CREATE (a)-[r:RELTYPE]-&gt;(b)RETURN type(r)2，创建关系，并设置关系的属性MATCH (a:Person),(b:Person)WHERE a.name = &#x27;A&#x27; AND b.name = &#x27;B&#x27;CREATE (a)-[r:RELTYPE &#123; name: a.name + &#x27;&lt;-&gt;&#x27; + b.name &#125;]-&gt;(b)RETURN type(r), r.name3，CREATE子句和模式在CREATE子句和模式中，对于模式中的任意部分，如果它不存在于图中，那么CREATE子句创建它；如果存在于图中，那么就会引用它。CREATE p =(andres &#123; name:&#x27;Andres&#x27; &#125;)-[:WORKS_AT]-&gt;(neo)&lt;-[:WORKS_AT]-(michael &#123; name: &#x27;Michael&#x27; &#125;)RETURN p三，删除节点和关系使用delete子句删除节点、关系和路径，当删除节点时，该节点必须是孤立的节点，也就是说，必须首先删除跟节点相关的所有关系。detach delete： 表示删除一个节点或多个节点，跟节点相关的所有关系也都被删除。1，删除节点MATCH (n:Person &#123; name: &#x27;UNKNOWN&#x27; &#125;)DELETE n2，删除所有节点和关系MATCH (n)DETACH DELETE n3，删除一个节点和它的所有关系MATCH (n &#123; name: &#x27;Andres&#x27; &#125;)DETACH DELETE n4，删除关系MATCH (n &#123; name: &#x27;Andres&#x27; &#125;)-[r:KNOWS]-&gt;()DELETE r四，更新属性或标签set子句用于更新节点的标签，向节点和关系中添加属性1，向节点或关系中添加属性MATCH (n &#123; name: &#x27;Andres&#x27; &#125;)SET n.surname = &#x27;Taylor&#x27;RETURN n.name, n.surname2，移除属性如果设置属性的值是NULL，相当于把该属性从节点或关系中移除MATCH (n &#123; name: &#x27;Andres&#x27; &#125;)SET n.name = NULL RETURN n.name, n.age3，复制属性把一个节点的属性复制给另一个节点MATCH (at &#123; name: &#x27;Andres&#x27; &#125;),(pn &#123; name: &#x27;Peter&#x27; &#125;)SET at = pnRETURN at.name, at.age, at.hungry, pn.name, pn.age4，从Map中添加属性MATCH (p &#123; name: &#x27;Peter&#x27; &#125;)SET p += &#123; hungry: TRUE , position: &#x27;Entrepreneur&#x27; &#125;5，在一条set子句中添加多个属性MATCH (n &#123; name: &#x27;Andres&#x27; &#125;)SET n.position = &#x27;Developer&#x27;, n.surname = &#x27;Taylor&#x27;6，向节点中添加标签MATCH (n &#123; name: &#x27;Stefan&#x27; &#125;)SET n:GermanRETURN n.name, labels(n) AS labels7，向节点中添加多个标签MATCH (n &#123; name: &#x27;Emil&#x27; &#125;)SET n:Swedish:BossmanRETURN n.name, labels(n) AS labels五，移除属性使用remove子句从节点中移除标签和属性，从关系中移除属性。1，移除属性默认情况下，Neo4j不允许存在值为null的属性；如果属性不存在，那么返回该属性的值是null。MATCH (a &#123; name: &#x27;Andres&#x27; &#125;)REMOVE a.ageRETURN a.name, a.age2，移除节点的标签MATCH (n &#123; name: &#x27;Peter&#x27; &#125;)REMOVE n:GermanRETURN n.name, labels(n)3，移除节点的多个标签当节点的标签为空时，labels(n)函数返回空的listMATCH (n &#123; name: &#x27;Peter&#x27; &#125;)REMOVE n:German:SwedishRETURN n.name, labels(n)六，foreach子句列表和路径是Cypher中的关键概念，foreach子句用于更新数据，例如，对路径中的元素或通过聚合创建的列表执行更新命令。1，对路径中的元素执行更新命令对路径中匹配的所有节点，添加marked属性，并设置属性值为TRUEMATCH p =(begin)-[*]-&gt;(END )WHERE begin.name = &#x27;A&#x27; AND END .name = &#x27;D&#x27;FOREACH (n IN nodes(p)| SET n.marked = TRUE ) Cpyher 函数Cypher 常用语句查询指定节点 1MATCH (n:cust) where n.id = &#x27;623026199412212548&#x27; RETURN n LIMIT 25 更新指定节点 1MATCH (n:cust) where n.id = &#x27;623026199412212548&#x27; set n.name=&#x27;set_name_test&#x27; RETURN n LIMIT 25 查询节点和边 1match (ee:cust)-[:tran]-(tranx) where ee.address=&#x27;吉林省东莞市新城哈尔滨街D座 690272&#x27; return ee,tranx 节点数据导入-loadcsv 方式-merge(更新已存在数据) 12345678USING PERIODIC COMMIT 10000 LOAD CSV WITH HEADERS FROM &quot;file:///test.csv&quot; AS line fieldterminator &#x27;,&#x27; Merge (n:cust&#123;id:line.id&#125;) set n.name = line.name# PERIODIC COMMIT 10000 指定每10000条数据提交一次，减小内存压力# WITH HEADERS 文件自带表头# fieldterminator 指定文件分隔符 创建索引(加快查询，插入速度) 12create index on :cust(id)create index on :tran(id)","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://fansichao.github.com/blog/tags/Neo4j/"}]},{"title":"Neo4j-配置说明","slug":"Tools/Graph/neo4j-config","date":"2021-10-23T11:54:51.244Z","updated":"2021-10-23T11:54:51.244Z","comments":true,"path":"Tools/Graph/neo4j-config.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/neo4j-config.md/","excerpt":"","text":"Version Neo4j-3.3.5 Centos8 功能配置配置文件详细说明配置文件路径: conf/neo4j.conf 配置文件详细说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184# For more details and a complete list of settings, please see https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/# 如果想自定义neo4j数据库数据的存储路径，要同时修改dbms.active_database 和 dbms.directories.data 两项配置，# 修改配置后，数据会存放在$&#123;dbms.directories.data&#125;/databases/$&#123;dbms.active_database&#125; 目录下# 安装的数据库的名称，默认使用$&#123;NEO4J_HOME&#125;/data/databases/graph.db目录# The name of the database to mount#dbms.active_database=graph.db#安装Neo4j数据库的各个配置路径，默认使用$NEO4J_HOME下的路径#Paths of directories in the installation.# 数据路径#dbms.directories.data=data# 插件路径#dbms.directories.plugins=plugins#dbms.directories.certificates=certificates 证书路径#dbms.directories.logs=logs 日志路径#dbms.directories.lib=lib jar包路径#dbms.directories.run=run 运行路径#默认情况下想load csv文件，只能把csv文件放到$&#123;NEO4J_HOME&#125;/import目录下，把下面的#删除后，可以在load csv时使用绝对路径，这样可能不安全#This setting constrains all `LOAD CSV` import files to be under the `import` directory. Remove or comment it out to allow files to be loaded from anywhere in the filesystem; this introduces possible security problems. See the `LOAD CSV` section of the manual for details.#此设置将所有“LOAD CSV”导入文件限制在`import`目录下。删除注释允许从文件系统的任何地方加载文件;这引入了可能的安全问题。dbms.directories.import=import#把下面这行的#删掉后，连接neo4j数据库时就不用输密码了#Whether requests to Neo4j are authenticated. 是否对Neo4j的请求进行了身份验证。#To disable authentication, uncomment this line 要禁用身份验证，请取消注释此行。#dbms.security.auth_enabled=false#Enable this to be able to upgrade a store from an older version. 是否兼容以前版本的数据dbms.allow_format_migration=true#Java Heap Size: by default the Java heap size is dynamically calculated based on available system resources. Java堆大小：默认情况下，Java堆大小是动态地根据可用的系统资源计算。#Uncomment these lines to set specific initial and maximum heap size. 取消注释这些行以设置特定的初始值和最大值#dbms.memory.heap.initial_size=512m#dbms.memory.heap.max_size=512m#The amount of memory to use for mapping the store files, in bytes (or kilobytes with the &#x27;k&#x27; suffix, megabytes with &#x27;m&#x27; and gigabytes with &#x27;g&#x27;).# 用于映射存储文件的内存量(以字节为单位)千字节带有&#x27;k&#x27;后缀，兆字节带有&#x27;m&#x27;，千兆字节带有&#x27;g&#x27;)。#If Neo4j is running on a dedicated server, then it is generally recommended to leave about 2-4 gigabytes for the operating system, give the JVM enough heap to hold all your transaction state and query context, and then leave the rest for the page cache.# 如果Neo4j在专用服务器上运行，那么通常建议为操作系统保留大约2-4千兆字节，为JVM提供足够的堆来保存所有的事务状态和查询上下文，然后保留其余的页面缓存 。#The default page cache memory assumes the machine is dedicated to running Neo4j, and is heuristically set to 50% of RAM minus the max Java heap size. 默认页面缓存存储器假定机器专用于运行Neo4j，并且试探性地设置为RAM的50％减去最大Java堆大小。#dbms.memory.pagecache.size=10g### Network connector configuration#With default configuration Neo4j only accepts local connections. Neo4j默认只接受本地连接(localhost)#To accept non-local connections, uncomment this line: 要接受非本地连接，请取消注释此行# (这是删除#后的配置，可以通过ip访问)dbms.connectors.default_listen_address=0.0.0.0#You can also choose a specific network interface, and configure a non-default port for each connector, by setting their individual listen_address. 还可以选择特定的网络接口，并配置非默认值端口，设置它们各自的listen_address#The address at which this server can be reached by its clients. This may be the server&#x27;s IP address or DNS name, or it may be the address of a reverse proxy which sits in front of the server. This setting may be overridden for individual connectors below. 客户端可以访问此服务器的地址。这可以是服务器的IP地址或DNS名称，或者可以是位于服务器前面的反向代理的地址。此设置可能会覆盖以下各个连接器。#dbms.connectors.default_advertised_address=localhost#You can also choose a specific advertised hostname or IP address, and configure an advertised port for each connector, by setting their individual advertised_address. 您还可以选择特定广播主机名或IP地址，# 为每个连接器配置通告的端口，通过设置它们独特的advertised_address。#Bolt connector 使用Bolt协议dbms.connector.bolt.enabled=truedbms.connector.bolt.tls_level=OPTIONALdbms.connector.bolt.listen_address=:7687#HTTP Connector. There must be exactly one HTTP connector. 使用http协议dbms.connector.http.enabled=truedbms.connector.http.listen_address=:7474#HTTPS Connector. There can be zero or one HTTPS connectors. 使用https协议dbms.connector.https.enabled=truedbms.connector.https.listen_address=:7473#Number of Neo4j worker threads. Neo4j线程数#dbms.threads.worker_count=#Logging configuration 日志配置#To enable HTTP logging, uncomment this line 要启用HTTP日志记录，请取消注释此行dbms.logs.http.enabled=true#Number of HTTP logs to keep. 要保留的HTTP日志数#dbms.logs.http.rotation.keep_number=5#Size of each HTTP log that is kept. 每个HTTP日志文件的大小dbms.logs.http.rotation.size=20m#To enable GC Logging, uncomment this line 要启用GC日志记录，请取消注释此行#dbms.logs.gc.enabled=true#GC Logging Options see http://docs.oracle.com/cd/E19957-01/819-0084-10/pt_tuningjava.html#wp57013 for more information. GC日志记录选项 有关详细信息，请参见http://docs.oracle.com/cd/E19957-01/819-0084-10/pt_tuningjava.html#wp57013#dbms.logs.gc.options=-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:+PrintTenuringDistribution#Number of GC logs to keep. 要保留的GC日志数#dbms.logs.gc.rotation.keep_number=5#Size of each GC log that is kept. 保留的每个GC日志文件的大小#dbms.logs.gc.rotation.size=20m#Size threshold for rotation of the debug log. If set to zero then no rotation will occur. Accepts a binary suffix &quot;k&quot;, &quot;m&quot; or &quot;g&quot;. 调试日志旋转的大小阈值。如果设置为零，则不会发生滚动(达到指定大小后切割日志文件)。接受二进制后缀“k”，“m”或“g”。#dbms.logs.debug.rotation.size=20m#Maximum number of history files for the internal log. 最多保存几个日志文件#dbms.logs.debug.rotation.keep_number=7### Miscellaneous configuration 其他配置#Enable this to specify a parser other than the default one. 启用此选项可指定除默认解析器之外的解析器#cypher.default_language_version=3.0#Determines if Cypher will allow using file URLs when loading data using `LOAD CSV`. Setting this value to `false` will cause Neo4j to fail `LOAD CSV` clauses that load data from the file system.# 确定当使用加载数据时，Cypher是否允许使用文件URL `LOAD CSV`。将此值设置为`false`将导致Neo4j不能通过互联网上的URL导入数据，`LOAD CSV` 会从文件系统加载数据。dbms.security.allow_csv_import_from_file_urls=true#Retention policy for transaction logs needed to perform recovery and backups. 执行恢复和备份所需的事务日志的保留策略#dbms.tx_log.rotation.retention_policy=7 days#Enable a remote shell server which Neo4j Shell clients can log in to. 启用Neo4j Shell客户端可以登录的远程shell服务器dbms.shell.enabled=true#The network interface IP the shell will listen on (use 0.0.0.0 for all interfaces).dbms.shell.host=127.0.0.1#The port the shell will listen on, default is 1337.dbms.shell.port=1337#Only allow read operations from this Neo4j instance. This mode still requires write access to the directory for lock purposes.# 只允许从Neo4j实例读取操作。此模式仍然需要对目录的写访问以用于锁定目的。#dbms.read_only=false#Comma separated list of JAX-RS packages containing JAX-RS resources, one package name for each mountpoint. The listed package names will be loaded under the mountpoints specified. Uncomment this line to mount the org.neo4j.examples.server.unmanaged.HelloWorldResource.java from neo4j-server-examples under /examples/unmanaged, resulting in a final URL of http://localhost:7474/examples/unmanaged/helloworld/&#123;nodeId&#125; 包含JAX-RS资源的JAX-RS软件包的逗号分隔列表，每个安装点一个软件包名称。所列出的软件包名称将在指定的安装点下加载。取消注释此行以装载org.neo4j.examples.server.unmanaged.HelloWorldResource.java neo4j-server-examples下/ examples / unmanaged，最终的URL为http//localhost7474/examples/unmanaged/helloworld/&#123;nodeId&#125;#dbms.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged#JVM Parameters JVM参数#G1GC generally strikes a good balance between throughput and tail latency, without too much tuning. G1GC通常在吞吐量和尾部延迟之间达到很好的平衡，而没有太多的调整。dbms.jvm.additional=-XX:+UseG1GC#Have common exceptions keep producing stack traces, so they can be debugged regardless of how often logs are rotated. 有共同的异常保持生成堆栈跟踪，所以他们可以被调试，无论日志被旋转的频率dbms.jvm.additional=-XX:-OmitStackTraceInFastThrow#Make sure that `initmemory` is not only allocated, but committed to the process, before starting the database. This reduces memory fragmentation, increasing the effectiveness of transparent huge pages. It also reduces the possibility of seeing performance drop due to heap-growing GC events, where a decrease in available page cache leads to an increase in mean IO response time. Try reducing the heap memory, if this flag degrades performance. 确保在启动数据库之前，“initmemory”不仅被分配，而且被提交到进程。这减少了内存碎片，增加了透明大页面的有效性。它还减少了由于堆增长的GC事件而导致性能下降的可能性，其中可用页面缓存的减少导致平均IO响应时间的增加。如果此标志降低性能，请减少堆内存。dbms.jvm.additional=-XX:+AlwaysPreTouch#Trust that non-static final fields are really final. This allows more optimizations and improves overall performance. NOTE: Disable this if you use embedded mode, or have extensions or dependencies that may use reflection or serialization to change the value of final fields! 信任非静态final字段真的是final。这允许更多的优化和提高整体性能。注意：如果使用嵌入模式，或者有可能使用反射或序列化更改最终字段的值的扩展或依赖关系，请禁用此选项！dbms.jvm.additional=-XX:+UnlockExperimentalVMOptionsdbms.jvm.additional=-XX:+TrustFinalNonStaticFields#Disable explicit garbage collection, which is occasionally invoked by the JDK itself. 禁用显式垃圾回收，这是偶尔由JDK本身调用。dbms.jvm.additional=-XX:+DisableExplicitGC#Remote JMX monitoring, uncomment and adjust the following lines as needed. Absolute paths to jmx.access and jmx.password files are required.# 远程JMX监视，取消注释并根据需要调整以下行。需要jmx.access和jmx.password文件的绝对路径。#Also make sure to update the jmx.access and jmx.password files with appropriate permission roles and passwords, the shipped configuration contains only a read only role called &#x27;monitor&#x27; with password &#x27;Neo4j&#x27;.# 还要确保使用适当的权限角色和密码更新jmx.access和jmx.password文件，所配置的配置只包含名为“monitor”的只读角色，密码为“Neo4j”。#For more details, see: http://download.oracle.com/javase/8/docs/technotes/guides/management/agent.html On Unix based systems the jmx.password file needs to be owned by the user that will run the server, and have permissions set to 0600. Unix系统，有关详情，请参阅：http：//download.oracle.com/javase/8/docs/technotes/guides/management/agent.html，jmx.password文件需要由运行服务器的用户拥有，并且权限设置为0600。#For details on setting these file permissions on Windows see: http://docs.oracle.com/javase/8/docs/technotes/guides/management/security-windows.html Windows系统 有关在设置这些文件权限的详细信息，请参阅：http://docs.oracle.com/javase/8/docs/technotes/guides/management/security-windows.html#dbms.jvm.additional=-Dcom.sun.management.jmxremote.port=3637#dbms.jvm.additional=-Dcom.sun.management.jmxremote.authenticate=true#dbms.jvm.additional=-Dcom.sun.management.jmxremote.ssl=false#dbms.jvm.additional=-Dcom.sun.management.jmxremote.password.file=/absolute/path/to/conf/jmx.password#dbms.jvm.additional=-Dcom.sun.management.jmxremote.access.file=/absolute/path/to/conf/jmx.access#Some systems cannot discover host name automatically, and need this line configured: 某些系统无法自动发现主机名，需要配置以下行：#dbms.jvm.additional=-Djava.rmi.server.hostname=$THE_NEO4J_SERVER_HOSTNAME#Expand Diffie Hellman (DH) key size from default 1024 to 2048 for DH-RSA cipher suites used in server TLS handshakes. 对于服务器TLS握手中使用的DH-RSA密码套件，将Diffie Hellman(DH)密钥大小从默认1024展开到2048。#This is to protect the server from any potential passive eavesdropping. 这是为了保护服务器免受任何潜在的被动窃听。dbms.jvm.additional=-Djdk.tls.ephemeralDHKeySize=2048### Wrapper Windows NT/2000/XP Service Properties 包装器Windows NT / 2000 / XP服务属性包装器Windows NT / 2000 / XP服务属性#WARNING - Do not modify any of these properties when an application using this configuration file has been installed as a service. WARNING - 当使用此配置文件的应用程序已作为服务安装时，不要修改任何这些属性。#Please uninstall the service before modifying this section. The service can then be reinstalled. 请在修改此部分之前卸载服务。 然后可以重新安装该服务。#Name of the service 服务的名称dbms.windows_service_name=neo4j### Other Neo4j system properties 其他Neo4j系统属性dbms.jvm.additional=-Dunsupported.dbms.udc.source=zip 常用配置文件12345678# 基本和默认配置文件相同，仅修改如下项。其他同原样dbms.active_database=20190718095032289977.dbdbms.directories.import=importdbms.memory.heap.initial_size=1024mdbms.memory.heap.max_size=1024mdbms.memory.pagecache.size=20gdbms.connectors.default_listen_address=192.168.100.162dbms.connectors.default_advertised_address=192.168.100.162 Neo4j 默认的配置文件 Neo4j默认配置文件的内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338(env) [fdm@fdm neo4j-community-3.3.5]$ cat conf/neo4j.conf#*****************************************************************# Neo4j configuration## For more details and a complete list of settings, please see# https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#*****************************************************************# The name of the database to mount# 数据库名称dbms.active_database=graph.db# Paths of directories in the installation.#dbms.directories.data=data#dbms.directories.plugins=plugins#dbms.directories.certificates=certificates#dbms.directories.logs=logs#dbms.directories.lib=lib#dbms.directories.run=run# This setting constrains all `LOAD CSV` import files to be under the `import` directory. Remove or comment it out to# allow files to be loaded from anywhere in the filesystem; this introduces possible security problems. See the# `LOAD CSV` section of the manual for details.# 默认数据库存储目录dbms.directories.import=import# Whether requests to Neo4j are authenticated.# To disable authentication, uncomment this line#dbms.security.auth_enabled=false# Enable this to be able to upgrade a store from an older version.dbms.allow_upgrade=true# Java Heap Size: by default the Java heap size is dynamically# calculated based on available system resources.# Uncomment these lines to set specific initial and maximum# heap size.#dbms.memory.heap.initial_size=512m#dbms.memory.heap.max_size=512mdbms.memory.heap.initial_size=2048mdbms.memory.heap.max_size=2048m# The amount of memory to use for mapping the store files, in bytes (or# kilobytes with the &#x27;k&#x27; suffix, megabytes with &#x27;m&#x27; and gigabytes with &#x27;g&#x27;).# If Neo4j is running on a dedicated server, then it is generally recommended# to leave about 2-4 gigabytes for the operating system, give the JVM enough# heap to hold all your transaction state and query context, and then leave the# rest for the page cache.# The default page cache memory assumes the machine is dedicated to running# Neo4j, and is heuristically set to 50% of RAM minus the max Java heap size.#dbms.memory.pagecache.size=10gdbms.memory.pagecache.size=20g#*****************************************************************# Network connector configuration#*****************************************************************# With default configuration Neo4j only accepts local connections.# To accept non-local connections, uncomment this line:# 默认填充在前端页面内的 IP, 建议固定IPdbms.connectors.default_listen_address=0.0.0.0# You can also choose a specific network interface, and configure a non-default# port for each connector, by setting their individual listen_address.# The address at which this server can be reached by its clients. This may be the server&#x27;s IP address or DNS name, or# it may be the address of a reverse proxy which sits in front of the server. This setting may be overridden for# individual connectors below.#dbms.connectors.default_advertised_address=localhost# 默认填充在前端页面内的 IP, 建议固定IPdbms.connectors.default_advertised_address=0.0.0.0# You can also choose a specific advertised hostname or IP address, and# configure an advertised port for each connector, by setting their# individual advertised_address.# Bolt connectordbms.connector.bolt.enabled=true#dbms.connector.bolt.tls_level=OPTIONAL# 默认后端端口#dbms.connector.bolt.listen_address=:7687# HTTP Connector. There must be exactly one HTTP connector.dbms.connector.http.enabled=true# 默认前端端口#dbms.connector.http.listen_address=:7474# HTTPS Connector. There can be zero or one HTTPS connectors.dbms.connector.https.enabled=true#dbms.connector.https.listen_address=:7473# Number of Neo4j worker threads.#dbms.threads.worker_count=# apoc setting [scfan] [2018-06-19]dbms.security.procedures.unrestricted=apoc.*apoc.import.file.enabled=true#*****************************************************************# SSL system configuration#*****************************************************************# Names of the SSL policies to be used for the respective components.# The legacy policy is a special policy which is not defined in# the policy configuration section, but rather derives from# dbms.directories.certificates and associated files# (by default: neo4j.key and neo4j.cert). Its use will be deprecated.# The policies to be used for connectors.## N.B: Note that a connector must be configured to support/require# SSL/TLS for the policy to actually be utilized.## see: dbms.connector.*.tls_level#bolt.ssl_policy=legacy#https.ssl_policy=legacy#*****************************************************************# SSL policy configuration#*****************************************************************# Each policy is configured under a separate namespace, e.g.# dbms.ssl.policy.&lt;policyname&gt;.*## The example settings below are for a new policy named &#x27;default&#x27;.# The base directory for cryptographic objects. Each policy will by# default look for its associated objects (keys, certificates, ...)# under the base directory.## Every such setting can be overriden using a full path to# the respective object, but every policy will by default look# for cryptographic objects in its base location.## Mandatory setting#dbms.ssl.policy.default.base_directory=certificates/default# Allows the generation of a fresh private key and a self-signed# certificate if none are found in the expected locations. It is# recommended to turn this off again after keys have been generated.## Keys should in general be generated and distributed offline# by a trusted certificate authority (CA) and not by utilizing# this mode.#dbms.ssl.policy.default.allow_key_generation=false# Enabling this makes it so that this policy ignores the contents# of the trusted_dir and simply resorts to trusting everything.## Use of this mode is discouraged. It would offer encryption but no security.#dbms.ssl.policy.default.trust_all=false# The private key for the default SSL policy. By default a file# named private.key is expected under the base directory of the policy.# It is mandatory that a key can be found or generated.#dbms.ssl.policy.default.private_key=# The private key for the default SSL policy. By default a file# named public.crt is expected under the base directory of the policy.# It is mandatory that a certificate can be found or generated.#dbms.ssl.policy.default.public_certificate=# The certificates of trusted parties. By default a directory named# &#x27;trusted&#x27; is expected under the base directory of the policy. It is# mandatory to create the directory so that it exists, because it cannot# be auto-created (for security purposes).## To enforce client authentication client_auth must be set to &#x27;require&#x27;!#dbms.ssl.policy.default.trusted_dir=# Client authentication setting. Values: none, optional, require# The default is to require client authentication.## Servers are always authenticated unless explicitly overridden# using the trust_all setting. In a mutual authentication setup this# should be kept at the default of require and trusted certificates# must be installed in the trusted_dir.#dbms.ssl.policy.default.client_auth=require# A comma-separated list of allowed TLS versions.# By default TLSv1, TLSv1.1 and TLSv1.2 are allowed.#dbms.ssl.policy.default.tls_versions=# A comma-separated list of allowed ciphers.# The default ciphers are the defaults of the JVM platform.#dbms.ssl.policy.default.ciphers=#*****************************************************************# Logging configuration#*****************************************************************# To enable HTTP logging, uncomment this line#dbms.logs.http.enabled=true# Number of HTTP logs to keep.#dbms.logs.http.rotation.keep_number=5# Size of each HTTP log that is kept.#dbms.logs.http.rotation.size=20m# To enable GC Logging, uncomment this line#dbms.logs.gc.enabled=true# GC Logging Options# see http://docs.oracle.com/cd/E19957-01/819-0084-10/pt_tuningjava.html#wp57013 for more information.#dbms.logs.gc.options=-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:+PrintTenuringDistribution# Number of GC logs to keep.#dbms.logs.gc.rotation.keep_number=5# Size of each GC log that is kept.#dbms.logs.gc.rotation.size=20m# Size threshold for rotation of the debug log. If set to zero then no rotation will occur. Accepts a binary suffix &quot;k&quot;,# &quot;m&quot; or &quot;g&quot;.#dbms.logs.debug.rotation.size=20m# Maximum number of history files for the internal log.#dbms.logs.debug.rotation.keep_number=7#*****************************************************************# Miscellaneous configuration#*****************************************************************# Enable this to specify a parser other than the default one.#cypher.default_language_version=3.0# Determines if Cypher will allow using file URLs when loading data using# `LOAD CSV`. Setting this value to `false` will cause Neo4j to fail `LOAD CSV`# clauses that load data from the file system.#dbms.security.allow_csv_import_from_file_urls=true# Retention policy for transaction logs needed to perform recovery and backups.dbms.tx_log.rotation.retention_policy=1 days# Enable a remote shell server which Neo4j Shell clients can log in to.#dbms.shell.enabled=true# The network interface IP the shell will listen on (use 0.0.0.0 for all interfaces).#dbms.shell.host=127.0.0.1# The port the shell will listen on, default is 1337.#dbms.shell.port=1337# Only allow read operations from this Neo4j instance. This mode still requires# write access to the directory for lock purposes.#dbms.read_only=false# Comma separated list of JAX-RS packages containing JAX-RS resources, one# package name for each mountpoint. The listed package names will be loaded# under the mountpoints specified. Uncomment this line to mount the# org.neo4j.examples.server.unmanaged.HelloWorldResource.java from# neo4j-server-examples under /examples/unmanaged, resulting in a final URL of# http://localhost:7474/examples/unmanaged/helloworld/&#123;nodeId&#125;#dbms.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged#********************************************************************# JVM Parameters#********************************************************************# G1GC generally strikes a good balance between throughput and tail# latency, without too much tuning.dbms.jvm.additional=-XX:+UseG1GC# Have common exceptions keep producing stack traces, so they can be# debugged regardless of how often logs are rotated.dbms.jvm.additional=-XX:-OmitStackTraceInFastThrow# Make sure that `initmemory` is not only allocated, but committed to# the process, before starting the database. This reduces memory# fragmentation, increasing the effectiveness of transparent huge# pages. It also reduces the possibility of seeing performance drop# due to heap-growing GC events, where a decrease in available page# cache leads to an increase in mean IO response time.# Try reducing the heap memory, if this flag degrades performance.dbms.jvm.additional=-XX:+AlwaysPreTouch# Trust that non-static final fields are really final.# This allows more optimizations and improves overall performance.# NOTE: Disable this if you use embedded mode, or have extensions or dependencies that may use reflection or# serialization to change the value of final fields!dbms.jvm.additional=-XX:+UnlockExperimentalVMOptionsdbms.jvm.additional=-XX:+TrustFinalNonStaticFields# Disable explicit garbage collection, which is occasionally invoked by the JDK itself.dbms.jvm.additional=-XX:+DisableExplicitGC# Remote JMX monitoring, uncomment and adjust the following lines as needed. Absolute paths to jmx.access and# jmx.password files are required.# Also make sure to update the jmx.access and jmx.password files with appropriate permission roles and passwords,# the shipped configuration contains only a read only role called &#x27;monitor&#x27; with password &#x27;Neo4j&#x27;.# For more details, see: http://download.oracle.com/javase/8/docs/technotes/guides/management/agent.html# On Unix based systems the jmx.password file needs to be owned by the user that will run the server,# and have permissions set to 0600.# For details on setting these file permissions on Windows see:# http://docs.oracle.com/javase/8/docs/technotes/guides/management/security-windows.html#dbms.jvm.additional=-Dcom.sun.management.jmxremote.port=3637#dbms.jvm.additional=-Dcom.sun.management.jmxremote.authenticate=true#dbms.jvm.additional=-Dcom.sun.management.jmxremote.ssl=false#dbms.jvm.additional=-Dcom.sun.management.jmxremote.password.file=/absolute/path/to/conf/jmx.password#dbms.jvm.additional=-Dcom.sun.management.jmxremote.access.file=/absolute/path/to/conf/jmx.access# Some systems cannot discover host name automatically, and need this line configured:#dbms.jvm.additional=-Djava.rmi.server.hostname=$THE_NEO4J_SERVER_HOSTNAME# Expand Diffie Hellman (DH) key size from default 1024 to 2048 for DH-RSA cipher suites used in server TLS handshakes.# This is to protect the server from any potential passive eavesdropping.dbms.jvm.additional=-Djdk.tls.ephemeralDHKeySize=2048# This mitigates a DDoS vector.dbms.jvm.additional=-Djdk.tls.rejectClientInitiatedRenegotiation=true#********************************************************************# Wrapper Windows NT/2000/XP Service Properties#********************************************************************# WARNING - Do not modify any of these properties when an application# using this configuration file has been installed as a service.# Please uninstall the service before modifying this section. The# service can then be reinstalled.# Name of the servicedbms.windows_service_name=neo4j#********************************************************************# Other Neo4j system properties#********************************************************************dbms.jvm.additional=-Dunsupported.dbms.udc.source=tarball Neo4j3.5-Config","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://fansichao.github.com/blog/tags/Neo4j/"}]},{"title":"HugeGraph-问题记录","slug":"Tools/Graph/hugegraph-issue","date":"2021-10-23T11:54:51.243Z","updated":"2021-10-23T11:54:51.243Z","comments":true,"path":"Tools/Graph/hugegraph-issue.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/hugegraph-issue.md/","excerpt":"","text":"问题未停止服务,修改配置文件后,服务无法重启hugegraph 服务启动失败(env) [scfan@scfan hugegraph-0.9.2]$ bin/stop-hugegraph.shno crontab for scfanThe HugeGraphServer monitor has been closedThe pid file /home/scfan/software/hugegraph/hugegraph-0.9.2/bin/pid doesn’t exist(env) [scfan@scfan hugegraph-0.9.2]$ bin/start-hugegraph.shThe port 8080 has already been used 解决方案:先关闭 hugegraph-studio-0.9.0] 即可重启 hugegraph 服务 多库合并操作 查询等…. Failed to update/query TaskStore问题场景: 使用 scylladb 初始化数据库时报错。 日志信息 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495(env) [scfan@scfan hugegraph-0.9.2]$ bin/init-store.shIniting HugeGraph Store...2019-10-12 11:27:04 1478 [main] [INFO ] com.baidu.hugegraph.cmd.InitStore [] - Init graph with config file: conf/hugegraph.properties2019-10-12 11:27:04 1683 [main] [INFO ] com.baidu.hugegraph.HugeGraph [] - Opening backend store &#x27;rocksdb&#x27; for graph &#x27;hugegraph&#x27;2019-10-12 11:27:04 1789 [main] [INFO ] com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore [] - Opening RocksDB with data path: /home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/schema2019-10-12 11:27:05 2126 [main] [ERROR] com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore [] - Failed to open RocksDB &#x27;/home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/schema&#x27; at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStdSessions.&lt;init&gt;(RocksDBStdSessions.java:122) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.openSessionPool(RocksDBStore.java:241) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:181) [hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:172) [hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:155) [hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.tx.AbstractTransaction.&lt;init&gt;(AbstractTransaction.java:72) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.tx.IndexableTransaction.&lt;init&gt;(IndexableTransaction.java:30) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.tx.SchemaTransaction.&lt;init&gt;(SchemaTransaction.java:68) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.cache.CachedSchemaTransaction.&lt;init&gt;(CachedSchemaTransaction.java:53) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph.openSchemaTransaction(HugeGraph.java:250) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph.access$300(HugeGraph.java:80) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph$TinkerpopTransaction.getOrNewTransaction(HugeGraph.java:730) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph$TinkerpopTransaction.schemaTransaction(HugeGraph.java:713) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph$TinkerpopTransaction.access$000(HugeGraph.java:588) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph.schemaTransaction(HugeGraph.java:301) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.store.BackendStoreSystemInfo.info(BackendStoreSystemInfo.java:66) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.store.BackendStoreSystemInfo.exist(BackendStoreSystemInfo.java:78) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.cmd.InitStore.initGraph(InitStore.java:99) [hugegraph-dist-0.9.2.jar:?] at com.baidu.hugegraph.cmd.InitStore.main(InitStore.java:87) [hugegraph-dist-0.9.2.jar:?]2019-10-12 11:27:05 2131 [main] [ERROR] com.baidu.hugegraph.HugeGraph [] - Failed to open schema transactioncom.baidu.hugegraph.backend.BackendException: Failed to open RocksDB &#x27;/home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/schema&#x27; at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:219) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:172) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:155) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.tx.AbstractTransaction.&lt;init&gt;(AbstractTransaction.java:72) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.tx.IndexableTransaction.&lt;init&gt;(IndexableTransaction.java:30) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.tx.SchemaTransaction.&lt;init&gt;(SchemaTransaction.java:68) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.cache.CachedSchemaTransaction.&lt;init&gt;(CachedSchemaTransaction.java:53) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph.openSchemaTransaction(HugeGraph.java:250) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph.access$300(HugeGraph.java:80) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph$TinkerpopTransaction.getOrNewTransaction(HugeGraph.java:730) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph$TinkerpopTransaction.schemaTransaction(HugeGraph.java:713) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph$TinkerpopTransaction.access$000(HugeGraph.java:588) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.HugeGraph.schemaTransaction(HugeGraph.java:301) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.store.BackendStoreSystemInfo.info(BackendStoreSystemInfo.java:66) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.store.BackendStoreSystemInfo.exist(BackendStoreSystemInfo.java:78) [hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.cmd.InitStore.initGraph(InitStore.java:99) [hugegraph-dist-0.9.2.jar:?] at com.baidu.hugegraph.cmd.InitStore.main(InitStore.java:87) [hugegraph-dist-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStdSessions.&lt;init&gt;(RocksDBStdSessions.java:122) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.openSessionPool(RocksDBStore.java:241) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:181) ~[hugegraph-rocksdb-0.9.2.jar:?]2019-10-12 11:27:05 2155 [task-db-worker-1] [INFO ] com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore [] - Opening RocksDB with data path: /home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/system2019-10-12 11:27:05 2161 [task-db-worker-1] [ERROR] com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore [] - Failed to open RocksDB &#x27;/home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/system&#x27; at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStdSessions.&lt;init&gt;(RocksDBStdSessions.java:122) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.openSessionPool(RocksDBStore.java:241) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:181) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:172) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:155) ~[hugegraph-rocksdb-0.9.2.jar:?] at com.baidu.hugegraph.backend.tx.AbstractTransaction.&lt;init&gt;(AbstractTransaction.java:72) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.tx.IndexableTransaction.&lt;init&gt;(IndexableTransaction.java:30) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.backend.tx.GraphTransaction.&lt;init&gt;(GraphTransaction.java:119) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.task.TaskScheduler$TaskTransaction.&lt;init&gt;(TaskScheduler.java:406) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.task.TaskScheduler.tx(TaskScheduler.java:111) ~[hugegraph-core-0.9.2.jar:0.9.2.0] at com.baidu.hugegraph.task.TaskScheduler.lambda$close$3(TaskScheduler.java:206) ~[hugegraph-core-0.9.2.jar:0.9.2.0]Exception in thread &quot;main&quot; com.baidu.hugegraph.HugeException: Failed to update/query TaskStore at com.baidu.hugegraph.task.TaskScheduler.call(TaskScheduler.java:397) at com.baidu.hugegraph.task.TaskScheduler.call(TaskScheduler.java:389) at com.baidu.hugegraph.task.TaskScheduler.close(TaskScheduler.java:205) at com.baidu.hugegraph.task.TaskManager.closeScheduler(TaskManager.java:73) at com.baidu.hugegraph.HugeGraph.close(HugeGraph.java:460) at com.baidu.hugegraph.cmd.InitStore.initGraph(InitStore.java:107) at com.baidu.hugegraph.cmd.InitStore.main(InitStore.java:87)Caused by: java.util.concurrent.ExecutionException: com.baidu.hugegraph.backend.BackendException: Failed to open RocksDB &#x27;/home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/system&#x27; at java.util.concurrent.FutureTask.report(FutureTask.java:122) at java.util.concurrent.FutureTask.get(FutureTask.java:192) at com.baidu.hugegraph.task.TaskScheduler.call(TaskScheduler.java:395) ... 6 moreCaused by: com.baidu.hugegraph.backend.BackendException: Failed to open RocksDB &#x27;/home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/system&#x27; at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:219) at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:172) at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:155) at com.baidu.hugegraph.backend.tx.AbstractTransaction.&lt;init&gt;(AbstractTransaction.java:72) at com.baidu.hugegraph.backend.tx.IndexableTransaction.&lt;init&gt;(IndexableTransaction.java:30) at com.baidu.hugegraph.backend.tx.GraphTransaction.&lt;init&gt;(GraphTransaction.java:119) at com.baidu.hugegraph.task.TaskScheduler$TaskTransaction.&lt;init&gt;(TaskScheduler.java:406) at com.baidu.hugegraph.task.TaskScheduler.tx(TaskScheduler.java:111) at com.baidu.hugegraph.task.TaskScheduler.lambda$close$3(TaskScheduler.java:206) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: org.rocksdb.RocksDBException: While lock file: /home/scfan/software/hugegraph/hugegraph_data/rocksdb_data/system/LOCK: Resource temporarily unavailable at org.rocksdb.RocksDB.open(Native Method) at org.rocksdb.RocksDB.open(RocksDB.java:286) at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStdSessions.&lt;init&gt;(RocksDBStdSessions.java:122) at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.openSessionPool(RocksDBStore.java:241) at com.baidu.hugegraph.backend.store.rocksdb.RocksDBStore.open(RocksDBStore.java:181) ... 13 more HugeGraph问题使用 scylladb 数据库初始化报错. 问题原因： 初始化时，未关闭 hugegraph,导致报错, 关闭后正常执行。","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"graph","slug":"module/graph","permalink":"http://fansichao.github.com/blog/categories/module/graph/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"hugegraph","slug":"hugegraph","permalink":"http://fansichao.github.com/blog/tags/hugegraph/"}]},{"title":"HugeGraph数据导入","slug":"Tools/Graph/hugegraph-load","date":"2021-10-23T11:54:51.243Z","updated":"2021-10-23T11:54:51.243Z","comments":true,"path":"Tools/Graph/hugegraph-load.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/hugegraph-load.md/","excerpt":"","text":"tags: HugeGraph 图库 2019 年 11 月 导入案例hugegraph-loader-0.9.0 目录结构 12345678910111213141516171819.├── bin│ └── hugegraph-loader├── conf│ └── log4j2.xml├── example│ ├── file│ ├── graph_schema.groovy│ ├── graph_struct.json│ ├── hdfs│ └── mysql├── lib├── LICENSE├── logs│ ├── edge_insert_error.data│ ├── hugegraph-loader.log│ ├── parse_error.data│ └── vertex_insert_error.data└── README.md 数据文件 支持 csv/text/json 等(详情见官网) 123456789==&gt; cust_01_100000.csv &lt;==mob_phone:string,birthday:int,name:string,cust_no:string,cust_namespell:string,address:string,sex:string,id:ID,cust_certtype:string13965170263,19340324,巢海燕,350124193403249522,chaohaiyan,西藏自治区通辽市海港蔚路x座 213898,女,350124193403249522,213844740188,19950101,蒋静,411281199501016156,jiangjing,安徽省金凤县萧山六安路X座 814241,男,411281199501016156,0==&gt; tran_01_148111.csv &lt;==tran_amt:float,tran_date:int,:START_ID,tran_cnt:int,:END_ID455229.75,20170103,110000194107111151,1,14112319770709940883693.8,20170101,110000194508084959,1,513435194206212598 graph_schema.groovy(指定 Schema 文件) 12345678910111213141516171819202122232425schema.propertyKey(&quot;id&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;mob_phone&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;birthday&quot;).asInt().ifNotExist().create();schema.propertyKey(&quot;name&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;cust_no&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;cust_namespell&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;address&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;sex&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;cust_certtype&quot;).asText().ifNotExist().create();schema.propertyKey(&quot;tran_amt&quot;).asDouble().ifNotExist().create();schema.propertyKey(&quot;tran_date&quot;).asInt().ifNotExist().create();schema.propertyKey(&quot;tran_cnt&quot;).asInt().ifNotExist().create();schema.vertexLabel(&quot;cust&quot;).properties(&quot;id&quot;, &quot;mob_phone&quot;, &quot;birthday&quot;, &quot;name&quot;, &quot;cust_no&quot;, &quot;cust_namespell&quot;, &quot;address&quot;, &quot;sex&quot;, &quot;cust_certtype&quot;).primaryKeys(&quot;id&quot;).ifNotExist().create();schema.indexLabel(&quot;custByName&quot;).onV(&quot;cust&quot;).by(&quot;name&quot;).secondary().ifNotExist().create();schema.indexLabel(&quot;custByBirthday&quot;).onV(&quot;cust&quot;).by(&quot;birthday&quot;).range().ifNotExist().create();schema.edgeLabel(&quot;tran&quot;).sourceLabel(&quot;cust&quot;).targetLabel(&quot;cust&quot;).properties(&quot;tran_amt&quot;, &quot;tran_date&quot;, &quot;tran_cnt&quot;).ifNotExist().create();schema.indexLabel(&quot;tranByTran_amt&quot;).onE(&quot;tran&quot;).by(&quot;tran_amt&quot;).secondary().ifNotExist().create();schema.indexLabel(&quot;tranByTran_date&quot;).onE(&quot;tran&quot;).by(&quot;tran_date&quot;).range().ifNotExist().create(); graph_struct.json 导入结构文件 (结构文件错误时,导入会出现奇怪报错,注意检查其中参数。存在多指定了 headers 导致报错 Error: More than 1 vertices parsing error … Stopping) 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;vertices&quot;: [ &#123; &quot;label&quot;: &quot;cust&quot;, &quot;input&quot;: &#123; &quot;type&quot;: &quot;file&quot;, &quot;path&quot;: &quot;/data/test_data/graph_data/cust.csv&quot;, &quot;format&quot;: &quot;CSV&quot;, &quot;charset&quot;: &quot;UTF-8&quot; &#125;, &quot;mapping&quot;: &#123; &quot;mob_phone:string&quot;: &quot;mob_phone&quot;, &quot;birthday:int&quot;: &quot;birthday&quot;, &quot;name:string&quot;: &quot;name&quot;, &quot;cust_no:string&quot;: &quot;cust_no&quot;, &quot;cust_namespell:string&quot;: &quot;cust_namespell&quot;, &quot;address:string&quot;: &quot;address&quot;, &quot;sex:string&quot;: &quot;sex&quot;, &quot;id:ID&quot;: &quot;id&quot;, &quot;cust_certtype:string&quot;: &quot;cust_certtype&quot; &#125; &#125; ], &quot;edges&quot;: [ &#123; &quot;label&quot;: &quot;tran&quot;, &quot;source&quot;: [&quot;:START_ID&quot;], &quot;target&quot;: [&quot;:END_ID&quot;], &quot;input&quot;: &#123; &quot;type&quot;: &quot;file&quot;, &quot;path&quot;: &quot;/data/test_data/graph_data/tran.csv&quot;, &quot;format&quot;: &quot;CSV&quot;, &quot;charset&quot;: &quot;UTF-8&quot; &#125;, &quot;mapping&quot;: &#123; &quot;:START_ID&quot;: &quot;id&quot;, &quot;:END_ID&quot;: &quot;id&quot;, &quot;tran_amt:float&quot;: &quot;tran_amt&quot;, &quot;tran_date:int&quot;: &quot;tran_date&quot;, &quot;tran_cnt:int&quot;: &quot;tran_cnt&quot; &#125; &#125; ]&#125; 导入命令 hugegraph-loader-0.9.0 目录下执行 1234567891011121314151617181920212223242526272829303132bin/hugegraph-loader -g hugegraph -f example/graph_struct.json -s example/graph_schema.groovy(fenv) [fdm@neo4j hugegraph-loader-0.9.0]$ time bin/hugegraph-loader -g hugegraph -f example/graph_struct.json -s example/graph_schema.groovySLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/home/fdm/software/hugegraph/hugegraph-loader-0.9.0/lib/log4j-slf4j-impl-2.8.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/home/fdm/software/hugegraph/hugegraph-loader-0.9.0/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]log4j:WARN No appenders could be found for logger (org.apache.http.client.protocol.RequestAddCookies).log4j:WARN Please initialize the log4j system properly.log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.Vertices has been imported: 149299Edges has been imported: 98812---------------------------------------------vertices results: parse failure vertices : 0 insert failure vertices : 0 insert success vertices : 149299---------------------------------------------edges results: parse failure edges : 0 insert failure edges : 0 insert success edges : 98812---------------------------------------------time results: vertices loading time : 2 edges loading time : 1 total loading time : 4real 0m9.967suser 0m37.601ssys 0m2.050s","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"graph","slug":"module/graph","permalink":"http://fansichao.github.com/blog/categories/module/graph/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"hugegraph","slug":"hugegraph","permalink":"http://fansichao.github.com/blog/tags/hugegraph/"}]},{"title":"hugegraph-使用文档","slug":"Tools/Graph/hugegraph-info","date":"2021-10-23T11:54:51.242Z","updated":"2021-10-23T11:54:51.242Z","comments":true,"path":"Tools/Graph/hugegraph-info.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/hugegraph-info.md/","excerpt":"","text":"文档信息: HugeGraph 说明 简介 优缺点 同行对比 安装部署 配置说明 其他等 HugeGragh0.9.0 环境依赖: JDK-1.8 后端数据库要求 ScyllaDB CentOS 7.3+ RocksDB GCC-4.3.0(GLIBCXX_3.4.10)+ Hbase JDK1.8+ scylladb 和 hbase 都支持容量横向扩展(容量上它们一般不会是瓶颈)，scylladb 的定位是低延迟(没有 Java GC 停顿、高效的网络库等)，hbase 生态更加完善及稳定性较好。 当前环境 CentOS7 GCC-4.4.7 JDK-1.8 HugeGragh==0.9.0 TODO 数据冗余，多服务区，异常重连，数据删除等问题,性能测试后续测试重点: 1、实际数据的导入性能测试 2、现有业务逻辑查询语法实现(API 或 Gremlin，优先 API) 3、查询效率测试 4、多图库数据同步使用测试 5、任务调度管理 API 使用测试 6、底层存储替换测试 HugeGraph 简介HugeGraph是百度在 2018 年中旬开源的一款图数据库(Graph Database)系统，可以存储海量的顶点(Vertex)和边(Edge)。实现了 Apache ThinkerPop 3[1]框架，支持 Gremlin 图查询语言。HugeGraph 支持多用户并行操作，用户可输入 Gremlin 查询语句，并及时得到图查询结果。也可以再用户程序中调用 hugeGraph API 进行图分析或查询。 本系统具备如下特点: 易用: HugeGraph 支持 Gremlin 图查询语言与 Restful API，同时提供图检索常用接口，具备功能齐全的周边工具，轻松实现基于图的各种查询分析运算。 高效: HugeGraph 在图存储和图计算方面做了深度优化，提供多种批量导入工具，轻松完成百亿数据快速导入，通过优化过的查询达到图检索的毫秒级响应。支持数千用户并发的在线实时操作。 通用: HugeGraph 支持 Apache Gremlin 标准图查询语言和 Property Graph 标准图建模方法，支持基于图的 OLTP 和 OLAP 方案。集成 Apache Hadoop 及 Apache Spark 大数据平台。 可扩展: 支持分布式存储、数据多副本及横向扩容，内置多种后端存储引擎，也可插件式轻松扩展后端存储引擎。 开放: HugeGraph 代码开源(Apache 2 License)，客户可自主修改定制，选择性回馈开源社区。 本系统的功能包括但不限于 支持从 TXT、CSV、JSON 等格式的文件中批量导入数据 具备可视化操作界面，降低用户使用门槛 优化的图接口: 最短路径(Shortest Path)、K 步连通子图(K-neighbor)、K 步到达邻接点(K-out)等 基于 Apache TinkerPop3 框架实现，支持 Gremlin 图查询语言 支持属性图，顶点和边均可添加属性，支持丰富的属性类型 具备独立的 Schema 元数据信息，方便第三方系统集成 支持多顶点 ID 策略: 支持主键 ID、支持自动生成 ID、支持用户自定义字符串 ID、支持用户自定义数字 ID 可以对边和顶点的属性建立索引，支持精确查询、范围查询、全文检索 存储系统采用插件方式，支持 RocksDB、Cassandra、ScyllaDB、HBase、Palo、MySQL 以及 InMemory 等 与 Hadoop、Spark GraphX 等大数据系统集成，支持 Bulk Load 操作 对图数据库的核心功能(例如批量写入、最短路径、N 度关系等)做了重点优化，与常见图数据库 Neo4j 和 TitanDB 等相比较，HugeGraph 拥有明显的性能优势. HugeGraph 支持 HBase 和 Cassandra 等常见的分布式系统作为其存储引擎来实现水平扩展。 支持任务查看,任务撤销。 其他等 支持分布式存储: 支持底层使用 HBase、Cassandra 等分布式存储 backend 支持多图配置: 能够支持配置多个图库空间(未明确上线)，可用于支持临时或单次的数据分析。(但需配套编写调度功能，指定分析库) 导入速率较快: 提供 HugeGraph-Loader，可在线或离线导入数据，服务无需重启，可指定导入图库位置 API 接口已实现部分业务逻辑: 多步邻居，两者最短路径，两者全部路径， 提供任务监控 API 接口: 能够支持任务的状态查询并允许终止任务。 HugeGraph 优缺点 hugeGraph-Github 缺点: 顶点和边不支持多 label 暂不支持 批量删除节点/边 软件使用安装部署HugeGragh 共有如下工具 一键部署: 通过部署工具简单轻松的一键部署所有组件。参考 hugegraph-tools deploy。 可视化界面: 基于 Web 的可视化环境，提供图操作界面、图数据展示与分析。参考 hugegraph-studio。 导入工具: 数据导入工具，支持从 txt、csv、json 等格式文件导入到 HugeGraph。参考 hugegraph-loader。 导出工具: 数据导出工具，可将顶点及关联边导出到文件，支持用户实现 formatter 自定义格式。参考 hugegraph-tools/dump。 备份恢复工具: 数据备份与恢复工具，支持定时备份、手动备份、手动恢复等功能。参考 hugegraph-tools/backup&amp;restore。 Gremlin 任务工具: Gremlin 任务执行工具，支持同步执行 Gremlin 查询与分析(OLTP)，支持异步执行 Gremlin 任务(OLAP)。参考 hugegraph-tools/gremlin。 集成 Spark GraphX 工具(Github 已下架): 基于 Spark GraphX 的大数据环境下的图分析工具。参考 hugegraph-spark。 HugeGragh 框架模块 HugeGraph-Server: HugeGraph-Server 是 HugeGraph 项目的核心部分，包含 Core、Backend、API 等子模块； Core: 图引擎实现，向下连接 Backend 模块，向上支持 API 模块； Backend: 实现将图数据存储到后端，支持的后端包括: Memory、Cassandra、ScyllaDB、RocksDB、HBase 以及 Mysql，用户根据实际情况选择一种即可； API: 内置 REST Server，向用户提供 RESTful API，同时兼容 Gremlin 查询。 HugeGraph-Client: HugeGraph-Client 提供了 RESTful API 的客户端，用于连接 HugeGraph-Server，目前仅实现 Java 版，其他语言用户可自行实现； HugeGraph-Studio: HugeGraph-Studio 是 HugeGraph 的 Web 可视化工具，可用于执行 Gremlin 语句及展示图； HugeGraph-Loader: HugeGraph-Loader 是基于 HugeGraph-Client 的数据导入工具，将普通文本数据转化为图形的顶点和边并插入图形数据库中； HugeGraph-Spark: 基于 Spark GraphX 的图分析工具 ，HugeGraph-Spark 能在图上做并行计算，例如 PageRank 算法等； HugeGraph-Tools: HugeGraph-Tools 是 HugeGraph 的部署和管理工具，包括管理图、备份/恢复、Gremlin 执行等功能。 总结: 部署 HugeGraph 需要 HugeGraph-Server，在网页上操作图需要 HugeGraph-Studio。 需要安装 HugeGraph-Server HugeGraph-Studio HugeGraph-Loader 下载解压即用，详情见HugeGraph 官网 如需安装 Hbase,请参考《Hbase 安装文档》 安装部署命令 1234# 默认CentOS会自带这些包,Docker中的镜像需要自行安装# 解决问题 line 92: crontab: command not foundyum -y install lsof crontabs 配置文件修改hugegraph-0.9.2/conf/rest-server.properties ServerIP 地址和端口.配置 0.0.0.0 使其他机器可以访问。 123456789101112(fenv) [fdm@neo4j hugegraph]$ cat hugegraph-0.9.2/conf/rest-server.properties# bind url#restserver.url=http://127.0.0.1:8080restserver.url=http://0.0.0.0:8080# graphs list with pair NAME:CONF_PATHgraphs=[hugegraph:conf/hugegraph.properties]# authentication#auth.require_authentication=#auth.admin_token=#auth.user_tokens=[] 配置数据库-RocksDB RocksDB 默认数据库无需配置 配置数据库-ScyllaDB参考文档《ScyllaDB》 配置数据库-HBase参考文档《Hbase 安装文档》 特殊声明：由于安装 Hbase，需要先安装 Hadoop，配置 ResourceManager|DataNode|NodeManager|SecondaryNameNode|NameNode。其中 ResourceManager 的端口 8080 和 HugeGraph 端口冲突，需要先修改 ResourceManager 端口 1234567# vim ./share/doc/hadoop/hadoop-yarn/hadoop-yarn-common/yarn-default.xml 134 &lt;property&gt; 135 &lt;description&gt;The http address of the RM web application.&lt;/description&gt; 136 &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt; 137 &lt;value&gt;$&#123;yarn.resourcemanager.hostname&#125;:8081&lt;/value&gt; 138 &lt;/property&gt;# 修改点，原 8080 修改为 8081。 重启Hadoop服务 stop-all.sh &amp; start-all.sh 配置 HugeGraph 连接数据库修改配置文件 初始化数据库 bin/init-store.sh 初始化数据库时，必须先 bin/stop-hugegraph.sh ,否则可能初始化失败。 启动服务 bin/start-hugegraph.sh 启动服务时,必须先关闭 hugegraph-studio 服务。否则会启动失败,报错端口已被使用。 HugeGragh 支持多图库模式TODO (未发现多库查询方法) 参考链接: HugeGraph 配置 常用命令一键重启脚本 123456789101112restart_hugegraph()&#123; hugegraph_pwd=&quot;/home/scfan/software/hugegraph&quot; # 关闭服务 ps anx | grep hugegraph-studio|awk &#x27;&#123;print $1&#125;&#x27; | xargs kill -9 cd $hugegraph_pwd/hugegraph-0.9.2 &amp;&amp; bin/stop-hugegraph.sh # 启动服务 cd $hugegraph_pwd/hugegraph-studio-0.9.0 &amp;&amp; nohup bin/hugegraph-studio.sh &amp; # Server修改配置后,需要关闭 studio 才可以启动 cd $hugegraph_pwd/hugegraph-0.9.2 &amp;&amp; bin/start-hugegraph.sh&#125;restart_hugegraph 其他命令 123456789# 数据导入命令cd /home/scfan/software/hugegraph/hugegraph/hugegraph-loader-0.9.0time bin/hugegraph-loader -g hugegraph -f example/graph_struct.json -s example/graph_schema.groovy# 删除整个图库数据curl -XDELETE &quot;http://192.168.100.162:8080/graphs/hugegraph/clear?confirm_message=I&#x27;m+sure+to+delete+all+data&quot;# 支持任务撤销PUT http://localhost:8080/graphs/hugegraph/tasks/2?action=cancel 可视化界面 Studio: http://192.168.172.72:8088/后端端口 Server: http://192.168.172.72:8080/graphs HugeGraph 数据导入官方链接: HugeGraph-Loader Quick Start HugeGraph-Loader 是 HugeGragh 的数据导入组件，能够将多种数据源的数据转化为图的顶点和边并批量导入到图数据库中。 目前支持的数据源包括: 本地磁盘文件或目录，支持压缩文件 HDFS 文件或目录，支持压缩文件 部分关系型数据库，如 MySQL 参考资源 HugeGraph 的 Github 链接 HugeGraph 初使用 官方文档 百度安全开源大规模图数据库 HugeGraph 十亿数据的快速导入 图数据库功能说明 图数据库对比 图库热度排行榜hugegraph_DBengine 图库排行榜 图库综合对比","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"graph","slug":"module/graph","permalink":"http://fansichao.github.com/blog/categories/module/graph/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Graph","slug":"Graph","permalink":"http://fansichao.github.com/blog/tags/Graph/"}]},{"title":"hugegraph-部署文档","slug":"Tools/Graph/hugegraph-install","date":"2021-10-23T11:54:51.242Z","updated":"2021-10-23T11:54:51.243Z","comments":true,"path":"Tools/Graph/hugegraph-install.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/hugegraph-install.md/","excerpt":"","text":"安装部署HugeGragh 共有如下工具 一键部署: 通过部署工具简单轻松的一键部署所有组件。参考 hugegraph-tools deploy。 可视化界面: 基于 Web 的可视化环境，提供图操作界面、图数据展示与分析。参考 hugegraph-studio。 导入工具: 数据导入工具，支持从 txt、csv、json 等格式文件导入到 HugeGraph。参考 hugegraph-loader。 导出工具: 数据导出工具，可将顶点及关联边导出到文件，支持用户实现 formatter 自定义格式。参考 hugegraph-tools/dump。 备份恢复工具: 数据备份与恢复工具，支持定时备份、手动备份、手动恢复等功能。参考 hugegraph-tools/backup&amp;restore。 Gremlin 任务工具: Gremlin 任务执行工具，支持同步执行 Gremlin 查询与分析(OLTP)，支持异步执行 Gremlin 任务(OLAP)。参考 hugegraph-tools/gremlin。 集成 Spark GraphX 工具(Github 已下架): 基于 Spark GraphX 的大数据环境下的图分析工具。参考 hugegraph-spark。 HugeGragh 框架模块 HugeGraph-Server: HugeGraph-Server 是 HugeGraph 项目的核心部分，包含 Core、Backend、API 等子模块； Core: 图引擎实现，向下连接 Backend 模块，向上支持 API 模块； Backend: 实现将图数据存储到后端，支持的后端包括: Memory、Cassandra、ScyllaDB、RocksDB、HBase 以及 Mysql，用户根据实际情况选择一种即可； API: 内置 REST Server，向用户提供 RESTful API，同时兼容 Gremlin 查询。 HugeGraph-Client: HugeGraph-Client 提供了 RESTful API 的客户端，用于连接 HugeGraph-Server，目前仅实现 Java 版，其他语言用户可自行实现； HugeGraph-Studio: HugeGraph-Studio 是 HugeGraph 的 Web 可视化工具，可用于执行 Gremlin 语句及展示图； HugeGraph-Loader: HugeGraph-Loader 是基于 HugeGraph-Client 的数据导入工具，将普通文本数据转化为图形的顶点和边并插入图形数据库中； HugeGraph-Spark: 基于 Spark GraphX 的图分析工具 ，HugeGraph-Spark 能在图上做并行计算，例如 PageRank 算法等； HugeGraph-Tools: HugeGraph-Tools 是 HugeGraph 的部署和管理工具，包括管理图、备份/恢复、Gremlin 执行等功能。 总结: 部署 HugeGraph 需要 HugeGraph-Server，在网页上操作图需要 HugeGraph-Studio。 需要安装 HugeGraph-Server HugeGraph-Studio HugeGraph-Loader 下载解压即用，详情见HugeGraph 官网 安装部署命令 123456# 默认CentOS会自带这些包,Docker中的镜像需要自行安装# 解决问题 line 92: crontab: command not foundyum -y install lsof crontabs# 解压即用，安装包详见 Packages/hugegraph 下 配置文件详解hugegraph.propertiescat conf/hugegraph.properties 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# gremlin entrence to create graphgremlin.graph=com.baidu.hugegraph.HugeFactory# cache config#schema.cache_capacity=1048576#graph.cache_capacity=10485760#graph.cache_expire=600# schema illegal name template#schema.illegal_name_regex=\\s+|~.*#vertex.default_label=vertex# 使用 rocksdb 方式，配置目录 rocksdb_data &amp; rocksdb_wal, 需要自建backend=rocksdbserializer=binaryrocksdb.data_path=/data/hugegraph/rocksdb_datarocksdb.wal_path=/data/hugegraph/rocksdb_wal#backend=scylladb#serializer=scylladb# Memory 临时存储在内存中,重启服务器后数据消失# backend=memory# serializer=text# 设置存储库名称store=hugegraph# rocksdb backend config#rocksdb.data_path=/path/to/disk#rocksdb.wal_path=/path/to/disk# cassandra backend configcassandra.host=0.0.0.0cassandra.port=9042cassandra.username=cassandra.password=#cassandra.connect_timeout=5#cassandra.read_timeout=20#cassandra.keyspace.strategy=SimpleStrategy#cassandra.keyspace.replication=3# mysql backend config#jdbc.url=jdbc:mysql://127.0.0.1:3306#jdbc.username=root#jdbc.password=#jdbc.reconnect_max_times=3#jdbc.reconnect_interval=3# palo backend config#palo.host=127.0.0.1#palo.poll_interval=10#palo.temp_dir=./palo-data#palo.file_limit_size=32 rest-server.properties12345678910111213141516cat conf/rest-server.properties# bind url# 配置为 0.0.0.0 使得其他机器可以访问#restserver.url=http://127.0.0.1:8080restserver.url=http://0.0.0.0:8080# 设置 图库对应使用的配置文件# graphs list with pair NAME:CONF_PATHgraphs=[hugegraph:conf/hugegraph.properties]# authentication#auth.require_authentication=#auth.admin_token=#auth.user_tokens=[] gremlin-server123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869cat conf/gremlin-server.yamlscriptEvaluationTimeout: 30000# If you want to start gremlin-server for gremlin-console(web-socket),# please change `HttpChannelizer` to `WebSocketChannelizer` or comment this line.channelizer: org.apache.tinkerpop.gremlin.server.channel.HttpChannelizergraphs: &#123; # 库名称 &amp; 库配置文件 hugegraph: conf/hugegraph.properties&#125;plugins: - com.baidu.hugegraphscriptEngines: &#123; gremlin-groovy: &#123; imports: [java.lang.Math], staticImports: [java.lang.Math.PI], scripts: [scripts/empty-sample.groovy] &#125;&#125;serializers: - &#123; className: org.apache.tinkerpop.gremlin.driver.ser.GryoLiteMessageSerializerV1d0, config: &#123; serializeResultToString: false, ioRegistries: [com.baidu.hugegraph.io.HugeGraphIoRegistry] &#125; &#125; - &#123; className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV1d0, config: &#123; serializeResultToString: true, ioRegistries: [com.baidu.hugegraph.io.HugeGraphIoRegistry] &#125; &#125; - &#123; className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerGremlinV1d0, config: &#123; serializeResultToString: false, ioRegistries: [com.baidu.hugegraph.io.HugeGraphIoRegistry] &#125; &#125; - &#123; className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerGremlinV2d0, config: &#123; serializeResultToString: false, ioRegistries: [com.baidu.hugegraph.io.HugeGraphIoRegistry] &#125; &#125; - &#123; className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV1d0, config: &#123; serializeResultToString: false, ioRegistries: [com.baidu.hugegraph.io.HugeGraphIoRegistry] &#125; &#125;metrics: &#123; consoleReporter: &#123;enabled: false, interval: 180000&#125;, csvReporter: &#123;enabled: true, interval: 180000, fileName: /tmp/gremlin-server-metrics.csv&#125;, jmxReporter: &#123;enabled: false&#125;, slf4jReporter: &#123;enabled: false, interval: 180000&#125;, gangliaReporter: &#123;enabled: false, interval: 180000, addressingMode: MULTICAST&#125;, graphiteReporter: &#123;enabled: false, interval: 180000&#125;&#125;maxInitialLineLength: 4096maxHeaderSize: 8192maxChunkSize: 8192maxContentLength: 65536maxAccumulationBufferComponents: 1024resultIterationBatchSize: 64writeBufferLowWaterMark: 32768writeBufferHighWaterMark: 65536ssl: &#123; enabled: false&#125; 配置 HugeGraph 连接数据库修改配置文件 第一次使用 HugeGraph 时，需要初始化数据库 bin/init-store.sh 初始化数据库时，必须先 bin/stop-hugegraph.sh ,否则可能初始化失败。 启动服务 bin/start-hugegraph.sh 启动服务时,必须先关闭 hugegraph-studio 服务。否则会启动失败,报错端口已被使用。 查看浏览器页面 前台操作页面 http://0.0.0.0:8088/ 后台页面: http://0.0.0.0:8080/graphs","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"graph","slug":"module/graph","permalink":"http://fansichao.github.com/blog/categories/module/graph/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Graph","slug":"Graph","permalink":"http://fansichao.github.com/blog/tags/Graph/"}]},{"title":"HugeGragh-使用文档","slug":"Tools/Graph/hugegraph-cmd","date":"2021-10-23T11:54:51.241Z","updated":"2021-10-23T11:54:51.242Z","comments":true,"path":"Tools/Graph/hugegraph-cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/hugegraph-cmd.md/","excerpt":"","text":"tags: HugeGraph 图库 2019 年 11 月 HugeGraph 使用 Github-PyHugeGraphClient TODO Gremlin 语法 问题项问题 2-数据查询时,无法对属性进行大小过滤 关于条件查询顶点的两个疑问 iterateVertices 接口目前没有提供小于及大于语义的条件查询，仅提供了等于条件查询。Gremlin 更加自由，完全支持小于条件查询，但是 Gremlin 语法目前没有支持分页的机制，所以如你所说也没办法分页。如果结果集大于百万以上，建议每次查询再加上大于条件，相当于分为一个一个时间区间进行查询。 问题 1-数据导入时,发现部分边缺失(起始顶点和结束顶点重复时)问题场景: 使用 HugeGraph-loader 导入数据时，发现原文件 edge 26663，实际入库的只有 26661 对比 数据文件 edge - HugeGraph 数据 123 cust_certno data_mark peer_certno tran_amt tran_cnt tran_date6615 310116199507048741 mark 331102197108166692 468577630.0 4 2017021316277 431227199801126424 mark 445300194807241683 40649080.0 4 20170206 查询数据文件 123(env) [scfan@fdm hugegraph_data]$ grep -rn &quot;310116199507048741&quot; edge_mark_CUSTACCTTRANJRNL.csv | grep 3311021971081666926617:468577630.0,20170213,310116199507048741,4,331102197108166692,mark,310116199507048741,3311021971081666926618:167389.0,20170224,310116199507048741,4,331102197108166692,mark,310116199507048741,331102197108166692 问题原因: 发现由于 起始顶点-结束顶点 相同时，HugeGraph 未录入第二条数据. 根据 起始顶点和结束顶点 对原数据文件去重，仅发现两条相同的 起始顶点-结束顶点 数据，都未导入。 解决方案: 如何创建两个顶点间的多边 Hugegraph 中 edgelabel 的 sortKey 方法调用 代码样例: 1234567891011548 # https://github.com/hugegraph/hugegraph/issues/97 指定 sortkeys,用于在两个节点中增加多条边549 # sortKeys中字段必须在属性中,重复字段报错! 必须建库第一次使用,后续创建无效!! exp: .multiTimes().sortKeys(&quot;tran_date&quot;,&quot;tran_cnt&quot;)550 sortKeys = list(set([i for i in sortKeys if i in cols and i not in primary_cols]))551 sortKeys_val = str(sortKeys).replace(&#x27;)&#x27;, &#x27;&#x27;).replace(&#x27;(&#x27;, &#x27;&#x27;).replace(&#x27;]&#x27;, &#x27;&#x27;).replace(&#x27;[&#x27;, &#x27;&#x27;)552 if bool(sortKeys):553 schema_line = &#x27;schema.edgeLabel(&quot;%s&quot;).sourceLabel(&quot;%s&quot;).targetLabel(&quot;%s&quot;).properties(%s).multiTimes().sortKeys(%s).ifNotExist().create();&#x27; % (554 edge_label, node_label, node_label, properties, sortKeys_val)555 else:556 schema_line = &#x27;schema.edgeLabel(&quot;%s&quot;).sourceLabel(&quot;%s&quot;).targetLabel(&quot;%s&quot;).properties(%s).ifNotExist().create();&#x27; % (557 edge_label, node_label, node_label, properties)558 schema_list.append(schema_line) 界面样例: 其他待完成 restful 和 gremlin 接口的使用场景，底层区别简介 功能字符串属性的模糊查询字符串属性的模糊查询 123g.V().hasLabel(&quot;person&quot;).has(&quot;lived&quot;, Text.contains(&quot;海淀区&quot;))# Text.contains只支持分词后的全词匹配.# 用 child来搜索&quot;My children&quot;可能会搜索不到.目前hugegraph还无法支持这种搜索，建议上层使用ES等索引库来实现这种模糊查询 使用 HugeGraph 怎么求解最短路径 Gremlin 语法https://blog.csdn.net/weixin_42076409/article/details/80856911 http://tang.love/2018/11/15/gremlin_traversal_language/ Gremlin 基础语法-条件和过滤Gremlin – 常用查询用法 深入学习 Gremlin(2)：边的遍历操作gremlin 语句详解 GremLin 官方文档 深入学习 Gremlin(3)：has 条件过滤深入学习 Gremlin(9)：条件和过滤 深入学习 Gremlin(10)：逻辑运算 深入学习 Gremlin(5)：查询路径 path深入学习 Gremlin(13)：路径选取与过滤Gremlin 常用语法总结","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"graph","slug":"module/graph","permalink":"http://fansichao.github.com/blog/categories/module/graph/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"graph","slug":"graph","permalink":"http://fansichao.github.com/blog/tags/graph/"}]},{"title":"Gremlin-常用命令","slug":"Tools/Graph/gremlin-cmd","date":"2021-10-23T11:54:51.241Z","updated":"2021-10-23T11:54:51.241Z","comments":true,"path":"Tools/Graph/gremlin-cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Graph/gremlin-cmd.md/","excerpt":"","text":"路径查询12345678910111213141516171819hugegraph.traversal()想要同时获得经过的边的信息，可以用 bothE().otherV()替换 both()# 最短路径g.V(&quot;1:4822&quot;).repeat(bothE().otherV().simplePath()).until(hasId(&quot;1:9947&quot;).or().loops().is(gte(4))).hasId(&quot;1:9947&quot;).path().limit(-1)# 邻居节点g.V(&quot;1:130133198506126945&quot;).repeat(bothE().has(&#x27;tran_amt&#x27;,gte(10000000)).has(&#x27;tran_amt&#x27;,lte(10000000000)).has(&#x27;tran_date&#x27;,gte(20170210)).has(&#x27;tran_date&#x27;,lte(20170230)).otherV().simplePath()).until(loops().is(gte(2))) .path().limit(200)# K neighbor API，根据起始顶点，查找 N 步以内可达的所有邻居g.V(&quot;1:3301167&quot;).repeat(__.out(&quot;MyEdge&quot;)).times(2).dedup().count().next()g.V(1).repeat(out().simplePath()).until(hasId(5)).path().limit(1) 使用 gremlin 执行 k nearest neighbor","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"gremlin","slug":"gremlin","permalink":"http://fansichao.github.com/blog/tags/gremlin/"}]},{"title":"Github-插件","slug":"Tools/Github/plugins","date":"2021-10-23T11:54:51.240Z","updated":"2021-10-23T11:54:51.240Z","comments":true,"path":"Tools/Github/plugins.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Github/plugins.md/","excerpt":"","text":"插件清单SourceGraphSourceGraph Sourcegraph Chrome 扩展允许你像使用一个很好的 IDE 那样浏览源代码。它为 Github 上的代码添加了即时文档和类型提示，并为每一个标识符添加了跳转到定义处的链接。 Github TocGithub Toc 允许你根据 Github 项目的 README 或 WIKI 显示目录( Table of content)。 OctotreeOctotree 会为 Github 页面添加侧边栏，在浏览器中显示项目的目录结构，对于那些经常需要在 GitHub 阅读源代码的人非常有用。 Enhanced GitHubEnhanced GitHub Github 文件在线查看大小详情等","categories":[],"tags":[]},{"title":"Github","slug":"Tools/Github/readme","date":"2021-10-23T11:54:51.240Z","updated":"2021-10-23T11:54:51.241Z","comments":true,"path":"Tools/Github/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Github/readme.md/","excerpt":"","text":"Github 优质项目整理GitHub 上优质项目整理https://zhuanlan.zhihu.com/p/165100346https://www.jianshu.com/p/703794911751 https://www.cnblogs.com/ice5/p/13304098.html https://zhuanlan.zhihu.com/p/352752315 Github 上好玩的 50 个 python 项目汇总 https://zhuanlan.zhihu.com/p/73089972 参考资源","categories":[],"tags":[]},{"title":"","slug":"Tools/Git/README","date":"2021-10-23T11:54:51.224Z","updated":"2021-10-23T11:54:51.224Z","comments":true,"path":"Tools/Git/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Git/README.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Git 使用文档","slug":"Tools/Git/git","date":"2021-10-23T11:54:51.224Z","updated":"2021-10-23T11:54:51.224Z","comments":true,"path":"Tools/Git/git.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Git/git.md/","excerpt":"","text":"tags: git 202103 [toc] 说明介绍功能模块Git 创建分支123456# 上传代码到指定分支git branch name 创建分支git checkout branch_xxxgit add aaagit commit -m &quot;sss&quot; aaagit push origin branch_xxx git config 配置123456789# 查看全局配置git config --list# 设置全局参数git config --global user.name xxx# 删除全局参数git config --global --unset user.name git 存储用户密码user 中存储用户信息 ， credential 存储密码(第一次 push 需要输入) 1234567891011121314151617[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[remote &quot;origin&quot;] url = http://192.168.200.130/crawler/tongshuncha/hive/data_check.git fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;] remote = origin merge = refs/heads/master# 添加如下内容[user] name = xxxx email = xxxxx@qq.com[credential] helper = store .gitignore 忽略文件忽略规则语法: 空格不匹配任意文件，可作为分隔符，可用反斜杠转义 #开头: 标识注释，可以使用反斜杠进行转义 ! 开头: 标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义 / 结束: 只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件 / 开头: 匹配文件 如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录 ** 匹配多级目录，可在开始，中间，结束 ? 通用匹配单个字符 [] 通用匹配单个字符列表 常用忽略命令 12345678# 检查文件是否符合忽略规则 以及展示符合的忽略规则$ git check-ignore -v a.zip.gitignore:4:*.zip a.zip# 解决已上传文件忽略规则不生效的问题git rm -r --cached .git add .git commit -m &#x27;update .gitignore&#x27; Python 项目 .gitignore 文件样例 123456789101112131415*.pyc**/__pycache__/logs/*.log*.zipbin/ : 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件/bin : 忽略根目录下的bin文件/*.c : 忽略 cat.c，不忽略 build/cat.cdebug/*.obj : 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj**/foo : 忽略/foo, a/foo, a/b/foo等a/**/b : 忽略a/b, a/x/b, a/x/y/b等!/bin/run.sh : 不忽略 bin 目录下的 run.sh 文件*.log : 忽略所有 .log 文件config.php : 忽略当前路径的 config.php 文件 Git 仓库忽略提交规则 &amp; .gitignore 配置 Git 修改历史 commit 信息123456789# 查看历史所有的 commit 信息git log# 查看提交详情git show# 查看指定ID的修改git show commitId# 修改最新 commit 提交信息(进入编辑界面,修改后保存即可)git commit --amend 修改前 n 次 commit 的提交信息 123456789101112131415161718192021# 假设你需要修改倒数第n次commit的提交信息$ git rebase -i HEAD~n# 进入编辑模式，会出现类似以下的内容pick 6608e22 修改代码结构调整导致不能正常显示的问题pick 1d381cd 菜单切换可用...# 将需要修改的commit的那一行的pick修改为edit，然后保存退出# 然后输入$ git commit --amend# 进入你需要修改的commit编辑界面，编辑后保存退出# 修改结束后，输入以下命令返回到最新的commit$ git rebase --continue# 修改 用户邮箱信息git commit --amend --author=&quot;user &lt;user@qq.com&gt;&quot; --no-editgit commit --amend # 修改注释信息 git rebase --continue# 从第一个提交开始修改git rebase -i --root GIT 分支变主干123# Tips: 记得备份# 直接使用 develop分支 覆盖主干数据git push origin origin/develop:master -f git 版本回退Git 代码回退 git 标签12345678910111213# 查看所有标签git tag# 添加标签git tag -a v1.0.0 -m &quot;内容: v1.0.0&quot;# 显示标签信息git show v0.0.6# 推送标签到远程git push origin v1.0.0# 删除本地标签git tag -d v1.0.0# 删除远程标签git push origin :refs/tags/v1.0.0 github 迁移到 GitLabgithub 仓库迁移到 gitlab Git 注释规范提交格式: 123456&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;范例:fix #251: add DataValidation 提交的具体情况 type（必需）: 用于说明 commit 的类别 br: 此项特别针对 bug 号，用于向测试反馈 bug 列表的 bug 修改情况 feat: 新功能（feature） fix: 修补 docs: 文档（documentation） style: 格式（不影响代码运行的变动） refactor: 重构（即不是新增功能，也不是修改 bug 的代码变动） test: 增加测试 chore: 其他的小改动. 一般为仅仅一两行的改动, 或者连续几次提交的小改动属于这种 revert: feat(pencil): add ‘graphiteWidth’ option (撤销之前的 commit) upgrade: 升级改造 bugfix: 修补 bug optimize: 优化 perf: Performance 的缩写, 提升代码性能 test: 新增测试用例或是更新现有测试 ci:主要目的是修改项目继续完成集成流程(例如 Travis，Jenkins，GitLab CI,Circle)的提交 build: 主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交 scope（可选） scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。 subject（必需）: subject 是 commit 目的的简短描述，不超过 50 个字符。以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes第一个字母小写结尾不加句号（.） &lt;body&gt;(可选) 部分是对本次 commit 的详细描述，可以分成多行 常用命令Git 常用命令 12345678910111213141516git add 添加修改文件git status 查看状态(查看工作区文件状态)git checkout – file 丢弃工作区的修改git commit -m &quot;填写备注&quot;提交修改到本地仓库git merge 合并分支git pull 拉取远程仓库版本git push 推送本地仓到远程仓git reset --hart HEAD^ 版本回退git log 查看commit历史记录git reflog 查看历史命令git branch name 创建分支git branch 查看分支git checkout name 切换分支git checkout -b name 创建+切换分支git branch -D name 删除分支git merge 分支 合并分支 git 简单使用 参考资源https://blog.csdn.net/YJG7D314/article/details/104551896 https://blog.csdn.net/qq_38111015/article/details/84885809 https://blog.csdn.net/qq_36150631/article/details/81038485 Git 常用脚本使用脚本 123456789101112131415161718192021222324252627282930# &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Base_Func &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;git_init()&#123; # 删除远程库链接 git remote rm origin # 链接远程库 git remote add origin git@github.com:fansichao/code.git&#125;# Git 日常使用git_daily()&#123; # 更新 git pull # 日常使用 git add * git commit -m &quot;定时提交&quot; -a git push -u origin master&#125;# &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Using_Func &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;# 日常使用Daily()&#123; # Env 进入虚拟环境 source ~/env/bin/activate # Git 日常使用 git_daily&#125;# Git 初始化使用#git_initDaily","categories":[],"tags":[]},{"title":"","slug":"Tools/Github/github","date":"2021-10-23T11:54:51.224Z","updated":"2021-10-23T11:54:51.224Z","comments":true,"path":"Tools/Github/github.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Github/github.md/","excerpt":"","text":"Gitlab权限管理Gitlab用户在组中有五种权限：Guest、Reporter、Developer、Master、Owner Gitlab用户权限 Guest：可以创建issue、发表评论，不能读写版本库 Reporter：可以克隆代码，不能提交，QA、PM可以赋予这个权限 Developer：可以克隆代码、开发、提交、push，RD可以赋予这个权限 Master：可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心RD负责人可以赋予这个权限 Owner：可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员，开发组leader可以赋予这个权限 GitLab访问权限 Private：只有组成员才能看到 Internal：只要登录的用户就能看到 Public：所有人都能看到 exp: 开源项目和组设置的是Internal 转让所有者权限https://weilining.github.io/157.htmlhttps://www.cnblogs.com/eoalfj/p/13329966.htmlhttps://chegva.com/3375.html","categories":[],"tags":[]},{"title":"ES功能模块","slug":"Tools/ElasticSearch/es-function","date":"2021-10-23T11:54:51.223Z","updated":"2021-10-23T11:54:51.223Z","comments":true,"path":"Tools/ElasticSearch/es-function.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ElasticSearch/es-function.md/","excerpt":"","text":"ES 安全重启集群ES7.9 集群重启","categories":[],"tags":[]},{"title":"ES部署文档","slug":"Tools/ElasticSearch/es-install","date":"2021-10-23T11:54:51.223Z","updated":"2021-10-23T11:54:51.223Z","comments":true,"path":"Tools/ElasticSearch/es-install.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ElasticSearch/es-install.md/","excerpt":"","text":"部署文档ES740环境说明: CentOS8.1.19 version: ES7.4.0 分词、拼音、python 的 elasticsearch 必须和 ES740 版本对应，否则可能存在使用异常情况。 系统依赖ES 官网系统配置 修改系统参数 123456789101112131415161718192021# 修改文件 vi /etc/sysctl.confvm.max_map_count=655360# 修改文件 vi /etc/security/limits.d/90-nproc.conf(文件名称可能存在差异, 文件不存在则不用修改)找到如下内容：soft nproc 1024修改为soft nproc 2048# 修改文件 vim /etc/security/limits.conf, 添加如下内容* soft nofile 65536* hard nofile 65536# 执行命令使其生效sysctl -p# 查看是否生效ulimit -Hn # 显示 65536 则表示修改成功# 特别说明，已有用户必须重新登录，重新连接ssh, 避免不生效的情况 简单部署解压即用，ES7.4 自带 java 环境，无需安装 java 环境。 文件详见 /03-常用工具/01-部署软件/es74.zip 1234# 获取 ES740 安装包wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.0-linux-x86_64.tar.gz# 安装 对应版本 拼音插件# 安装 对应版本 分词插件 服务启停ES740的restart.sh软件 12345678910source ~/.bash_profileecho &quot;&gt;&gt; Restart Elasticsearch74 starting...&quot;echo &quot;&gt; Stop Es and Kibana ...&quot;ps anx | grep cli | grep -v grep| awk &#x27;&#123;print $1&#125;&#x27; | xargs kill -15ps anx | grep elasticsearch | grep -v grep| awk &#x27;&#123;print $1&#125;&#x27; | xargs kill -15echo &quot;&gt; Start Es and Kibana ...&quot;su - es -lc &quot;cd /home/es/es/node_noly &amp;&amp; bin/elasticsearch -d&quot;su - es -lc &quot;cd /home/es/es/kibana &amp;&amp; nohup bin/kibana &amp;&quot;echo &quot;&gt;&gt; Restart Elasticsearch74 end...&quot; 可视化界面展示 1234# ES 界面http://0.0.0.0:9200# Kibana 界面http://0.0.0.0:5601 配置文件ES 的配置文件 elasticsearch.yml 12345678910111213141516171819202122232425262728293031# bootstrapbootstrap.system_call_filter: false# namecluster.name: es74_clustenode.name: node-only# nodenode.master: truenode.data: truenode.max_local_storage_nodes: 3#node.zone: zone_one# pathpath.data: /data/datapath.logs: /data/logs# host&amp;portnetwork.host: 0.0.0.0http.port: 9200http.cors.enabled: truehttp.cors.allow-origin: &#x27;*&#x27;# xpackxpack.security.enabled: false# cluster zonecluster.routing.allocation.awareness.attributes: zonenode.attr.zone: zone_two#discovery.zen.minimum_master_nodes: 2#http.max_content_length: 500mb##thread_pool.bulk.queue_size: 5000# discovery.seed_hosts: [&quot;192.168.100.200&quot;]discovery.seed_hosts: [&quot;0.0.0.0&quot;]cluster.initial_master_nodes: [&quot;node-only&quot;] Kibana 的配置文件 123server.host: &quot;0.0.0.0&quot;server.port: 5601elasticsearch.hosts: [&quot;http://0.0.0.0:9200&quot;] 564 部署文档环境说明: CentOS8.1.19 version: ES7.4.0 分词、拼音、python 的 elasticsearch 必须和 ES 版本对应，否则可能存在使用异常情况。 ES5.6.4 x-pack 收费,只能试用一个月 ES5.6.4 和 Es7.4.0 存在较大语法差异，详见 ES 版本差异对比 部署依赖 系统参数依赖 JDK1.8+依赖 12# 下载 5.6.4 文件wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.4.tar.gz","categories":[],"tags":[]},{"title":"ES 问题记录","slug":"Tools/ElasticSearch/es-issue","date":"2021-10-23T11:54:51.223Z","updated":"2021-10-23T11:54:51.224Z","comments":true,"path":"Tools/ElasticSearch/es-issue.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ElasticSearch/es-issue.md/","excerpt":"","text":"问题记录illegal_argument_exception [indices:admin/create]问题日志 123456789101112131415161718192021222324252627[2020-08-04 23:15:22,145] PID:7703-elasticsearch: [base.py-log_request_fail-244] WARNING: PUT http://192.168.101.73:9200/cust-daily-2010-08-06 [status:400 request:0.057s]Traceback (most recent call last): File &quot;tools.py&quot;, line 977, in &lt;module&gt; system_command() File &quot;tools.py&quot;, line 973, in system_command tools_dispatcher(*opt_parser.parse_args()) File &quot;tools.py&quot;, line 832, in tools_dispatcher func(*opargs) File &quot;tools.py&quot;, line 329, in make_mining_entity main_processer(date2str(run_dt, &#x27;%Y%m%d&#x27;), run_entity) File &quot;/data/trunk/src/server/fdm/mining/model_entity.py&quot;, line 194, in main_processer set_indice(index_prefix, index_columns, doc_type=&#x27;cust&#x27;) File &quot;/data/trunk/src/server/fdm/mining/mining_tools.py&quot;, line 58, in set_indice _es.indices.create(index=index_name, body=&#123;&quot;settings&quot;: &#123;&quot;number_of_shards&quot;: Config.ES_NUMBER_OF_SHARDS, &quot;number_of_replicas&quot;: Config.ES_NUMBER_OF_REPLICAS&#125;&#125;, File &quot;/data/trunk/src/server/fdm/database/es.py&quot;, line 76, in create return self.indices.create(*args, **kwargs) File &quot;/home/fdm/env/lib/python3.8/site-packages/elasticsearch/client/utils.py&quot;, line 92, in _wrapped return func(*args, params=params, headers=headers, **kwargs) File &quot;/home/fdm/env/lib/python3.8/site-packages/elasticsearch/client/indices.py&quot;, line 102, in create return self.transport.perform_request( File &quot;/home/fdm/env/lib/python3.8/site-packages/elasticsearch/transport.py&quot;, line 355, in perform_request status, headers_response, data = connection.perform_request( File &quot;/home/fdm/env/lib/python3.8/site-packages/elasticsearch/connection/http_urllib3.py&quot;, line 252, in perform_request self._raise_error(response.status, raw_data) File &quot;/home/fdm/env/lib/python3.8/site-packages/elasticsearch/connection/base.py&quot;, line 281, in _raise_error raise HTTP_EXCEPTIONS.get(status_code, TransportError)(elasticsearch.exceptions.RequestError: RequestError(400, &#x27;illegal_argument_exception&#x27;, &#x27;[22_es_master1][172.16.10.21:9300][indices:admin/create]&#x27;) 解决方案 1234567891011121314# ES数据清空后，此设置会丢失。默认分片数1000,太少，导致后续数据无法创建。# 修改最大分片数量curl -XPUT &#x27;http://xxx.xxx.xxx.xxx:9200/_cluster/settings&#x27; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123; &quot;transient&quot;: &#123; &quot;cluster&quot;: &#123; &quot;max_shards_per_node&quot;: 100000000 &#125; &#125;&#125;&#x27; search.max_open_scroll_context错误信息 1Trying to create too many scroll contexts. Must be less than or equal to: [500]. This limit can be set by changing the [search.max_open_scroll_context] setting 解决方案 1234567891011121314151617181920# ES数据清空后，此设置会丢失。# 方案1 - 增加滚动设置()curl -X PUT http://192.168.101.71:9200/_cluster/settings -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123; &quot;persistent&quot; : &#123; &quot;search.max_open_scroll_context&quot;: 100000000 &#125;, &quot;transient&quot;: &#123; &quot;search.max_open_scroll_context&quot;: 100000000 &#125;&#125;&#x27;# 方案2 - 使用滚动后清除滚动超时后，会自动清理，不建议使用后清理。# 查看当前滚动数GET /_nodes/stats/indices/search request-body-search-scroll 12345678910# 运行样例[fdm@data1 ~]$ curl -X PUT http://192.168.101.71:9200/_cluster/settings -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123;&gt; &quot;persistent&quot; : &#123;&gt; &quot;search.max_open_scroll_context&quot;: 10240&gt; &#125;,&gt; &quot;transient&quot;: &#123;&gt; &quot;search.max_open_scroll_context&quot;: 10240&gt; &#125;&gt; &#125;&#x27;&#123;&quot;acknowledged&quot;:true,&quot;persistent&quot;:&#123;&quot;search&quot;:&#123;&quot;max_open_scroll_context&quot;:&quot;10240&quot;&#125;&#125;,&quot;transient&quot;:&#123;&quot;search&quot;:&#123;&quot;max_open_scroll_context&quot;:&quot;10240&quot;&#125;&#125;&#125; driver failed programming external connectivity on endpoint参考链接 centos7.6，启动 docker 后，关闭防火墙，再开启容器导致此问题 重启 docker 服务即可解决问题 12345678910111213141516171819202122232425262728[fdm@data1 es]$ docker-compose -f 21-es-docker-compose.yml up -dCreating 21_es_master1 ...Creating 21_es_node1 ...Creating 21_es_node1 ... errorWARNING: Host is already in use by another containerERROR: for 21_es_node1 Cannot start service es_node1: driver failed programming external connectivity on endpoint 21_es_node1 (e6225dd9ae28ab432bc89cc6c9db97a62045efbd0207a6a0d737181b4222782a): (iptables failed: iptables --wait -t natCreating 21_es_master1 ... error (exit status 1))WARNING: Host is already in use by another containerERROR: for 21_es_master1 Cannot start service es_master1: driver failed programming external connectivity on endpoint 21_es_master1 (0d57a32139e6dc12a2e974ac98e23bd661fa6f8f72713dd6cc787d6d09319440): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 192.168.101.71 --dport 9300 -j DNAT --to-destination 172.16.10.21:9300 ! -i br-728aec2b9277: iptables: No chain/target/match by that name. (exit status 1))Creating 21_es_client1 ... errorERROR: for 21_es_client1 Cannot start service es_client1: driver failed programming external connectivity on endpoint 21_es_client1 (cdc46a8f940337636e4baade076b41f78bc0527931268a02a4e1afd74343812c): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 192.168.101.71 --dport 9301 -j DNAT --to-destination 172.16.10.31:9300 ! -i br-728aec2b9277: iptables: No chain/target/match by that name. (exit status 1))ERROR: for es_node1 Cannot start service es_node1: driver failed programming external connectivity on endpoint 21_es_node1 (e6225dd9ae28ab432bc89cc6c9db97a62045efbd0207a6a0d737181b4222782a): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 192.168.101.71 --dport 9302 -j DNAT --to-destination 172.16.10.41:9300 ! -i br-728aec2b9277: iptables: No chain/target/match by that name. (exit status 1))ERROR: for es_master1 Cannot start service es_master1: driver failed programming external connectivity on endpoint 21_es_master1 (0d57a32139e6dc12a2e974ac98e23bd661fa6f8f72713dd6cc787d6d09319440): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 192.168.101.71 --dport 9300 -j DNAT --to-destination 172.16.10.21:9300 ! -i br-728aec2b9277: iptables: No chain/target/match by that name. (exit status 1))ERROR: for es_client1 Cannot start service es_client1: driver failed programming external connectivity on endpoint 21_es_client1 (cdc46a8f940337636e4baade076b41f78bc0527931268a02a4e1afd74343812c): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 192.168.101.71 --dport 9301 -j DNAT --to-destination 172.16.10.31:9300 ! -i br-728aec2b9277: iptables: No chain/target/match by that name. (exit status 1))ERROR: Encountered errors while bringing up the project. Elasticsearch is still initializing the Monitoring indices12345# 删除监控索引， 重启 Kibana 即可DELETE .monitor*DELETE .kibanaDELETE .watch*DELETE .triggered_watches Shard UNASSIGNED 修复(常见问题)背景介绍 大数据量的 ES 集群中，对节点做配置更新或增减集群(未关闭节点自动均衡)，或者出现节点异常情况时，会发生此问题。 获取集群状态 123456789101112131415161718192021222324[fdm@data1 ~]$ curl -XGET http://172.16.2.1:9200/_cluster/health\\?pretty&#123; &quot;cluster_name&quot; : &quot;es-docker-cluster2&quot;, &quot;status&quot; : &quot;yellow&quot;, &quot;timed_out&quot; : false, &quot;number_of_nodes&quot; : 9, &quot;number_of_data_nodes&quot; : 5, &quot;active_primary_shards&quot; : 13674, &quot;active_shards&quot; : 14936, &quot;relocating_shards&quot; : 0, &quot;initializing_shards&quot; : 0, &quot;unassigned_shards&quot; : 12412, &quot;delayed_unassigned_shards&quot; : 0, &quot;number_of_pending_tasks&quot; : 1, &quot;number_of_in_flight_fetch&quot; : 0, &quot;task_max_waiting_in_queue_millis&quot; : 0, &quot;active_shards_percent_as_number&quot; : 54.61459704548779&#125;# 查看节点健康，可以看到 当前已分配的百分比curl 192.168.106.58:9200/_cat/nodes?v # 查看所有分片情况curl 192.168.106.58:9200/_cat/shards?v 解决方案 123456789101112# 方法1对于非必要的索引，或者需要重新跑批的索引，可以将其副本数设置为0，从而避免此部分索引的分配，可以极大减少 分配时间，# 方法2通过/_cat/shards接口看看具体是哪个primary shard没分配，通过reroute接口强制分配下去，就可以变成yellow了。Green：所有主分片和副本分片都可用；Yellow：所有主分片可用，但不是所有副本分片都可用；Red：不是所有的主分片都可用。http://blog.csdn.net/hereiskxm/article/details/45717573 总结在做集群更新时，务必先关闭集群的自动均衡 12# 停止集群自动分配curl -XGET &#x27;http://192.168.17.201:9200/_cluster/settings&#x27; -d &#x27;&#123;&quot;transient&quot; : &#123;&quot;cluster.routing.allocation.enable&quot; : &quot;none&quot;&#125;&#125;&#x27;1 # 1.EsRejectedExecutionException1error: failure in bulk execution:[4]: index [teacher.tis1.teacher], type [teacher_comment], id [1265687], message [RemoteTransportException[[node-1][192.168.4.30:9300][indices:data/write/bulk[s][p]]]; nested: EsRejectedExecutionException[rejected execution of org.elasticsearch.transport.TransportService$7@5f21ed47 on EsThreadPoolExecutor[bulk, queue capacity = 50, org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor@18160e59[Running, pool size = 4, active threads = 4, queued tasks = 50, completed tasks = 6362]]];] 原因: 说明 ES 索引数据的速度已经跟不上 client 端发送 bulk 请求的速度，请求队列已满以致开始拒绝新的请求。 这是 ES 集群的自我保护机制。可以适当睡眠一段时间或者将队列设置大点。默认设置是 bulk thead pool set queue capacity =50 可以设置大点。 解决办法：打开 elasticsearch.yml 在末尾加上 12345threadpool:bulk:type: fixedsize: 60queue_size: 1000 重新启动服务即可 2.DocumentMissingException1error: [[teacher.tis1.teacher/YudbzduURsGhxHMRzyfNcA][teacher.tis1.teacher][1]] DocumentMissingException[[teacher][344]: document missing]] 原因: 找不到文档，可能是索引(index)或者类型(type)名称错误导致找不到文档，或者文档记录不存在时更新索引则报错。比如：更新 id 为 414 的记录，而此时 ES 中不存在 id 为 414 记录的数据，则抛出此异常解决办法： 1.检查索引(index)名称是否正确 2.检查类型(type)名称是否正确 3.记录不存在时更新索引则报错 可以在更新索引是使用 upsert 属性，如果不存在则进行创建。代码如下：IndexRequest indexRequest = new IndexRequest(index, type, id).source(jsonSource);UpdateRequest updateRequest = new UpdateRequest(index, type, id).doc(jsonSource).upsert(indexRequest);3.RemoteTransportException:error: org.elasticsearch.transport.RemoteTransportException: Failed to deserialize exception response from stream原因: es 节点之间的 JDK 版本不一样解决办法：统一 JDK 环境 4.NoNodeAvailableException:error: org.elasticsearch.client.transport.NoNodeAvailableException: No node available 原因: 节点不可用，(1) es client 与 java client 的版本不一致(2)端口号错误(3)集群名字错误(4)jar 包引用版本不匹配解决办法： 1.检查 es client 与 java client 的版本是否一致 目前我们项目中使用的是 java1.8 对应 es5.5.2 2.检查端口号是否正确 使用 client 连接应使用 es 的 transport 端口号 3.检查集群名称是否正确 4.检查 es 与 es client 的版本号是否一致 目前我们项目中使用的均为 5.5.2 相关资源 ES 常见问题整理 - 蘇氏加多寶 - 博客园 常见错误整理 - CSDN 博客","categories":[],"tags":[]},{"title":"ES-Readme","slug":"Tools/ElasticSearch/README","date":"2021-10-23T11:54:51.222Z","updated":"2021-10-23T11:54:51.222Z","comments":true,"path":"Tools/ElasticSearch/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ElasticSearch/README.md/","excerpt":"","text":"目录索引 ES 安装部署 ES 配置详解 ES 常用命令 ES 功能模块 ES 问题记录 参考资源 ES74 官方文档 ES7.X-Node 种类 Elasticsearch 基本概念及核心配置文件详解 - mvpbang - 博客园","categories":[],"tags":[]},{"title":"ES 常用命令","slug":"Tools/ElasticSearch/es-cmd","date":"2021-10-23T11:54:51.222Z","updated":"2021-10-23T11:54:51.222Z","comments":true,"path":"Tools/ElasticSearch/es-cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ElasticSearch/es-cmd.md/","excerpt":"","text":"ES 命令基础命令123456789101112131415161718192021222324252627282930# 查看API[root@540d820ba866 ~]# curl -XGET &#x27;http://192.168.100.200:7403/_cat/&#x27;=^.^=/_cat/allocation/_cat/shards/_cat/shards/&#123;index&#125;/_cat/master/_cat/nodes/_cat/tasks/_cat/indices/_cat/indices/&#123;index&#125;/_cat/segments/_cat/segments/&#123;index&#125;/_cat/count/_cat/count/&#123;index&#125;/_cat/recovery/_cat/recovery/&#123;index&#125;/_cat/health/_cat/pending_tasks/_cat/aliases/_cat/aliases/&#123;alias&#125;/_cat/thread_pool/_cat/thread_pool/&#123;thread_pools&#125;/_cat/plugins/_cat/fielddata/_cat/fielddata/&#123;fields&#125;/_cat/nodeattrs/_cat/repositories/_cat/snapshots/&#123;repository&#125;/_cat/templates 命令说明 临时(Transient) 这些变更在集群重启之前一直会生效。一旦整个集群重启，这些配置就被清除。 永久(Persistent) 这些变更会永久存在直到被显式修改。即使全集群重启它们也会存活下来并覆盖掉静态配置文件里的选项。 常用命令1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# 查看 ES 相关命令 ?v 查看表头 ?pretty 美化输出curl -XGET &#x27;http://local:9200/_cat&#x27;# 查看集群健康curl -XGET &#x27;http://local:9200/_cat/health?v&#x27;# 查看磁盘空间占用率_cat/nodes?v&amp;h=ip,heap.percent,ram.percent,cpu,load_1m,load_5m,load_15m,node.role,master,name,disk.used_percent# 显示red shards，显示异常分片http://&lt;yourhost&gt;:9200/_cluster/health/?level=shards# 修改集群副本数curl -XPUT &#x27;http://local:9200/peer-tran-log-2016-01-21/_settings&#x27; -d &#x27;&#123;&quot;number_of_replicas&quot;:1&#125;&#x27;# 获取所有节点信息：curl -XGET &#x27;http://localhost:9200/_nodes&#x27;;# 获取所有索引的信息curl -XGET 127.0.0.1:9200/_cat/indices# 显示各节点的进程数curl -XGET &#x27;http://local:9200/_cat/thread_pool?v&#x27;# 显示示不同索引的分片情况curl -XGET &#x27;http:/local:9200/_cat/shards?v&#x27;# 显示索引的详细情况curl -XGET &#x27;http:/local:9200/_cat/indices?v&#x27;# 显示副本的详细情况curl -XGET &#x27;http:/local:9200/_cat/recovery?v&#x27;# 查看集群设置GET _cluster/settings# 删除无用数据time curl -XPOST &#x27;http://local:9200/tranjrnl-01000000-2016-10-31/_forcemerge?max_num_segments=1&#x27;# 一次性删除所有无用数据curl -XPOST &#x27;http://local:9200/_forcemerge?only_expunge_deletes=true&#x27; ;# 统计yellow索引数量curl -XGET &#x27;http://local:9200/_cat/indices?v&amp;health=yellow&#x27; | wc -l# 关闭 集群 自动均衡 分片恢复curl -XPUT &#x27;http://local:9200/_cluster/settings&#x27; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123; &quot;persistent&quot; : &#123; &quot;cluster.routing.allocation.enable&quot; : &quot;primaries&quot; &#125;&#125;&#x27;# 开启 集群 自动均衡 分片恢复curl -XPUT &#x27;http://local:9200/_cluster/settings&#x27; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123; &quot;persistent&quot; : &#123; &quot;cluster.routing.allocation.enable&quot; : &quot;none&quot; &#125;&#125;&#x27; ES 语法基础语法常用语法123456# ES564 精准查询 模糊字段(中文分词字段)&quot;query_string&quot;: &#123; &quot;default_field&quot;: &quot;CARD_NO&quot;, &quot;query&quot;: &quot;45*&quot;&#125; 常用命令 112345678910# 监听端口是否存活 yum install -y telnet[root@540d820ba866 ~]# telnet 192.168.100.200 7413Trying 192.168.100.200...Connected to 192.168.100.200.Escape character is &#x27;^]&#x27;.Connection closed by foreign host.","categories":[],"tags":[]},{"title":"ES配置文件","slug":"Tools/ElasticSearch/es-config","date":"2021-10-23T11:54:51.222Z","updated":"2021-10-23T11:54:51.222Z","comments":true,"path":"Tools/ElasticSearch/es-config.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/ElasticSearch/es-config.md/","excerpt":"","text":"环境说明: ES7.4.0 官方文档 系统配置项说明Disable swap 以提升性能(可选)12345678# 方法1 临时禁用，无需重启ES节点, 永久禁用它，您将需要编辑/etc/fstab文件并注释掉所有包含单词的行swapsudo swapoff -a# 方法2 配置系统参数，减少了内核的交换vm.swappiness=1# 方法3 配置es参数，需要重启ES节点bootstrap.memory_lock: true 修改文件描述符数量(必选)123456789# 临时修改ulimit -n 65535# 永久修改/etc/security/limits.conf增加 nofile to 65535# 检查ES是否配置正常curl -X GET &quot;localhost:9200/_nodes/stats/process?filter_path=**.max_file_descriptors&amp;pretty&quot; 虚拟内存数量(必选)1234567# 临时修改sysctl -w vm.max_map_count=262144# 永久修改/etc/sysctl.conf 中增加vm.max_map_count=262144sysctl -p 使其生效 线程数量(必选)123456# 临时设置ulimit -u 4096# 永久设置/etc/security/limits.confnproc to 4096 in /etc/security/limits.conf DNS 缓存设置(可选)12networkaddress.cache.ttl=&lt;timeout&gt;networkaddress.cache.negative.ttl=&lt;timeout&gt; ES 配置项说明增加分片数量(必选)ES740 必须配置分片数量，避免分片过少，导致项目程序运行报错。 12345678910# 直接更新curl -XPUT &#x27;http://0.0.0.0:9200/_cluster/settings&#x27; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123; &quot;persistent&quot;: &#123; &quot;cluster&quot;: &#123; &quot;max_shards_per_node&quot;: 100000000 &#125; &#125;&#125;&#x27; transient 临时生效 persistent 永久生效 增加 scroll 数量(生产必选)1234567891011# scroll 使用 24小时后自动回收. 默认1000方案1 - 增加滚动设置()curl -X PUT http://192.168.101.71:9200/_cluster/settings -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123; &quot;persistent&quot; : &#123; &quot;search.max_open_scroll_context&quot;: 100000000 &#125;, &quot;transient&quot;: &#123; &quot;search.max_open_scroll_context&quot;: 100000000 &#125;&#125;&#x27; 磁盘使用量在 95%以上时，索引会被标记为已读，无法写入数据(可选)1flood stage disk watermark [95%] exceeded on [KeyWFmZzQdy101sSic1ilA][node-only][/ssd_datapath/data/nodes/0] free: 42.3gb[4.6%], all indices on this node will be marked read-only 解决方法: 通过 kibana 修改磁盘使用上限为 99% 123456789PUT _cluster/settings&#123; &quot;transient&quot;: &#123; &quot;cluster.routing.allocation.disk.watermark.low&quot;: &quot;99%&quot;, &quot;cluster.routing.allocation.disk.watermark.high&quot;: &quot;99%&quot;, &quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;: &quot;99%&quot;, &quot;cluster.info.update.interval&quot;: &quot;1m&quot; &#125;&#125; ES 进程数修改(必选)123456# 默认 100- thread_pool.get.queue_size=1000- thread_pool.write.queue_size=1000- thread_pool.analyze.queue_size=1000- thread_pool.search.queue_size=1000- thread_pool.listener.queue_size=1000 待测试配置1234567891011121314# 任何的元数据变动都会涉及集群更新，设置该参数# 默认 30 sdiscovery.zen.commit_timeout# 集群健康的检查参数# default 3 sdicovery.zen.ping_timeout# 以下配置可以减少，当ES节点短时间重启或宕机导致的shards重新分配带来的IO浪费# ES-Version 5.6.4discovery.zen.fd.ping_timeout: 180sdiscovery.zen.fd.ping_retries: 6discovery.zen.fd.ping_interval: 30sdiscovery.zen.ping_timeout: 120s 修改 ES 内存大小(生产必选配置)修改 config/jvm.options 文件 123# 根据实际修改，默认1g 两个值必须相同, 不能超过32G-Xms2g-Xmx2g 建议的配置如下： 将最小堆大小(Xms)和最大堆大小(Xmx)设置为彼此相等。 Elasticsearch 可用的堆越多，它可用于缓存的内存就越多。但请注意，过多的堆可能会陷入长时间的垃圾收集暂停。所以设置的堆不能太大， 尽量设置到内存的 50%。 将 Xmx 设置为不超过物理 RAM 的 50％，以确保有足够的物理内存给内核文件系统缓存。 内存 heap size 配置不要超过 32G, 基本上大多数系统最多只配置到 26G. ES 参数说明文件 config/elasticsearch.yml 参数配置说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#修改以下项#表示集群标识，同一个集群中的多个节点使用相同的标识cluster.name: elasticsearch#节点名称node.name: &quot;es-node1&quot;#数据存储目录path.data: /data/elasticsearch1/data#日志目录path.logs: /data/elasticsearch1/logs#节点所绑定的IP地址，并且该节点会被通知到集群中的其他节点network.host: 192.168.1.11#绑定监听的网络接口，监听传入的请求，可以设置为IP地址或者主机名network.bind_host: 192.168.1.11#发布地址，用于通知集群中的其他节点，和其他节点通讯，不设置的话默认可以自动设置。必须是一个存在的IP地址network.publish_host: 192.168.1.11#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举mastercluster.initial_master_nodes: [&quot;192.168.1.11&quot;]#集群通信端口transport.tcp.port: 9300#对外提供服务的http端口，默认为9200http.port: 9200#集群中主节点的初始列表，当主节点启动时会使用这个列表进行非主节点的监测discovery.zen.ping.unicast.hosts: [&quot;192.168.1.11:9300&quot;,&quot;192.168.1.12:9300&quot;]#下面这个参数控制的是，一个节点需要看到的具有master节点资格的最小数量，然后才能在集群中做操作。官方推荐值是(N/2)+1；#其中N是具有master资格的节点的数量(我们的情况是2，因此这个参数设置为1)#但是：但对于只有2个节点的情况，设置为2就有些问题了，一个节点DOWN掉后，肯定连不上2台服务器了，这点需要注意discovery.zen.minimum_master_nodes: 1#集群ping过程的超时discovery.zen.ping_timeout: 120s#客户端连接超时client.transport.ping_timeout: 60s#cache缓存大小，10%(默认)，可设置成百分比，也可设置成具体值，如256mb。indices.queries.cache.size: 20%#索引期间的内存缓存，有利于索引吞吐量的增加。indices.memory.index_buffer_size: 30%#开启了内存地址锁定，为了避免内存交换提高性能。但是Centos6不支持SecComp功能，启动会报错，所以需要将其设置为falsebootstrap.memory_lock: truebootstrap.system_call_filter: false#设置该节点是否具有成为主节点的资格以及是否存储数据。node.master: truenode.data: true#ElasticSearch 更改search线程池，search 线程设置过小导致程序崩溃thread_pool.search.queue_size: 1000#queue_size允许控制没有线程执行它们的挂起请求队列的初始大小。thread_pool.search.size: 200#size参数控制线程数，默认为核心数乘以5。thread_pool.search.min_queue_size: 10#min_queue_size设置控制queue_size可以调整到的最小量。thread_pool.search.max_queue_size: 1000#max_queue_size设置控制queue_size可以调整到的最大量。thread_pool.search.auto_queue_frame_size: 2000#auto_queue_frame_size设置控制在调整队列之前进行测量的操作数。它应该足够大，以便单个操作不会过度偏向计算。thread_pool.search.target_response_time: 6s#target_response_time是时间值设置，指示线程池队列中任务的目标平均响应时间。如果任务通常超过此时间，则将调低线程池队列以拒绝任务。# 增加以下内容# 集群名称必须相同cluster.name: es-testnode.name: node-3# 当前节点是否可以被选举为master节点，是：true、否：falsenode.master: true# 当前节点是否用于存储数据，是：true、否：falsenode.data: true# 数据和日志存储的地方，建议与es的安装目录区分，方式es删除后数据的丢失path.data: /data/es/datapath.logs: /data/es/logs# 需求锁住物理内存，是：true、否：falsebootstrap.memory_lock: false# SecComp检测，是：true、否：falsebootstrap.system_call_filter: falsenetwork.host: 0.0.0.0# 有些时候并不需要此配置，我的没有设置network.publish_host: 10.240.0.8# 主机访问的端口号http.port: 9200# es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点# es7之后，不需要discover.zen.ping.unicast.hosts这个参数，用discovery.seed_hosts替换discovery.seed_hosts: [&quot;10.10.10.1&quot;,&quot;10.10.10.2&quot;,&quot;10.10.10.3&quot;]# es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举mastercluster.initial_master_nodes:[&quot;10.10.10.1&quot;,&quot;10.10.10.2&quot;,&quot;10.10.10.3&quot;]# 是否支持跨域，是：true，在使用head插件时需要此配置http.cors.enabled: true# &quot;*&quot; 表示支持所有域名http.cors.allow-origin: &quot;*&quot; ES 配置文件ES7.4 官网配置详细说明 12345678910111213141516171819202122232425# 数据和日志路径设置 数据支持存放在多个目录下path: logs: - /var/log/elasticsearch data: - /mnt/elasticsearch_1 - /mnt/elasticsearch_2 - /mnt/elasticsearch_3# 集群名称 决定是否所属于统一集群cluster.name: logging-prod# 节点名称 节点唯一标识，集群内节点名称唯一node.name: prod-data-2# 网络地址 此节点的网络地址# 单节点时绑定到回环地址0.0.0.0即可，集群时需要绑定到非回环地址，内网IP# 也可设置特殊值，_local_，_site_，_global_等，设置特殊值后，自动升级为生产模式，日志从警告升级为异常network.host: 192.168.1.10# es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点# es7之后，不需要discover.zen.ping.unicast.hosts这个参数，用discovery.seed_hosts替换# Elasticsearch将绑定到可用的环回地址，并将扫描本地端口9300至9305discovery.seed_hosts: [&quot;10.10.10.1&quot;,&quot;10.10.10.2&quot;,&quot;10.10.10.3&quot;]# 集群初始化引导步骤，列出有资质的master节点，从中选举，初始化时需要。# es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举mastercluster.initial_master_nodes:[&quot;10.10.10.1&quot;,&quot;10.10.10.2&quot;,&quot;10.10.10.3&quot;] 附件ES 说明123456Elasticsearch保留端口9300-9400用于集群通信，而端口9200-9300保留用于访问Elasticsearch API出现master not discovered异常的根本原因是节点无法在端口9300上相互ping通。这需要同时进行。即node1应该能够在9300上ping node2，反之亦然","categories":[],"tags":[]},{"title":"ReadMe-Docker 容器工具","slug":"Tools/Docker/readme","date":"2021-10-23T11:54:51.221Z","updated":"2021-10-23T11:54:51.221Z","comments":true,"path":"Tools/Docker/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/readme.md/","excerpt":"","text":"目录索引docker-部署 Docker-install : 安装部署 docker-使用 Docker-Compose : 多容器管理工具 Docker-function : 容器常用功能 Docker-Issue : 常见问题 Docker-Cmd : 常用命令 应用部署 Docker-CDH : CDH-大数据平台-快速部署 Docker-Oracle : Oracle-快速部署 Docker-Mysql : Mysql-快速部署 Docker-Neo4j : Neo4j-快速部署 Docker-ES : ES-快速部署 Docker-Db2 : DB2-快速部署 参考资源 Docker 部分组成 https://www.google.com/search?source=hp&amp;ei=KNEnWqOFIIGu0gS2zZzYDQ&amp;q=docker%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4 Docker 常用命令 https://www.jianshu.com/p/adaa34795e64 https://www.infoq.cn/article/KBTRC719-r6GHOPS3Cr8 docker 基础命令 docker run 参数 docker 官方英文文档 docker 中文文档网站 第一本 docker 书籍 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口(类似 iPhone 的 app),更重要的是容器性能开销极低。 Docker 官方中文网: http://www.docker.org.cn/ Docker 官网: https://www.docker.com/ Docker 菜鸟教程: http://www.runoob.com/docker/docker-tutorial.html Docker 容器间通信方法 Docker 的四种网络模式 docker 跨服务器容器的网络配置 Docker 容器跨主机通信之: 直接路由方式 Docker 启动时的报错汇总 Docker 配置文件 daemon.json 解析","categories":[],"tags":[]},{"title":"Docker-Neo4j 部署文档","slug":"Tools/Docker/docker-neo4j","date":"2021-10-23T11:54:51.220Z","updated":"2021-10-23T11:54:51.220Z","comments":true,"path":"Tools/Docker/docker-neo4j.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-neo4j.md/","excerpt":"","text":"Docker-Neo4jDocker-Neo4j-3.3.5 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# 用于存储Docker化后存储数据的位置export DOCKER_BASE_DATAPATH=/space/data_storagemkdir -p $DOCKER_BASE_DATAPATH########################## Neo4J部署 ##########################DeployNeo4J()&#123; container_name=fdm_neo4j # Mkdir Container_Dir export NEO4J_DATAPATH=$&#123;DOCKER_BASE_DATAPATH&#125;/$&#123;container_name&#125; mkdir -p $&#123;NEO4J_DATAPATH&#125; # Clear Container docker stop $&#123;container_name&#125; docker rm $&#123;container_name&#125; # Pulling Neo4J # docker pull neo4j:3.3.5 # 4.1 # docker run -p=7474:7474 -p=7687:7687 \\ # --volume=$NEO4J_DATAPATH/data:/data \\ # --volume=$NEO4J_DATAPATH/logs:/logs \\ # --volume=$NEO4J_DATAPATH/conf:/var/lib/neo4j/conf \\ # --name fdm_neo4j -d neo4j:3.3.5 # Create Neo4J Container # TODO 3.3.5版本logs目录无法映射，只能容器内部做logs软链接到data中 docker run -p=7474:7474 -p=7687:7687 \\ --volume=$NEO4J_DATAPATH/data:/data \\ --volume=$NEO4J_DATAPATH/conf:/var/lib/neo4j/conf \\ --volume=$NEO4J_DATAPATH/import:/var/lib/neo4j/import \\ --env NEO4J_AUTH=neo4j/qwe123 \\ --name $&#123;container_name&#125; -d neo4j:3.3.5&#125;DeployNeo4J# dbms.directories.import=import# dbms.default_listen_address=0.0.0.0# dbms.memory.pagecache.size=60g# dbms.memory.heap.initial_size=32g# dbms.memory.heap.max_size=120g# dbms.tx_log.rotation.retention_policy=100M size# dbms.directories.logs=/logs# &gt;&gt;&gt;&gt;&gt; 3.3.5# dbms.directories.import=/var/lib/neo4j/import## wrapper.java.additional=-Dneo4j.ext.udc.source=docker# ha.host.data=3188fa41c50b:6001# ha.host.coordination=3188fa41c50b:5001# dbms.tx_log.rotation.retention_policy=100M size# dbms.memory.pagecache.size=512M# dbms.memory.heap.max_size=512M# dbms.memory.heap.initial_size=512M# dbms.connectors.default_listen_address=0.0.0.0# dbms.connector.https.listen_address=0.0.0.0:7473# dbms.connector.http.listen_address=0.0.0.0:7474# dbms.connector.bolt.listen_address=0.0.0.0:7687# causal_clustering.transaction_listen_address=0.0.0.0:6000# causal_clustering.transaction_advertised_address=3188fa41c50b:6000# causal_clustering.raft_listen_address=0.0.0.0:7000# causal_clustering.raft_advertised_address=3188fa41c50b:7000# causal_clustering.discovery_listen_address=0.0.0.0:5000# causal_clustering.discovery_advertised_address=3188fa41c50b:5000# EDITION=community","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker-Oracle 部署文档","slug":"Tools/Docker/docker-oracle","date":"2021-10-23T11:54:51.220Z","updated":"2021-10-23T11:54:51.220Z","comments":true,"path":"Tools/Docker/docker-oracle.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-oracle.md/","excerpt":"","text":"Docker-Oracle11g1234567891011121314151617181920212223242526前提最新版Docker安装好，配置阿里云镜像库# 获取镜像docker pull registry.cn-hangzhou.aliyuncs.com/qida/oracle-xe-11g# 运行命令docker run --name oracle11g -d -p 1521:1521 -v /docker/oracle/v/oradata/:/u01/app/oracle/oradata/oracle11g-data/ -e ORACLE_ALLOW_REMOTE=true --restart=always registry.cn-hangzhou.aliyuncs.com/qida/oracle-xe-11g# 进入容器：docker exec -it oracle11g bash# 安装好的 Oracle 默认参数- 系统用户：root 密码：admin- 数据库链接 - hostname: localhost - port: 1521 - sid: xe - username: system - password: oracle切换用户：su oracle进入SQL交互：sqlplus / as sysdba# 创建数据库用户create user fdm identified by qwe123;# 授权给用户GRANT CREATE USER,DROP USER,ALTER USER ,CREATE ANY VIEW ,DROP ANY VIEW,EXP_FULL_DATABASE,IMP_FULL_DATABASE,DBA,CONNECT,RESOURCE,CREATE SESSION TO fdm; 关联资源 文内关联资源 Oracle 使用文档 外部资源 Docker 安装 Oracle11g-超简单教程","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Redis","slug":"Tools/Docker/docker-redis","date":"2021-10-23T11:54:51.220Z","updated":"2021-10-23T11:54:51.220Z","comments":true,"path":"Tools/Docker/docker-redis.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-redis.md/","excerpt":"","text":"部署说明12345678910docker pull redisdocker run -p 6379:6379 --name redis \\ -v $&#123;redis_conf&#125;:/etc/redis/redis.conf \\ -v $&#123;redis_data&#125;:/data \\ -d redis redis-server /etc/redis/redis.conf \\ --appendonly yes \\ --requirepass $&#123;password&#125;# appendonly yes 开启redis 持久化","categories":[],"tags":[]},{"title":"Docker部署文档","slug":"Tools/Docker/docker-install","date":"2021-10-23T11:54:51.219Z","updated":"2021-10-23T11:54:51.219Z","comments":true,"path":"Tools/Docker/docker-install.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-install.md/","excerpt":"","text":"Docker InstallCentOS6安装说明: CentOS6.10 环境，要求 6.8+ Docker 版本 1.7.1 步骤 1: 配置下载镜像 docker.repo 文件 CentOS6 安装方法 1234567[root@yinsho ~]# cat /etc/yum.repos.d/docker.repo[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/6enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpg CentOS7 安装方法 1234567[root@yinsho ~]# cat /etc/yum.repos.d/docker.repo[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpg 步骤 2: 重建元数据 12yum clean allyum makecache 步骤 3: 安装 docker 1yum install docker-engine -y 问题: docker-engine conflicts 123# 如果执行报错 docker-engine conflicts with xxxxx# 先卸载 docker，再安装 docker-engineyum remove docker -y 步骤 4: 启动 docker 服务 12service docker startchkconfig docker on 步骤 5: 非 root 用户使用 docker. 将用户添加到 docker 用户组 1234567891011121314sudo groupadd dockersudo usermod -aG docker $USER# 添加用户组后 必须重启服务# Centos7sudo systemctl restart dockersudo systemctl enable docker# CentOS6sudo service restart dockersudo chkconfig on docker# 添加用户组后 必须切换当前会话到新 group 或者重启 X 会话newgrp - docker 或 pkill X 参考说明: 安装参考链接 12345678yum update -y如果报错 No module named yum参考: https://www.cnblogs.com/clover-siyecao/p/5650893.htmlrpm -Uvh http://ftp.riken.jp/Linux/fedora/epel/6Server/x86_64/epel-release-6-8.noarch.rpmyum remove docker -yyum install -y docker-io Centos8-在线部署123456789101112131415dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repodnf repolist -v# 列出当前支持的 docker-ce 版本dnf list docker-ce --showduplicates | sort -r# 前置依赖dnf install containerd.io -yyum install podman-manpages -ydnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm -ydnf install docker-ce -y# 开启Docker服务systemctl start docker# Docker开机自启/bin/systemctl enable docker.service CentOS7-离线部署参考链接: centos7-离线安装 docker 123456789101112131415161718192021222324252627282930313233343536在 https://download.docker.com/linux/centos/7/x86_64/stable/Packages 下载docker-ce-17.12.0.ce-1.el7.centos.x86_64.rpm2.下载9个依赖在 http://mirrors.163.com/centos/7/os/x86_64/Packages 下载8个依赖audit-libs-python-2.7.6-3.el7.x86_64.rpmcheckpolicy-2.5-4.el7.x86_64.rpmlibcgroup-0.41-13.el7.x86_64.rpmlibseccomp-2.3.1-3.el7.x86_64.rpmlibsemanage-python-2.5-8.el7.x86_64.rpmpolicycoreutils-python-2.5-17.1.el7.x86_64.rpmpython-IPy-0.75-6.el7.noarch.rpmsetools-libs-3.3.8-1.1.el7.x86_64.rpm在http://rpm.pbone.net/index.php3?stat=3&amp;limit=1&amp;srodzaj=1&amp;dl=40&amp;search=container-selinux&amp;field[]=1&amp;field[]=2 下载container-selinux-2.9-4.el7.noarch.rpm下载链接：ftp://mirror.switch.ch/pool/4/mirror/scientificlinux/7x/external_products/extras/x86_64/container-selinux-2.9-4.el7.noarch.rpm3.安装将8个依赖复制到服务器上如：/root/docker/将docker-ce-17.12.0.ce-1.el7.centos.x86_64.rpm和container-selinux-2.9-4.el7.noarch.rpm复制到/root/docker/rpm/rpm -ivh /root/docker/*.rpmrpm -ivh /root/docker/rpm/container-selinux-2.9-4.el7.noarch.rpmrpm -ivh/root/docker/rpm/docker-ce-17.12.0.ce-1.el7.centos.x86_64.rpm4.启动service docker startdocker -v CentOS8-离线部署参考链接: CentOS8 离线安装 docker 1234567891011121314# 下载文件 tgzhttps://download.docker.com/linux/static/stable/x86_64/# 下载文件 rpmhttps://download.docker.com/linux/centos/7/x86_64/stable/Packages/# 卸载冲突软件 podman(虚拟化软件)rpm -q podmanyum remove podman# 安装dockeryum install containerd.io-1.2.6-3.3.el7.x86_64.rpm -yyum install docker-ce-cli-19.03.9-3.el7.x86_64.rpm -yyum install docker-ce-19.03.9-3.el7.x86_64.rpm -y# 元数据检查yum module enable perl:5.26 docker-win 安装问题-解决”尝试执行未经授权的操作”问题信息如下： 解决方案 https://blog.csdn.net/weixin_30394251/article/details/96246023","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker常见问题","slug":"Tools/Docker/docker-issue","date":"2021-10-23T11:54:51.219Z","updated":"2021-10-23T11:54:51.219Z","comments":true,"path":"Tools/Docker/docker-issue.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-issue.md/","excerpt":"","text":"常见问题/var/run/docker.sock: permission denied参考链接: Are you trying to connect to a TLS-enabled daemon without TLS? 详细日志 1FATA[0000] Get http:///var/run/docker.sock/v1.18/images/json: dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS? 问题原因: 非 root 用户未成功添加到用户组或未生效 解决方法: 12345678# 创建 docker 用户组sudo groupadd docker# 添加用户到用户组sudo gpasswd -a $&#123;USER&#125; docker# 重启服务sudo service docker restart# 切换当前会话到新 group 或者重启 X 会话 [必须步骤]newgrp - docker 或 pkill X containerd 版本依赖问题redhat 直接安装 docker-ce 会显示 containerd-io 版本依赖不满足 1234567891011121314[root@fdm ~]# dnf install docker-ce -yLast metadata expiration check: 0:09:30 ago on Tue 26 May 2020 11:03:38 AM CST.Error: Problem: package docker-ce-3:19.03.9-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3, but none of the providers can be installed - conflicting requests - package containerd.io-1.2.10-3.2.el7.x86_64 is filtered out by modular filtering - package containerd.io-1.2.13-3.1.el7.x86_64 is filtered out by modular filtering - package containerd.io-1.2.13-3.2.el7.x86_64 is filtered out by modular filtering - package containerd.io-1.2.2-3.3.el7.x86_64 is filtered out by modular filtering - package containerd.io-1.2.2-3.el7.x86_64 is filtered out by modular filtering - package containerd.io-1.2.4-3.1.el7.x86_64 is filtered out by modular filtering - package containerd.io-1.2.5-3.1.el7.x86_64 is filtered out by modular filtering - package containerd.io-1.2.6-3.3.el7.x86_64 is filtered out by modular filtering(try to add &#x27;--skip-broken&#x27; to skip uninstallable packages or &#x27;--nobest&#x27; to use not only best candidate packages) 解决方案 12345678# 方案1# 手动安装最新 containerd.iodnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpmyum install docker-ce -y# 方案2# 安装特定版本 docker-cednf install docker-ce-3:18.09.1-3.el7 docker-systemctl 无法使用修复问题：容器中不能使用-systemctl 1234# 在容器启动时增加 --privileged=true -v /sys/fs/cgroup:/sys/fs/cgroup 与 /user/bin/init 即可# 样例docker run -itd --name xxxx --privileged=true -v /sys/fs/cgroup:/sys/fs/cgroup 与 /user/bin/init 即可 问题: dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS参考链接: Are you trying to connect to a TLS-enabled daemon without TLS? 问题原因: 非 root 用户未成功添加到用户组或未生效 解决方法: 12345678# 创建 docker 用户组sudo groupadd docker# 添加用户到用户组sudo gpasswd -a $&#123;USER&#125; docker# 重启服务sudo service docker restart# 切换当前会话到新 group 或者重启 X 会话 [必须步骤]newgrp - docker 或 pkill X 问题: Repository dgraph/dgraph already being pulled by another client. Waiting解决方法: 重启服务 123456789101112131415161718192021222324252627282930313233[root@WOdocker pull dgraph/dgraph:latestRepository dgraph/dgraph already being pulled by another client. Waiting.[root@WOM ~]#[root@WOM ~]# service docker restart停止 docker: [确定]Starting docker: [确定][root@WOM ~]#[root@WOM ~]# docker pull dgraph/dgraph:latest[root@WOM ~]# docker pull dgraph/dgraph:latestlatest: Pulling from dgraph/dgraphf2b818b26f75: Pulling fs layerc87298e9b6ec: Pulling fs layerd29d3718cea9: Pulling fs layer55982ec1ed3b: Pulling fs layera5019d93caef: Pulling fs layercea85299b18b: Pulling fs layer4696dbf656b6: Pulling fs layerc2c5bc4dfb3f: Pulling fs layerbd8f9f1a25f5: Pulling fs layerca927ff9c37d: Pulling fs layer8e51752bd503: Pulling fs layerc58a4ff12da9: Pulling fs layerPulling repository dgraph/dgraphTag latest not found in repository dgraph/dgraph # 1.说明标签错误[root@WOM ~]# docker search dgraph # 2.搜索这个镜像，看是否可以找到标签# 3.去官网查看标签 查询URL为: https://hub.docker.com/r/【镜像名】/tags/# https://hub.docker.com/r/dgraph/dgraph/tags/ 问题:Segmentation Fault or Critical Error encountered提示: Segmentation Fault or Critical Error encountered. Dumping core and aborting.Aborted解答: 安装错误安装 docker 了，应该安装 docker-io 问题:docker-io-1.7.1-2.el6.x86_64提示: Transaction Check Error: file /usr/bin/docker from install of docker-io-1.7.1-2.el6.x86_64 conflicts with file from package docker-1.5-5.el6.x86_64解答: 这个是因为先装了 docker，再装 docker-io 后的结果，解决方法是 yum remove docker 后再 yum install docker-io 即可。 问题:/var/run/docker.sock: no such file or directory12345678# 错误日志Get http:///var/run/docker.sock/v1.19/images/search?term=centos: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a ?# 问题原因解答: docker 没有启动，# 解决方法/etc/init.d/docker start 问题: 容器内中文乱码1234[root@c7c57188b482 test_data]# lltotal 4drwxrwxrwx 5 root root 4096 Oct 15 02:58 graph_data-rwxr-xr-x 1 root root 0 Oct 15 02:58 ???????????? 方案 1: 1234567891011yum install -y kde-l10n-Chineseyum reinstall -y glibc-common# 定义字符集localedef -c -f UTF-8 -i zh_CN zh_CN.utf8# 确认载入成功locale -a# echoecho &#x27;LANG=&quot;zh_CN.UTF-8&quot;&#x27; &gt; /etc/locale.confsource /etc/locale.conf 如果不能解决,可以用如下方法 方案 2: 123echo &quot;export LC_ALL=en_US.utf8&quot; &gt;&gt; ~/.bash_profile# 在用户中加入这个, 或者在 /etc/profie 中加入# 不是一个好方法，但是可以解决问题 /var/run/docker.sock: connect: permission denied解决方法 123(env) [scfan@fdm docker_cmd]$ docker import docker_7.tar docker_7Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/create?fromSrc=-&amp;message=&amp;repo=docker_7&amp;tag=: dial unix /var/run/docker.sock: connect: permission denied(env) [scfan@fdm docker_cmd]$ sudo chmod 777 /var/run/docker.sock docker: Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused “exec: &quot;/usr/sbin/init&quot;: stat /usr/sbin/init: no such file or directory”: unknown解决方法 123456789101112docker运行出现这个错误有可能是保存镜像使用的保存方式可导入的方式不同如果是使用import导入的镜像，应该注意是：import可以导入save保存的镜像包和export保存的容器包。但是如果导入的是save保存的镜像包，导入时没有错。但是run运行时就会出此错误。所以可以尝试使用load再次导入镜像，run一下试试# 使用 load, 而非 import(env) [fdm@fdm docker_tar]$ docker load -i centos7.taredf3aa290fb3: Loading layer 211.1MB/211.1MBLoaded image: centos:7(env) [fdm@fdm docker_tar]$ docker images | grep centoscentos 7 b5b4d78bc90c 6 weeks ago 203MB 参考链接docker 遇到 bash: No such file or directory 或 sh: not found 等问题","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker-Mysql 部署文档","slug":"Tools/Docker/docker-mysql","date":"2021-10-23T11:54:51.219Z","updated":"2021-10-23T11:54:51.219Z","comments":true,"path":"Tools/Docker/docker-mysql.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-mysql.md/","excerpt":"","text":"Docker-Mysql12# 如果防火墙已开启，必须开放端口，否则容器无法启动firewall-cmd --zone=public --add-port=3306/tcp --permanent Centos8.2 容器配置 1234567891011121314# 拉取镜像docker pull mysql# 检查镜像docker images# 创建容器sudo docker run -p 3306:3306 --name mysql \\-v /data/docker/mysql/conf:/etc/mysql \\-v /data/docker/mysql/logs:/var/log/mysql \\-v /data/docker/mysql/data:/var/lib/mysql \\-v /data/docker/mysql/mysql-files:/var/lib/mysql-files \\-e MYSQL_ROOT_PASSWORD=123456 \\-d mysql:5.7# 检查容器是否正确运行docker container ls mysql 配置 1234567891011121314# Mysql 默认配置host: 127.0.0.1port: 3306user: rootpassword: 123456# sudo docker exec -it mysql bash# 设置远程访问权限mysql -uroot -p123456use mysql;select host,user,password from user;grant all privileges on *.* to root@&#x27;%&#x27; identified by &quot;password&quot;;flush privileges;select host,user,password from user; 参考资源使用 Docker 搭建 MySQL 服务 mysql8.0 12345678910111213use mysql;-- CREATE DATABASE IF NOT EXISTS yourdbname DEFAULT CHARSET utf8 COLLATE utf8_general_ci;CREATE DATABASE wordpress;CREATE USER &#x27;wordpress&#x27;@&#x27;*&#x27; IDENTIFIED BY &#x27;qwe123&#x27;;grant select on wordpress.* to wordpress@&#x27;*&#x27;;GRANT ALL PRIVILEGES ON wordpress.* TO wordpress@&quot;*&quot;;flush privileges;CREATE USER &#x27;scfan&#x27;@&#x27;*&#x27; IDENTIFIED BY &#x27;qwe123&#x27;;ALTER USER &#x27;scfan&#x27;@&#x27;*&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;qwe123&#x27;;grant select on 数据库.* to 用户名@登录主机;","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker 功能模块","slug":"Tools/Docker/docker-function","date":"2021-10-23T11:54:51.218Z","updated":"2021-10-23T11:54:51.218Z","comments":true,"path":"Tools/Docker/docker-function.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-function.md/","excerpt":"","text":"TODO docker进入容器后，界面会出现问题，会进入容器登录界面，待解决 功能模块Docker 修改默认存储位置(可选)由于 Docker 默认存储位置在 /, 但/空间不足时，可以将默认存储位置修改到其他位置。 123456789# 先关闭 docker 容器docker stop xxxx# 关闭 docker 服务systemctl stop docker# 迁移数据mv /var/lib/docker /home/fdm/docker_dataln -s /home/fdm/docker_data /var/lib/docker# 重启服务systemctl start docker docker-快速登录(可选)1234# 加入的.bash_profilefunction dockerlogin()&#123; docker exec -it --env COLUMNS=`tput cols` --env LINES=`tput lines` $1 /bin/bash&#125; Docker-时区配置(必选)docker 时区问题，容器时间和宿主机时间不一致问题 1234567891011# 方法1：容器外部配置 Docker时区设置docker cp /etc/localtime 容器id:/etc/localtime# 方法2: 容器内部配置 容器外部配置报错，进入容器内部配置即可。[fdm@fdm2 fdm_server]$ docker cp /etc/localtime fdm_server:/etc/localtimeError response from daemon: Could not find the file /usr/share/zoneinfo/usr/share/zoneinfo/Asia in container fdm_server[root@f3a3540cb8e5 ~]# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime[root@f3a3540cb8e5 ~]# echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone[root@f3a3540cb8e5 ~]# dateFri Jul 31 09:42:08 CST 2020 docker-容器内部命令窗口大小设置(可选)问题：容器内部 vim/vi 只能查看屏幕一部分内容， 1234567# 查看宿主机屏幕大小[fdm@fdm2 nfs_data]$ stty size48 210# 配置容器内部 stty 大小stty rows 48 columns 210# 写入 /etc/profilesudo echo &quot;stty rows 48 columns 210&quot; &gt;&gt; /etc/profile TODO 当外部窗口变化时，容器内部需要对应修改。 Docker pull 加速(可选)TODO 未成功 123456789# 使用国内镜像源# 修改文件 /etc/docker/daemon.json&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;# 重启服务(重启前记得手动关闭所有Docker容器)systemctl daemon-reloadsystemctl restart docker Docker 性能监控不同方法： 官方 docker stats ps -e ctop docker stats参考链接: Docker 官方 stats Linux 内存监控，据说 Docker 官方 stats 不准确 docker stats -a ps -e查看 Docker 运行情况 1234ps aux | grep d276413151a0ps -e -o &#x27;pid,comm,args,pcpu,rsz,vsz,stime,user,uid&#x27; | grep 8189rsz 为实际占用内存 ctop 安装(可选)参考链接：实时查看 Docker 容器占用的 CPU、内存状态 1234wget https://github.com/bcicen/ctop/releases/download/v0.5/ctop-0.5-linux-amd64 -O ctopsudo cp ctop /usr/local/bin/.sudo chmod +x /usr/local/bin/ctopctop 查看 Docker 容器使用资源情况docker stats -a # 原生 docker 命令，效果略差于 ctop","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker 介绍","slug":"Tools/Docker/docker-info","date":"2021-10-23T11:54:51.218Z","updated":"2021-10-23T11:54:51.218Z","comments":true,"path":"Tools/Docker/docker-info.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-info.md/","excerpt":"","text":"Docker 的应用场景 Web 应用的自动化打包和发布。 自动化测试和持续集成、发布。 在服务型环境中部署和调整数据库或其他的后台应用。 从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。 Docker 的优点 持续部署与测试 Docker 可以确保从开发到产品发布整个过程环境的一致性。便于部署和开发测试。 多云平台 可移植性 环境标准化和版本控制 可以方便的进行版本管理 隔离性 安全性 1.优势 docker 启动快，开启一个 container 通常只需要几秒钟，而虚拟机开机至少几十秒；docker 需要的资源更少， docker 在操作系统级别进行虚拟化， docker 容器和内核交互，几乎没有性能损耗，性能优于通过 Hypervisor 层与内核层的虚拟化；docker 更轻量， docker 重装或者复制到其他机器比虚拟机快很多，重新安装 docker 容器只需要几十秒种，而虚拟机至少需要几分钟；并且 dockers 的 image 文件导出占用只有几百兆，但是虚拟机的镜像包往往有几个 G； 2.缺点 docker 无法对外开放所有端口，docker 只能对宿主机和同宿主机的 docker 开放所有端口，其他机器访问 dockers 需要通过宿主机进行端口转发，而不能像虚拟机一样通过 IP 访问；docker 默认安装系统包较少，默认安装的虚拟机往往字段一些常用的系统包，但是 docker 很多常用的包都没有(比如 docker 下 centos7 默认是没有 ip 命令的，也不支持 ssh 登陆)； Docker 的主要用途(1)提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。(2)提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。(3)组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构 https://blog.csdn.net/u013007900/article/details/62219169https://blog.csdn.net/xiangxizhishi/article/details/79441391 Docker 架构 Docker 基本概念https://blog.csdn.net/omnispace/article/details/79778544 Docker 介绍以及其相关术语、底层原理和技术:https://blog.csdn.net/zxygww/article/details/53709106 Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类 Docker 术语集群一个集群指容器运行所需要的云资源组合，关联了若干服务器节点、负载均衡、专有网络等云资源。节点一台服务器(可以是虚拟机实例或者物理服务器)已经安装了 Docker Engine，可以用于部署和管理容器；容器服务的 Agent 程序会安装到节点上并注册到一个集群上。集群中的节点数量可以伸缩。容器一个通过 Docker 镜像创建的运行时实例，一个节点可运行多个容器。镜像Docker 镜像是容器应用打包的标准格式，在部署容器化应用时可以指定镜像，镜像可以来自于 Docker Hub，阿里云容器 Hub，或者用户的私有 Registry。镜像 ID 可以由镜像所在仓库 URI 和镜像 Tag(缺省为 latest)唯一确认。编排模板编排模板包含了一组容器服务的定义和其相互关联，可以用于多容器应用的部署和管理。容器服务支持 Docker Compose 模板规范并有所扩展。应用一个应用可通过单个镜像或一个编排模板创建，每个应用可包含 1 个或多个服务。服务一组基于相同镜像和配置定义的容器，作为一个可伸缩的微服务。关联关系 镜像：用来启动容器的只读模板，是容器启动所需的 rootfs，类似于虚拟机所使用的镜像。 容器：Docker 容器是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 镜像是容器的基础，可以简单的理解为镜像是我们启动虚拟机时需要的镜像，容器时虚拟机成功启动后，运行的服务。 其他模块123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475其他模块使用xshell登录docker -- 方式1 进入docker虚拟机ssh 192.168.99.100 # docker的IP ，通过查看docker虚拟机的ip登入docker界面用户名默认是: docker密码默认: tcuser端口: 22# 涉及安装openssh-serverhttp://blog.csdn.net/vincent2610/article/details/52490397yum install -y openssh-servervi /etc/ssh/sshd_config将PermitRootLogin的值从withoutPassword改为yes登出容器，并将容器保存为新的镜像。关闭原有容器，用新镜像生成新的容器使用xshell登录docker -- 方式2 docker进入容器1.安装配置好sshd，并进入后重启服务。2.docker run 通过 -p 50001:22，将22端口映射到500013.打开cmd，查看windwosIP，例如 192.168.43.254.ssh 192.168.43.25 50001或者 ssh 192.168.43.25 -p 50001即可登录进入容器中配置容器系统参数 - 需要从docker上配置# sysctl: setting key &quot;vm.max_map_count&quot;: Read-only file system 问题参考链接: https://stackoverflow.com/questions/41064572/docker-elk-vm-max-map-count说明: 由于docker是最高层级，容器是最低层级，部分系统参数需要从docker中修改，否则权限不足解决方法:docker-machine create -d virtualbox default # 创建默认虚拟机，涉及需要开启windows功能 Hyper-Vdocker-machine start 机器名称 # 出现蓝屏问题，暂时未解决 PASSdocker-machine sshsudo sysctl -w vm.max_map_count=262144配置容器系统参数 - 需要从docker上配置 -- 问题1: 登陆docker界面，但是docker中virtualbox不存在。# 查看已有的docker-machine机器名称docker-machine ls# 进入dockerdocker-machine ssh 机器名称ID错误: Error: No machine name(s) specified and no &quot;default&quot; machine exists错误原因: 本机没有machine，需要创建# 创建docker机器docker-machine create -d virtualbox default 机器名称错误: Error with pre-create check: &quot;This computer is running Hyper-V. VirtualBox won&#x27;t boot a 64bits VM when Hyper-V is activated. Either use Hyper-V as a driver, or disable the Hyper-V hypervisor. (To skip this check, use --virtualbox-no-vtx-check)错误原因: docker的virtualbox和已有的虚拟机VMware或virtualBox冲突参考链接: http://blog.csdn.net/qwsamxy/article/details/50533007/解决方法:bcdedit /set hypervisorlaunchtype offbcdedit /set hypervisorlaunchtype autobcdedit /copy &#123;current&#125; /d &quot;Windows 10 (开启 Hyper-V)&quot;bcdedit /set &#123;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&#125; hypervisorlaunchtype auto![ce8948b05eeb29c99a714e80749170f0.png](en-resource://database/14842:0)切换用户执行脚本su - test -c &quot;pwd&quot;删除images后，释放空间: (会删除未使用的的容器和已删除的镜像-慎重)docker system prune -a## docker-ce容器管理页面参考链接: https://www.cnblogs.com/myzony/p/9071210.htmlpassCentOS7可用？ docker load &amp; docker import 的区别 docker save images_name：将一个镜像导出为文件，再使用 docker load 命令将文件导入为一个镜像，会保存该镜像的的所有历史记录。比 docker export 命令导出的文件大，很好理解，因为会保存镜像的所有历史记录。 docker export container_id：将一个容器导出为文件，再使用 docker import 命令将容器导入成为一个新的镜像，但是相比 docker save 命令，容器文件会丢失所有元数据和历史记录，仅保存容器当时的状态，相当于虚拟机快照。 docker save 对应 docker load docker export 对应 docker import","categories":[],"tags":[]},{"title":"Docker-Db2 部署文档","slug":"Tools/Docker/docker-db2","date":"2021-10-23T11:54:51.217Z","updated":"2021-10-23T11:54:51.217Z","comments":true,"path":"Tools/Docker/docker-db2.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-db2.md/","excerpt":"","text":"Docker-Db2(未测试)123456# pulldocker pull ibmcom/db2express-c# rundocker run -d -it -p 5000:5000 \\ -e DB2INST1_PASSWORD=db2inst1-pwd -e LICENSE=accept \\ -v /Users/zhenglinzhu/db2:/db2data ibmcom/db2express-c bash 参考资源docker 安装 db2","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker-Compose使用文档","slug":"Tools/Docker/docker-compose","date":"2021-10-23T11:54:51.217Z","updated":"2021-10-23T11:54:51.217Z","comments":true,"path":"Tools/Docker/docker-compose.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-compose.md/","excerpt":"","text":"简介docker compose 是用来配置和运行多容器服务的工具，通过 docker-compose 命令可轻松对多个容器进行如下操作： (1)启动，停止和重建服务 (2)查看正在运行的服务的状态 (3)通过流输出正在运行的服务的日志 (4)对某个服务执行命令 Docker-Compose 安装Centos7 安装 Docker-Compose 12345678910# 下载：# https://github.com/docker/compose/releases# 下载文件# wget https://github.com/docker/compose/releases/download/1.26.2/docker-compose-Linux-x86_64sudo cp docker-compose-Linux-x86_64 /usr/local/bin/docker-composesudo chmod a+x /usr/local/bin/docker-composedocker-compose --version 常用命令常用命令 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#启动并后台运行所有的服务docker-compose up -d#列出项目中目前的所有容器docker-compose ps#停止某个服务docker-compose stop 服务名#启动某个服务docker-compose start 服务名#停止并删除容器、网络、卷、镜像docker-compose down# 启动所有容器docker-compose -f 21-es-docker-compose.yml start# 查看最新日志 配置文件 service 名称docker-compose -f 21-es-docker-compose.yml logs -t -f es_client1 # 运行命令docker-compose -f es-docker-compose.yml up -d# 查看 compose 日志docker-compose -f 12-es-docker-compose.yml logsup 启动所有在Compose问中定义的容器，并且把它们的日志信息汇集在一起。通常会添加-d参数(在up后面)，让容器在后台执行start 启动指定的已经存在的容器build 重新建造由Dockerfile构建的镜像。ps 获取由Compose管理的容器的状态信息run 启动一个容器，并允许一个一次性的命令。被连接的容器会同时启动，除非用了 --no-deps参数。logs 汇集由Compose管理的容器的日志，并以彩色输出。stop 停止容器，但不会删除它们rm 删除已停止的容器。不要忘记使用-v参数来删除任何由Docker管理的数据卷说明： 一个普通的工作流程以docker-compose up -d名利启动应用程序开始。docker-compose logs和ps命令可以用来验证应用程序的状态，还能帮助调试。修改代码后，先执行docker-compose build 构建新的镜像，然后执行docker-compose up -d 取代运行中的容器。注意，Compose会保留原来容器中所有旧的数据卷，这意味着即使容器更新后，数据库和缓存也依旧在容器内(这很可能造成混淆，因此要特别小心)。 如果你修改了Compose的YAML文件，但不需要构建新的镜像，可以通过up -d参数使Compose以新的配置替换容器。如果想要强制停止Compose并重新创建所有容器，可以使用--force-recreate选项来达到目的。 常用参数123# 自动无限次重启服务restart:always 使用样例 参考文档 Docker_es 创建网络 1docker network create --subnet=172.19.0.0/16 esnetwork es-docker-compose.yml 文件内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108# 部分ES环境变量类型的参数需要使用双引号, 其他参数均可在此处映射，同时注意外部映射# 存储目录只能是data，且需要预先创建. 若映射其他目录启动将出错.version: &quot;2.2&quot;services: es_master: image: elasticsearch:7.4.2 container_name: 12_es_master1 environment: - bootstrap.system_call_filter=false - node.name=12_es_master1 - node.master=true - node.data=false - cluster.name=es-docker-cluster1 #- discovery.seed_hosts=192.168.172.73:9300,192.168.172.73:9301,172.16.1.3:9300,172.16.1.3:9301,172.16.1.3:9302 - discovery.seed_hosts=192.168.172.73 - transport.publish_host=192.168.172.73 - transport.publish_port=9300 - bootstrap.memory_lock=true - &quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot; - cluster.initial_master_nodes=12_es_master1 - Des.discovery.zen.minimum_master_nodes=1 - &quot;network.host:0.0.0.0&quot; - http.port=9200 - http.cors.enabled=true - http.cors.allow-origin=&quot;*&quot; - http.publish_host=192.168.172.73 - http.publish_port=9200 - xpack.security.enabled:false - thread_pool.get.queue_size=1000 - thread_pool.write.queue_size=1000 - thread_pool.analyze.queue_size=1000 - thread_pool.search.queue_size=1000 - thread_pool.listener.queue_size=1000 - discovery.zen.ping_timeout=120s ulimits: memlock: soft: -1 hard: -1 volumes: - &quot;/data_storage/12_es_master1:/usr/share/elasticsearch/data&quot; - &quot;/data_storage/es_plugins:/usr/share/elasticsearch/plugins&quot; ports: - 192.168.172.73:9200:9200 - 192.168.172.73:9300:9300 networks: es_network: ipv4_address: 172.19.10.21 # deploy: # resources: # limits: # #cpus: &#x27;2&#x27; # memory: 16G es_node1: image: elasticsearch:7.4.2 container_name: 12_es_node1 environment: - bootstrap.system_call_filter=false - node.name=12_es_node1 - node.master=false - node.data=true - cluster.name=es-docker-cluster1 #- discovery.seed_hosts=192.168.172.73:9300,192.168.172.73:9301,172.16.1.3:9300,172.16.1.3:9301,172.16.1.3:9302 - discovery.seed_hosts=192.168.172.73 - transport.publish_host=192.168.172.73 - transport.publish_port=9301 - bootstrap.memory_lock=true - &quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot; - cluster.initial_master_nodes=12_es_master1 - Des.discovery.zen.minimum_master_nodes=1 - &quot;network.host:0.0.0.0&quot; - http.port=9200 - http.cors.enabled=true - http.cors.allow-origin=&quot;*&quot; - http.publish_host=192.168.172.73 - http.publish_port=9201 - xpack.security.enabled:false - thread_pool.get.queue_size=1000 - thread_pool.write.queue_size=1000 - thread_pool.analyze.queue_size=1000 - thread_pool.search.queue_size=1000 - thread_pool.listener.queue_size=1000 - discovery.zen.ping_timeout=120s ulimits: memlock: soft: -1 hard: -1 volumes: - &quot;/data_storage/12_es_node1:/usr/share/elasticsearch/data&quot; - &quot;/data_storage/es_plugins:/usr/share/elasticsearch/plugins&quot; ports: - 192.168.172.73:9201:9200 - 192.168.172.73:9301:9300 networks: es_network: ipv4_address: 172.19.10.41 # deploy: # resources: # limits: # #cpus: &#x27;2&#x27; # memory: 16G # 添加 --compatibility 参数运行# 使用现成的桥接网络，指定名称即可networks: es_network: external: name: esnetwork 更新容器 1docker-compose -f es-docker-compose.yml up -d 附件参考资源 Docker Compose Github 链接 Docker Compose 官网链接","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker-Elasticsearch 部署文档","slug":"Tools/Docker/docker-es","date":"2021-10-23T11:54:51.217Z","updated":"2021-10-23T11:54:51.217Z","comments":true,"path":"Tools/Docker/docker-es.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-es.md/","excerpt":"","text":"Docker-ES 部署宿主机部署解压即用 使用 Docker-Compose 部署配置样例创建网络 1docker network create --subnet=172.19.0.0/16 esnetwork es-docker-compose.yml 文件内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108# 部分ES环境变量类型的参数需要使用双引号, 其他参数均可在此处映射，同时注意外部映射# 存储目录只能是data，且需要预先创建. 若映射其他目录启动将出错.version: &quot;2.2&quot;services: es_master: image: elasticsearch:7.4.2 container_name: 12_es_master1 environment: - bootstrap.system_call_filter=false - node.name=12_es_master1 - node.master=true - node.data=false - cluster.name=es-docker-cluster1 #- discovery.seed_hosts=192.168.172.73:9300,192.168.172.73:9301,172.16.1.3:9300,172.16.1.3:9301,172.16.1.3:9302 - discovery.seed_hosts=192.168.172.73 - transport.publish_host=192.168.172.73 - transport.publish_port=9300 - bootstrap.memory_lock=true - &quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot; - cluster.initial_master_nodes=12_es_master1 - Des.discovery.zen.minimum_master_nodes=1 - &quot;network.host:0.0.0.0&quot; - http.port=9200 - http.cors.enabled=true - http.cors.allow-origin=&quot;*&quot; - http.publish_host=192.168.172.73 - http.publish_port=9200 - xpack.security.enabled:false - thread_pool.get.queue_size=1000 - thread_pool.write.queue_size=1000 - thread_pool.analyze.queue_size=1000 - thread_pool.search.queue_size=1000 - thread_pool.listener.queue_size=1000 - discovery.zen.ping_timeout=120s ulimits: memlock: soft: -1 hard: -1 volumes: - &quot;/data_storage/12_es_master1:/usr/share/elasticsearch/data&quot; - &quot;/data_storage/es_plugins:/usr/share/elasticsearch/plugins&quot; ports: - 192.168.172.73:9200:9200 - 192.168.172.73:9300:9300 networks: es_network: ipv4_address: 172.19.10.21 # deploy: # resources: # limits: # #cpus: &#x27;2&#x27; # memory: 16G es_node1: image: elasticsearch:7.4.2 container_name: 12_es_node1 environment: - bootstrap.system_call_filter=false - node.name=12_es_node1 - node.master=false - node.data=true - cluster.name=es-docker-cluster1 #- discovery.seed_hosts=192.168.172.73:9300,192.168.172.73:9301,172.16.1.3:9300,172.16.1.3:9301,172.16.1.3:9302 - discovery.seed_hosts=192.168.172.73 - transport.publish_host=192.168.172.73 - transport.publish_port=9301 - bootstrap.memory_lock=true - &quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot; - cluster.initial_master_nodes=12_es_master1 - Des.discovery.zen.minimum_master_nodes=1 - &quot;network.host:0.0.0.0&quot; - http.port=9200 - http.cors.enabled=true - http.cors.allow-origin=&quot;*&quot; - http.publish_host=192.168.172.73 - http.publish_port=9201 - xpack.security.enabled:false - thread_pool.get.queue_size=1000 - thread_pool.write.queue_size=1000 - thread_pool.analyze.queue_size=1000 - thread_pool.search.queue_size=1000 - thread_pool.listener.queue_size=1000 - discovery.zen.ping_timeout=120s ulimits: memlock: soft: -1 hard: -1 volumes: - &quot;/data_storage/12_es_node1:/usr/share/elasticsearch/data&quot; - &quot;/data_storage/es_plugins:/usr/share/elasticsearch/plugins&quot; ports: - 192.168.172.73:9201:9200 - 192.168.172.73:9301:9300 networks: es_network: ipv4_address: 172.19.10.41 # deploy: # resources: # limits: # #cpus: &#x27;2&#x27; # memory: 16G # 添加 --compatibility 参数运行# 使用现成的桥接网络，指定名称即可networks: es_network: external: name: esnetwork 更新容器 1docker-compose -f es-docker-compose.yml up -d ES-配置详见 Es-配置","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker-CDH部署文档","slug":"Tools/Docker/docker-cdh","date":"2021-10-23T11:54:51.216Z","updated":"2021-10-23T11:54:51.216Z","comments":true,"path":"Tools/Docker/docker-cdh.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-cdh.md/","excerpt":"","text":"文档说明文档内容如下 文档说明 部署步骤 详细使用 参考资源 部署步骤123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# 拉取镜像docker pull cloudera/quickstart# 运行容器docker run -id --hostname=quickstart.cloudera --privileged=true \\-p 8020:8020 -p 7180:7180 -p 21050:21050 -p 50070:50070 \\-p 50075:50075 -p 50010:50010 -p 50020:50020 -p 8890:8890 \\-p 60010:60010 -p 10002:10002 -p 25010:25010 -p 25020:25020 \\-p 18088:18088 -p 8088:8088 -p 19888:19888 -p 7187:7187 \\-p 11000:11000 -t -p 8888:8888 \\--name=cdh1 cloudera/quickstart /usr/bin/docker-quickstart# 配置 快速登录容器命令 dockerlogin# 放置在 ~/.bash_profile 中 source ~/.bash_profilefunction dockerlogin()&#123; docker exec -it --env COLUMNS=`tput cols` --env LINES=`tput lines` $1 /bin/bash&#125;# 登录容器dockerlogin cdh1# 启动CDH服务[root@quickstart /]# /home/cloudera/cloudera-manager --enterprise[QuickStart] Shutting down CDH services via init scripts...kafka-server: unrecognized serviceJMX enabled by defaultUsing config: /etc/zookeeper/conf/zoo.cfg[QuickStart] Disabling CDH services on boot...error reading information on service kafka-server: No such file or directory[QuickStart] Starting Cloudera Manager server...[QuickStart] Waiting for Cloudera Manager API...[QuickStart] Starting Cloudera Manager agent...[QuickStart] Activating trial license for Enterprise...[QuickStart] Configuring deployment...Submitted jobs: 16[QuickStart] Deploying client configuration...Submitted jobs: 17[QuickStart] Starting Cloudera Management Service...Submitted jobs: 25[QuickStart] Enabling Cloudera Manager daemons on boot...________________________________________________________________________________Success! You can now log into Cloudera Manager from the QuickStart VM s browser: http://quickstart.cloudera:7180 Username: cloudera Password: cloudera# 宿主机 配置 CDH-Hosts 添加 quickstart.cloudera 内容(env) [fdm@fdm ~]$ sudo vim /etc/hosts127.0.0.1 localhost fdm quickstart.cloudera192.168.172.73 fdm quickstart.cloudera 查看 CDH 界面 http://192.168.172.73:7180/cmf/home 详细使用详见 站内文档 CDH 使用文档 参考资源 Docker 部署 CDH win-docker-cdh使用 https://blog.csdn.net/matrixbbwolf/article/details/108791329 问题docker exited with 139 when running cloudera/quickstart:latest环境： win10-docker-专业版-wsl2 解决方案: 调大 docker 给容器分配的内存, 10G + WSL2 修改为 hvper-V 方式 cdh-flinkhttps://github.com/mbalassi/flink-parcel","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Docker常用命令","slug":"Tools/Docker/docker-cmd","date":"2021-10-23T11:54:51.216Z","updated":"2021-10-23T11:54:51.216Z","comments":true,"path":"Tools/Docker/docker-cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Docker/docker-cmd.md/","excerpt":"","text":"Docker 常用命令1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# Docker服务启停service docker restart# 创建一个容器docker run -it -v /docker_test:/yufei --name yufei_6 centos参数说明-i: 允许我们对容器内的 (STDIN) 进行交互-t: 在新容器内指定一个伪终端或终端-v: 是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。--name: 是给容器起一个名字，可省略，省略的话docker会随机产生一个名字# 查看docker容器列表(运行中)docker ps# 查看所有的docker容器列表docker ps -a# 启停容器docker start yufei_01docker stop yufei_01docker restart yufei_01# 查看容器的日志docker logs -f yufei_01# 删除容器，如果容器在运行需要先停止docker stop yufei_01docker rm yufei_01# 删除所有容器docker rm $(docker ps -a -q)# Docker服务启停service docker startservice docker stopservice docker restart# Docker网络管理docker network create --subnet=172.18.0.0/16 extnetwork #创建网络docker network ls #列出当前所有网络docker network rm extnetwork #删除网络# 创建一个容器docker run --privileged=true -m 8000M --cpus=2 -itd --name 12306 --net extnetwork --ip 172.18.0.72 docker_7 /usr/sbin/init参数说明-i：允许我们对容器内的 (STDIN) 进行交互-t：在新容器内指定一个伪终端或终端-d: 后台运行--privileged=true 如果不加此参数，root也可能会部分操作无权限-m 限制最大使用内存--cpus cpu使用限制--name：是给容器起一个名字--net 指定网段--ip 指定ip参数里面的centos是镜像名字，如果本地无名字对应的镜像，则会在网络上寻找，并自动下载到本地,若不指定版本，则下载最新版本# 查看docker容器列表(运行中)docker ps# 查看所有的docker容器列表docker ps -a# 启停容器docker start docker_7docker restart docker_7docker stop docker_7# 删除容器，如果容器在运行需要先停止docker stop docker_7docker rm docker_7# 容器保存为镜像docker commit docker_7 img_docker_7# 镜像导入导出docker export docker_7 -o docker_7.tardocker import docker_7.tar docker_7 Docker 命令大全 Docker 命令大全:http://www.runoob.com/docker/docker-command-manual.html 容器生命周期管理 docker run 创建一个新的容器并运行一个命令 docker restart 重启容器 docker kill -s KILL mynginx 杀掉一个运行中的容器。 -s :向容器发送一个信号 docker rm : 删除一个或多少容器 docker pause :暂停容器中所有的进程。 docker unpause :恢复容器中所有的进程。 docker create : 创建一个新的容器但不启动它 docker exec : 在运行的容器中执行命令 容器操作 docker ps : 列出容器 docker inspect : 获取容器/镜像的元数据。 docker top :查看容器中运行的进程信息，支持 ps 命令参数 docker attach :连接到正在运行中的容器 docker events : 从服务器获取实时事件 docker logs : 获取容器的日志 docker wait : 阻塞运行直到容器停止，然后打印出它的退出代码 docker export :将文件系统作为一个 tar 归档文件导出到 STDOUT docker port :列出指定的容器的端口映射，或者查找将 PRIVATE_PORT NAT 到面向公众的端口。 容器 rootfs 命令 docker commit :从容器创建一个新的镜像。 docker cp :用于容器与主机之间的数据拷贝 docker diff : 检查容器里文件结构的更改 镜像仓库 docker login : 登陆到一个 Docker 镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hubdocker docker logout : 登出一个 Docker 镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub docker pull : 从镜像仓库中拉取或者更新指定镜像 docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库 docker search: 从 Docker Hub 查找镜像 本地镜像管理 docker images : 列出本地镜像 docker rmi : 删除本地一个或多少镜像 docker tag : 标记本地镜像，将其归入某一仓库. 重命名 docker build 命令用于使用 Dockerfile 创建镜像 docker history : 查看指定镜像的创建历史 docker save : 将指定镜像保存成 tar 归档文件 docker import : 从归档文件中创建镜像 info|version docker info : 显示 Docker 系统信息，包括镜像和容器数。 docker version :显示 Docker 版本信息 docker 命令样例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 启动镜像时，设定docker系统参数 - 修改系统参数 生效docker run -it -d -p 80:80 -p 3000:3000 -p 8080:8080 -p 9200:9200 -p 5600:5602 -p 5601:5601 --env=vm.max_map_count=262144 fdm_docker_ok /bin/bash镜像的导入导出# 导出镜像 imagessudo docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZEsudo docker save -o /home/user/images/ubuntu_14.04.tar ubuntu:14.04# 导入镜像sudo docker load --input ubuntu_14.04.tarsudo docker load &amp;lt; ubuntu_14.04.tar镜像删除docker rmi images_id容器模块查看容器的环境变量* 使用docker inspect命令来查看# docker inspect &lt;CONTAINER-NAME&gt; OR &lt;CONTAINER-ID&gt;* 使用docker exec -it &lt;CONTAINER-NAME&gt; OR &lt;CONTAINER-ID&gt; env查看docker镜像启动命令 - 镜像启动每次容器ID都会变更docker run -it -d -p 50001:22 -p 80:80 -p 3000:3000 -p 8080:8080 -p 9200:9200 -p 5600:5602 -p 5601:5601 --env=vm.max_map_count=262144 fdm_docker /bin/bashdocker 容器启动命令docker container start 4d15e75d1116 进入docker容器中docker exec -it fa6e4ac38997 /bin/bash查看容器ID# 查看当前运行的容器docker ps# 查看历史所有的容器docker ps -a 可以通过启动历史容器，并进入保存容器为镜像docker ps -a 可以通过启动历史容器，并进入容器的导入导出# 容器的导入docker import fdm_docker.tar.gz fdm_docker# 将容器保存为镜像docker commit 8e613c207029 fdm_docker02 # 查看所有容器名称及IP(env) [fdm@fdm ~]$ docker inspect -f &#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; $(docker ps -aq)/oracle11g_2 - 172.17.0.3/fdm_es56 - 172.18.0.85/fdm_es74 - 172.18.0.84/oracle11g - 172.17.0.2/fdm_graph - 172.18.0.86","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"}]},{"title":"Plugins 插件清单","slug":"Tools/Django/plugins","date":"2021-10-23T11:54:51.212Z","updated":"2021-10-23T11:54:51.212Z","comments":true,"path":"Tools/Django/plugins.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/plugins.md/","excerpt":"","text":"环境说明 Python 3.8.10 Django 3.2.6 Centos 8.1 优质插件django-reversion 数据版本管理功能介绍: 数据版本管理，支持查看历史和还原数据. 上手简单，配置非常便利. ★★★★☆ 对于复杂字段不支持，复杂字段只会显示最新的数据无法还原 (exp: manytomany) 使用步骤 步骤1: 安装包 12pip install django-reversiondjango-reversion==4.0.0 Add reversion to INSTALLED_APPS Run manage.py migrate 步骤2: 注册版本管理模型 1234567891011121314151617181920212223242526272829303132# 方法1：记录通过模型修改的操作from django.contrib import adminfrom reversion.admin import VersionAdminfrom django.db import modelsclass YourModel(models.Model): pro_id = models.CharField()@admin.register(YourModel)class YourModelAdmin(VersionAdmin): pass# 方法2：记录通过 Api 修改的操作from reversion.views import RevisionMixinfrom rest_framework.viewsets import ModelViewSetclass APIView(RevisionMixin, ModelViewSet): def list(self, request, *args, **kwargs): pass def create(self, request, *args, **kwargs): pass def update(self, request, *args, **kwargs): pass def destroy(self, request, *args, **kwargs): pass 步骤3: 初始化数据 1234567891011121314# 清除历史表 &amp; 建表python manager.py makemigrations reversionpython manager.py migrate reversion --fakepython manager.py migrate reversion# 初始化python manage.py createinitialrevisions# 执行结果# 执行结果Creating revisions for 项目管理- Created 48 / 48# 会自动创建如下表 用于存储初始值 &amp; 迭代版本# reversion_version# reversion_revision 其他使用 - 查询具体对象或者model中删除的历史记录 123456789from django.shortcuts import get_object_or_404from reversion.models import Version# version_obj_id指某一个具体对象的id，model为要查询的tableinstance = get_object_or_404(model, id=version_obj_id)queryset = Version.objects.get_for_object(instance)# 查询model中删除历史queryset = Version.objects.get_deleted(model) 其他使用 - 恢复历史记录 12345from reversion.models import Version# version_id为上一步查询出的历史记录的idreversion = Version.objects.filter(id=version_id)reversion[0].revision.revert() TODO 如何 指定历史版本说明文字 如何 查看更明细的字段修改，比如 明确哪个字段变更, 以及字段从AA-&gt;BB Api-RevisionMixin 没有版本说明文字,如何添加修改? 参考资源: Django-Reversion Github 参考博客 参考资源 Django插件集合 Django博主 插件清单","categories":[],"tags":[]},{"title":"功能点","slug":"Tools/Django/function","date":"2021-10-23T11:54:51.211Z","updated":"2021-10-23T11:54:51.211Z","comments":true,"path":"Tools/Django/function.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/function.md/","excerpt":"","text":"[toc] Django-admin如何自定义 HTML 文件方法1: 自定义 所有页面模板 12345678910111213141516171819# 修改方法从pip包 contrib/admin/templates/admin 拷贝HTML 放到 项目/templates/admin/ 即可# 以下 HTML 可以自定义actions.htmlapp_index.htmlchange_form.htmlchange_form_object_tools.htmlchange_list.htmlchange_list_object_tools.htmlchange_list_results.htmldate_hierarchy.htmldelete_confirmation.htmlobject_history.htmlpagination.htmlpopup_response.htmlprepopulated_fields_js.htmlsearch_form.htmlsubmit_line.html 参考资源: Overwrite Django-admin templates 方法2: 自定义 单个页面模板 12345# 新建 HTML 文件temapltes/xxx/xxxx.html# 指定单个页面 采用新模板change_list_template = &#x27;xxxx/xxx.html&#x27;","categories":[],"tags":[]},{"title":"Plugins 插件清单","slug":"Tools/Django/plugins-edit","date":"2021-10-23T11:54:51.211Z","updated":"2021-10-23T11:54:51.211Z","comments":true,"path":"Tools/Django/plugins-edit.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/plugins-edit.md/","excerpt":"","text":"环境说明 Python 3.8.10 Django 3.2.6 Centos 8.1 插件详细清单主要内容项 序号 类别 名称 功能说明 评级 Github链接 使用教程 优质插件django-debug-toolbar debug调试工具https://django-debug-toolbar.readthedocs.io/en/latest/ sentry - 哨兵机制功能: 监控服务是否正常, 提供错误报警错误日志等等 支持多平台多语种监控, 支持统一管理配置 强力推荐, 适合项目管理管控 ★★★★★ 步骤1: 安装服务 1pip install --upgrade sentry-sdk 步骤2: 配置项目 1234567891011121314151617181920212223import sentry_sdkfrom sentry_sdk.integrations.django import DjangoIntegrationsentry_sdk.init( # DSN 需要从 sentry 管理界面中获取.... dsn=&quot;https://examplePublicKey@o0.ingest.sentry.io/0&quot;, integrations=[DjangoIntegration()], # Set traces_sample_rate to 1.0 to capture 100% # of transactions for performance monitoring. # We recommend adjusting this value in production, traces_sample_rate=1.0, # If you wish to associate users to errors (assuming you are using # django.contrib.auth) you may enable sending PII data. send_default_pii=True, # By default the SDK will try to use the SENTRY_RELEASE # environment variable, or infer a git commit # SHA as release, however you may want to set # something more human-readable. # release=&quot;myapp@1.0.0&quot;,) 步骤3: 试用(设置错误用例 并查看消息) 1234567891011from django.urls import pathdef trigger_error(request): division_by_zero = 1 / 0urlpatterns = [ path(&#x27;sentry-debug/&#x27;, trigger_error), # ...] 参考资源 Sentry-Django 官方文档 Sentry 管理界面 优质项目wagtailhttps://github.com/wagtail/wagtail内容管理发布系统 参考资源 Django插件集合: https://djangopackages.org/ 插件清单","categories":[],"tags":[]},{"title":"","slug":"Tools/Django/install","date":"2021-10-23T11:54:51.211Z","updated":"2021-10-23T11:54:51.211Z","comments":true,"path":"Tools/Django/install.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/install.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"常用命令","slug":"Tools/Django/cmd","date":"2021-10-23T11:54:51.210Z","updated":"2021-10-23T11:54:51.210Z","comments":true,"path":"Tools/Django/cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/cmd.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Django 使用文档","slug":"Tools/Django/README","date":"2021-10-23T11:54:51.210Z","updated":"2021-10-23T11:54:51.210Z","comments":true,"path":"Tools/Django/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/README.md/","excerpt":"","text":"文档指引 install-部署 cmd-常用命令 config-功能模块 相关配置 example-项目样例 参考资源","categories":[],"tags":[]},{"title":"相关配置-功能模块","slug":"Tools/Django/config","date":"2021-10-23T11:54:51.210Z","updated":"2021-10-23T11:54:51.210Z","comments":true,"path":"Tools/Django/config.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/config.md/","excerpt":"","text":"功能模块 配置API为HTTPS Django配置API为HTTPS安装组件 123pip install django-extensionspip install django-werkzeug-debugger-runserverpip install pyOpenSSL 在INSTALLED_APPS 中注册 12&#x27;werkzeug_debugger_runserver&#x27;,&#x27;django_extensions&#x27;, 启动命令 123456# 指定 cert python manage.py runserver_plus --cert server.crt 0.0.0.0:10000 # gunicorn 指定证书gunicorn myblog.wsgi:application -c gunicorn.fsc.conf.py --daemon --reload \\ --certfile=server.crt --keyfile=server.key 即可正常访问 https 服务 1https://xxxxxx 页面日志流配置问题: Gunicorn 模式下无法访问 websocket","categories":[],"tags":[]},{"title":"","slug":"Tools/Django/example","date":"2021-10-23T11:54:51.210Z","updated":"2021-10-23T11:54:51.210Z","comments":true,"path":"Tools/Django/example.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Django/example.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Module-Database-Oracle使用文档","slug":"Tools/Databases/db-oracle","date":"2021-10-23T11:54:51.209Z","updated":"2021-10-23T11:54:51.209Z","comments":true,"path":"Tools/Databases/db-oracle.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Databases/db-oracle.md/","excerpt":"","text":"Oracle-index Oracle Docker-部署 Oracle 配置 Oracle 优化 环境说明: Oracle11g CentOS6.10/CentOS7.5 常用功能创建用户&amp;授权Oracle 用户 123$sqlplus / as sysdbacreate user fdm identified by qwe123;grant dba to fdm; 常用 Oracle 命令123456789101112131415# 进入命令交互页面sqlplus / as sysdba# 启停监听服务lsnrctl stoplsnrctl start# 数据库连接fdm/qwe123@192.168.1.1:1521/fdm数据库用户/数据库密码@IP地址:端口/SID# 数据库启停startupshutdown immediate 附件","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Database","slug":"Database","permalink":"http://fansichao.github.com/blog/tags/Database/"}]},{"title":"Module-Database-Oracle模块功能","slug":"Tools/Databases/db-oracle-optimization","date":"2021-10-23T11:54:51.209Z","updated":"2021-10-23T11:54:51.209Z","comments":true,"path":"Tools/Databases/db-oracle-optimization.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Databases/db-oracle-optimization.md/","excerpt":"","text":"配置优化 修改进程数量 默认 150 redo 默认 50M, 改成 100M 或更大，具体根据 redo 的量来设置 redo 每组默认 3 组每组一个成员，建议每组两个成员以上 设置 sga pga 大小 oltp 系统通常(要设置好，防止内存抖动) undo_retention 参数默认是 900s 是 15 分钟，推荐设置为设置为 10800，即 3 个小时 11g 以后默认是开启审计功能的，安装后如果不需要可以关闭，需要的话 把 aud$表迁移到一个自定义表空间里面. 防止该表将 systen 表空间占大，影响数据库的性能问题。步骤略。 Flash_Recovery_Area 如果开闪回了， 默认大小 4G,建议增大到 5~10G(具体视情况而定)步骤略 临时表空间 和 undo 表空间的大小设置，20~30G(具体看实际业务而定) 安装的时候要选好字符集 , 默认的不推荐 utf-8 或 gbk 开启归档模式 控制文件默认 2 个，增加一个 配置简介文件说明 spfile.ora 二进制文件 pfile.ora 文本文件 配置优化配置优化 参考链接：oracle 安装后需要调整的参数内容 修改进程数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253541. 修改进程数量 默认150 SQL&gt; show parameter process; NAME TYPE VALUE --------------------------------------------------------------- aq_tm_processes integer 1 cell_offload_processing boolean TRUE db_writer_processes integer 1 gcs_server_processes integer 0 global_txn_processes integer 1 job_queue_processes integer 1000 log_archive_max_processes integer 4 processes integer 150 processor_group_name string 1.1 修改进程数量为1500 SQL&gt; alter system set processes=1500 scope=spfile; System altered. 1.2 重启才能生效 SQL&gt; shutdown immediate Database closed. Database dismounted. ORACLE instance shut down. SQL&gt; startup ORACLE instance started. Total System Global Area 534462464 bytes Fixed Size 2230072 bytes Variable Size 327157960 bytes Database Buffers 197132288 bytes Redo Buffers 7942144 bytes Database mounted. Database opened. 1.3 查看修改后的进程数量 SQL&gt; show parameter process; NAME TYPE VALUE --------------------------------------------------------------- aq_tm_processes integer 1 cell_offload_processing boolean TRUE db_writer_processes integer 1 gcs_server_processes integer 0 global_txn_processes integer 1 job_queue_processes integer 1000 log_archive_max_processes integer 4 processes integer 1500 processor_group_name string --------------------------------------------------------------- 配置 redo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576772. redo 默认50M, 改成100M或更大，具体根据redo的量来设置； 2.1 查看当前日志组成员 SQL&gt; select member from v$logfile; MEMBER ---------------------------------------------------------------- /home/u01/app/oracle/oradata/ytzx/redo01.log /home/u01/app/oracle/oradata/ytzx/redo02.log /home/u01/app/oracle/oradata/ytzx/redo03.log 2.2 查看当前日志组状态： SQL&gt; select group#,members,bytes/1024/1024,status from v$log; GROUP# MEMBERS BYTES/1024/1024 STATUS ---------- ---------- --------------- ---------------------------- 1 1 50 CURRENT 2 1 50 INACTIVE 3 1 50 INACTIVE 现在有三个日志成员，大小为50M，欲更改为100M 2.3增加日志组 SQL&gt;alter database add logfile group 4 (&#x27;/home/u01/app/oracle/oradata/ytzx/redo04.log&#x27;) size 100M; SQL&gt;alter database add logfile group 5 (&#x27;/home/u01/app/oracle/oradata/ytzx/redo05.log&#x27;) size 100M; SQL&gt;alter database add logfile group 6 (&#x27;/home/u01/app/oracle/oradata/ytzx/redo06.log&#x27;) size 100M; SQL&gt; select group#,members,bytes/1024/1024,status from v$log; GROUP# MEMBERS BYTES/1024/1024 STATUS ---------- ---------- --------------- --------------------------- 1 1 50 CURRENT 2 1 50 INACTIVE 3 1 50 INACTIVE 4 1 100 UNUSED 5 1 100 UNUSED 6 1 100 UNUSED 6 rows selected. 2.4 切换日志 SQL&gt; alter system switch logfile; 2.5 查看current状态的日志再那个日志组 SQL&gt; select group#,members,bytes/1024/1024,status from v$log; GROUP# MEMBERS BYTES/1024/1024 STATUS ---------- ---------- --------------- -------------------------- 1 1 50 ACTIVE 2 1 50 INACTIVE 3 1 50 INACTIVE 4 1 100 ACTIVE 5 1 100 ACTIVE 6 1 100 CURRENT 2.6 删除之前小的日志组 SQL&gt; alter database drop logfile group 1; SQL&gt; alter database drop logfile group 2; SQL&gt; alter database drop logfile group 3; SQL&gt; select group#,members,bytes/1024/1024,status from v$log; GROUP# MEMBERS BYTES/1024/1024 STATUS ---------- ---------- --------------- ------------------------------ 4 1 100 INACTIVE 5 1 100 ACTIVE 6 1 100 CURRENT 现在 三组日志都是100m了 配置 redo 多成员123456789101112131415161718192021222324252627283 . redo每组默认3组每组一个成员，建议每组两个成员以上 3.1 给组添加成员： SQL&gt; alter database add logfile member &#x27;/home/u01/app/oracle/oradata/ytzx/redo04_2.log&#x27; to group 4; Database altered. SQL&gt; alter database add logfile member &#x27;/home/u01/app/oracle/oradata/ytzx/redo05_2.log&#x27; to group 5; Database altered. SQL&gt; alter database add logfile member &#x27;/home/u01/app/oracle/oradata/ytzx/redo06_2.log&#x27; to group 6; Database altered. 删成员：alter database drop logfile member &#x27;/u01/app/oracle/oradata/orcl/redo04b.log&#x27; 删除组：alter database drop logfile group 9 ； 只是删除了ctl文件,物理文件没删 所以添加的时候 加 reuse 3.2 查看日志信息 SQL&gt; select group#,members,bytes/1024/1024,status from v$log; GROUP# MEMBERS BYTES/1024/1024 STATUS ------------------------------------------ 4 2 100 INACTIVE 5 2 100 INACTIVE 6 2 100 CURRENT 现在每组2个成员了 ------------------------------------------ 设置 sga pgamemory_max_target 配置错误会导致数据库实例无法启动，详情参看 问题ORA-47500: XE edition memory parameter invalid or not specified 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283844. 设置sga pga大小 oltp系统通常(要设置好，防止内存抖动) sga=内存*80%*80% pga=内存*80%*20% SQL&gt; show parameter memory NAME TYPE VALUE ------------------------------------------------- hi_shared_memory_address integer 0 memory_max_target big integer 0 memory_target big integer 0 shared_memory_address integer 0 SQL&gt; show parameter sga; NAME TYPE VALUE --------------------------------------------- lock_sga boolean FALSE pre_page_sga boolean FALSE sga_max_size big integer 512M sga_target big integer 512M SQL&gt; show parameter pga; NAME TYPE VALUE ------------------------------------------------------- pga_aggregate_target big integer 2592M SQL&gt; alter system set memory_target=4096m scope=spfile; System altered. SQL&gt; alter system set memory_max_target=4096m scope=spfile; System altered. SQL&gt; alter system set sga_target=3027m scope=spfile; System altered. SQL&gt; alter system set sga_max_size=3027m scope=spfile; System altered. SQL&gt; alter system set pga_aggregate_target=3027m scope=spfile; System altered. SQL&gt; alter system set pga_aggregate_target=1024m scope=spfile; System altered. SQL&gt; shutdown immediate; Database closed. Database dismounted. ORACLE instance shut down. SQL&gt; startup ORACLE instance started. Total System Global Area 3173429248 bytes Fixed Size 2232552 bytes Variable Size 469765912 bytes Database Buffers 2684354560 bytes Redo Buffers 17076224 bytes Database mounted. Database opened. SQL&gt; show parameter memory NAME TYPE VALUE ------------------------------------------------------- hi_shared_memory_address integer 0 memory_max_target big integer 4G memory_target big integer 4G shared_memory_address integer 0 SQL&gt; show parameter sga NAME TYPE VALUE ------------------------------------------------------- lock_sga boolean FALSE pre_page_sga boolean FALSE sga_max_size big integer 3040M sga_target big integer 3040M SQL&gt; show parameter pga NAME TYPE VALUE ------------------------------------------------------- pga_aggregate_target big integer 1G 现在内存已经固定了，方式高并发情况下的内存抖动 配置 undo_retention123456789101112131415161718192021222324252627282930313233345. undo_retention 参数默认是900s 是15分钟，推荐设置为设置为10800，即3个小时 SQL&gt; show parameter undo_retention NAME TYPE VALUE -------------------------------------------------------------- undo_retention integer 900 --默认900 SQL&gt; alter system set undo_retention=10800 scope=spfile; System altered. SQL&gt; show parameter undo_retention NAME TYPE VALUE -------------------------------------------------------------- undo_retention integer 900 SQL&gt; shutdown immediate Database closed. Database dismounted. ORACLE instance shut down. SQL&gt; startup ORACLE instance started. Total System Global Area 3173429248 bytes Fixed Size 2232552 bytes Variable Size 486543128 bytes Database Buffers 2667577344 bytes Redo Buffers 17076224 bytes Database mounted. Database opened. SQL&gt; show parameter undo_retention NAME TYPE VALUE --------------------------------------- undo_retention integer 10800 关闭审计功能审计功能介绍 审计是记录数据库上方方面面操作、事件等信息，是数据安全管理的重要手段。 开启审计，虽然不同级别的审计会有不同，但是对数据库的性能是有影响的，并且占用存储空间。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546476. 11g以后默认是开启审计功能的，安装后如果不需要可以关闭，需要的话 把aud$表迁移到一个自定义表空间里面. 防止该表将systen表空间占大，影响数据库的性能问题。步骤略。 一 审计功能的参数控制audit_trail 参数的值可以设置为以下几种1. NONE：不开启2. DB：开启审计功能3. OS：审计记录写入一个操作系统文件。4. TRUE：与参数DB一样5. FALSE：不开启审计功能。这个参数是写道spfile里面的，需要重启数据库二 查看是否审计功能是否启动SQL&gt; show parameter auditNAME TYPE VALUE------------------------------------ ----------- ------------------------------audit_file_dest string /u01/app/oracle/admin/ORCL/adumpaudit_sys_operations boolean FALSEaudit_syslog_level stringaudit_trail string NONE三 开启审计SQL&gt; conn /as sysdbaSQL&gt; show parameter auditNAME TYPE VALUE------------------------------------ ----------- ------------------------------audit_file_dest string /u01/app/oracle/admin/ORCL/adumpaudit_sys_operations boolean FALSEaudit_syslog_level stringaudit_trail string NONESQL&gt; alter system set audit_sys_operations=TRUE scope=spfile;--审计管理用户(以sysdba/sysoper角色登陆)SQL&gt; alter system set audit_trail=db,extended scope=spfile;重启实例SQL&gt; show parameter auditNAME TYPE VALUE------------------------------------ ----------- ------------------------------audit_file_dest string /u01/app/oracle/admin/ORCL/adumpaudit_sys_operations boolean TRUEaudit_syslog_level stringaudit_trail string DB, EXTENDED(完成)四 关闭审计SQL&gt; conn /as sysdbaSQL&gt; show parameter auditSQL&gt; alter system set audit_trail = none scope=spfile;重启实例 修改 Flash_Recovery_Area17.Flash_Recovery_Area 如果开闪回了， 默认大小4G,建议增大到5~10G(具体视情况而定)步骤略 临时表空间大小配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152538.临时表空间 和 undo表空间的大小设置，20~30G 8.1 设置临时表空间大小 8.1.1 检查oracle系统临时表空间大小： SQL&gt; select sum(bytes)/1024/1024 &quot;temp size(M)&quot; from dba_temp_files where tablespace_name=&#x27;DATATALKTEMP&#x27;; temp size(M) ------------ 60 --默认60M 8.1.2 查看临时表空间大小、是否自动扩展SQL&gt; select file_name,bytes/1024/1024 &quot;MB&quot;,autoextensible,tablespace_name from dba_temp_files; FILE_NAME MB AUT TABLESPACE_NAME ---------- --- ------------------------------------------------------------------------- /u01/app/oracle/oradata/ytzx/temp01.dbf 60 YES TEMP /u01/app/oracle/oradata/ytzx/datatalktemp01.dbf 10240 YES DATATALKTEMP 8.1.3 增大临时表空间文件的大小，把20M 缩小成10240 M SQL&gt; alter database tempfile &#x27;/u01/app/oracle/oradata/ytzx/temp01.dbf&#x27; resize 10240M autoextend on next 100M maxsize 10G; 8.1.4 增加临时文件 alter tablespace temp add tempfile &#x27;/u01/app/oracle/oradata/ytzx/temp02.dbf&#x27; size 10240M aitpextemd pm mext 100M maxsize 10G; 8.2 undo表空间大小设置 8.2.1 查询undo表空间大小 SQL&gt; select sum(bytes)/1024/1024 &quot;current undo size(M)&quot; from dba_data_files where tablespace_name=&#x27;UNDOTBS1&#x27;; current undo size(M) -------------------- 575 --默认570M 8.2.2 增大undo表空间文件大小 SQL&gt; alter database datafile &#x27;/home/u01/app/oracle/oradata/ytzx/undotbs01.dbf&#x27; resize 10240M; 8.2.3 给undo表空间增加数据文件 SQL&gt; alter tablespace UNDOTBS1 add datafile &#x27;/home/u01/app/oracle/oradata/ytzx/undotbs2.dbf&#x27; size 10240M autoextend on; 8.2.4 查看现在undo表空间大小 SQL&gt; select sum(bytes)/1024/1024 &quot;current undo size(M)&quot; from dba_data_files where tablespace_name=&#x27;UNDOTBS1&#x27;; current undo size(M) -------------------- 20480 --现在为20G 配置字符集9.安装的时候要选好字符集 , 默认的不推荐 utf-8 或 gbk 开启归档模式 归档模式的优缺点 优点 归档日志文件中保留了数据库的改动信息 可以进行完全和不完全的备份恢复，可以进行联机热备 缺点 需要更多的磁盘空间保存归档日志； DBA 会有更多的管理工作，包括维护归档空间、备份归档日志 非归档模式的优缺点 优点 DBA 的管理工作减少，因为非归档模式不产生归档日志，因此 DBA 不用考虑对归档的管理； 性能会有提升 缺点 只能进行脱机备份，也就是所谓的 冷备份 必须备份整个数据库，不能只备份部分数据库 不能增量备份，对于 TB 级数据库(VLDB) ，这是一个非常大的缺点； 只能部分恢复，如果数据文件丢失需要恢复，DBA 只能恢复最后一次的完全备份，而之后的所有 数据库改变全部丢失。 123456789101112131415161718192021222324252627282930313210.开启归档模式 10.1 查看是否为归档模式 SQL&gt; archive log list; Database log mode No Archive Mode Automatic archival Disabled Archive destination /home/u01/app/oracle/product/11.2.0.3/db_1/dbs/arch Oldest online log sequence 54 Current log sequence 56 默认是disable 状态，没有开启归档 10.2 修改归档路径 SQL&gt; alter system set log_archive_dest_1=&#x27;location=/home/u01/oradata/arch&#x27; scope=spfile; System altered. 10.3 修改为归档模式 SQL&gt; alter database archivelog; Database altered. 10.4 查看是否为归档模式 SQL&gt; archive log list; Database log mode Archive Mode Automatic archival Enabled Archive destination /home/u01/oradata/arch Oldest online log sequence 54 Next log sequence to archive 56 Current log sequence 56 参考链接：Oracle 归档模式与非归档模式 介绍说明 参考链接：Oracle 归档模式与非归档模式 优缺点对比 修改控制文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737411. 控制文件默认2个，增加一个 11.1 查看控制文件的路径和状态 SQL&gt; show parameter control NAME TYPE VALUE ------------------------------------ ----------- ------------------------------ control_file_record_keep_time integer 7 control_files string /home/u01/app/oracle/oradata/ytzx/control01.ctl, /home/u01/app/oracle/oradata/ytzx/control02.ctl control_management_pack_access string DIAGNOSTIC+TUNING 11.2 关闭数据库 SQL&gt; shutdown immediate Database closed. Database dismounted. ORACLE instance shut down. 11.3 拷贝控制文件 cp /home/u01/app/oracle/oradata/ytzx/control01.ctl /home/u01/app/oracle/oradata/ytzx/control03.ctl 然后如果用的spfile就用alter system 如果是用的pfile直接修改文件，我使用的spfile 11.4 启动数据库为nomount状态 SQL&gt; startup nomount; ORACLE instance started. Total System Global Area 3173429248 bytes Fixed Size 2232552 bytes Variable Size 486543128 bytes Database Buffers 2667577344 bytes Redo Buffers 17076224 bytes 11.5 修改spfile里面控制文件的路径 alter system set control_files=&#x27;/home/u01/app/oracle/oradata/ytzx/control01.ctl&#x27;, &#x27;/home/u01/app/oracle/oradata/ytzx/control02.ctl&#x27;, &#x27;/home/u01/app/oracle/oradata/ytzx/control03.ctl&#x27; sope=spfile; 11.6 关闭数据库 SQL&gt; shutdown immediate Database closed. Database dismounted. ORACLE instance shut down. SQL&gt; startup; ORACLE instance started. Total System Global Area 3173429248 bytes Fixed Size 2232552 bytes Variable Size 486543128 bytes Database Buffers 2667577344 bytes Redo Buffers 17076224 bytes Database mounted. Database opened. 11.7 查看控制文件 SQL&gt; show parameter control NAME TYPE VALUE ------------------------------------ ----------- ------------------------------ control_file_record_keep_time integer 7 control_files string /home/u01/app/oracle/oradata/ytzx/control01.ctl, /home/u01/app/oracle/oradata/ytzx/control02.ctl /home/u01/app/oracle/oradata/ytzx/control03.ctl control_management_pack_access string DIAGNOSTIC+TUNING 现在有3个控制文件了。 Oracle11g 调整参数表 参数 设置标准 默认 存在风险 db_files 1000 200 数据库内允许最大文件个数，初始值为 200，数量太小会导致无法增加数据文件 processes 1500 150 数据库最大进程数，可以有效防止数据库内部进程个数不够，影响业务正常运行 sessions 2272 undo_retention 3600 900 undo 段回收时间，单位是秒。达到回收时间 undo 段即将回滚段置为过期，防止 undo 段不能回收 _undo_autotune FALSE TRUE 是否启用数据库 undo 表空间自动优化功能，属于 oracle 隐含参数，不启用自动优化功能，防止数据库 undo 自动回收，影响业务正常运行 event 28401 使用错误密码登陆尝试会导致很高的 Library Cache Locks 或 row cache lock audit_trail db,extended 控制数据库审计存放位置，存放在文件系统目录，以便于日常运维维护。防止审计目录爆满。 _use_adaptive_log_file_sync FALSE TRUE 通过隐含参数_use_adaptive_log_file_sync 进行设置，当值为 FALSE 时禁用自动切换模式。 _serial_direct_read NEVER AUTO 可以显著地减少 direct_path_read _ktb_debug_flags 8 0 避免 BUG，11g 的 datagaurd 的 bug,在进行切换时，会导致索引坏块，需要设置该参数，或者打补丁 22241601 _gby_hash_aggregation_enabled FALSE TRUE 避免 BUG,如果 hash 表数据大到某个阀值,会出现严重的表空间升级【bug】 job_queue_processes 20 1000 默认值太高，会导致 CPU 负载过高的问题，设置此参数限制同时发起的最多 JOB 数量 session_cached_cursors 200 50 单个 session 中可以缓存游标的数量，适当 cache 游标，增强软软解析能力 _smu_debug_mode 134217728 0 会有部分性能故障及 BUG(注：killMMOM 进程不会终止实例，AWR 主要的进程，kill 之后一个新的 MMON 进程会自动使用_smu_debug_mode=134217728 启动) _clusterwide_global_transactions FALSE TRUE 当_clusterwide_global_transactions=false 时，Oracle 会将这些本地事务当做单独的事务通过多阶段提交协调处理 _PX_use_large_pool TRUE 并行执行从属进程一起工作时会交换数据和信息，固定从 largepool 中分配内存 _ges_direct_free_res_type CTARAHDXBB 防止高 share_pool 内存开销 _drop_stat_segment 1 提高 truncate 效率 sql92_security TRUE FALSE 当 sql92_security 被设置成 TRUE 时，对表执行 UPDATE/DELETE 操作时会检查当前用户是否具备相应表的 SELECT 权限 enable_ddl_logging TRUE FALSE 参数设置为 TRUE 后，可以在 alert 日志中记录如下 DDL 语句 deferred_segment_creation FALSE TRUE 避免出现段延迟创建 _resource_manager_always_on FALSE TRUE 禁用 Oracle 缺省启用的资源调度,避免可能产生 resmgr:cpu quantum 等待事件情况 _resource_manager_always_off TRUE FALSE 禁用 Oracle 缺省启用的资源调度,避免可能产生 resmgr:cpu quantum 等待事件情况 _mv_refresh_use_stats TRUE FALSE 物化视图快速刷新可有时会出现性能问题 _memory_imm_mode_without_autosga FALSE TRUE 使用 AMM 时，不设置；若 AMM 关闭了，设置为 FALSE，避免 ORA-4031 _bloom_filter_enabled FALSE TRUE 11R2 会遇到一个 BLOOM 过滤器导致的 BUG 9124206 和 BUG 8361126，出现 ORA-00060 ORA-10387 错误， _bloom_pruning_enabled、_bloom_filter_enabled 均设为 FALSE 避免 BUG _optimizer_use_feedback FALSE TRUE 关闭 Cardinality Feedback 新特性动能 _cleanup_rollback_entries 2000 100 加大该参数来达到加快串行事务恢复的效果,(同时设置并行恢复 fast_start_parallel_rollback 为 high) _datafile_write_errors_crash_instance FALSE TRUE 11.2.0.2/3 数据文件(sysytem 以外表空间)I/O 读写错误被发现时，实例 down _gc_defer_time 3 0 用于确定服务器在将频繁使用的块写入磁盘之前要等待的时间长度 (以 1/1000 秒为单位)，以减少进程对热块的争用 _gc_policy_time 0 10 DRM 在 11G 中不稳定，存在众多 BUG _gc_read_mostly_locking FALSE TRUE DRM 在 11G 中不稳定，存在众多 BUG _gc_undo_affinity FALSE TRUE DRM 在 11G 中不稳定，存在众多 BUG disk_asynch_io TRUE TRUE 使用文件系统存放数据文件时，建议开启异步 I/O filesystemio_options asynch none 使用文件系统存放数据文件时，建议开启异步 I/O(使用 ASM 存储，默认开启异步 I/O) _optimizer_adaptive_cursor_sharing FALSE TRUE 关闭 ACS 自适应游标共享，11.2.0.4 可不关闭 _optimizer_extended_cursor_sharing none UDO 关闭 ACS 自适应游标共享，11.2.0.4 可不关闭 _optimizer_extended_cursor_sharing_rel none SIMPLE 关闭 ACS 自适应游标共享，11.2.0.4 可不关闭 参考资源: oracle 11g 和 12c 初始安装数据库需调整的参数 附件参考资源 linux-oracle11g 内核参数介绍 oracle 安装成功后需要调整的配置 问题记录ORA-01126: Database Must Be Mounted In This Instance And Not Open In Any Instance 问题： 在进行 数据库 归档模式修改时报错如下 问题原因 报告的错误是因为仅在数据库处于装载阶段时才需要更改存档模式。如果我们尝试在打开状态下执行此操作，则会发生此错误。因此，为避免此错误，请在装入阶段启动数据库并更改归档模式。 解决方案 重启数据库后，重新修改归档模式。 解决方案： 123456789101112131415161718192021222324252627282930313233SQL&gt; select name,open_mode from v$database;NAME OPEN_MODE--------- --------------------DB12CR2 READ WRITESQL&gt; shutdown immediate;Database closed.Database dismounted.ORACLE instance shut down.SQL&gt; startup mount;ORACLE instance started.Total System Global Area 1.2549E+10 bytesFixed Size 12155024 bytesVariable Size 6744442736 bytesDatabase Buffers 5771362304 bytesRedo Buffers 21397504 bytesDatabase mounted.SQL&gt; alter database archivelog;Database alteredSQL&gt; alter database open;Database alteredSQL&gt; archive log list;Database log mode Archive ModeAutomatic archival EnabledArchive destination /u01/app/oracle/oradata/oracle11g-data/archOldest online log sequence 35Next log sequence to archive 36Current log sequence 36 日志详情: 12345678910111213141516171819202122SQL&gt; alter system set log_archive_dest_1=&#x27;location=/u01/app/oracle/oradata/oracle11g-data/arch&#x27; scope=spfile;System altered.SQL&gt; archive log list;Database log mode No Archive ModeAutomatic archival DisabledArchive destination USE_DB_RECOVERY_FILE_DESTOldest online log sequence 35Current log sequence 36SQL&gt; alter database archivelog;alter database archivelog*ERROR at line 1:ORA-01126: database must be mounted in this instance and not open in anyinstanceSQL&gt; archive log list;Database log mode No Archive ModeAutomatic archival DisabledArchive destination USE_DB_RECOVERY_FILE_DESTOldest online log sequence 35Current log sequence 36 ORA-47500: XE edition memory parameter invalid or not specified 问题 修改内存后，重启数据库，startup 报错 问题原因 内存参数无效，或者内存大小超限 解决方案 去除 memory_max_target 参数 解决方案 12345678910111213141516171819202122232425262728293031323334353637# 配置文件cp出来修改(env) [fdm@fdm ~]$ docker cp oracle11g:/u01/app/oracle/product/11.2.0/xe/config/scripts/init.ora .(env) [fdm@fdm ~]$ docker cp init.ora oracle11g:/u01/app/oracle/product/11.2.0/xe/config/scripts/init.ora-- 指定文件启动SQL&gt; startup pfile=/u01/app/oracle/product/11.2.0/xe/config/scripts/init.oraORA-00845: MEMORY_TARGET not supported on this system-- 使用 pfile 启动(此文件中已经去除了 memory_max_target &amp; MEMORY_TARGET 参数)SQL&gt; startup pfile=/u01/app/oracle/product/11.2.0/xe/config/scripts/init.oraORACLE instance started.Total System Global Area 601272320 bytesFixed Size 2228848 bytesVariable Size 180358544 bytesDatabase Buffers 415236096 bytesRedo Buffers 3448832 bytesDatabase mounted.Database opened.-- 通过 pfile 生成 spfile文件SQL&gt; create spfile=&#x27;spfileXE.ora&#x27; from pfile=&#x27;/u01/app/oracle/product/11.2.0/xe/config/scripts/init.ora&#x27;;File created.SQL&gt; shutdown immediateDatabase closed.Database dismounted.ORACLE instance shut down.SQL&gt; startupORACLE instance started.Total System Global Area 601272320 bytesFixed Size 2228848 bytesVariable Size 180358544 bytesDatabase Buffers 415236096 bytesRedo Buffers 3448832 bytesDatabase mounted.Database opened. 日志详情 1234567891011121314151617SQL&gt; alter system set memory_max_target=1G scope=spfile;System altered.SQL&gt; show parameter memory_max_target;NAME TYPE VALUE------------------------------------ ----------- ------------------------------memory_max_target big integer 0SQL&gt; shutdown immediate ;Database closed.Database dismounted.ORACLE instance shut down.SQL&gt; startupORA-47500: XE edition memory parameter invalid or not specified","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Database","slug":"Database","permalink":"http://fansichao.github.com/blog/tags/Database/"}]},{"title":"Oracle常用配置项","slug":"Tools/Databases/db-oracle-config","date":"2021-10-23T11:54:51.208Z","updated":"2021-10-23T11:54:51.208Z","comments":true,"path":"Tools/Databases/db-oracle-config.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Databases/db-oracle-config.md/","excerpt":"","text":"Oracle-常用配置 数据库自启动 配置项目环境(Oracle驱动) Oracel exp 导出空表数据 Oracle 数据导入导出 Oracle 密码到期修改 修改数据库进程数为 500 Oracle 配置上下左右退格键 Oracle 显示乱码 Oracle-知识概念 临时表 Oracle-常用配置数据库自启动12345678数据库自启动# vi /etc/oratab# 找到 fdm:/u01/app/oracle/11g:N # 实际名称和路径可能略有不同，和 $ORACLE_BASE有关# 修改为 fdm:/u01/app/oracle/11g:Y# vi /etc/rc.d/rc.local 删除中文su oracle -lc &quot; /u01/app/oracle/11g/bin/lsnrctl start&quot; # 路径是 $ORACLE_HOME+/bin/ lsnrctl start&quot;su oracle -lc /u01/app/oracle/11g/bin/dbstart 配置项目环境(Oracle驱动)详见问题 libclntsh.so: cannot open shared object file 解决方法 1234567yum install -y oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpmsudo sh -c &quot;echo /usr/lib/oracle/12.2/client64/lib &gt; /etc/ld.so.conf.d/oracle-instantclient.conf&quot;sudo ldconfig# 添加到/etc/profileexport LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib:$LD_LIBRARY_PATH# 执行命令source /etc/profile 详见问题 libnsl.so.1: cannot open shared object file: No such file or directory 解决方法 yum install -y libnsl Oracel exp 导出空表数据TODO 寻找更好导出空表的方法 问题原因: 由于 Oracle11g 新特性，当表无数据时，不分配 segment，以节省空间。而导出时只会导出已分配 segment 的表 解决步骤: 第一步: 修改系统配置 设置 deferred_segment_creation 参数 12345678910SQL&gt; show parameter deferred_segment_creationNAME TYPE VALUE------------------------------------ ----------- ------------------------------deferred_segment_creation boolean TRUESQL&gt; alter system set deferred_segment_creation=false;系统已更改。SQL&gt; show parameter deferred_segment_creationNAME TYPE VALUE------------------------------------ ----------- ------------------------------deferred_segment_creation boolean FALSE 注意: 该值设置后对以前导入的空表不产生作用，仍不能导出，只能对后面新增的表产生作用。如需导出之前的空表,只能使用后续方法。 第二步: 处理空表 方法 1: 批量处理空表 123456789101112-- 首先使用下面的sql语句查询一下当前用户下的所有空表select table_name from user_tables where NUM_ROWS=0 or num_rows is null;然后用一下SQL语句执行查询-- select &#x27;alter table &#x27;||table_name||&#x27; allocate extent;&#x27; from user_tables where num_rows=0 or num_rows is null;-- 查询结果如下所示..alter table TBL_1 allocate extent;alter table TBL_2 allocate extent;alter table TBL_3 allocate extent;alter table TBL_4 allocate extent;-- 执行上面语句即可 方法 2: insert 一行，再 rollback 就产生 segment 了 该方法是在在空表中插入数据，再删除，则产生 segment。导出时则可导出空表。 参考链接: Oracle 导出空表 Oracle 数据导入导出Oracle 导入导出命令 1234# 导出数据exp fdm/qwe1234@192.168.100.165:1521/newfdm file=20190514_newfdm.db owner=fdm# 导入前需要删除原有数据库所有表+序列imp fdm/qwe123 file=/home/oracle/20190514_newfdm.db fromuser=fdm touser=fdm DESTROY=Y 导出日志查看.配置 &lt;导出空表数据&gt; 后即可导出空表 xxx 0 行 12345678910111213141516171819202122232425262728293031323334353637383940[oracle@WOM ~]$ exp fdm/qwe123@192.168.172.70:1521/fdm file=fdm.db owner=fdmExport: Release 11.2.0.1.0 - Production on 星期三 10月 23 17:09:59 2019Copyright (c) 1982, 2009, Oracle and/or its affiliates. All rights reserved.连接到: Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing options已导出 UTF8 字符集和 AL16UTF16 NCHAR 字符集服务器使用 AL32UTF8 字符集 (可能的字符集转换)即将导出指定的用户.... 正在导出 pre-schema 过程对象和操作. 正在导出用户 FDM 的外部函数库名. 导出 PUBLIC 类型同义词. 正在导出专用类型同义词. 正在导出用户 FDM 的对象类型定义即将导出 FDM 的对象.... 正在导出数据库链接. 正在导出序号. 正在导出簇定义. 即将导出 FDM 的表通过常规路径.... . 正在导出表 ASSISTANT_ANALYSIS导出了 0 行. . 正在导出表 BACK_MINING_MODEL导出了 5 行. . 正在导出表 BACK_MINING_MODEL_ENTITY导出了 38 行. . 正在导出表 WEB_LOG导出了 1463 行. 正在导出同义词. 正在导出视图. 正在导出存储过程. 正在导出运算符. 正在导出引用完整性约束条件. 正在导出触发器. 正在导出索引类型. 正在导出位图, 功能性索引和可扩展索引. 正在导出后期表活动. 正在导出实体化视图. 正在导出快照日志. 正在导出作业队列. 正在导出刷新组和子组. 正在导出维. 正在导出 post-schema 过程对象和操作. 正在导出统计信息导出成功终止, 但出现警告。 Oracle 密码到期修改由于 Oracle 默认用户密码创建策略为 180 天，180 天用户密码失效，所以需要重新修改密码。解决方法：修改默认密码创建策略至无限期，重新设置用户密码 12345678910111213141516171819202122232425262728293031解决步骤:-- 步骤1:查看当前open用户,即无限期用户 [非必需步骤]select username,account_status,expiry_date,profile from dba_users;-- 步骤2:查看目前的密码过期策略SQL&gt; select * from dba_profiles s where s.profile=&#x27;DEFAULT&#x27; and resource_name=&#x27;PASSWORD_LIFE_TIME&#x27;;PROFILE RESOURCE_NAME RESOURCE------------------------------ -------------------------------- --------LIMIT----------------------------------------DEFAULT PASSWORD_LIFE_TIME PASSWORD180-- 步骤3:修改密码过期策略alter profile default limit password_life_time unlimited;# 重新查看策略，发现已经修改成功SQL&gt; select * from dba_profiles s where s.profile=&#x27;DEFAULT&#x27; and resource_name=&#x27;PASSWORD_LIFE_TIME&#x27;;PROFILE RESOURCE_NAME RESOURCE------------------------------ -------------------------------- --------LIMIT----------------------------------------DEFAULT PASSWORD_LIFE_TIME PASSWORDUNLIMITED-- 步骤4: 退出当前 sqlplus,重进sqlplus$sqlplus / as sysdba-- 步骤5: 重进后更新密码过期的账户，重置密码后期不会再过期alter user &lt;用户名称&gt; identified by &lt;原来的密码&gt; ----不用换新密码 参考链接: https://www.cnblogs.com/xiaochina/p/6892569.html 修改数据库进程数为 500项目需要，避免 oracle 数据库进程数不足，导致程序运行失败 1234567891011su - oracle$sqlplus / as sysdba-- 更新系统参数alter system set processes=500 scope=spfile;-- 需要重启数据库shutdown immediate;startup;-- 查看总进程数show parameter processes;--当前的连接数select count(1) from v$process; Oracle 配置上下左右退格键Linux 下 Oracle 的 sqlplus 中上下左右退格键无法使用 123456789101112131415# root用户# 安装rlwrapsu - rootrpm -ivh /data/software/Oracle/rlwrap-0.42-1.el6.x86_64.rpm# oracle用户su – oracle# 修改 .bash_profilevi .bash_profile# 添加2行alias sqlplus=&#x27;rlwrap sqlplus&#x27;alias rman=&#x27;rlwrap rman&#x27;# 验证修改结果sqlplus / as sysdba其中上下左右退格键正常使用 Oracle 显示乱码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051主要方法1：(如果此方法无效，再尝试下一方法)数据库显示正常，需要三者统一，客户端编码、数据库编码、系统编码。oracle用户#### 查看客户端编码、数据库编码、系统编码# 查看系统编码locale# 进入数据库sqlplus / as sysdbastartup;# 查看oracle数据库的编码select * from nls_database_parameters where parameter =&#x27;NLS_CHARACTERSET&#x27;;# 查看oracle客户端编码select * from nls_instance_parameters where parameter=&#x27;NLS_LANGUAGE&#x27;;#### 修改编码# Linux系统默认 utf-8，将数据库和客户端也修改为utf-8的编码1.首先以sysdba的身份登录上去 sqlplus / as sysdba2.关闭数据库shutdown immediate;3.以mount打来数据库，startup mount4.设置sessionSQL&gt;ALTER SYSTEM ENABLE RESTRICTED SESSION;SQL&gt; ALTER SYSTEM SET JOB_QUEUE_PROCESSES=0;SQL&gt; ALTER SYSTEM SET AQ_TM_PROCESSES=0;5.启动数据库alter database open;6.修改字符集ALTER DATABASE CHARACTER SET AL32UTF8;这会可能会报错，提示我们的字符集：新字符集必须为旧字符集的超集，这时我们可以跳过超集的检查做更改：ALTER DATABASE character set INTERNAL_USE AL32UTF8;这条语句就可以了，TERNAL_USE提供的帮助就会使oracle绕过了子集与超集的验证，这条语句和上面的语句内部操作时完全相同的。7.关闭，重新启动SQL&gt;shutdown immediate;SQL&gt; startup当上述修改无报错，但是依然乱码时，发现客户端编码、数据库编码、系统编码三者不一致，客户端编码为简体中文，其他为utf-8，故修改客户端编码(其他类同，也可以三者直接配置在.bash_profile)# oracle用户su - oracle# 关闭数据库sqlplus / as sysdbashutdown immediate;# 编辑文件vi ~/.bash_profile# 增加一行export NLS_LANG=american_america.al32utf8# 启动数据库sqlplus / as sysdbashartup; Oracle-知识概念TODO Oracle 的深度使用 临时表","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Database","slug":"Database","permalink":"http://fansichao.github.com/blog/tags/Database/"}]},{"title":"Database目录索引","slug":"Tools/Databases/README","date":"2021-10-23T11:54:51.207Z","updated":"2021-10-23T11:54:51.207Z","comments":true,"path":"Tools/Databases/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Databases/README.md/","excerpt":"","text":"文内资源 数据库 Oracle Oracle 配置 Oracle 优化 Mysql DB2","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Database","slug":"Database","permalink":"http://fansichao.github.com/blog/tags/Database/"},{"name":"index","slug":"index","permalink":"http://fansichao.github.com/blog/tags/index/"}]},{"title":"Module-Database-DB2使用文档","slug":"Tools/Databases/db-db2","date":"2021-10-23T11:54:51.207Z","updated":"2021-10-23T11:54:51.207Z","comments":true,"path":"Tools/Databases/db-db2.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Databases/db-db2.md/","excerpt":"","text":"安装部署Docker 部署详见 Docker-Db2 宿主机部署参考链接： Linux 下 DB2 数据库安装过程详解 12345678910数据库配置创建数据库db2 create database 数据库名develop PAGESIZE 32 K #建立数据库develop，32K,默认建立16k，32k空间大关闭防火墙systemctl stop firewalld.service # 关闭 firewall centos7的防火墙systemctl stop iptables.service # 关闭 iptables centos6的防火墙systemctl disable firewalld.service # 禁止firewall开机启动systemctl disable iptables.service # 禁止iptables 开机启动 功能模块安装 Python-DB2 驱动若无 DB2 驱动，连接报错如下 123456&gt;&gt;&gt; import ibm_db&gt;&gt;&gt; connStr = &quot;DATABASE=XCDW;HOSTNAME=192.168.100.167;PORT=50000;PROTOCOL=TCPIP;UID=xcdw;PWD=qwe123;&quot;&gt;&gt;&gt; conn = ibm_db.connect(connStr, &quot;&quot;, &quot;&quot;)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;SystemError: error return without exception set 解决方案 1234567891011121314151617181920212223步骤1:# 数据库用户[db2inst1@localhost ~]$ lltotal 8drwxrwxr-x. 3 db2inst1 db2iadm1 4096 Nov 13 19:10 db2inst1drwxrwsr-t. 25 db2inst1 db2iadm1 4096 Nov 13 19:10 sqllib[db2inst1@localhost ~]$ pwd/home/db2inst1[db2inst1@localhost ~]$# 将如下加入到数据库用户 .bash_profile 中. db2inst1为用户名称export PATH=$PATH:.$HOME/bin:/home/db2inst1/sqllib/binif [ -f /home/db2inst1/sqllib/db2profile ]thensource /home/db2inst1/sqllib/db2profilefi步骤2# 解压得到 clidrivertar -zxvf linuxx64_odbc_cli.tar.gz# 将 clidriver 复制到 ibm-db 下cp -r clidriver/ xcdw1_env/lib/python2.7/site-packages/ibm_db-2.0.7.dist-info/.","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Database","slug":"Database","permalink":"http://fansichao.github.com/blog/tags/Database/"}]},{"title":"Module-Database-Mysql部署文档","slug":"Tools/Databases/db-mysql","date":"2021-10-23T11:54:51.207Z","updated":"2021-10-23T11:54:51.208Z","comments":true,"path":"Tools/Databases/db-mysql.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Databases/db-mysql.md/","excerpt":"","text":"环境说明: Mysql CentOS6.10 Docker-Mysql详见 Docker-Mysql CentOS8.1.19CentOS8 安装 Mysql12345678910# 安装 mysql-python 驱动前置依赖， Python3连接Mysql使用PyMySQLsudo yum install mysql-devel -y# 安装 Mysqlsudo dnf install @mysql -y# 加入 开机自启sudo systemctl enable --now mysqld# 检查运行状态sudo systemctl status mysqld CentOS8 配置 Mysql1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 脚本执行一些与安全性相关的操作并设置MySQL根密码[root@fdm ~]# sudo mysql_secure_installationSecuring the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD COMPONENT can be used to test passwordsand improve security. It checks the strength of passwordand allows the users to set only those passwords which aresecure enough. Would you like to setup VALIDATE PASSWORD component?Press y|Y for Yes, any other key for No:Please set the password for root here.New password: # 配置 Mysql-root 密码, 此处配置为 qwe123Re-enter new password:By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : ... skipping.Normally, root should only be allowed to connect from&#x27;localhost&#x27;. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : ... skipping.By default, MySQL comes with a database named &#x27;test&#x27; thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : ... skipping.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : ... skipping.All done! CentOS8 配置 Mysql 用户1234567891011121314qwe123 为密码# 进入交互界面mysql -uroot -pqwe123# 创建数据库CREATE DATABASE fdm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;# 创建用户 可以远程访问create user &#x27;fdm&#x27;@&#x27;%&#x27; identified by &#x27;qwe123&#x27;;# 远程连接授权GRANT ALL ON fdm.* TO &#x27;fdm&#x27;@&#x27;%&#x27;;# 删除用户名为空的数据delete from mysql.user where user=&#x27;&#x27;;# 刷新权限，运行命令最后执行flush privileges; Centos8 安装 mysqlclient报错日志如下： 12345(django_blog) [scfan@master DjangoBlog]$ pip install mysql-clientLooking in indexes: https://mirrors.aliyun.com/pypi/simpleCollecting mysql-client Downloading https://mirrors.aliyun.com/pypi/packages/9e/b6/b6db5ce60fe5763ab92592d7a5d5737f800cf4c919852e2da8ef998c40bc/mysql_client-0.0.1-py3-none-any.whl (2.3 kB)ERROR: Package &#x27;mysql-client&#x27; requires a different Python: 3.6.8 not in &#x27;&gt;=3.7&#x27; 解决方案： 123sudo dnf install mysql-develsudo dnf install python38-develpip3.8 install mysqlclient CentOS6.10TODO CentOS8.1.19 待安装 注意事项: 不同系统版本对应不同版本 Mysql 不同版本 Mysql，存在语法差异。 Oracle 和 mysql 存在字段类型差异 Oralce 表和字段大小写不敏感，Mysql 中表和字段大小写敏感。安装过程-Centos6.10当前环境： CentOS6.10 安装 mysql6-5 CentOS6 安装 Mysql12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# 下载 mysql Repo-rpmwget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm# 安装 rpmrpm -ivh mysql-community-release-el6-5.noarch.rpm# 安装完成后会生成如下文件[root@yinsho ~]# ll /etc/yum.repos.d/mysql\\*-rw-r--r-- 1 root root 1209 6 月 19 15:14 /etc/yum.repos.d/mysql-community.repo-rw-r--r-- 1 root root 1060 12 月 2 2013 /etc/yum.repos.d/mysql-community-source.repo# 安装依赖yum install glibc.i686 -y# 修改 repo文件vim /etc/yum.repos.d/mysql-community.repo找到 mysql-56-community将 enable 置为 0 enable=0# 安装 mysql-serveryum install mysql-server -yservice mysqld restartchkconfig mysqld on# 第一次启动 Mysql 日志[root@yinsho yum.repos.d]# service mysqld restart停止 mysqld： [确定]初始化 MySQL 数据库： Installing MySQL system tables...OKFilling help tables...OKTo start mysqld at boot time you have to copysupport-files/mysql.server to the right place for your systemPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !To do so, start the server, then issue the following commands:/usr/bin/mysqladmin -u root password &#x27;new-password&#x27;/usr/bin/mysqladmin -u root -h yinsho password &#x27;new-password&#x27;Alternatively you can run:/usr/bin/mysql_secure_installationwhich will also give you the option of removing the testdatabases and anonymous user created by default. This isstrongly recommended for production servers.See the manual for more instructions.You can start the MySQL daemon with:cd /usr ; /usr/bin/mysqld_safe &amp;You can test the MySQL daemon with mysql-test-run.plcd /usr/mysql-test ; perl mysql-test-run.plPlease report any problems with the /usr/bin/mysqlbug script![确定]正在启动 mysqld： [确定] CentOS6 配置 Mysql 系统参数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# 配置大小写不敏感# Oracel 是大小写不敏感，但是 Linux-Mysql 是大小写敏感# 查看 Mysql 大小写参数mysql&gt; show variables like &#x27;%case%&#x27;;+------------------------+-------+| Variable_name | Value |+------------------------+-------+| lower_case_file_system | OFF || lower_case_table_names | 0 |+------------------------+-------+lower_case_file_system 表示系统，当前 Linux 系统，无法修改lower_case_table_names 标识大小写是否敏感Unix 下默认为 0，也就是大小写敏感的；Windows 下默认为 1，不敏感；macOS 默认为 2，存储区分大小写，但是在查询时会转换为小写# 修改大小写敏感参数vim /etc/my.cnf# 增加参数 lower_case_table_names=1 设定参数不敏感，必须放在[mysqld]下。[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sockuser=mysql# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0lower_case_table_names=1[mysqld_safe]log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid# 重启服务service mysqld restart# 重新查看参数[root@yinsho ~]# mysql -uroot -pqwe123mysql&gt; show variables like &#x27;%case%&#x27;;+------------------------+-------+| Variable_name | Value |+------------------------+-------+| lower_case_file_system | OFF || lower_case_table_names | 1 |+------------------------+-------+2 rows in set (0.00 sec) CentOS6 配置 Mysql 用户123456789101112131415161718qwe123 为密码# 进入交互界面mysql -uroot -pqwe123# 初始化密码/usr/bin/mysqladmin -u root password &#x27;qwe123&#x27;# 创建数据库CREATE DATABASE fdm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;# 创建用户 可以远程访问create user fdm@&#x27;%&#x27; identified by &#x27;qwe123&#x27;;# 远程连接授权GRANT ALL ON fdm.\\* TO &#x27;fdm&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;qwe123&#x27;;# 删除用户名为空的数据delete from mysql.user where user=&#x27;&#x27;;# 修改用户密码update user set password=PASSWORD(&quot;qwe123&quot;) where user=&#x27;fdm&#x27;;# 刷新权限，运行命令最后执行flush privileges; 附件 CentOS8 安装 Mysql CentOS6 安装 Mysql Mysql 连接说明1234用户 fdm密码 qwe123数据库 fdm端口 3306 常用命令12345678910111213141516171819202122232425262728# 常用信息port: 3306# 查看数据库mysql&gt; show databases;+--------------------+| Database |+--------------------+| fdm || information_schema || mysql || performance_schema || sys |+--------------------+5 rows in set (0.00 sec)# 查看表mysql&gt; show tables;Empty set (0.00 sec)# 查看mysql的相关信息status;# 查看版本：select version();# 查看端口号：show global variables like &#x27;port&#x27;;","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"Database","slug":"Database","permalink":"http://fansichao.github.com/blog/tags/Database/"}]},{"title":"大文件断点续传功能","slug":"Tools/Crawl/crawl-resumable-large-files","date":"2021-10-23T11:54:51.206Z","updated":"2021-10-23T11:54:51.206Z","comments":true,"path":"Tools/Crawl/crawl-resumable-large-files.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-resumable-large-files.md/","excerpt":"","text":"由于普通下载时，文件会缓存在内存中，当文件大小超过内存时，会报内存溢出错误，从而下载失败。 12345678910import requests# stream=True 客户端不会立即下载文件的内容，但客户端与服务端会持续建立 HTTP 连接with requests.get(url, stream=True) as r: r.raise_for_status() with open(filename, &#x27;wb&#x27;) as fp: # chunk_size 实现分块下载 for chunk in r.iter_content(chunk_size=512): if chunk: fp.write(chunk) 参考资源 并发下载大文件 支持断点续传","categories":[],"tags":[]},{"title":"Xpath","slug":"Tools/Crawl/crawl-xpath","date":"2021-10-23T11:54:51.206Z","updated":"2021-10-23T11:54:51.206Z","comments":true,"path":"Tools/Crawl/crawl-xpath.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-xpath.md/","excerpt":"","text":"123456789101112131415161718192021222324from lxml import etreeweb_data=&quot;xxxx&lt;div&gt;xxx&lt;/div&gt;&quot;html = etree.HTML(web_data)# 打印htmlresult = etree.tostring(html, pretty_print=True).deocde(&#x27;utf-8&#x27;)路径表达式说明- nodename 选取此节点的所有子节点。- / 绝对路径 从根节点选取。- // 相对路径 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。- . 选取当前节点。- .. 选取当前节点的父节点。- @ 选取属性。# 样例/html/body/div/ul/li/a/text()# 获取a标签的href属性//ul/li/a/@href# 获取a标签属性href=xxx.html的内容//ul/li/a[@href=&quot;xxx.html&quot;/text()]# 查询倒数第二个li中的内容//li[last()-1]/a/text() 参考链接: python 爬虫之 xpath 的基本使用 爬虫利器之三 Xpath xpath 少用用法","categories":[],"tags":[]},{"title":"","slug":"Tools/Crawl/crawl-lawer","date":"2021-10-23T11:54:51.205Z","updated":"2021-10-23T11:54:51.205Z","comments":true,"path":"Tools/Crawl/crawl-lawer.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-lawer.md/","excerpt":"","text":"爬虫究竟是合法还是违法的 https://mp.weixin.qq.com/s/rO24Mi5G5IAVqEnHu-JLaQ","categories":[],"tags":[]},{"title":"PyQuery-网页解析库","slug":"Tools/Crawl/crawl-pyquery","date":"2021-10-23T11:54:51.205Z","updated":"2021-10-23T11:54:51.205Z","comments":true,"path":"Tools/Crawl/crawl-pyquery.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-pyquery.md/","excerpt":"","text":"支持网页解析，添加修改删除元素属性等。风格类似于 Jquery, 上手简单。 查找语法： 1234567891011121314151617# 查找 div里面tr的元素div tr# 获取item元素href的值item.attr(&quot;href&quot;)# 获取文本值item.text()# 修改/新增 元素或属性li.attr(&#x27;id&#x27;, &#x27;id_test&#x27;)li.css(&#x27;font-size&#x27;, &#x27;20px&#x27;)li.addClass(&#x27;active&#x27;)# 删除 元素/属性data.find(&#x27;a&#x27;).remove()li.removeClass(&#x27;active&#x27;)class=&quot;noindent fl&quot;doc.find(&quot;&quot;) PyQuery 查找语法图 参考资源 python 爬虫之 PyQuery 的基本使用 Xpath 的基本使用","categories":[],"tags":[]},{"title":"Re-正则表达式","slug":"Tools/Crawl/crawl-re","date":"2021-10-23T11:54:51.205Z","updated":"2021-10-23T11:54:51.205Z","comments":true,"path":"Tools/Crawl/crawl-re.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-re.md/","excerpt":"","text":"正则表达式(Regular Expression)是一种文本模式，包括普通字符(例如，a 到 z 之间的字母)和特殊字符(称为”元字符”)。 正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。 正则表达式样例 123456789import re# 只匹配中文字符r = re.compile(&#x27;[^\\x00-\\xff]&#x27;)r.findall(&#x27; 人人 身﹑ 土&#x27;)&gt;&gt;&gt; [&#x27;人人&#x27;, &#x27;身&#x27;, &#x27;土&#x27;]# 严格匹配data = re.findall(&#x27;title=&quot;.*?&quot;&#x27;, str(o_item.text())) 正则表达式语法说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 常用函数search 只匹配第一个findall 查询所有# Re 元字符元字符. 匹配除换行符外的任意字符\\w 匹配字母数字下划线或汉字\\s 匹配任意的空白符\\d 匹配数字\\b 匹配单词的开始或结束^ 匹配字符串的开始$ 匹配字符串的结束# 反义代码\\W 匹配任意不是字母、数字、下划线、汉字的字符\\S 匹配任意不是空白符的字符\\D 非数字\\B 匹配不是单次开头或结束的位置[^a] 匹配出了a以外的字符[^abcd] 匹配出了abcd以外的字符# 限定符* 重复零次或多次+ 重复一次或多次? 重复零次或一次&#123;n&#125; 重复n次&#123;n,&#125; 重复n次或多次&#123;n,m&#125; 重复n-m次# 贪婪 &amp; 非贪婪贪婪 尽可能多的匹配 默认贪婪非贪婪 ? 尽可能少的匹配用于 * + ? 后面# 组匹配In [34]: reg_str = &quot;phone: 12345678910 , email : aqwe@.com&quot;In [35]: reg = &quot;phone: (\\d&#123;11&#125;) , email : (\\w.+)@.com&quot;In [36]: re.search(reg,reg_str).group(0)Out[36]: &#x27;phone: 12345678910 , email : aqwe@.com&#x27;In [37]: re.search(reg,reg_str).group(1)Out[37]: &#x27;12345678910&#x27;In [38]: re.search(reg,reg_str).group(2)Out[38]: &#x27;aqwe&#x27; 参考链接： 正则表达式-菜鸟教程 正则表达式在线工具 常用正则表达式 常用正则表达式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# 一、校验数字的表达式数字：^[0-9]*$n位的数字：^\\d&#123;n&#125;$至少n位的数字：^\\d&#123;n,&#125;$m-n位的数字：^\\d&#123;m,n&#125;$零和非零开头的数字：^(0|[1-9][0-9]*)$非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(\\.[0-9]&#123;1,2&#125;)?$带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)$正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$有两位小数的正实数：^[0-9]+(\\.[0-9]&#123;2&#125;)?$有1~3位小数的正实数：^[0-9]+(\\.[0-9]&#123;1,3&#125;)?$非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$非零的负整数：^\\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\\d*$非负整数：^\\d+$ 或 ^[1-9]\\d*|0$非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$# 校验字符的表达式汉字：^[\\u4e00-\\u9fa5]&#123;0,&#125;$英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$长度为3-20的所有字符：^.&#123;3,20&#125;$由26个英文字母组成的字符串：^[A-Za-z]+$由26个大写英文字母组成的字符串：^[A-Z]+$由26个小写英文字母组成的字符串：^[a-z]+$由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;3,20&#125;$中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$可以输入含有^%&amp;&#x27;,;=?$\\&quot;等字符：[^%&amp;&#x27;,;=?$\\x22]+禁止输入含有~的字符：[^~\\x22]+# 三、特殊需求表达式Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\\.?InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;电话号码正则表达式(支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号): ((\\d&#123;11&#125;)|^((\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;)|(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;))$)身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$钱的输入格式：有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$中文字符的正则表达式：[\\u4e00-\\u9fa5]双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)) 123456789101112match 查找首字符search# 返回所有子串findall# 生成正则表达式对象re.compile(pattern[, flags])","categories":[],"tags":[]},{"title":"爬虫进阶-下载进度条显示","slug":"Tools/Crawl/crawl-download-progress-bar","date":"2021-10-23T11:54:51.204Z","updated":"2021-10-23T11:54:51.204Z","comments":true,"path":"Tools/Crawl/crawl-download-progress-bar.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-download-progress-bar.md/","excerpt":"","text":"多文件下载进度条Progress Bar 2 大文件下载进度条123456789101112131415from tqdm import tqdmfilename = &#x27;_test.txt&#x27;file_size = &#x27;&#x27;url = &#x27;&#x27;with tqdm(total=file_size, unit=&#x27;B&#x27;, unit_scale=True, unit_divisor=1024, ascii=True, desc=filename) as bar: # 打印下载时的进度条，实时显示下载速度 with requests.get(url, stream=True) as r: r.raise_for_status() with open(filename, &#x27;wb&#x27;) as fp: for chunk in r.iter_content(chunk_size=512): if chunk: fp.write(chunk) bar.update(len(chunk)) # 实时更新已完成的数据量 tqdm 常用参数说明 123456- total=file_size： 整个文件的大小，单位是 bytes- unit=&#x27;B&#x27;： 默认是 unit=&#x27;it&#x27; 按 bit 来计算的，所以我们需要改成按 Byte 来计算- unit_scale=True： 会自动扩展单位，如果是 False，速度显示为 80625485.97B/s，如果是 True，速度显示为 62.6MB/s- unit_divisor=1024： 由于默认是按 1000 来除，所以计算出来的文件大小和速度不对，应该按 1024 来除- ascii=True： 进度条默认使用 unicode 字符 ▉，Windows 系统默认使用 cp936 编码，不会在同一行动态显示进度条，而是分多行显示，而 Linux 和 Mac 系统使用 utf-8 编码，所以一切正常。如果指定 ascii=True 则会用 123456789# 来填充进度条，此时大家都能正常地在同一行显示了- desc=filename： 在进度条前面显示当前下载的文件名 参考资源 并发下载大文件 支持断点续传 python 输出结果刷新及进度条的实现 Python3 实现进度条","categories":[],"tags":[]},{"title":"爬虫框架-对比分析","slug":"Tools/Crawl/crawl-framework-diff","date":"2021-10-23T11:54:51.204Z","updated":"2021-10-23T11:54:51.204Z","comments":true,"path":"Tools/Crawl/crawl-framework-diff.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-framework-diff.md/","excerpt":"","text":"https://github.com/fansichao/Spiders.git 分布式爬虫 Redis-Scrapy https://www.cnblogs.com/Mint-diary/p/9728435.html scrapy-redis使用redis集群进行分布式爬取 http://30daydo.com/article/444","categories":[],"tags":[]},{"title":"爬虫基础","slug":"Tools/Crawl/crawl-info","date":"2021-10-23T11:54:51.204Z","updated":"2021-10-23T11:54:51.204Z","comments":true,"path":"Tools/Crawl/crawl-info.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-info.md/","excerpt":"","text":"TODO 爬虫系列 思维导图 基础知识请求方法(Get/POST/PUT/Delete)详见 文内 URL-xxx HTTP 状态码详见 文内 URL-xxx 参考链接：常见的 HTTP 状态码 HTTPS 和 HTTP 的差异详见 文内 URL-xxx HTTP 请求头和响应头HTTP 请求头和响应头详解 更多常用请求头和响应头属性 Http 请求头和响应头(Get 和 Post) CookieSession、Cookie、TokenCookie RestFulApi请求库requests httple curl urllib3 aiohttpaiohttp书籍翻译https://docs.aiohttp.org/en/stable/ hyper tornado","categories":[],"tags":[]},{"title":"","slug":"Tools/Crawl/crawl-anti-spider","date":"2021-10-23T11:54:51.203Z","updated":"2021-10-23T11:54:51.203Z","comments":true,"path":"Tools/Crawl/crawl-anti-spider.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-anti-spider.md/","excerpt":"","text":"常见反爬虫机制滑动验证码验证机制 常见反爬虫机制 基础反爬机制 robots 协议 验证码 请求头验证 refer、UA IP 封锁 登陆认证、Cookie 认证 复杂反爬机制 动态 JS、动态变化的请求参数、动态数据的捕获 JS 加密 js 混淆 错误数据 延迟加载 自定义字体 模型反爬机制 根据用户行为来分析建立模型。普通人的访问策略是深而窄，爬虫的访问是大而全。 常见爬虫方法 基础爬虫 - IP 代理池 UA 代理池 随机 sleep 访问 复杂爬虫 seleium 浏览器方式访问，可以破解绝大部分反爬机制。缺点是速度慢。 反爬虫机制参考资源: 常见反爬虫与应对措施 https://www.jianshu.com/p/4113736304ab 常见的反爬机制及处理方式 https://www.cnblogs.com/Summer-skr--blog/p/11678559.html https://www.cnblogs.com/angle6-liu/p/10451047.html https://cloud.tencent.com/developer/article/1032918 https://segmentfault.com/a/1190000005840672 https://blog.csdn.net/qq_38486203/article/details/87878189 https://juejin.im/post/6844903969483931662 https://www.geek-share.com/detail/2776078674.html https://www.cnblogs.com/zhaof/p/7326260.html https://www.cnblogs.com/wangxin37/p/6398745.html 代理 IP 池：http://qzmvc1.top/%E5%B8%B8%E8%A7%81%E5%8F%8D%E7%88%AC%E8%99%AB%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%BA%94%E5%AF%B9%E6%96%B9%E6%B3%95.html 反爬虫机制破解","categories":[],"tags":[]},{"title":"身份认证(BaseAuth, OAuth)","slug":"Tools/Crawl/crawl-auth","date":"2021-10-23T11:54:51.203Z","updated":"2021-10-23T11:54:51.203Z","comments":true,"path":"Tools/Crawl/crawl-auth.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/crawl-auth.md/","excerpt":"","text":"开放平台有两种认证方式，一种是 Basic Auth，一种是 OAuth Basic Auth(HTTP Auth)Basic Auth 简单点说明就是每次请求 API 时都提供用户的 username 和 password。【base64encode(username+”:”+password)】，这种方式优点和缺点都很明显。 优点： 使用非常简单， 开发和调试工作简单， 没有复杂的页面跳转逻辑和交互过程； 更利于发起方控制； 缺点： 安全性低，每次都需要传递用户名和密码，用户名和密码很大程度上存在被监听盗取的可能； 同时应用本地还需要保存用户名和密码，在应用本身的安全性来说，也存在很大问题； 开放平台服务商出于自身安全性的考虑(第三方可以得到该服务商用户的账号密码，对于服务商来说是一种安全隐患)，未来也会限制此认证方式(Twitter 就计划在 6 月份停止 Basic Auth 的支持) 用户如果更改了用户名和密码，还需要重新进行密码校验的过程。 OAuth(Open Authorization)OAuth 为用户资源的授权提供了一个安全、开放的标准，将会是以后开发平台普遍遵守的，目前 Twitter、Sina 微博、豆瓣、Google 等都提供对它的支持。 交互过程 1)应用用 APP KEY 和 APP SECRET 换取 OAuth_token； 2)应用将用户引导到服务商的页面对该 OAuth_token 进行授权(可能需要输入用户名和密码)； 3)服务商的页面跳转回应用，应用再根据参数去服务商获得 Access Token； 4)使用这个 Access Token 就可以访问 API 了。 OAuth 认证的四种模式 授权码模式 是功能最完整、流程最严密的授权模式，code 保证了 token 的安全性，即使 code 被拦截，由于没有 app_secret，也是无法通过 code 获得 token 的 隐式授权模式/简化模式 和授权码模式类似，只不过少了获取 code 的步骤，是直接获取令牌 token 的，适用于公开的浏览器单页应用，令牌直接从授权服务器返回，不支持刷新令牌，且没有 code 安全保证，令牌容易因为被拦截窃听而泄露 密码模式 使用用户名/密码作为授权方式从授权服务器上获取令牌，一般不支持刷新令牌 客户端凭证模式 一般用于资源服务器是应用的一个后端模块，客户端向认证服务器验证身份来获取令牌 OAuth 的优点： 安全性高，用户的账户和密码只需要提供一次，而且是在服务商的页面上提供，防止了 Basic Auth 反复传输密码带来的安全隐患； Access Token 访问权限仅限于应用，被窃取不会影响用户在该服务商的其他服务； Access Token 即使被监听丢失了随时可以撤销，不像密码丢失可能就被别人篡改了； 用户修改了密码也不会影响该应用的正常使用。 OAuth 和 Basic Auth 两种方式的区别, OAuth 是一种比较通用的，安全的认证方式，不需要用户名密码，只需要用户授权；basic auth 是一种基于用户名密码的认证，每次访问都需带上用户的用户名密码。 参考链接： Basic Auth 和 OAuth 的区别 身份认证系统 OAuth2 的四种模式 OAuth 认证流程详解","categories":[],"tags":[]},{"title":"爬虫学习","slug":"Tools/Crawl/README","date":"2021-10-23T11:54:51.202Z","updated":"2021-10-23T11:54:51.203Z","comments":true,"path":"Tools/Crawl/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Crawl/README.md/","excerpt":"","text":"TODO 爬虫框架 Go-Colly Scrapy 浏览器扩展 - 可视化自动爬取(类似于鼠标移动轨迹记录) 爬虫抓取工具 Chrome Fiddler 目录索引爬虫简介 Crawl-简介 Crawl-爬虫框架对比 Crwal-法律意识 爬虫基础 PyQuery-页面解析 Re-正则表达式 Xpath-页面解析 爬虫功能 Crawl-用户登录 Crawl-反爬虫机制 Crwal-下载进度条 Crwal-大文件断点续传 参考资源 Python 爬虫学习 Python 3 爬虫｜第 8 章：使用 asyncio 模块实现并发 Python 3 爬虫｜第 7 章：协程 Coroutines Python 3 爬虫｜第 9 章：使用 asyncio + aiohttp 并发下载 Python 3 爬虫｜第 6 章：可迭代对象 / 迭代器 / 生成器 Python 3 爬虫｜第 5 章：多线程并发下载 Python 3 爬虫｜第 4 章：多进程并发下载 Python 3 爬虫｜第 1 章：I/O Models 阻塞/非阻塞 同步/异步 Python 3 爬虫｜第 3 章：同步阻塞下载 Python 3 爬虫｜第 2 章：Python 并发编程","categories":[],"tags":[]},{"title":"Chrome","slug":"Tools/Chrome/readme","date":"2021-10-23T11:54:51.200Z","updated":"2021-10-23T11:54:51.200Z","comments":true,"path":"Tools/Chrome/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Chrome/readme.md/","excerpt":"","text":"tags: 2021 目录大纲 Chrome 目录入门篇功能-Chrome 软件下载功能-安装 Chrome 插件资源-Chrome 相关网站主题篇主题-Github 篇主题-DevTools 开发者工具主题-必备神器设置篇设置-配置浏览器启动参数 必备神奇优质插件有趣插件主题插件Github图片截图 Chrome 插件开发开发者工具相关资源网站等 离线下载 Chrome 安装包参考资源 Google 离线安装包下载: 传送门 GoogleDriver 下载: 传送门","categories":[],"tags":[]},{"title":"功能模块","slug":"Tools/Chrome/module","date":"2021-10-23T11:54:51.185Z","updated":"2021-10-23T11:54:51.185Z","comments":true,"path":"Tools/Chrome/module.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Chrome/module.md/","excerpt":"","text":"配置浏览器启动参数参数 --ignore-certificate-errors 解决问题： 文件下载失败，浏览器提示网络错误 忽略浏览器提示的证书错误信息 如图所示(注：务必找到程序所在位置的第一层级添加参数，如果是快捷方式创建的快捷方式，可能存在失效问题) 浏览器页面出现 您使用的是不受支持额命令行标记: --ignore-certificate-errors. 稳定性和安全性会有所下载, 即配置成功。","categories":[],"tags":[]},{"title":"Chrome 插件","slug":"Tools/Chrome/plugins","date":"2021-10-23T11:54:51.185Z","updated":"2021-10-23T11:54:51.185Z","comments":true,"path":"Tools/Chrome/plugins.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Chrome/plugins.md/","excerpt":"","text":"tags: Chrome plugins [toc] 安装插件在线安装方法 1：有梯子 直接访问 Chrome 商店 即可 方法 2：没有梯子，使用 谷歌访问助手 下载安装 谷歌访问助手， 使用离线方法安装后，打开助手， 即可正常访问 Chrome 商店 离线安装 Chrome 插件安装步骤： 下载离线插件包 SwitchyOmega.crx Chrome 打开扩展程序页面 chrome://extensions/ 将插件拖动到 扩展程序页面 中即可安装。如果安装失败使用 步骤4 右键解压为文件夹，例如 SwitchyOmega 文件夹，点击加载已解压的扩展程序，选中 SwitchyOmega 文件夹即可安装成功。(PS: 注意目录位置) 插件下载离线下载 Chrome 插件玩机 APP 界面使用说明： CrxDL 界面使用说明： 网站链接： 玩机 APP-Chrome 离线插件下载 CrxDL-Chrome 离线插件下载 优质插件清单Screenity - 屏幕录像和标注工具 在线录屏和标注工具 Web Scrapyer [★★★★☆]功能描述 浏览器在线抓取。 无代码。简单易用。 支持可视化选择元素。 22W 开发者使用 使用样例 F12 查看 Web Scrapyer Create new sitemap 页面如下 配置分页器 选择表格 运行和导出数据 导出的 sitemap 如下 12345678910111213141516171819202122232425262728293031&#123; &quot;_id&quot;: &quot;premproxy&quot;, &quot;startUrl&quot;: [&quot;https://premproxy.com/socks-list/01.htm&quot;], &quot;selectors&quot;: [ &#123; &quot;id&quot;: &quot;ProxySocks&quot;, &quot;parentSelectors&quot;: [&quot;_root&quot;, &quot;ProxySocks&quot;], &quot;paginationType&quot;: &quot;auto&quot;, &quot;selector&quot;: &quot;div#navbar:nth-of-type(3) li:nth-of-type(n+2) a&quot;, &quot;type&quot;: &quot;SelectorPagination&quot; &#125;, &#123; &quot;id&quot;: &quot;proxy_table&quot;, &quot;parentSelectors&quot;: [&quot;ProxySocks&quot;], &quot;type&quot;: &quot;SelectorTable&quot;, &quot;delay&quot;: 0, &quot;multiple&quot;: true, &quot;selector&quot;: &quot;table&quot;, &quot;tableDataRowSelector&quot;: &quot;tbody tr&quot;, &quot;tableHeaderRowSelector&quot;: &quot;tr.thead&quot;, &quot;columns&quot;: [ &#123; &quot;extract&quot;: true, &quot;header&quot;: &quot;IP address&quot;, &quot;name&quot;: &quot;IP address&quot; &#125;, &#123; &quot;extract&quot;: true, &quot;header&quot;: &quot;SOCKS Type&quot;, &quot;name&quot;: &quot;SOCKS Type&quot; &#125;, &#123; &quot;extract&quot;: true, &quot;header&quot;: &quot;Checked&quot;, &quot;name&quot;: &quot;Checked&quot; &#125;, &#123; &quot;extract&quot;: true, &quot;header&quot;: &quot;Country&quot;, &quot;name&quot;: &quot;Country&quot; &#125;, &#123; &quot;extract&quot;: true, &quot;header&quot;: &quot;City&quot;, &quot;name&quot;: &quot;City&quot; &#125;, &#123; &quot;extract&quot;: true, &quot;header&quot;: &quot;ISP&quot;, &quot;name&quot;: &quot;ISP&quot; &#125; ] &#125; ]&#125; 参考资源 Chrome 下载地址 使用参考 1 使用参考 2 参考资源","categories":[],"tags":[]},{"title":"Chrome-谷歌浏览器","slug":"Tools/Chrome/Win-Chrome","date":"2021-10-23T11:54:51.163Z","updated":"2021-10-23T11:54:51.163Z","comments":true,"path":"Tools/Chrome/Win-Chrome.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Chrome/Win-Chrome.md/","excerpt":"","text":"ChromeChrome内置工具F12打开【开发者工具】， ctrl+shift+p 打开 Chrome 工具, 内含各种工具！！！ 例如 输入 cap, 第二个即是截图软件 Chrome-工具Chrome-扩展参考资源 https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;mid=2247487291&amp;idx=1&amp;sn=e61de6b32892423b297e5c300916c1c0&amp;scene=21#wechat_redirect","categories":[],"tags":[]},{"title":"ReadMe - 服务器部署","slug":"Tools/Centos8/README","date":"2021-10-23T11:54:51.162Z","updated":"2021-10-23T11:54:51.162Z","comments":true,"path":"Tools/Centos8/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Centos8/README.md/","excerpt":"","text":"环境说明: CentOS8.1 Python3.6 基础命令12345678# 关闭防火墙systemctl stop firewalld.servicesystemctl disable firewalld.service# 重启网络nmcli c reload 1234# 安装 anconda# 安装 gitsudo dnf install git 网络配置安装 ml 环境","categories":[],"tags":[]},{"title":"大数据可视化","slug":"Tools/BigData/bigdata-visualization-web","date":"2021-10-23T11:54:51.160Z","updated":"2021-10-23T11:54:51.160Z","comments":true,"path":"Tools/BigData/bigdata-visualization-web.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-visualization-web.md/","excerpt":"","text":"参考资源大数据分析，数据可视化之美，BI 参考书籍：《鲜活的数据 数据可视化指南》","categories":[],"tags":[]},{"title":"ScyllaDB-使用文档","slug":"Tools/BigData/bigdata-scylladb","date":"2021-10-23T11:54:51.159Z","updated":"2021-10-23T11:54:51.159Z","comments":true,"path":"Tools/BigData/bigdata-scylladb.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-scylladb.md/","excerpt":"","text":"简介说明由于 scylladb 数据库本身就是基于 cassandra 的”优化版”。 ScyllaDB 是用 C++ 重写的 Cassandra，每节点每秒处理 100 万 TPS。ScyllaDB 完全兼容 Apache Cassandra，拥有比 Cassandra 多 10x 倍的吞吐量，降低了延迟。 ScyllaDB 是性能优异的 NoSQL 列存储数据库。 ScyllaDB 在垃圾收集或者 Compaction 的时候不需要暂停；在常规生产负载的时候可以添加和删除节点。 ScyllaDB_结构图 Cassandra 结构图 功能支持ScyllaDB 官网号称 实时大数据数据库: 每个节点的向上扩展性能为 1,000,000s OPS，可横向扩展到数百个节点，并且 99％的延迟小于 1 毫秒 最快的 NoSQL 数据库 最快的分布式数据库 适用于最苛刻应用程序的真正 NoSQL 数据库 ScyllaDB 官网文档 优缺点ScyllDB 优缺点 优点: 低而一致的延迟: 无锁实现和独立的内存管理堆栈消除了对 JVM 或 Linux 页面缓存的低效率依赖，从而提供了一致的低延迟。 永远在线: 跨多个节点和数据中心的自动故障转移和复制可实现可靠的容错能力。 吞吐量提高 10 倍: 用 C ++编写，可压缩硬件的每一性能，并允许每个节点最多进行 1,000,000 次读/写操作 高度可扩展: 自动分片，同类服务器和本地多数据中心实施可实现无缝的线性扩展，而不会影响应用程序的停机时间或性能。 易于使用: Apache Cassandra 的有线协议，丰富的驱动程序以及与 Spark，Presto 和 Graph 工具的集成，可实现资源高效且性能高效的编码。 社区支持: 从第一天开始，Scylla 就成为一个开源数据库，得到了越来越多的贡献者社区的支持。 解决压实，流化和修复: 工作负载调节提供了一系列动态调度算法，以最大程度地减少数据库操作延迟抖动并减少压缩流和修复时间。 最佳总拥有成本: C ++框架提高了效率，可以捕获比现有基础结构高 10 倍的吞吐量，从而创建了强大而高效的 NoSQL 数据库。 自动调节: 全自动和动态的数据库调整可有效管理内部资源，需要零配置，并立即提高性能。 缺点: 多副本之间数据不一致时经常需要手动修复来搞定 虽然 ScyllaDB 能够充分的利用底层硬件的 IOPS，但长时间运行后的 Compaction 带来的冗余 IOPS 消耗. 术语说明https://blog.csdn.net/mytobaby00/article/details/80375196 同类软件综合对比安装部署环境依赖 CentOS7.3+ 64 位机器 Yum 已经配置完毕 需要 Root 用户或者 Sudo 权限 确认所有端口已打开 当前环境 CentOS7.5 非 Root 用户 已关闭 SeLinux、防火墙 官网安装链接 安装 ScyllaDB12345678910# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 安装 ScyllaDByum install -y sudo# 卸载 abrt。 abrt 会和 ScyllaDB 冲突sudo yum remove -y abrt# 配置yum源sudo yum install epel-release -ysudo curl -o /etc/yum.repos.d/scylla.repo -L http://repositories.scylladb.com/scylla/repo/uuidValue/centos/scylladb-3.0.repo# 安装最新版本sudo yum install scylla -y# sudo yum install scylla-3.0.6 -y # 安装指定版本 配置 ScyllaDB参考链接: 官网 ScyllaDB 群集配置 配置文件 1/etc/scylla/scylla.yaml cluster_name 集群的名称，集群中的所有节点必须具有相同的名称 seeds 种子节点在启动过程中用于引导八卦过程并加入集群 listen_address Scylla 用于连接到集群中其他 Scylla 节点的 IP 地址 rpc_address 客户端连接接口的 IP 地址(Thrift，CQL) 修改指定 IP 123456789seed_provider: - class_name: org.apache.cassandra.locator.SimpleSeedProvider parameters: # seeds is actually a comma-delimited list of addresses. # Ex: &quot;&lt;ip1&gt;,&lt;ip2&gt;,&lt;ip3&gt;&quot; - seeds: &quot;192.168.172.72&quot;listen_address: 192.168.172.72rpc_address: 192.168.172.72 Scylla 设置 &amp; 启动命令123# 前置依赖pip install PyYAMLpip install cqlsh 运行 scylla_setup 脚本以调整系统设置 sudo scylla_setup scylla_setup 详细内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100[root@c7c57188b482 software]# scylla_setupSkip any of the following steps by answering &#x27;no&#x27;Do you want to run check your kernel version?Yes - runs a script to verify that the kernel for this instance qualifies to run Scylla. No - skips the kernel check.[YES/no]YESINFO 2019-10-15 01:35:59,324 [shard 0] iotune - /var/tmp/mnt passed sanity checksThis is a supported kernel version.Do you want to verify the ScyllaDB packages are installed?Yes - runs a script to confirm that ScyllaDB is installed. No - skips the installation check.[YES/no]YESDo you want the Scylla server service to automatically start when the Scylla node boots?Yes - Scylla server service automatically starts on Scylla node boot. No - skips this step. Note you will have to start the Scylla Server service manually.[YES/no]yesDo you want to disable SELinux?Yes - disables SELinux. Choosing Yes greatly improves performance. No - keeps SELinux activated.[YES/no]yesTraceback (most recent call last): File &quot;/usr/lib/scylla/scylla_selinux_setup&quot;, line 36, in &lt;module&gt; res = out(&#x27;sestatus&#x27;) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 423, in run with Popen(*popenargs, **kwargs) as process: File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 729, in __init__ restore_signals, start_new_session) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 1364, in _execute_child raise child_exception_type(errno_num, err_msg, err_filename)FileNotFoundError: [Errno 2] No such file or directory: &#x27;sestatus&#x27;: &#x27;sestatus&#x27;SELinux setup failed. Press any key to continue...Do you want to setup Network Time Protocol(NTP) to auto-synchronize the current time on the node?Yes - enables time-synchronization. This keeps the correct time on the node. No - skips this step.[YES/no]yesFailed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: ap.stykers.moe * epel: hkg.mirror.rackspace.com * extras: mirrors.163.com * updates: ap.stykers.moePackage ntp-4.2.6p5-29.el7.centos.x86_64 already installed and latest versionPackage ntpdate-4.2.6p5-29.el7.centos.x86_64 already installed and latest versionNothing to do15 Oct 01:36:45 ntpdate[5717]: adjust time server 5.79.108.34 offset 0.015830 secDo you want to setup RAID0 and XFS?It is recommended to use RAID0 and XFS for Scylla data. If you select yes, you will be prompted to choose the unmounted disks to use for Scylla data. Selected disks are formatted as part of the process.Yes - choose a disk/disks to format and setup for RAID0 and XFS. No - skip this step.[YES/no]noDo you want to enable coredumps?Yes - sets up coredump to allow a post-mortem analysis of the Scylla state just prior to a crash. No - skips this step.[YES/no]yeskernel.core_pattern = |/usr/lib/systemd/systemd-coredump %p %u %g %s %t %e&quot;Do you want to setup a system-wide customized configuration for Scylla?Yes - setup the sysconfig file. No - skips this step.[YES/no]yesDo you want to enable Network Interface Card (NIC) and disk(s) optimization?Yes - optimize the NIC queue and disks settings. Selecting Yes greatly improves performance. No - skip this step.[YES/no]yesERROR: &#x27;disks&#x27; tuning was requested but no disks were found. Your system can&#x27;t be tuned until the issue is fixed.Traceback (most recent call last): File &quot;/usr/lib/scylla/scylla_sysconfig_setup&quot;, line 75, in &lt;module&gt; rps_cpus = out(&#x27;&#123;&#125; --tune net --nic &#123;&#125; --get-cpu-mask&#x27;.format(perftune_base_command(), ifname)) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 438, in run output=stdout, stderr=stderr)subprocess.CalledProcessError: Command &#x27;[&#x27;/usr/lib/scylla/perftune.py&#x27;, &#x27;--tune&#x27;, &#x27;disks&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/data&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/commitlog&#x27;, &#x27;--tune&#x27;, &#x27;net&#x27;, &#x27;--nic&#x27;, &#x27;eth0&#x27;, &#x27;--get-cpu-mask&#x27;]&#x27; returned non-zero exit status 1.NIC queue setup failed. Press any key to continue...Do you want iotune to study your disks IO profile and adapt Scylla to it?Yes - let iotune study my disk(s). Note that this action will take a few minutes. No - skip this step.[YES/no]yesDo you want to install node exporter to export Prometheus data from the node? Note that the Scylla monitoring stack uses this dataYes - install node exporter. No - skip this step.[YES/no]yesnode_exporter already installednode exporter setup failed. Press any key to continue...Do you want to set the CPU scaling governor to Performance level on boot?Yes - sets the CPU scaling governor to performance level. No - skip this step.[YES/no]yesFailed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: ap.stykers.moe * epel: hkg.mirror.rackspace.com * extras: mirrors.163.com * updates: ap.stykers.moePackage kernel-tools-3.10.0-1062.1.2.el7.x86_64 already installed and latest versionNothing to doDo you want to enable fstrim service?Yes - runs fstrim on your SSD. No - skip this step.[YES/no]yesScyllaDB setup finished.Please restart your machine before using ScyllaDB, as you have disabled SELinux. 启动服务 sudo systemctl start scylla-server 运行 nodetool nodetool status 12345678/usr/bin/filter_cassandra_attributes.py:10: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details. attributes.update(load(open(sys.argv[i], &#x27;r&#x27;)))Datacenter: datacenter1=======================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- Address Load Tokens Owns (effective) Host ID RackUN 127.0.0.1 217.36 KiB 256 100.0% d0d39d92-2974-4893-bd36-495391cac39b rack1 运行 cqlsh cqlsh --cqlversion=3.3.1 192.168.172.72 123456(env) [scfan@scfan scyllaDB]$ cqlsh --cqlversion=3.3.1 192.168.172.72Connected to at 192.168.172.72:9042.[cqlsh 5.0.1 | Cassandra 3.0.8 | CQL spec 3.3.1 | Native protocol v4]Use HELP for help.cqlsh&gt;cqlsh&gt; 运行 cassandra-stress 1cassandra-stress write -mode cql3 native Scylla Monitoring(可选,建议安装) 附件问题记录No module named yamlpip install PyYAML No module named cqlshlibpip install cqlsh cannot import name cqlshhandling123456789(env) [scfan@scfan scyllaDB]$ find /usr/lib/ -name cqlshlib/usr/lib/python2.7/site-packages/cqlshlib(env) [scfan@scfan scyllaDB]$ export PYTHONPATH=/usr/lib/python2.7/site-packages/将如下加入到文件 /etc/profile 中# Scyllaexport PYTHONPATH=/usr/lib/python2.7/site-packages/# 使其生效source /etc/profile Unable to connect to any servers12(env) [scfan@scfan scyllaDB]$ cqlshConnection error: (&#x27;Unable to connect to any servers&#x27;, &#123;&#x27;192.168.172.72:9042&#x27;: ProtocolError(&quot;cql_version &#x27;3.0.10&#x27; is not supported by remote (w/ native protocol). Supported versions: [u&#x27;3.3.1&#x27;]&quot;,)&#125;) 解决方法 12# cqlsh --cqlversion=x.x.x host 指定版本和主机IPcqlsh --cqlversion=3.3.1 192.168.172.72 No nodes present in the cluster12345[root@c7c57188b482 software]# nodetool status/usr/bin/filter_cassandra_attributes.py:10: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details. attributes.update(load(open(sys.argv[i], &#x27;r&#x27;)))nodetool: Scylla API server HTTP GET to URL &#x27;/storage_service/ownership/&#x27; failed: runtime error: No nodes present in the cluster. Has this node finished starting up?See &#x27;nodetool help&#x27; or &#x27;nodetool help &lt;command&gt;&#x27;. setting up system keyspace重启后经常报错如下: TODO 原因未知………. 12345678910111213141516171819202122[root@d276413151a0 graph_data]# systemctl status scylla-server.service -l● scylla-server.service - Scylla Server Loaded: loaded (/usr/lib/systemd/system/scylla-server.service; enabled; vendor preset: disabled) Drop-In: /etc/systemd/system/scylla-server.service.d └─capabilities.conf Active: failed (Result: exit-code) since 二 2019-10-15 09:12:10 UTC; 6s ago Process: 7020 ExecStopPost=/usr/lib/scylla/scylla_stop (code=exited, status=0/SUCCESS) Process: 6942 ExecStart=/usr/bin/scylla $SCYLLA_ARGS $SEASTAR_IO $DEV_MODE $CPUSET (code=exited, status=1/FAILURE) Process: 6941 ExecStartPre=/usr/lib/scylla/scylla_prepare (code=exited, status=0/SUCCESS) Main PID: 6942 (code=exited, status=1/FAILURE) Status: &quot;setting up system keyspace&quot;10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 22] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 12] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 4] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 18] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 19] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 16] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 systemd[1]: scylla-server.service: main process exited, code=exited, status=1/FAILURE10月 15 09:12:10 d276413151a0 systemd[1]: Failed to start Scylla Server.10月 15 09:12:10 d276413151a0 systemd[1]: Unit scylla-server.service entered failed state.10月 15 09:12:10 d276413151a0 systemd[1]: scylla-server.service failed. 安装日志123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206[root@15b1fad0dfef java_install]# scylla_setupSkip any of the following steps by answering &#x27;no&#x27;Do you want to run check your kernel version?Yes - runs a script to verify that the kernel for this instance qualifies to run Scylla. No - skips the kernel check.[YES/no]YESINFO 2019-10-12 01:33:43,496 [shard 0] iotune - /var/tmp/mnt passed sanity checksThis is a supported kernel version.Do you want to verify the ScyllaDB packages are installed?Yes - runs a script to confirm that ScyllaDB is installed. No - skips the installation check.[YES/no]YESDo you want the Scylla server service to automatically start when the Scylla node boots?Yes - Scylla server service automatically starts on Scylla node boot. No - skips this step. Note you will have to start the Scylla Server service manually.[YES/no]YESCreated symlink from /etc/systemd/system/multi-user.target.wants/scylla-server.service to /usr/lib/systemd/system/scylla-server.service./bin/sh: sudo: command not foundDo you want to disable SELinux?Yes - disables SELinux. Choosing Yes greatly improves performance. No - keeps SELinux activated.[YES/no]YESTraceback (most recent call last): File &quot;/usr/lib/scylla/scylla_selinux_setup&quot;, line 36, in &lt;module&gt; res = out(&#x27;sestatus&#x27;) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 423, in run with Popen(*popenargs, **kwargs) as process: File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 729, in __init__ restore_signals, start_new_session) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 1364, in _execute_child raise child_exception_type(errno_num, err_msg, err_filename)FileNotFoundError: [Errno 2] No such file or directory: &#x27;sestatus&#x27;: &#x27;sestatus&#x27;SELinux setup failed. Press any key to continue...Do you want to setup Network Time Protocol(NTP) to auto-synchronize the current time on the node?Yes - enables time-synchronization. This keeps the correct time on the node. No - skips this step.[YES/no]YESFailed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: mirrors.163.com * epel: hk.mirrors.thegigabit.com * extras: ap.stykers.moe * updates: ap.stykers.moeResolving Dependencies--&gt; Running transaction check---&gt; Package ntp.x86_64 0:4.2.6p5-29.el7.centos will be installed--&gt; Processing Dependency: libopts.so.25()(64bit) for package: ntp-4.2.6p5-29.el7.centos.x86_64---&gt; Package ntpdate.x86_64 0:4.2.6p5-29.el7.centos will be installed--&gt; Running transaction check---&gt; Package autogen-libopts.x86_64 0:5.18-5.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================== Package Arch Version Repository Size==================================================================================================Installing: ntp x86_64 4.2.6p5-29.el7.centos base 548 k ntpdate x86_64 4.2.6p5-29.el7.centos base 86 kInstalling for dependencies: autogen-libopts x86_64 5.18-5.el7 base 66 kTransaction Summary==================================================================================================Install 2 Packages (+1 Dependent package)Total download size: 701 kInstalled size: 1.6 MDownloading packages:(1/3): ntpdate-4.2.6p5-29.el7.centos.x86_64.rpm | 86 kB 00:00:00(2/3): ntp-4.2.6p5-29.el7.centos.x86_64.rpm | 548 kB 00:00:00(3/3): autogen-libopts-5.18-5.el7.x86_64.rpm | 66 kB 00:00:14--------------------------------------------------------------------------------------------------Total 47 kB/s | 701 kB 00:00:14Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : autogen-libopts-5.18-5.el7.x86_64 1/3 Installing : ntpdate-4.2.6p5-29.el7.centos.x86_64 2/3 Installing : ntp-4.2.6p5-29.el7.centos.x86_64 3/3 Verifying : ntp-4.2.6p5-29.el7.centos.x86_64 1/3 Verifying : ntpdate-4.2.6p5-29.el7.centos.x86_64 2/3 Verifying : autogen-libopts-5.18-5.el7.x86_64 3/3Installed: ntp.x86_64 0:4.2.6p5-29.el7.centos ntpdate.x86_64 0:4.2.6p5-29.el7.centosDependency Installed: autogen-libopts.x86_64 0:5.18-5.el7Complete!12 Oct 01:38:44 ntpdate[13000]: adjust time server 116.203.151.74 offset -0.083053 secCreated symlink from /etc/systemd/system/multi-user.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service.Do you want to setup RAID0 and XFS?It is recommended to use RAID0 and XFS for Scylla data. If you select yes, you will be prompted to choose the unmounted disks to use for Scylla data. Selected disks are formatted as part of the process.Yes - choose a disk/disks to format and setup for RAID0 and XFS. No - skip this step.[YES/no]NoDo you want to enable coredumps?Yes - sets up coredump to allow a post-mortem analysis of the Scylla state just prior to a crash. No - skips this step.[YES/no]Yeskernel.core_pattern = |/usr/lib/systemd/systemd-coredump %p %u %g %s %t %e&quot;Do you want to setup a system-wide customized configuration for Scylla?Yes - setup the sysconfig file. No - skips this step.[YES/no]YesDo you want to enable Network Interface Card (NIC) and disk(s) optimization?Yes - optimize the NIC queue and disks settings. Selecting Yes greatly improves performance. No - skip this step.[YES/no]YERROR: &#x27;disks&#x27; tuning was requested but no disks were found. Your system can&#x27;t be tuned until the issue is fixed.Traceback (most recent call last): File &quot;/usr/lib/scylla/scylla_sysconfig_setup&quot;, line 75, in &lt;module&gt; rps_cpus = out(&#x27;&#123;&#125; --tune net --nic &#123;&#125; --get-cpu-mask&#x27;.format(perftune_base_command(), ifname)) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 438, in run output=stdout, stderr=stderr)subprocess.CalledProcessError: Command &#x27;[&#x27;/usr/lib/scylla/perftune.py&#x27;, &#x27;--tune&#x27;, &#x27;disks&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/data&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/commitlog&#x27;, &#x27;--tune&#x27;, &#x27;net&#x27;, &#x27;--nic&#x27;, &#x27;eth0&#x27;, &#x27;--get-cpu-mask&#x27;]&#x27; returned non-zero exit status 1.NIC queue setup failed. Press any key to continue...Do you want iotune to study your disks IO profile and adapt Scylla to it?Yes - let iotune study my disk(s). Note that this action will take a few minutes. No - skip this step.[YES/no]Ytuning /sys/dev/block/0:99ERROR 2019-10-12 01:42:39,980 [shard 0] iotune - Exception when qualifying filesystem at /var/lib/scylla/dataERROR:root:/var/lib/scylla/data did not pass validation tests, it may not be on XFS and/or has limited disk space.This is a non-supported setup, and performance is expected to be very bad.For better performance, placing your data on XFS-formatted directories is required.To override this error, enable developer mode as follow:sudo /usr/lib/scylla/scylla_dev_mode_setup --developer-mode 1IO configuration setup failed. Press any key to continue...Do you want to install node exporter to export Prometheus data from the node? Note that the Scylla monitoring stack uses this dataYes - install node exporter. No - skip this step.[YES/no]YCreated symlink from /etc/systemd/system/multi-user.target.wants/node-exporter.service to /usr/lib/systemd/system/node-exporter.service.node_exporter successfully installedDo you want to set the CPU scaling governor to Performance level on boot?Yes - sets the CPU scaling governor to performance level. No - skip this step.[YES/no]Failed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirror01.idc.hinet.net * extras: ap.stykers.moe * updates: ap.stykers.moeResolving Dependencies--&gt; Running transaction check---&gt; Package kernel-tools.x86_64 0:3.10.0-1062.1.2.el7 will be installed--&gt; Processing Dependency: kernel-tools-libs = 3.10.0-1062.1.2.el7 for package: kernel-tools-3.10.0-1062.1.2.el7.x86_64--&gt; Processing Dependency: libcpupower.so.0()(64bit) for package: kernel-tools-3.10.0-1062.1.2.el7.x86_64--&gt; Running transaction check---&gt; Package kernel-tools-libs.x86_64 0:3.10.0-1062.1.2.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================== Package Arch Version Repository Size==================================================================================================Installing: kernel-tools x86_64 3.10.0-1062.1.2.el7 updates 7.8 MInstalling for dependencies: kernel-tools-libs x86_64 3.10.0-1062.1.2.el7 updates 7.7 MTransaction Summary==================================================================================================Install 1 Package (+1 Dependent package)Total download size: 16 MInstalled size: 310 kDownloading packages:(1/2): kernel-tools-libs-3.10.0-1062.1.2.el7.x86_64.rpm | 7.7 MB 00:00:03kernel-tools-3.10.0-1062.1.2.e FAILEDhttp://centos.ustc.edu.cn/centos/7.7.1908/updates/x86_64/Packages/kernel-tools-3.10.0-1062.1.2.el7.x86_64.rpm: [Errno 12] Timeout on http://centos.ustc.edu.cn/centos/7.7.1908/updates/x86_64/Packages/kernel-tools-3.10.0-1062.1.2.el7.x86_64.rpm: (28, &#x27;Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds&#x27;)Trying other mirror.(2/2): kernel-tools-3.10.0-1062.1.2.el7.x86_64.rpm | 7.8 MB 00:00:03--------------------------------------------------------------------------------------------------Total 472 kB/s | 16 MB 00:00:33Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : kernel-tools-libs-3.10.0-1062.1.2.el7.x86_64 1/2 Installing : kernel-tools-3.10.0-1062.1.2.el7.x86_64 2/2 Verifying : kernel-tools-3.10.0-1062.1.2.el7.x86_64 1/2 Verifying : kernel-tools-libs-3.10.0-1062.1.2.el7.x86_64 2/2Installed: kernel-tools.x86_64 0:3.10.0-1062.1.2.el7Dependency Installed: kernel-tools-libs.x86_64 0:3.10.0-1062.1.2.el7Complete!Created symlink from /etc/systemd/system/multi-user.target.wants/cpupower.service to /usr/lib/systemd/system/cpupower.service.Do you want to enable fstrim service?Yes - runs fstrim on your SSD. No - skip this step.[YES/no]ScyllaDB setup finished.Please restart your machine before using ScyllaDB, as you have disabled SELinux.","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/categories/bigdata/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/tags/bigdata/"},{"name":"scylladb","slug":"scylladb","permalink":"http://fansichao.github.com/blog/tags/scylladb/"}]},{"title":"Spark-使用文档","slug":"Tools/BigData/bigdata-spark","date":"2021-10-23T11:54:51.159Z","updated":"2021-10-23T11:54:51.160Z","comments":true,"path":"Tools/BigData/bigdata-spark.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-spark.md/","excerpt":"","text":"1.1. Spark 说明Apache Spark 是一个围绕速度、易用性和复杂分析构建的大数据处理框架，最初在 2009 年由加州大学伯克利分校的 AMPLab 开发，并于 2010 年成为 Apache 的开源项目之一，与 Hadoop 和 Storm 等其他大数据和 MapReduce 技术相比，Spark 有如下优势： Spark 提供了一个全面、统一的框架用于管理各种有着不同性质(文本数据、图表数据等)的数据集和数据源(批量数据或实时的流数据)的大数据处理的需求 官方资料介绍 Spark 可以将 Hadoop 集群中的应用在内存中的运行速度提升 100 倍，甚至能够将应用在磁盘上的运行速度提升 10 倍 Spark 官网 1.2. Spark 框架spark 运行流程图 Spark 架构 详见参考链接：https://blog.csdn.net/swing2008/article/details/60869183 1.3. Hadoop 说明Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。 Hadoop 实现了一个分布式文件系统(Hadoop Distributed File System)，简称 HDFS。 Hadoop 的框架最核心的设计就是：HDFS 和 MapReduce。HDFS 为海量的数据提供了存储，而 MapReduce 则为海量的数据提供了计算 Hadoop 百度百科 Hadoop 优点: 高可靠性。Hadoop 按位存储和处理数据的能力值得人们信赖。 高扩展性。Hadoop 是在可用的计算机集簇间分配数据并完成计算任务的，这些集簇可以方便地扩展到数以千计的节点中。 高效性。Hadoop 能够在节点之间动态地移动数据，并保证各个节点的动态平衡，因此处理速度非常快。 高容错性。Hadoop 能够自动保存数据的多个副本，并且能够自动将失败的任务重新分配。 低成本。与一体机、商用数据仓库以及 QlikView、Yonghong Z-Suite 等数据集市相比，hadoop 是开源的，项目的软件成本因此会大大降低。 Hadoop 框架Hadoop 有两个核心模块，分布式存储模块 HDFS和分布式计算模块 Mapreduce. 1.4. Yarn 框架说明由于原有框架 JobTracker/TaskTracker 需要大规模的调整来修复它在可扩展性，内存消耗，线程模型，可靠性和性能上的缺陷,所以推出了 Yarn 框架。 参考链接：https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-yarn/ Yarn 框架核心在于将资源管理和任务调度/监控拆分。 资源管理器: 全局管理所有应用程序计算资源的分配 每一个应用的 ApplicationMaster 负责相应的调度和协调 ResourceManager 和每一台机器的节点管理服务器能够管理用户在那台机器上的进程并能对计算进行组织 ResourceManager :中心服务，调度和启动 Job 中的 ApplicationMaster,并监控 ApplicationMaster 存在情况 NodeManager : 负责 Container 状态的维护，并向 ResourceManager 返回日志 ApplicationMaster :负责一个 Job 生命周期内的所有工作 2. Spark 环境部署不同部署模式 Standalone 模式：独立部署模式 Apache Mesos Hadoop YARN Kubernetes 版本说明: Spark 2.4.0 Scala 2.12 Spark 和 Hadoop 版本必须相互配合 2.1. 安装 ScalaSpark 支持 Scala、Java 和 Python 等语言，不过 Spark 是采用 Scala 语言开发，所以必须先安装 Scala. 步骤 1：下载Scala-2.12.7 下载地址 1wget https://downloads.lightbend.com/scala/2.12.7/scala-2.12.7.tgz 步骤 2：解压 1234# 创建目录tar -zxvf scala-2.12.7.tgzsudo mv scala-2.12.7 /usr/local/scalasudo chown scfan:scfan -R /usr/local/scala 步骤 3：配置环境变量 12345# 打开文件sudo vim /etc/profile# 添加内容如下export SCALA_HOME=/usr/local/scalaexport PATH=$SCALA_HOME/bin:$PATH 步骤 4：生效与验证 123456(env) [scfan@WOM ~]$ source /etc/profile(env) [scfan@WOM ~]$ scalaWelcome to Scala 2.12.7 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_171).Type in expressions for evaluation. Or try :help.scala&gt; 2.2. 安装 Spark步骤 1：下载 1wget http://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz 步骤 2：解压 123tar -zxvf spark-2.4.0-bin-hadoop2.7.tgzsudo mv spark-2.4.0-bin-hadoop2.7 /usr/local/sparksudo chown -R scfan:scfan /usr/local/spark 步骤 3：配置环境变量 123456# 打开文件sudo vim /etc/profile# 添加内容如下# Spark pathexport SPARK_HOME=/usr/local/sparkexport PATH=$SPARK_HOME/bin:$PATH 步骤 4：生效与验证 12345678910111213141516171819(env) [scfan@WOM ~]$ source /etc/profile(env) [scfan@WOM spark]$ source /etc/profile(env) [scfan@WOM spark]$ pysparkPython 2.7.11 (default, Apr 10 2018, 16:42:22)[GCC 4.4.7 20120313 (Red Hat 4.4.7-18)] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.2018-12-06 15:37:54 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicableSetting default log level to &quot;WARN&quot;.To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ &#x27;_/ /__ / .__/\\_,_/_/ /_/\\_\\ version 2.4.0 /_/Using Python version 2.7.11 (default, Apr 10 2018 16:42:22)SparkSession available as &#x27;spark&#x27;.&gt;&gt;&gt; 步骤 5：启动 Spark 12345678910111213141516171819(env) [scfan@WOM spark]$ ./bin/spark-shell --master local[2]2018-12-06 15:49:10 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicableSetting default log level to &quot;WARN&quot;.To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).Spark context Web UI available at http://WOM:4040Spark context available as &#x27;sc&#x27; (master = local[2], app id = local-1544082590634).Spark session available as &#x27;spark&#x27;.Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ &#x27;_/ /___/ .__/\\_,_/_/ /_/\\_\\ version 2.4.0 /_/Using Scala version 2.11.12 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_171)Type in expressions to have them evaluated.Type :help for more information.scala&gt; 页面 UI: http://WOM:4040 2.3. 安装 Hadoop(本地单节点)安装步骤 安装 JDK 1.8+ 设置 SSH 无密钥登录 下载安装 Hadoop 设置环境变量 设置 Hadoop 配置文件 创建并格式化 HDFS 目录 启动 Hadoop 打开 Web 页面 2.3.1. 下载安装 Hadoop官网：https://hadoop.apache.org/releases.html 12345678# 下载wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz# 解压tar -zxvf hadoop-2.7.7.tar.gz# 迁移sudo mv hadoop-2.7.7 /usr/local/hadoop# 授权sudo chown scfan:scfan -R usr/local/hadoop 2.3.2. 设置环境变量文件 /etc/profile 12345678910111213141516## hadoop homeexport HADOOP_HOME=/usr/local/hadoop# hadoop pathexport PATH=$PATH:$HADOOP_HOME/binexport PATH=$PATH:$HADOOP_HOME/sbin# hadoop else envexport HADOOP_MAPRED_HOME=$HADOOP_HOMEexport HADOOP_COMMON_HOME=$HADOOP_HOMEexport HADOOP_HDFS_HOME=$HADOOP_HOMEexport YARN_HOME=$HADOOP_HOMEexport HADOOP_PREFIX=$HADOOP_HOMEexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop# hadoop libexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH 2.3.3. 修改 Hadoop 配置文件配置文件：/usr/local/hadoop/etc/hadoop/hadoop-env.sh 1export JAVA_HOME=/usr/java/jdk1.8.0_171 HDFS 默认名称 /usr/local/hadoop/etc/hadoop/core-site.xml 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; MapReduce 配置 /usr/local/hadoop/etc/hadoop/yarn-site.xml 123456789101112131415161718192021222324&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt; &lt;!-- 后续如果 spark-yarn 部署报错，需要解开此处 &lt;property&gt; &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt; &lt;value&gt;master:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt; &lt;value&gt;master:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt; &lt;value&gt;master:8031&lt;/value&gt; &lt;/property&gt; --&gt;&lt;/configuration&gt; Job 配置 /usr/local/hadoop/etc/hadoop/mapred-site.xml 12345678&lt;?xml version=&quot;1.0&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;vaule&gt;yarn&lt;/vaule&gt; &lt;/property&gt;&lt;/configuration&gt; HDFS 分布式文件系统 /usr/local/hadoop/etc/hadoop/hdfs-site.xml 1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;vlaue&gt;3&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;vlaue&gt;file:/usr/local/hadoop/hadoop_data/hdfs/namenode&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;vlaue&gt;file:/usr/local/hadoop/hadoop_data/hdfs/datanode&lt;/vlaue&gt; &lt;/property&gt;&lt;/configuration&gt; 2.3.4. 格式化目录12345# 创建存储目录mkdir -p /usr/local/hadoop/hadoop_data/hdfs/namenode/mkdir -p /usr/local/hadoop/hadoop_data/hdfs/datanode/# 进行格式化(如果报错，删除namenode下文件夹current)hadoop namenode -format # 会删除HDFS数据 2.3.5. 查看页面1234# 启动HDFSstart-dfs.sh# 启动Yarnstart-yarn.sh Hadoop 界面： http://localhost:8088HDFS 界面： http://localhost:50070 2.4. 部署 Spark Standalone Mode参考链接： http://spark.apache.org/docs/latest/spark-standalone.html 本地单机模式 123456# 启动主节点 默认端口8080./sbin/start-master.sh -h localhost --webui-port 8080# 启动子节点./sbin/start-slave.sh &lt;master-spark-URL&gt;例如: &lt;master-spark-URL&gt; 可以在页面localhost:8080上面查看./sbin/start-slave.sh spark://localhost:7077 2.5. 部署 Spark Mesos 模式参考链接： http://spark.apache.org/docs/latest/running-on-mesos.html Mesos 安装参考链接：https://open.mesosphere.com/downloads/mesos/ 123# 下载系统对应 rpm 包wget http://repos.mesosphere.com/el/6/x86_64/RPMS/mesos-1.7.0-2.0.1.el6.x86_64.rpmrpm -ivh mesos-1.7.0-2.0.1.el6.x86_64.rpm 前端 WebUI 启动命令 1mesos master --ip=localhost --work_dir=/var/lib/mesos 前端 WebUI 地址:http://localhost:5050/#/ 2.6. 部署 Spark Yarn参考链接： http://spark.apache.org/docs/latest/running-on-yarn.html 123456789101112命令参数:./bin/spark-submit --class path.to.your.Class --master yarn --deploy-mode cluster [options] &lt;app jar&gt; [app options]命令样例:$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \\ --master yarn \\ --deploy-mode cluster \\ --driver-memory 4g \\ --executor-memory 2g \\ --executor-cores 1 \\ --queue thequeue \\ examples/jars/spark-examples*.jar \\ 10 2.6.1. 问题记录问题说明 123456789101112# 执行命令$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \\ --master yarn \\ --deploy-mode cluster \\ --driver-memory 4g \\ --executor-memory 2g \\ --executor-cores 1 \\ --queue thequeue \\ examples/jars/spark-examples*.jar \\ 10# 报错如下2018-12-07 16:19:07 INFO Client:871 - Retrying connect to server: 0.0.0.0/0.0.0.0:8032. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS) 问题解决yarn-site.xml 增加如下内容 123456789101112&lt;property&gt; &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt; &lt;value&gt;master:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt; &lt;value&gt;master:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt; &lt;value&gt;master:8031&lt;/value&gt; &lt;/property&gt; 2.7. 部署 Spark KubernetesSpark Kubernetes: https//spark.apache.org/docs/latest/running-on-kubernetes.html kubernetes 官网：https://kubernetes.io/ TODO 3. Spark 数据统计3.1. SparkRDD 使用RDD - 弹性分布式数据集 RDD 是可以并行操作的容错的容错集合。创建 RDD 有两种方法：并行化 驱动程序中的现有集合，或引用外部存储系统中的数据集 官网 RDD 参考链接：http://spark.apache.org/docs/latest/rdd-programming-guide.html#resilient-distributed-datasets-rdds Spark 启动bin/pyspark Spark 初始化 创建 SparkContext 对象，告知 Spark 如何访问集群。 appName 参数是应用程序在群集 UI 上显示的名称 master 是 URL 1234567&gt;&gt;&gt; from pyspark import SparkContext, SparkConf&gt;&gt;&gt; appName=&quot;fdm&quot;&gt;&gt;&gt; master=&quot;mesos://localhost:5050&quot;&gt;&gt;&gt; conf = SparkConf().setAppName(appName).setMaster(master)&gt;&gt;&gt; sc = SparkContext(conf=conf)&gt;&gt;&gt; sc&lt;SparkContext master=local[*] appName=PySparkShell&gt; 并行化集合 1234&gt;&gt;&gt; data = [1, 2, 3, 4, 5]&gt;&gt;&gt; distData = sc.parallelize(data)&gt;&gt;&gt; print distDataParallelCollectionRDD[0] at parallelize at PythonRDD.scala:195 外部数据集支持导入本地数据集、HDFS://xxxxxx 等 123&gt;&gt;&gt; distFile = sc.textFile(&quot;data.txt&quot;)&gt;&gt;&gt; distFiledata.txt MapPartitionsRDD[2] at textFile at NativeMethodAccessorImpl.java:0 可写类型： int float double bool byte null dict保存和加载 SequenceFiles 1234&gt;&gt;&gt; rdd = sc.parallelize(range(1, 4)).map(lambda x: (x, &quot;a&quot; * x))&gt;&gt;&gt; rdd.saveAsSequenceFile(&quot;path/to/file&quot;)&gt;&gt;&gt; sorted(sc.sequenceFile(&quot;path/to/file&quot;).collect())[(1, u&#x27;a&#x27;), (2, u&#x27;aa&#x27;), (3, u&#x27;aaa&#x27;)] 3.2. SparkDataFrame 使用官网 DataFrame 参考链接：http://spark.apache.org/docs/latest/sql-programming-guide.html 初始化 Spark Session 1234567from pyspark.sql import SparkSessionspark = SparkSession \\ .builder \\ .appName(&quot;Python Spark SQL basic example&quot;) \\ .config(&quot;spark.some.config.option&quot;, &quot;some-value&quot;) \\ .getOrCreate() 创建 DataFrame 1234567891011# spark is an existing SparkSessiondf = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)# Displays the content of the DataFrame to stdoutdf.show()# +----+-------+# | age| name|# +----+-------+# |null|Michael|# | 30| Andy|# | 19| Justin|# +----+-------+ 3.3. SparkSQL 使用官网参考链接：http://spark.apache.org/docs/latest/sql-distributed-sql-engine.html#running-the-thrift-jdbcodbc-server 启动 Thrift JDBC / ODBC 服务器 1./sbin/start-thriftserver.sh 访问前端 UI 1http://localhost:4042/SQL/ 使用 beeline 来测试 Thrift JDBC / ODBC 服务器： 123./bin/beelinebeeline&gt; !connect jdbc:hive2://localhost:10000# 输入用户名和空白密码 启动 spark-sql 1./bin/spark-sql Spark 问题整理Service ‘SparkUI’ could not bind on port 4040. Attempting port 4041.问题：运行 Spark 脚本报错 12self.spark = SparkSession.builder.master(self.MASTER).appName(self.APPNAME).getOrCreate() 原因：由于启动一个 Spark context 时，SparkUI 默认会使用 4040 端口，当 4040 端口被占用时，则尝试使用另外一个端口 解决步骤：关闭 Spark-Shell 即可 错误日志: 123452018-12-27 09:38:59 WARN Utils:66 - Service &#x27;SparkUI&#x27; could not bind on port 4040. Attempting port 4041.I1227 09:39:02.612689 26652 sched.cpp:232] Version: 1.7.0I1227 09:39:02.619974 26650 sched.cpp:336] New master detected at master@192.168.172.70:5050I1227 09:39:02.620997 26650 sched.cpp:356] No credentials provided. Attempting to register without authentication Spark 操作细节Mesos 使用Messos 安装&amp;配置mesos 官方部署文档 Mesos 启动 &amp; 关闭12345678910111213141516171819202122232425262728cd /usr/local/spark./bin/spark-shell --master mesos://192.168.172.70:5050/etc/mesos-master/etc/mesos-slave# 关闭 mesos-master[root@WOM mesos-master]# netstat -lntp | grep 5050[root@WOM mesos-master]# kill -9 XXXX# 启动 mesoso-mastermesos-master --work_dir=/usr/local/mesos/master_data --log_dir=/usr/local/mesos/master_logs --no-hostname_lookup --ip=192.168.172.70 --cluster=wom# 启动master-salvemesos-slave --work_dir=/usr/local/mesos/salves_data --log_dir=/usr/local/mesos/salves_logs --master=192.168.172.70:5050 --no-hostname_lookup --ip=192.168.172.70 --port=5052# 启动 Spark./sbin/start-master.sh -h localhost --webui-port 8080(env) [scfan@WOM spark]$ bin/spark-shell --master mesos://192.168.172.70:5050 --total-executor-cores 1 --driver-memory 512M --executor-memory 512M## 2.4. 部署Spark Standalone Mode参考链接：- http://spark.apache.org/docs/latest/spark-standalone.html本地单机模式# 启动主节点 默认端口8080./sbin/start-master.sh -h localhost --webui-port 8080# 启动子节点./sbin/start-slave.sh &lt;master-spark-URL&gt;例如: &lt;master-spark-URL&gt; 可以在页面localhost:8080上面查看./sbin/start-slave.sh spark://localhost:7077 删除 mesos 工作目录123456789101112如果我需要一个新的mesos集群，我需要master的干净工作目录。但问题不在于10.142.55.202约瑟夫吴说。我清除了所有的word_dir，并摆脱了这个问题。如何清理工作目录：找到mesos-master工作目录$ cat /etc/mesos-master/work_dir/var/lib/mesos去掉它$ rm -rf /var/lib/mesos Initial job has not accepted any resources; check your cluster UI to ensure that workers are registered and have sufficient resources当前的集群的可用资源不能满足应用程序所请求的资源 资源分 2 类： cores 和 ramCore 代表对执行可用的 executor slotsRam 代表每个 Worker 上被需要的空闲内存来运行你的 Application。解决方法：应用不要请求多余空闲可用资源的关闭掉已经执行结束的 Application 解决方法： 执行参数修改内存大小 释放内存，增加内存大小 export SPARK_WORKER_MEMORY=512Mexport SPARK_DAEMON_MEMORY=256M 这些–executor-memory、–driver-memory 你是否能先指定得更小些(比如 50M、100M) 1.因为提交任务的节点不能和 worker 节点交互，因为提交完任务后提交任务节点上会起一个进程，展示任务进度，大多端口为 4044，工作节点需要反馈进度给该该端口，所以如果主机名或者 IP 在 hosts 中配置不正确。所以检查下主机名和 ip 是否配置正确。 2.也有可能是内存不足造成的。内存设置可以根据情况调整下。另外，也检查下 web UI 看看，确保 worker 节点处于 alive 状态。 Sparktags: 202101 大数据 常用命令123456789# 查看分区目录hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200916/part-00109,# 删除分区目录数据后，也必须删除要分区alter table db_dwd_test.dwd_ei_basic_tsc_tax_illegal_ds drop partition (p_date=&#x27;20200917&#x27;);# 进入 调试环境~/spark/bin/pyspark --master $&#123;master_ip&#125; --total-executor-cores 5# 执行任务~/spark/bin/spark-sql --master &#123;master_ip&#125; --driver-memory 1g --executor-memory 1g --executor-cores 1 --total-executor-cores 2 xx.py 问题记录分区数量过多a union all b最后的分区数量会变为 a 的分区+b 的分区 12320/09/18 14:12:13 INFO TaskSetManager: Finished task 17432.0 in stage 3.0 (TID 17437) in 503 ms on 192.168.201.8 (executor 1) (17435/17436)20/09/18 14:12:13 INFO TaskSetManager: Finished task 17426.0 in stage 3.0 (TID 17431) in 1312 ms on 192.168.207.96 (executor 0) (17436/17436)20/09/18 14:12:13 INFO TaskSchedulerImpl: Removed TaskSet 3.0, whose tasks have all completed, from pool spark-submit 报 No module 的错误问题说明：使用外部依赖包，报 not module xxxx 可能原因 https://segmentfault.com/q/1010000004569365 问题：No module named tools.utils 12345678910111213141516[An error occurred while calling o35.sql.: org.apache.spark.SparkException: Job aborted due to stage failure: Task 5 in stage 0.0 failed 4 times, most recent failure: Lost task 5.3 in stage 0.0 (TID 43, 192.168.201.40, executor 4): org.apache.spark.api.python.PythonException: Traceback (most recent call last): File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 159, in main func, profiler, deserializer, serializer = read_udfs(pickleSer, infile) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 93, in read_udfs arg_offsets, udf = read_single_udf(pickleSer, infile) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 79, in read_single_udf f, return_type = read_command(pickleSer, infile) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 55, in read_command command = serializer._read_with_length(file) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/serializers.py&quot;, line 169, in _read_with_length return self.loads(obj) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/serializers.py&quot;, line 458, in loads return pickle.loads(obj) File &quot;./scripts.zip/scripts/zhengfujigou.py&quot;, line 19, in &lt;module&gt;ImportError: No module named tools.utils 修改步骤 1：替换 --py-files 为单个 12345678910111213141516 bash /home/scrapyer/spark/bin/spark-submit --master $&#123;spark_ip&#125; \\ --executor-memory 1g \\ --total-executor-cores 20 \\ --py-files /home/scrapyer/workspace/fansichao/workspace/$&#123;frame_dir&#125;/conf.zip \\ --py-files /home/scrapyer/workspace/fansichao/workspace/$&#123;frame_dir&#125;/tools.zip \\ --py-files /home/scrapyer/workspace/fansichao/workspace/$&#123;frame_dir&#125;/scripts.zip \\ $&#123;code_path&#125; $&#123;conf_path&#125; $&#123;p_date&#125; &gt; logs/$&#123;app_name&#125;_$&#123;p_date&#125;.log 2&gt;&amp;1修改为 bash /home/scrapyer/spark/bin/spark-submit --master $&#123;spark_ip&#125; \\ --executor-memory 1g \\ --total-executor-cores 5 \\ --py-files conf.zip,tools.zip,scripts.zip \\ $&#123;code_path&#125; $&#123;conf_path&#125; $&#123;p_date&#125;# &gt; logs/$&#123;app_name&#125;_$&#123;p_date&#125;.log 2&gt;&amp;1 使用同一个 --py-files, 而非多个--py-files !!! 多个 --py-files 在 Thanos 平台上无法真实 Kill 程序。 ResourcesSpark 官方文档 http://spark.apache.org/docs/latest/quick-start.html http://spark.apache.org/docs/latest/rdd-programming-guide.html http://spark.apache.org/docs/latest/sql-programming-guide.html 技术笔记TipsVscode 配置代码行数editor.rulers，默认 79,建议 160 – Spark 提交任务的三种方式https://www.cnblogs.com/itboys/p/9998666.html 参考资源优质博客 Python2 爬虫学习系列教程 https://cuiqingcai.com/1052.html Spark 技术知识Spark 知识术语Spark 分区的区别 Spark 学习目录 https://blog.csdn.net/a544258023/article/details/94635807 常用命令Spark - 重新分区 https://blog.csdn.net/u010720408/article/details/90229461 123456# 查看分区目录 hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200916/part-00109,# Hive中执行 删除分区目录数据后，也必须删除要分区alter table db_dwd_test.dwd_ei_basic_tsc_tax_illegal_ds drop partition (p_date=&#x27;20200917&#x27;); 多个 py-files 使用参考链接：https://www.jianshu.com/p/92be93cfbb97 hivE 数据类型 https://www.cnblogs.com/dangjf/p/10071683.html Spark 数据类型转换 https://blog.csdn.net/an1090239782/article/details/102541024 1234567891011121314ByteType：代表一个字节的整数。范围是-128到127ShortType：代表两个字节的整数。范围是-32768到32767IntegerType：代表4个字节的整数。范围是-2147483648到2147483647LongType：代表8个字节的整数。范围是-9223372036854775808到9223372036854775807FloatType：代表4字节的单精度浮点数 DoubleType：代表8字节的双精度浮点数DecimalType：代表任意精度的10进制数据。通过内部的java.math.BigDecimal支持。BigDecimal由一个任意精度的整型非标度值和一个32位整数组成StringType：代表一个字符串值BinaryType：代表一个byte序列值BooleanType：代表boolean值Datetime类型：TimestampType：代表包含字段年，月，日，时，分，秒的值DateType：代表包含字段年，月，日的值 Spark 问题记录TaskSetManager 过多，分区数过多123456789101112131415161718# 问题背景sql = &quot;&quot;&quot;insert overwrite table &#123;dwd_table&#125; partition(p_date=&#x27;&#123;p_date&#125;&#x27;)&#123;dwd_table&#125; union &#123;ods_table&#125;&quot;&quot;&quot;# 问题描述发现sql执行时，TaskSetManager分配的任务过多，part过多# 解决方案1. 在读取HDFS的时候设置固定的分区数。 数据进入ods时配置好分区数rd = spark_tools.spark_context.textFile(hdfs_path).repartition(200)2. 此sql执行方法修改，先保存为df,再进行df.repartition(200, &quot;p_date&quot;)重新分区后,再保存到数据中。# 其他说明去除 union, 使用 &quot;insert overwrite table &#123;dwd_table&#125;&quot; and &quot;insert into table &#123;dwd_table&#125;&quot;时，会产生 copy 分区，此方法不适用！db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-00199db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-00199_copy_1 详细日志 12345678920/09/18 14:12:13 INFO TaskSetManager: Finished task 17432.0 in stage 3.0 (TID 17437) in 503 ms on 192.168.201.8 (executor 1) (17435/17436)20/09/18 14:12:13 INFO TaskSetManager: Finished task 17426.0 in stage 3.0 (TID 17431) in 1312 ms on 192.168.207.96 (executor 0) (17436/17436)20/09/18 14:12:13 INFO TaskSchedulerImpl: Removed TaskSet 3.0, whose tasks have all completed, from pool20/09/18 14:12:13 INFO DAGScheduler: ResultStage 3 (sql at NativeMethodAccessorImpl.java:0) finished in 1248.035 s20/09/18 14:12:13 INFO DAGScheduler: Job 2 finished: sql at NativeMethodAccessorImpl.java:0, took 1250.992204 s-06729, dest: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-06729, Status:true20/09/18 14:20:15 INFO Hive: Renaming src: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/.hive-staging_hive_2020-09-18_13-51-12_491_7780753504198483023-1/-ext-10000/part-06730, dest: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-06730, Status:true20/09/18 14:20:15 INFO Hive: Renaming src: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/.hive-staging_hive_2020-09-18_13-51-12_491_7780753504198483023-1/-ext-10000/part-06731, dest: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-06731, Status:true","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/categories/bigdata/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/tags/bigdata/"},{"name":"spark","slug":"spark","permalink":"http://fansichao.github.com/blog/tags/spark/"}]},{"title":"PrestoDB-SQL","slug":"Tools/BigData/bigdata-prestodb","date":"2021-10-23T11:54:51.158Z","updated":"2021-10-23T11:54:51.158Z","comments":true,"path":"Tools/BigData/bigdata-prestodb.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-prestodb.md/","excerpt":"","text":"软件简介什么是 Presto 或 PrestoDB？ Presto（或 PrestoDB）是一种开源的分布式 SQL 查询引擎，从头开始设计用于针对任何规模的数据进行快速分析查询。它既可支持非关系数据源，例如 Hadoop 分布式文件系统 (HDFS)、Amazon S3、Cassandra、MongoDB 和 HBase，又可支持关系数据源，例如 MySQL、PostgreSQL、Amazon Redshift、Microsoft SQL Server 和 Teradata。 Presto 可在数据的存储位置查询数据，无需将数据移动到独立的分析系统。查询执行可在纯粹基于内存的架构上平行运行，大多数结果在几秒内即可返回。您将会发现，它已被许多知名公司采用，例如 Facebook、Airbnb、Netflix、Atlassian 和 Nasdaq。 Presto 的发展历史Presto 最初作为 Facebook 的项目启动，针对 300PB 的数据仓库运行交互式分析查询，使用大型基于 Hadoop/HDFS 的集群构建。在构建 Presto 之前，Facebook 使用的是 2008 年创建并推出的 Apache Hive，为 Hadoop 生态系统带来熟悉的 SQL 语法。Hive 在将复杂的 Java MapReduce 作业简化成类似 SQL 的查询方面对 Hadoop 生态系统有着重大影响，同时还能够执行大规模的任务。但是，它未针对交互式查询所需的高速性能进行优化。 在 2012 年，Facebook 数据基础设施组构建了 Presto，这种交互式查询系统能够以 PB 级规模快速运行。它于 2013 年春季在全公司范围内推广。2013 年 11 月，Facebook 将 Presto 作为 Apache 软件许可证下的开源软件，任何人都可以从 Github 上下载。今天，Presto 已成为在 Hadoop 上进行交互式查询的流行选择，获得了来自 Facebook 和其他组织的大量贡献。Facebook 的 Presto 实施的使用者超过一千名员工，他们每天运行超过 30000 次查询，处理的数据达到 1PB。 Presto 工作原理Presto 是在 Hadoop 上运行的分布式系统，使用与经典大规模并行处理 (MPP) 数据库管理系统相似的架构。它有一个协调器节点，与多个工作线程节点同步工作。用户将其 SQL 查询提交给协调器，由其使用自定义查询和执行引擎进行解析、计划并将分布式查询计划安排到工作线程节点之间。它设计用于支持标准 ANSI SQL 语义，包括复杂查询、聚合、联接、左/右外联接、子查询、开窗函数、不重复计数和近似百分位数。 查询编译之后，Presto 将请求处理到工作线程节点之间的多个阶段中。所有处理都在内存中进行，并以流水线方式经过网络中的不同阶段，从而避免不必要的 I/O 开销。添加更多工作线程节点可提高并行能力，并加快处理速度。 为了使 Presto 可扩展到任何数据源，它的设计采用了存储抽象化，以便于轻松地构建可插入的连接器。因此，Presto 拥有大量连接器，既可用于非关系数据源，例如 Hadoop 分布式文件系统 (HDFS)、Amazon S3、Cassandra、MongoDB 和 HBase，又可用于关系源，例如 MySQL、PostgreSQL、Amazon Redshift、Microsoft SQL Server 和 Teradata。数据在其存储位置接受查询，无需将其移动到独立的分析系统中。 语法介绍1 常用命令Base Command1show tables: 格式转换12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061-- 基础格式转换-- cast: 转换为指定类型presto:db_ods_test&gt; select cast(&#x27;2021-01-01&#x27; as date); _col0 ------------ 2021-01-01 (1 row)-- try_cast: 类型转换,支持 异常数据的转换. 避免由数据错误导致程序错误presto:db_ods_test&gt; select try_cast(&#x27;2019-01-22 08:05558:08&#x27; as timestamp); _col0 ------- NULL (1 row)-- 返回当前日期presto:db_ods_test&gt; select current_date,now(); _col0 | _col1 ------------+--------------------------------------- 2021-03-29 | 2021-03-29 11:24:08.734 Asia/Shanghai (1 row)-- format_datetime: timestamp 转为 指定格式字符串presto:db_ods_test&gt; select format_datetime(cast(&#x27;2021-01-01 00:00:00.000&#x27; as timestamp),&#x27;yyyyMMdd&#x27;) ; _col0 ---------- 20210101 (1 row)-- date_format: 字符串时间格式转换presto:db_ods_test&gt; select date_format(date_parse(&#x27;20210101&#x27;,&#x27;%Y%m%d&#x27;),&#x27;%Y-%m-%d&#x27;); _col0 ------------ 2021-01-01 (1 row)-- to_unixtime: 时间戳 转 unix 格式presto:db_ods_test&gt; select to_unixtime(try_cast(&#x27;2019-01-22 08:05:08&#x27; as timestamp)); _col0 --------------- 1.548115508E9 (1 row)-- from_unixtime: unix 转时间戳格式presto:db_ods_test&gt; select from_unixtime(to_unixtime(try_cast(&#x27;2019-01-22 08:05:08&#x27; as timestamp))); _col0 ------------------------- 2019-01-22 08:05:08.000 (1 row)-- format_datetime: 调整时间格式presto:db_ods_test&gt; select format_datetime(cast(&#x27;2019-01-22 08:05:08&#x27; as timestamp),&#x27;yyyy-MM-dd HH:mm:ss&#x27;); _col0 --------------------- 2019-01-22 08:05:08 (1 row)-- date: 返回日期表达式presto:db_ods_test&gt; select date(cast(&#x27;2021-01-01 00:00:00&#x27; as timestamp)); _col0 ------------ 2021-01-01 (1 row) Tips命令123456-- 提取 HOSTpresto:db_ods_test&gt; select url_extract_host(&#x27;http://192.168.1.1//query/abc&#x27;); _col0 ------------- 192.168.1.1 (1 row) 参考资源 Presto官方文档 Presto语法大全","categories":[],"tags":[]},{"title":"大数据之数据质量分析","slug":"Tools/BigData/bigdata-quality-analysis","date":"2021-10-23T11:54:51.158Z","updated":"2021-10-23T11:54:51.158Z","comments":true,"path":"Tools/BigData/bigdata-quality-analysis.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-quality-analysis.md/","excerpt":"","text":"数据质量互联网是一个建立在数据之上的服务行业，数据质量的好坏直接影响到企业的生存能力和竞争力。如果数据质量不佳，便容易给企业带来以下危害： 干扰运营分析、影响决策 影响算法模型质量，导致服务不够智能化 耗费人力，分析师、算法工程师、数据科学家因为数据质量问题推倒工作重来 数据质量标准 完整性 数据的记录和信息是否完整。如字段信息是否完整、有没有因上游系统出问题而导致的数据丢失、有没有出现正常 100w 的数据今天却没有数据的情况等。 准确性 数据的记录是否正确。简单的如是否出现常识性错误(年龄大于 200 岁，收货金额为负值等)，电话号码、邮箱、ip 等是否符合规范，枚举值是否正确等等。复杂一点的如基于维度的统计指标有没有问题，如平均值、总和、按照枚举值 group by 数据分布有没有异常等。 及时性 数据产出是否及时。数仓团队加工数据需要指定几点前必须产出并交给下游业务和相关分析人员。一般决策分析师需要分析前一日的数据(T+1)，如果数据隔几天才能看到，就会失去分析数据的价值。而某些业务甚至有小时级别以及实时的需求，及时性要求也就更高了。 一致性 企业数仓可能存在分支，同一份数据在不同地方需要保持一致；对于一些表的值可能参照另外一些表需要保持一致；对于表的字段类型以及值也需要保持一致(如地点写上海还是上海市，性别是 f、m 还是 0、1 标示等等)。 如何提升数据质量Step 1：事前定义数据的监控规则 数据质量需求 下游主动发现问题、数据产品收集、监控事后问题优化 提炼规则 梳理对应指标、确定对象(多表、单表、字段)、通过影响程度确定资产等级、质量规则制定 Step 2：事中监控和控制数据生产过程 质量监控和工作流无缝对接 支持定时调度 强弱规则控制 ETL 流程 对脏数据进行质量清洗 Step 3：事后分析和问题跟踪 邮件短信报警(相关问题订阅) 稽核报告查询 数据质量报告的概览、历史趋势、异常查询、数据质量表覆盖率 问题分析 异常进行评估、严重程度、影响范围确定、问题分类 表打分和质量趋势 表的打分、表的质量趋势、表异常数据查询、对项目外提供表质量查询。 报警问题跟踪处理 数据质量事件、故障定义、故障处理和定级 要想真正解决数据质量问题，应该从需求开始 明确业务需求并从需求开始控制数据质量 建立数据质量管理机制 探查数据内容、结构和异常 建立数据质量度量并明确目标 设计和实施数据质量业务规则 将数据质量规则构建到数据集成过程中 检查异常并完善规则 对照目标，监测数据质量 对不同数据的数据问题分类处理 历史数据 用数据清洗的办法来解决，清洗的过程要综合使用各类数据源，提升历史数据的质量。 当前数据 当前数据的问题，需要通过从问题定义、问题发现、问题整改、问题跟踪、效果评估 5 个方面来解决 未来数据 未来数据的处理，一般要采用做数据规划的方法来解决，从整个企业信息化的角度出发，规划统一企业数据架构，制定企业数据标准和数据模型。借业务系统改造或者重建的时机，来从根本上提高数据质量 通过对不同时期数据的分类处理，做到事前预防、事中监控、事后改善，有助于从根源上解决数据质量问题，为企业的发展带来突破和创新。 质量监控工具 数据质量监控工具-Apache Griffin Apache Griffin 部署 参考资源 如何提升数据质量 网易猛犸大数据如何提升数据质量","categories":[],"tags":[]},{"title":"RabbitMQ-消息队列","slug":"Tools/BigData/bigdata-rabbitmq","date":"2021-10-23T11:54:51.158Z","updated":"2021-10-23T11:54:51.159Z","comments":true,"path":"Tools/BigData/bigdata-rabbitmq.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-rabbitmq.md/","excerpt":"","text":"tags: 202101 Hot RabbitMQ-Install获取镜像的时候要获取 management 版本的, management 版本的才带有管理界面。 123456 (env) [scfan@iZbp11s2mtszc6msuj80h5Z mypro]$ docker search rabbitmq:managementNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmacintoshplus/rabbitmq-management Based on rabbitmq:management whit python and… 6 [OK]xiaochunping/rabbitmq xiaochunping/rabbitmq:management 2018-06-30 4transmitsms/rabbitmq-sharded Fork of rabbitmq:management with sharded_exc… 0yunyan2140/rabbitmq docker pull rabbitmq:management 0 123456789101112131415161718192021(env) [scfan@iZbp11s2mtszc6msuj80h5Z mypro]$ docker pull rabbitmq:managementmanagement: Pulling from library/rabbitmq171857c49d0f: Already exists419640447d26: Already exists61e52f862619: Already exists856781f94405: Already existsfd5f3d3bac09: Already existse526190d8f2c: Already existsbcaa754c1ece: Already exists41118e0c01b4: Already existsac3f2ab39238: Already existscd9ffc55132f: Already existsefec50445663: Pull complete598675d7eebd: Pull completefe4e66a2587e: Pull completeDigest: sha256:70a3b5de3bd8d408cde0b98382887dbb1af1ac6d42c606edccb7edc922a2fcefStatus: Downloaded newer image for rabbitmq:managementdocker.io/library/rabbitmq:management(env) [scfan@iZbp11s2mtszc6msuj80h5Z mypro]$ docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management4314392bfa7de947378bd7594bc98ebb47410b5cbf685d9ed330d218f9133d65 访问地址 http://IP:15672 默认用户名密码 guest guest 如果出现无法访问或者容器无法运行 12345678# 15672（ui管理端口）firewall-cmd --add-port=15672/tcp --permanent# 5672（远程连接端口）firewall-cmd --add-port=5672/tcp --permanent# 重载防火墙firewall-cmd --reload且 阿里云服务器对应的安全组策略需要同样配置 参考链接: Resources Centos8 搭建 RabbitMQ 环境详细记录 Docker 安装部署 RabbitMQ python 操作RabbitMq详解 RabbitMQ遇到的坑","categories":[],"tags":[]},{"title":"Huey-消息队列","slug":"Tools/BigData/bigdata-huey","date":"2021-10-23T11:54:51.157Z","updated":"2021-10-23T11:54:51.157Z","comments":true,"path":"Tools/BigData/bigdata-huey.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-huey.md/","excerpt":"","text":"环境依赖 Python2.7+ or Python3.4+ Huey 官网 Huey 简介一个轻量 Python2.7+ Python3.4+ 轻巧的消息队列. 功能说明huey 支持： 多进程，多线程或 greenlet 任务执行模型 安排任务在给定时间或在给定延迟后执行 安排重复任务，例如 crontab 自动重试失败的任务 任务优先级 任务结果存储 任务锁定 任务管道和链 不支持项: Huey 服务异常,异常服务无法继续运行，需要重新运行。(根据任务队列进行运行。) 不支持彻底取消，即任务永不使用。 无法暂定任务。任务尚未开始时，可以取消和撤销，任务已经进行后，无法取消。 定时任务精准度为分钟，无法精确到秒。 Huey 对象: Huey Huey 实例 TaskWrapper 不需要 TaskWrapper 直接创建实例。在 Huey.task()与 Huey.periodic_task() 装饰会自动创建相应的 TaskWrapper。 Task 所述 Task 类表示的函数的执行。任务的实例被序列化并排入队列以供使用者执行，消费者反序列化并执行任务功能 Result 结果 Huey 启动参数: 保证 huey 的稳定持续启动,附带 Worker 检查等参数 安装部署安装 Huey1pip install huey 安装 Redis详见 “Module-Redis 文档” 安装 Sqlite31yum install sqlite -y 软件使用1234567891011121314151617# 启动 Redisredis-server /etc/redis.conf# 启动 Huey 命令huey_consumer.py huey_task.huey -l /var/log/app.huey.log -k process -w 2 -q -c 100 -m 10 -v# 运行 指定task任务python huey_main.py(env) [scfan@scfan huey]$ huey_consumer.py huey_main.huey -k process -w 2 1[2019-10-04 17:46:21,985] INFO:huey.consumer:11137:Huey consumer started with 2 process, PID 11137 at 2019-10-04 09:46:21.985333[2019-10-04 17:46:21,985] INFO:huey.consumer:11137:Scheduler runs every 1 second(s).[2019-10-04 17:46:21,985] INFO:huey.consumer:11137:Periodic tasks are enabled.[2019-10-04 17:46:21,986] INFO:huey.consumer:11137:The following commands are available:+ huey_task.add_numbers_10+ huey_task.add_numbers_20 问题记录DENIED Redis is running in protected mode123456789101112131415161718ResponseError: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &#x27;CONFIG SET protected-mode no&#x27; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &#x27;no&#x27;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &#x27;--protected-mode no&#x27; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.[2019-10-04 10:31:51,683] ERROR:huey.consumer.Worker:32427:Error reading from queueTraceback (most recent call last): File &quot;/home/scfan/env/lib/python2.7/site-packages/huey/consumer.py&quot;, line 94, in loop task = self.huey.dequeue() File &quot;/home/scfan/env/lib/python2.7/site-packages/huey/api.py&quot;, line 282, in dequeue data = self.storage.dequeue() File &quot;/home/scfan/env/lib/python2.7/site-packages/huey/storage.py&quot;, line 423, in dequeue timeout=self.read_timeout)[1] File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/client.py&quot;, line 1635, in brpop return self.execute_command(&#x27;BRPOP&#x27;, *keys) File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/client.py&quot;, line 839, in execute_command return self.parse_response(conn, command_name, **options) File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/client.py&quot;, line 853, in parse_response response = connection.read_response() File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/connection.py&quot;, line 717, in read_response raise responseResponseError: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &#x27;CONFIG SET protected-mode no&#x27; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &#x27;no&#x27;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &#x27;--protected-mode no&#x27; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside. 解决方法: Redis 服务处于保护模式, 需要修改配置文件 redis.conf。将 NETWORK 下的 protected-mode yes 修改为 protected-mode no，然后重启 Redis 服务. The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128日志信息 1redis启动警告问题：WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. 解决方法 1234567# 临时修改echo 511 &gt; /proc/sys/net/core/somaxconn# 永久修改echo &quot;net.core.somaxconn= 1024&quot; &gt;&gt; /etc/sysctl.conf# 使其生效sysctl -p# 重启 Redis 服务","categories":[],"tags":[]},{"title":"Hive","slug":"Tools/BigData/bigdata-hive","date":"2021-10-23T11:54:51.157Z","updated":"2021-10-23T11:54:51.157Z","comments":true,"path":"Tools/BigData/bigdata-hive.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-hive.md/","excerpt":"","text":"Hive 简介Hive：由 Facebook 开源用于解决海量结构化日志的数据统计。 Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类 SQL 查询功能。 1)Hive 处理的数据存储在 HDFS 2)Hive 分析数据底层的实现是 MapReduce 3)执行程序运行在 Yarn 上 Hive 优缺点 优点 操作接口采用类 SQL 语法，提供快速开发的能力(简单、容易上手)。 避免了去写 MapReduce，减少开发人员的学习成本。 Hive 的执行延迟比较高，因此 Hive 常用于数据分析，对实时性要求不高的场合。 Hive 优势在于处理大数据，对于处理小数据没有优势，因为 Hive 的执行延迟比较高。 Hive 支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。 缺点 1.Hive 的 HQL 表达能力有限 迭代式算法无法表达 数据挖掘方面不擅长，由于 MapReduce 数据处理流程的限制，效率更高的算法却无法实现。 2.Hive 的效率比较低 Hive 自动生成的 MapReduce 作业，通常情况下不够智能化 Hive 调优比较困难，粒度较粗 Hive 架构原理1．用户接口：Client CLI(command-line interface)、JDBC/ODBC(jdbc 访问 hive)、WEBUI(浏览器访问 hive) 2．元数据：Metastore 元数据包括：表名、表所属的数据库(默认是 default)、表的拥有者、列/分区字段、表的类型(是否是外部表)、表的数据所在目录等； 默认存储在自带的 derby 数据库中，推荐使用 MySQL 存储 Metastore 3．Hadoop 使用 HDFS 进行存储，使用 MapReduce 进行计算。 4．驱动器：Driver (1)解析器(SQL Parser)：将 SQL 字符串转换成抽象语法树 AST，这一步一般都用第三方工具库完成，比如 antlr；对 AST 进行语法分析，比如表是否存在、字段是否存在、SQL 语义是否有误。 (2)编译器(Physical Plan)：将 AST 编译生成逻辑执行计划。 (3)优化器(Query Optimizer)：对逻辑执行计划进行优化。 (4)执行器(Execution)：把逻辑执行计划转换成可以运行的物理计划。对于 Hive 来说，就是 MR/Spark。 Hive 通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的 Driver，结合元数据(MetaStore)，将这些指令翻译成 MapReduce，提交到 Hadoop 中执行，最后，将执行返回的结果输出到用户交互接口。 Hive 性能调优NVL：给值为 NULL 的数据赋值，它的格式是 NVL( value，default_value)。 它的功能是如果 value 为 NULL，则 NVL 函数返回 default_value 的值，否则返回 value 的值，如果两个参数都为 NULL ，则返回 NULL。 nvl 可能存在性能问题，建议使用 if(表达式,a,b) TIPs: 打开 Hive，输入 Explain ＋ 语句，就能够看到 SQL 语句解析成 MapReduce 的过程。 Join 和 group by 都会存在分发的情况，所以需要对应处理数据倾斜。 对 Hive 来说，数据量再大，都不怕。数据倾斜，是大难题 常用命令12345678910111213141516171819202122232425262728293031323334353637383940-- 1. 查看系统自带的函数hive&gt; show functions;-- 2. 显示自带的函数的用法hive&gt; desc function upper;-- 设置reduce个数hive (default)&gt; set mapreduce.job.reduces=3;-- 查看设置reduce个数hive (default)&gt; set mapreduce.job.reduces;-- 限制数据返回行数hive (default)&gt; select * from emp limit 5;-- hive查看建表语句show create table tablename;-- 查看hive表结构：describe tablename;desc tablename;-- 删除数据delete from db_dws_test.dws_ei_basic_tsc_tax_illegal_ds where p_date &gt;=&#x27;20200923&#x27;;-- 删除分区use db_dwd_test;alter table db_dws_test.dws_ei_basic_tsc_tax_illegal_ds drop partition (p_date &gt;= &#x27;20200923&#x27;);-- case when 语句select dept_id, case when sex = &#x27;1&#x27; then &#x27;男&#x27; when sex = &#x27;0&#x27; then &#x27;女&#x27; else &#x27;未知&#x27; end as sexfrom emp_sex ;-- 格式化字符串 #,###,###.##format_number(number x, int d) 类型转换Hive-joinJoin 的几种方式 说明: Hive Join 只能支持等值的 join,不支持非等值 join inner join 内连接 left join 左连接 rigth join 右连接 full join 全连接 Join 语句注意事项 1234-- a的所有数据select a.col,b.col from table a left join b on a.key = b.key;-- a - (a和b重叠的数据)select a.col,b.col from table a left join b on a.key = b.key where b.key is null; Hive Join 的执行说明 Hive 总是从左到右顺序执行的，所以建议小表在左侧。 大数据情况下，Hive 会对每个 join 连接对象启动一个 MapReduce 当对 3 个或者更多表进行 join 连接时，如果每个 on 子句都使用相同的连接键的话，那么只会产生一个 MapReduce job。 Hive Join 语句 Hive-正则表达式正则表达式函数12345678910111213141516171819202122232425262728-- like-- 如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合表达式B的正则语法，则为TRUE；否则为FALSEhive&gt; select like(&#x27;football&#x27;, &#x27;__otba%&#x27;); -- _表示任意单个字符，%表示任意字符true-- rlike-- 如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合JAVA正则表达式B的正则语法，则为TRUE；否则为FALSEhive&gt; select &#x27;football&#x27; rlike &#x27;^footba&#x27;;OKtrue-- REGEXP-- 功能和 rlike 类似hive&gt; select regexp(&#x27;football&#x27;, &#x27;^foot&#x27;);OKtrue-- regexp_replace-- 将字符串 A 中的符合 java 正则表达式 B 的部分替换为 Chive&gt; select regexp_replace(&#x27;h234ney&#x27;, &#x27;\\\\d+&#x27;, &#x27;o&#x27;);OKhoney-- REGEXP_EXTRACT-- 将字符串 A 按照 pattern 正则表达式的规则拆分，返回 index 指定的字符，index 从 1 开始计hive&gt; select regexp_extract(&#x27;honeymoon&#x27;, &#x27;hon(.*?)(moon)&#x27;, 2);OKmoon Hive 常用正则表达式语句12345678910111213141516171819202122232425-- 判断是否纯数字 Hive模式下可用SELECT &#x27;123456&#x27; rlike &#x27;^\\\\d+$&#x27;; --true，前面需要是两个\\\\，后面的$必须要带-- 判断是否纯数字select not regexp_like(&#x27;123456&#x27;, &#x27;[^0-9]+&#x27;) ;-- 邮箱提取select regexp_extract(&#x27;我的邮箱是1234@qq.com&#x27;,&#x27;([a-z0-9\\_\\.\\-]+)@([\\da-z\\.\\-]+)\\.([a-z\\.]&#123;2,6&#125;)&#x27;,0);-- 经纬度判断SELECT regexp(&#x27;60.054845,30.324694&#x27;,&#x27;^([1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*)&#123;1&#125;\\\\,([1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*)&#123;1&#125;$&#x27;)-- 小数or整数数据提取select regexp_extract(&#x27;4个2.0GHz&#x27;,&#x27;[0-9]+([.]&#123;1&#125;[0-9]+)&#123;0,1&#125;&#x27;,0);-- URL去参数select regexp_extract(&#x27;http://tool.chinaz.com/regex&#x27;,&#x27;(.*)/$&#x27;,1);或select CONCAT(parse_url(wap_url, &#x27;PROTOCOL&#x27;),&#x27;://&#x27;,parse_url(wap_url, &#x27;HOST&#x27;),parse_url(wap_url, &#x27;PATH&#x27;))-- 提取版本号select regexp_extract(&#x27;android 9.1.0&#x27;,&#x27;[0-9]+(.[0-9]+)*&#x27;) 正则表达式语法参考链接：Python-正则表达说明 TIPS: Python2 中正则表达式对于中文的处理，必须要转换为unicode,否则结果会和预期不一致。 Hive-窗口函数窗口函数样例 12分析函数（max()/sum()/row_number()）+ 窗口子句（over函数）例：row_number() over(partition by uid order by create_time asc) 窗口函数应用场景 Top N 分区排序 —— row_number() 动态 group by 累计计算 层次查询 常用的窗口函数 RANK() ：在分组中排名，相同排名时会留下空位； DENSE_RANK() ：在分组中排名，相同排名时不会留下空位； FIRST_VALUE() ：分组内排序取第一个值； LAST_VALUE() ：分组内排序取最后一个值； NTILE(n) ：将分组数据按顺序切分成 n 份，返回当前所在切片； ROW_NUMGBER() ：在分组中从 1 开始按序记录序列； CUME_DIST() ：小于等于当前值的行数 / 分组总行数（百分比）； PERCENT_RANK() ：（分组内的 RANK 值-1） / （分组内总数-1）； LAG(col, n, DEFAULT) ：在统计窗口内从下往上取第 n 行的值； LEAD(col, n, DEFAULT)：在统计窗口内从上往下取第 n 行的值； Rank DENSE_RANK ROW_NUMBER 的区别 一般常用 row_number() RANK()：排序相同时会重复，总数不会变 DENSE_RANK()：排序相同时会重复，总数会减少 ROW_NUMBER()：会根据顺序计算 数据样例 123456789rank() over(partition by subject order by score desc) rp,dense_rank() over(partition by subject order by score desc) drp,row_number() over(partition by subject order by score desc) rmpname subject score rp drp rmp宋宋 英语 84 1 1 1大海 英语 84 1 1 2婷婷 英语 78 3 2 3孙悟空 英语 68 4 3 4 其他函数Distribute ByDistribute By： 在有些情况下，我们需要控制某个特定行应该到哪个 reducer，通常是为了进行后续的聚集操作。distribute by 子句可以做这件事。distribute by 类似 MR 中 partition(自定义分区)，进行分区，结合 sort by 使用。 对于 distribute by 进行测试，一定要分配多 reduce 进行处理，否则无法看到 distribute by 的效果。 1．distribute by 的分区规则是根据分区字段的 hash 码与 reduce 的个数进行模除后，余数相同的分到一个区。(同一个分区的不一定分区值都相同) 2．Hive 要求 DISTRIBUTE BY 语句要写在 SORT BY 语句之前。 Cluster By当 distribute by 和 sorts by 字段相同时，可以使用 cluster by 方式。 cluster by 除了具有 distribute by 的功能外还兼具 sort by 的功能。但是排序只能是升序排序，不能指定排序规则为 ASC 或者 DESC。 1)以下两种写法等价 12hive (default)&gt; select * from emp cluster by deptno;hive (default)&gt; select * from emp distribute by deptno sort by deptno; Having1．having 与 where 不同点 (1)where 后面不能写分组函数，而 having 后面可以使用分组函数。 (2)having 只用于 group by 分组统计语句。 12345-- 求每个部门的平均工资hive (default)&gt; select deptno, avg(sal) from emp group by deptno;-- 求每个部门的平均薪水大于2000的部门hive (default)&gt; select deptno, avg(sal) avg_sal from emp group by deptno having avg_sal &gt; 2000; 分桶抽样对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive 可以通过对表进行抽样来满足这个需求。 查询表 stu_buck 中的数据。 123456hive (default)&gt; select * from stu_buck tablesample(bucket 1 out of 4 on id);-- tablesample是抽样语句，语法：TABLESAMPLE(BUCKET x OUT OF y)-- y必须是table总bucket数的倍数或者因子。hive根据y的大小，决定抽样的比例。-- x 必须小于 y的值-- table总bucket数为4，tablesample(bucket 1 out of 2)，表示总共抽取(4/2=)2个bucket的数据，抽取第1(x)个和第3(x+y)个bucket的数据。 窗口函数https://www.cnblogs.com/Tunan-Ki/p/11804510.html OVER()： 指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。 CURRENT ROW： 当前行 n PRECEDING： 往前 n 行数据 n FOLLOWING： 往后 n 行数据 UNBOUNDED： 起点，UNBOUNDED PRECEDING 表示从前面的起点， UNBOUNDED FOLLOWING 表示到后面的终点 LAG(col,n,DEFAULT) ： 往前第 n 行数据 第一个参数为列名，第二个参数为往上第 n 行(可选，默认为 1)，第三个参数为默认值(当往上第 n 行为 NULL 时候，取默认值，如不指定，则为 NULL) LEAD(col,n,DEFAULT)： 往后第 n 行数据 第一个参数为列名，第二个参数为往下第 n 行(可选，默认为 1)，第三个参数为默认值(当往下第 n 行为 NULL 时候，取默认值，如不指定，则为 NULL) NTILE(n)： 把有序分区中的行分发到指定数据的组中，各个组有编号，编号从 1 开始，对于每一行，NTILE 返回此行所属的组的编号。注意：n 必须为 int 类型。 Hive 列转行(集合/数组转多行)https://www.cnblogs.com/Tunan-Ki/p/11802667.html 12345678910EXPLODE(col)： explode(col)接受一个数组(或一个map)作为输入，并将数组元素(map)作为单独的行输出。 UDTF可以在SELECT表达式列表中使用，也可以作为LATERAL VIEW的一部分使用。LATERAL VIEW：用在FROM语句后：LATERAL VIEW udtf(expression) tableAlias AS columnAlias解释：用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。 扩展嵌套的 JSON 数据 12345678910111213# prestodb-sqlSELECT json_extract(t.a, &#x27;$.a&#x27;) AS a, json_extract(t.a, &#x27;$.b&#x27;) AS bFROM ( SELECT cast(json_extract(&#x27;&#123;&quot;x&quot;:[&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;,&#123;&quot;a&quot;:3,&quot;b&quot;:4&#125;]&#125;&#x27;, &#x27;$.x&#x27;) AS array&lt;JSON&gt;) AS package_array)CROSS JOIN UNNEST(package_array) AS t(a);# spark-sqlget_json_object Hive 行转列(多行转一个集合/数组)1234567891011121314-- 返回输入字符串连接后的结果，支持任意个输入字符串CONCAT(string A/col, string B/col…)-- 指定分隔符CONCAT_WS(separator, str1, str2,...)： 它是一个特殊形式的 CONCAT()。 第一个参数剩余参数间的分隔符。 分隔符可以是与剩余参数一样的字符串。 如果分隔符是 NULL，返回值也将为 NULL。 这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间-- 去重，返回列表COLLECT_SET(col)： 函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段。 空字段赋值sort by每个 MapReduce 内部排序(Sort By) Sort By：对于大规模的数据集 order by 的效率非常低。在很多情况下，并不需要全局排序，此时可以使用 sort by。 Sort by 为每个 reducer 产生一个排序文件。每个 Reducer 内部进行排序，对全局结果集来说不是排序。 分桶表存储数据分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。 分桶是将数据集分解成更容易管理的若干部分的另一个技术。 分区针对的是数据的存储路径；分桶针对的是数据文件 group by 聚合函数GROUP BY 语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。 order by全局字段排序，只会有一个 MapReducer, 会存在一定性能问题，大数据情况下建议使用 sort by 代替 1select a,save_time from table_name where p_date = &#x27;20300101&#x27; order by save_time desc ; 参考资源Hive-SQL 技巧总结 Hive 博客 hive sql 技巧总结 Hive 博客 Hive 执行原理和 SQL 优化 Hive/HiveSQL 常用优化方法全面总结 Hive 性能优化 HIVE-SQL 优化 Hive 性能优化 Hive 总结篇及 Hive 的优化 Hive 之——Hive SQL 优化 Hive 博客 Hive str2date Hive 常用函数大全 Hive 官方函数 Spark 內建函数","categories":[],"tags":[]},{"title":"Kafka学习之路","slug":"Tools/BigData/bigdata-kafka","date":"2021-10-23T11:54:51.157Z","updated":"2021-10-23T11:54:51.158Z","comments":true,"path":"Tools/BigData/bigdata-kafka.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-kafka.md/","excerpt":"","text":"Kafka 简介Kafka 是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统(也可以当做 MQ 系统)，常见可以用于 web/nginx 日志、访问日志，消息服务等等，Linkedin 于 2010 年贡献给了 Apache 基金会并成为顶级开源项目。 主要应用场景是：日志收集系统和消息系统。 Kafka 主要设计目标如下： 以时间复杂度为 O(1)的方式提供消息持久化能力，即使对 TB 级以上数据也能保证常数时间的访问性能。 高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒 100K 条消息的传输。 支持 Kafka Server 间的消息分区，及分布式消费，同时保证每个 partition 内的消息顺序传输。 同时支持离线数据处理和实时数据处理。 Scale out:支持在线水平扩展 Kafka 就是一种发布-订阅模式 二、Kafka 的优点2.1 解耦2.2 冗余(副本)2.3 扩展性2.4 灵活性&amp;峰值处理能力2.5 可恢复性2.6 顺序保证2.7 缓冲2.8 异步通信 参考资源 Kafka 学习之路 (一)Kafka 的简介 Kafka 学习之路 (二)Kafka 的架构 Kafka 学习之路 (三)Kafka 的高可用 Kafka 学习之路 (四)Kafka 的安装 Kafka 学习之路 (五)Kafka 在 zookeeper 中的存储 Kafka 分布式发布订阅消息系统tags: 202101 Kafka 简介 Kafka 是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统(也可以当做 MQ 系统)，常见可以用于 web/nginx 日志、访问日志，消息服务等等，Linkedin 于 2010 年贡献给了 Apache 基金会并成为顶级开源项目。 主要应用场景是：日志收集系统和消息系统。 Kafka 主要设计目标如下： 以时间复杂度为 O(1)的方式提供消息持久化能力，即使对 TB 级以上数据也能保证常数时间的访问性能。 高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒 100K 条消息的传输。 支持 Kafka Server 间的消息分区，及分布式消费，同时保证每个 partition 内的消息顺序传输。 同时支持离线数据处理和实时数据处理。 Scale out:支持在线水平扩展 Kafka 就是一种发布-订阅模式 二、Kafka 的优点2.1 解耦2.2 冗余(副本)2.3 扩展性2.4 灵活性&amp;峰值处理能力2.5 可恢复性2.6 顺序保证2.7 缓冲2.8 异步通信 常用命令Resources kafka 集群管理工具 kafka-manager 部署安装 Kafka 学习之路 (一)Kafka 的简介 Kafka 学习之路 (二)Kafka 的架构 Kafka 学习之路 (三)Kafka 的高可用 Kafka 学习之路 (四)Kafka 的安装 Kafka 学习之路 (五)Kafka 在 zookeeper 中的存储","categories":[{"name":"大数据","slug":"大数据","permalink":"http://fansichao.github.com/blog/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"大数据","slug":"大数据","permalink":"http://fansichao.github.com/blog/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"消息队列","slug":"消息队列","permalink":"http://fansichao.github.com/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]},{"title":"hbase-使用文档","slug":"Tools/BigData/bigdata-hbase","date":"2021-10-23T11:54:51.156Z","updated":"2021-10-23T11:54:51.156Z","comments":true,"path":"Tools/BigData/bigdata-hbase.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-hbase.md/","excerpt":"","text":"tags: 大数据 底层存储 分布式 Hbase 2019 年 安装部署环境依赖说明: TODO 未完全 依赖于 Hadoop 环境说明： Hbase==2.2.1 安装 Hbase下载解压Hbase 下载链接(版本更新太快,存在链接失效的可能性): https://mirrors.cnnic.cn/apache/hbase/2.2.1/hbase-2.2.1-bin.tar.gz 123wget https://mirrors.cnnic.cn/apache/hbase/hbase-1.2.9/hbase-1.2.9-bin.tar.gz -P /software/Spark/spark_packages/.(env) [scfan@WOM software]$ tar -zxvf /software/Spark/spark_packages/hbase-1.2.9-bin.tar.gz -C /software/Spark/.(env) [scfan@WOM software]$ mv /software/Spark/hbase-1.2.9/ /software/Spark/hbase 配置环境变量修改文件sudo vim /etc/profile加入下面两行 123# Hbaseexport HBASE_HOME=/software/Spark/hbaseexport PATH=$PATH:$HBASE_HOME/bin 修改配置文件vi /software/Spark/hbase/conf/hbase-env.sh修改 hbase-env.sh，加入下面三行(注意 java 和 hadhoop 路径) 12345# java Home路径export JAVA_HOME=/usr/java/jdk1.8.0_171# Hadoop Home路径export HBASE_CLASSPATH=/software/Spark/spark/confexport HBASE_MANAGES_ZK=true vi /software/Spark/hbase/conf/hbase-site.xml修改 hbase-site.xml(数据路径可自行修改) 1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hbase.cluster.distributed&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.rootdir&lt;/name&gt; &lt;value&gt;file:/software/Spark/data/hbase/hbase_data&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt; &lt;value&gt;/software/Spark/data/hbase/zookeeper_data&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 创建目录cd /software/Spark/data/ &amp;&amp; mkdir hbase/hbase_data hbase/zookeeper_data 启动和验证启动服务 12(env) [scfan@WOM hbase]$ source /etc/profilestart-hbase.sh 验证 12345678910111213141516171819# 输入 Hbase Shell[root@c7c57188b482 software]# hbase shellSLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/root/packages/hugegraph/hadoop-2.7.7/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/root/packages/hugegraph/hbase-2.2.1/lib/client-facing-thirdparty/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]HBase ShellUse &quot;help&quot; to get list of supported commands.Use &quot;exit&quot; to quit this interactive shell.For Reference, please visit: http://hbase.apache.org/2.0/book.html#shellVersion 2.2.1, rf93aaf770cce81caacbf22174dfee2860dbb4810, 2019年 09月 10日 星期二 14:28:27 CSTTook 0.0023 seconds# 输入 List 查看表名称hbase(main):001:0&gt; listTABLE0 row(s)Took 0.4448 seconds=&gt; [] 附件参考链接 推荐阅读 hbase 原理 其他","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/categories/bigdata/"}],"tags":[{"name":"hbase","slug":"hbase","permalink":"http://fansichao.github.com/blog/tags/hbase/"},{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/tags/bigdata/"}]},{"title":"hadoop-使用文档","slug":"Tools/BigData/bigdata-hadoop","date":"2021-10-23T11:54:51.156Z","updated":"2021-10-23T11:54:51.156Z","comments":true,"path":"Tools/BigData/bigdata-hadoop.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-hadoop.md/","excerpt":"","text":"环境依赖: 当前环境: CentOS7.5 安装部署整体安装过程 前置依赖 Java/SSH 无密钥配置 环境变量配置 修改配置文件 创建格式化 HDFS 目录 安装在目录 /software/Spark/hadoop ,安装在其他目录，配置等对应修改 安装 JavaJava 一键安装脚本 12345678910111213141516# 全程 root 用户安装install_path=/usr/java/file_bash=/etc/profilefile_name=jdk-8u171-linux-x64.tar.gzmkdir -p $install_pathtar -zxf $file_name -C $install_pathecho &quot;&quot;&quot;# jdk javaexport JAVA_HOME=/usr/java/jdk1.8.0_171export JRE_HOME=\\$JAVA_HOME/jreexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/libexport PATH=\\$JAVA_HOME/bin:\\$PATH&quot;&quot;&quot; &gt;&gt; $file_bashsource $file_bash 安装包 jdk-8u171-linux-x64.tar.gz 下载 配置 SSH 无密钥登录《参考 SSH 密钥配置文档》 Hadoop 密钥配置较为特殊。如果 Hadoop 安装在非 root 用户。例如。sudo cat /home/scfan/.ssh/id_rsa.pub &gt;&gt; /home/scfan/.ssh/authorized_keyssudo cat /root/.ssh/id_rsa.pub &gt;&gt; /home/scfan/.ssh/authorized_keyssudo cat /home/scfan/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keyssudo cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys需要将密钥加在自己用户和其他用户。chmod 700 /home/scfan/.ssh/chmod 600 /home/scfan/.ssh/authorized_keyschmod 700 /root/.ssh/chmod 600 /root/.ssh/authorized_keys 下载安装 Hadoop1234567891011121314151617181920212223242526272829# 步骤1：下载hadoopwget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz -P /software/Spark/spark_packages/.# 步骤2：解压hadooptar -zxvf /software/Spark/spark_packages/hadoop-2.7.7.tar.gz -C /software/Spark/.mv /software/Spark/hadoop-2.7.7 /software/Spark/hadoop# 步骤3：设置环境变量sudo vim /etc/profile增加如下几行## hadoop homeexport HADOOP_HOME=/software/Spark/hadoop# hadoop pathexport PATH=$PATH:$HADOOP_HOME/binexport PATH=$PATH:$HADOOP_HOME/sbin# hadoop else envexport HADOOP_MAPRED_HOME=$HADOOP_HOMEexport HADOOP_COMMON_HOME=$HADOOP_HOMEexport HADOOP_HDFS_HOME=$HADOOP_HOMEexport YARN_HOME=$HADOOP_HOMEexport HADOOP_PREFIX=$HADOOP_HOMEexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop# hadoop libexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH# 重新加载 /etc/profilesource /etc/profile 设置 Hadoop 配置文件切换到配置文件目录cd /software/Spark/hadoop/etc/hadoop 修改 hadoop_env.sh1234修改原文件中export JAVA_HOME=$&#123;JAVA_HOME&#125;为export JAVA_HOME=/usr/java/jdk1.8.0_171 修改 HDFS 默认名称 core-site.xml123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://192.168.172.70:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 配置 MapReduce yarn-site.xml1234567891011121314151617181920212223&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt; &lt;value&gt;192.168.172.70:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt; &lt;value&gt;192.168.172.70:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt; &lt;value&gt;192.168.172.70:8031&lt;/value&gt; &lt;/property&gt; --&gt;&lt;/configuration&gt; 配置 Job mapred-site.xml拷贝文件cp mapred-site.xml.template mapred-site.xml 添加如下内容 1234567&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;vaule&gt;yarn&lt;/vaule&gt; &lt;/property&gt;&lt;/configuration&gt; HDFS 分布式文件系统 hdfs-site.xml123456789101112131415161718&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;vlaue&gt;3&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.permissions&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;vlaue&gt;file:/software/Spark/data/hadoop_data/hdfs/namenode&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;vlaue&gt;file:/software/Spark/data/hadoop_data/hdfs/datanode&lt;/vlaue&gt; &lt;/property&gt;&lt;/configuration&gt; 创建并格式化 HDFS 目录123456# 创建目录mkdir -p /software/Spark/data/hadoop_data/hdfs/namenodemkdir -p /software/Spark/data/hadoop_data/hdfs/datanode# 格式化目录# 进行格式化(如果报错，需要删除namenode下文件夹current)hadoop namenode -format # 会删除HDFS数据 启动 Hadoop启动 HDFS start-dfs.sh启动 Yarn start-yarn.sh启动所有(含 dfs 和 yarn) start-all.sh 检查启动项至少有如下启动项 123456[root@hbase hadoop]# jps | grep -E &#x27;ResourceManager|DataNode|NodeManager|SecondaryNameNode|NameNode&#x27;26530 DataNode26957 NodeManager26862 ResourceManager26429 NameNode26717 SecondaryNameNode 问题存在未启动情况，查看 start-all.sh 启动日志。或者在对应 spark、hadoop 日志目录下查看信息。 若存在 datanode 未启动(目录视情况而变动)(一般由于多次 format 导致的 name 和 data 的 id 不匹配) 12345(env) [scfan@WOM dfs]$ rm /tmp/hadoop-scfan/dfs/name/*(env) [scfan@WOM dfs]$ rm /tmp/hadoop-scfan/dfs/data/*(env) [scfan@WOM dfs]$ hadoop namenode -format(env) [scfan@WOM dfs]$ stop-all.sh(env) [scfan@WOM dfs]$ start-all.sh 查看页面Hadoop 界面： http://192.168.172.70:8088HDFS 界面： http://192.168.172.70:50070 安装日志 仅供参考 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109[root@c7c57188b482 hadoop]# hadoop namenode -formatDEPRECATED: Use of this script to execute hdfs command is deprecated.Instead use the hdfs command for it.19/10/15 01:12:09 INFO namenode.NameNode: STARTUP_MSG:/************************************************************STARTUP_MSG: Starting NameNodeSTARTUP_MSG: host = c7c57188b482/172.18.0.71STARTUP_MSG: args = [-format]STARTUP_MSG: version = 2.7.7STARTUP_MSG: classpath = /root/software/hadoop/etc/hadoop:/root/software/hadoop/share/hadoop/common/lib/jackson-xc-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/api-asn1-api-1.0.0-M20.jar:/root/software/hadoop/share/hadoop/common/lib/hadoop-auth-2.7.7.jar:/root/software/hadoop/share/hadoop/common/lib/paranamer-2.3.jar:/root/software/hadoop/share/hadoop/common/lib/commons-configuration-1.6.jar:/root/software/hadoop/share/hadoop/common/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/common/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/common/lib/gson-2.2.4.jar:/root/software/hadoop/share/hadoop/common/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/commons-httpclient-3.1.jar:/root/software/hadoop/share/hadoop/common/lib/apacheds-i18n-2.0.0-M15.jar:/root/software/hadoop/share/hadoop/common/lib/curator-client-2.7.1.jar:/root/software/hadoop/share/hadoop/common/lib/hadoop-annotations-2.7.7.jar:/root/software/hadoop/share/hadoop/common/lib/jets3t-0.9.0.jar:/root/software/hadoop/share/hadoop/common/lib/hamcrest-core-1.3.jar:/root/software/hadoop/share/hadoop/common/lib/curator-recipes-2.7.1.jar:/root/software/hadoop/share/hadoop/common/lib/junit-4.11.jar:/root/software/hadoop/share/hadoop/common/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/common/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/common/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/activation-1.1.jar:/root/software/hadoop/share/hadoop/common/lib/commons-collections-3.2.2.jar:/root/software/hadoop/share/hadoop/common/lib/commons-beanutils-core-1.8.0.jar:/root/software/hadoop/share/hadoop/common/lib/commons-digester-1.8.jar:/root/software/hadoop/share/hadoop/common/lib/httpcore-4.2.5.jar:/root/software/hadoop/share/hadoop/common/lib/xz-1.0.jar:/root/software/hadoop/share/hadoop/common/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/common/lib/guava-11.0.2.jar:/root/software/hadoop/share/hadoop/common/lib/commons-beanutils-1.7.0.jar:/root/software/hadoop/share/hadoop/common/lib/xmlenc-0.52.jar:/root/software/hadoop/share/hadoop/common/lib/jackson-jaxrs-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar:/root/software/hadoop/share/hadoop/common/lib/commons-logging-1.1.3.jar:/root/software/hadoop/share/hadoop/common/lib/jetty-6.1.26.jar:/root/software/hadoop/share/hadoop/common/lib/mockito-all-1.8.5.jar:/root/software/hadoop/share/hadoop/common/lib/java-xmlbuilder-0.4.jar:/root/software/hadoop/share/hadoop/common/lib/commons-net-3.1.jar:/root/software/hadoop/share/hadoop/common/lib/servlet-api-2.5.jar:/root/software/hadoop/share/hadoop/common/lib/httpclient-4.2.5.jar:/root/software/hadoop/share/hadoop/common/lib/commons-lang-2.6.jar:/root/software/hadoop/share/hadoop/common/lib/zookeeper-3.4.6.jar:/root/software/hadoop/share/hadoop/common/lib/avro-1.7.4.jar:/root/software/hadoop/share/hadoop/common/lib/api-util-1.0.0-M20.jar:/root/software/hadoop/share/hadoop/common/lib/jettison-1.1.jar:/root/software/hadoop/share/hadoop/common/lib/commons-math3-3.1.1.jar:/root/software/hadoop/share/hadoop/common/lib/apacheds-kerberos-codec-2.0.0-M15.jar:/root/software/hadoop/share/hadoop/common/lib/commons-cli-1.2.jar:/root/software/hadoop/share/hadoop/common/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/common/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/common/lib/jsr305-3.0.0.jar:/root/software/hadoop/share/hadoop/common/lib/jetty-sslengine-6.1.26.jar:/root/software/hadoop/share/hadoop/common/lib/stax-api-1.0-2.jar:/root/software/hadoop/share/hadoop/common/lib/jsp-api-2.1.jar:/root/software/hadoop/share/hadoop/common/lib/commons-codec-1.4.jar:/root/software/hadoop/share/hadoop/common/lib/snappy-java-1.0.4.1.jar:/root/software/hadoop/share/hadoop/common/lib/jaxb-api-2.2.2.jar:/root/software/hadoop/share/hadoop/common/lib/jetty-util-6.1.26.jar:/root/software/hadoop/share/hadoop/common/lib/commons-compress-1.4.1.jar:/root/software/hadoop/share/hadoop/common/lib/jsch-0.1.54.jar:/root/software/hadoop/share/hadoop/common/lib/curator-framework-2.7.1.jar:/root/software/hadoop/share/hadoop/common/lib/jersey-json-1.9.jar:/root/software/hadoop/share/hadoop/common/lib/htrace-core-3.1.0-incubating.jar:/root/software/hadoop/share/hadoop/common/lib/slf4j-api-1.7.10.jar:/root/software/hadoop/share/hadoop/common/lib/jaxb-impl-2.2.3-1.jar:/root/software/hadoop/share/hadoop/common/hadoop-nfs-2.7.7.jar:/root/software/hadoop/share/hadoop/common/hadoop-common-2.7.7.jar:/root/software/hadoop/share/hadoop/common/hadoop-common-2.7.7-tests.jar:/root/software/hadoop/share/hadoop/hdfs:/root/software/hadoop/share/hadoop/hdfs/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/hdfs/lib/xercesImpl-2.9.1.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/hdfs/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/hdfs/lib/netty-all-4.0.23.Final.jar:/root/software/hadoop/share/hadoop/hdfs/lib/leveldbjni-all-1.8.jar:/root/software/hadoop/share/hadoop/hdfs/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/hdfs/lib/xml-apis-1.3.04.jar:/root/software/hadoop/share/hadoop/hdfs/lib/guava-11.0.2.jar:/root/software/hadoop/share/hadoop/hdfs/lib/xmlenc-0.52.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-logging-1.1.3.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jetty-6.1.26.jar:/root/software/hadoop/share/hadoop/hdfs/lib/servlet-api-2.5.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-lang-2.6.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-daemon-1.0.13.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-cli-1.2.jar:/root/software/hadoop/share/hadoop/hdfs/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jsr305-3.0.0.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-codec-1.4.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jetty-util-6.1.26.jar:/root/software/hadoop/share/hadoop/hdfs/lib/htrace-core-3.1.0-incubating.jar:/root/software/hadoop/share/hadoop/hdfs/hadoop-hdfs-2.7.7-tests.jar:/root/software/hadoop/share/hadoop/hdfs/hadoop-hdfs-2.7.7.jar:/root/software/hadoop/share/hadoop/hdfs/hadoop-hdfs-nfs-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-client-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-xc-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/guice-3.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/activation-1.1.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-collections-3.2.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/leveldbjni-all-1.8.jar:/root/software/hadoop/share/hadoop/yarn/lib/xz-1.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/guava-11.0.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-jaxrs-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-logging-1.1.3.jar:/root/software/hadoop/share/hadoop/yarn/lib/jetty-6.1.26.jar:/root/software/hadoop/share/hadoop/yarn/lib/servlet-api-2.5.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-lang-2.6.jar:/root/software/hadoop/share/hadoop/yarn/lib/zookeeper-3.4.6.jar:/root/software/hadoop/share/hadoop/yarn/lib/jettison-1.1.jar:/root/software/hadoop/share/hadoop/yarn/lib/aopalliance-1.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-cli-1.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/yarn/lib/guice-servlet-3.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/jsr305-3.0.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/stax-api-1.0-2.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-codec-1.4.jar:/root/software/hadoop/share/hadoop/yarn/lib/zookeeper-3.4.6-tests.jar:/root/software/hadoop/share/hadoop/yarn/lib/javax.inject-1.jar:/root/software/hadoop/share/hadoop/yarn/lib/jaxb-api-2.2.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/jetty-util-6.1.26.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-compress-1.4.1.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-guice-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-json-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jaxb-impl-2.2.3-1.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-web-proxy-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-registry-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-api-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-sharedcachemanager-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-common-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-applications-unmanaged-am-launcher-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-tests-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-client-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-applicationhistoryservice-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-resourcemanager-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-applications-distributedshell-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-common-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-nodemanager-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/paranamer-2.3.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/guice-3.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/hadoop-annotations-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/hamcrest-core-1.3.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/junit-4.11.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/leveldbjni-all-1.8.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/xz-1.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/avro-1.7.4.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/aopalliance-1.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/guice-servlet-3.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/snappy-java-1.0.4.1.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/javax.inject-1.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/commons-compress-1.4.1.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jersey-guice-1.9.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-plugins-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-app-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-core-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-common-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.7-tests.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-shuffle-2.7.7.jar:/root/software/hadoop/contrib/capacity-scheduler/*.jar:/root/software/hadoop/contrib/capacity-scheduler/*.jarSTARTUP_MSG: build = Unknown -r c1aad84bd27cd79c3d1a7dd58202a8c3ee1ed3ac; compiled by &#x27;stevel&#x27; on 2018-07-18T22:47ZSTARTUP_MSG: java = 1.8.0_171************************************************************/19/10/15 01:12:09 INFO namenode.NameNode: registered UNIX signal handlers for [TERM, HUP, INT]19/10/15 01:12:09 INFO namenode.NameNode: createNameNode [-format]Formatting using clusterid: CID-9b2db537-6224-4ece-ba54-e2eb1da036f219/10/15 01:12:10 INFO namenode.FSNamesystem: No KeyProvider found.19/10/15 01:12:10 INFO namenode.FSNamesystem: fsLock is fair: true19/10/15 01:12:10 INFO namenode.FSNamesystem: Detailed lock hold time metrics enabled: false19/10/15 01:12:10 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit=100019/10/15 01:12:10 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check=true19/10/15 01:12:10 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is set to 000:00:00:00.00019/10/15 01:12:10 INFO blockmanagement.BlockManager: The block deletion will start around 2019 Oct 15 01:12:1019/10/15 01:12:10 INFO util.GSet: Computing capacity for map BlocksMap19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 2.0% max memory 889 MB = 17.8 MB19/10/15 01:12:10 INFO util.GSet: capacity = 2^21 = 2097152 entries19/10/15 01:12:10 INFO blockmanagement.BlockManager: dfs.block.access.token.enable=false19/10/15 01:12:10 INFO blockmanagement.BlockManager: defaultReplication = 319/10/15 01:12:10 INFO blockmanagement.BlockManager: maxReplication = 51219/10/15 01:12:10 INFO blockmanagement.BlockManager: minReplication = 119/10/15 01:12:10 INFO blockmanagement.BlockManager: maxReplicationStreams = 219/10/15 01:12:10 INFO blockmanagement.BlockManager: replicationRecheckInterval = 300019/10/15 01:12:10 INFO blockmanagement.BlockManager: encryptDataTransfer = false19/10/15 01:12:10 INFO blockmanagement.BlockManager: maxNumBlocksToLog = 100019/10/15 01:12:10 INFO namenode.FSNamesystem: fsOwner = root (auth:SIMPLE)19/10/15 01:12:10 INFO namenode.FSNamesystem: supergroup = supergroup19/10/15 01:12:10 INFO namenode.FSNamesystem: isPermissionEnabled = false19/10/15 01:12:10 INFO namenode.FSNamesystem: HA Enabled: false19/10/15 01:12:10 INFO namenode.FSNamesystem: Append Enabled: true19/10/15 01:12:10 INFO util.GSet: Computing capacity for map INodeMap19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 1.0% max memory 889 MB = 8.9 MB19/10/15 01:12:10 INFO util.GSet: capacity = 2^20 = 1048576 entries19/10/15 01:12:10 INFO namenode.FSDirectory: ACLs enabled? false19/10/15 01:12:10 INFO namenode.FSDirectory: XAttrs enabled? true19/10/15 01:12:10 INFO namenode.FSDirectory: Maximum size of an xattr: 1638419/10/15 01:12:10 INFO namenode.NameNode: Caching file names occuring more than 10 times19/10/15 01:12:10 INFO util.GSet: Computing capacity for map cachedBlocks19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 0.25% max memory 889 MB = 2.2 MB19/10/15 01:12:10 INFO util.GSet: capacity = 2^18 = 262144 entries19/10/15 01:12:10 INFO namenode.FSNamesystem: dfs.namenode.safemode.threshold-pct = 0.999000012874603319/10/15 01:12:10 INFO namenode.FSNamesystem: dfs.namenode.safemode.min.datanodes = 019/10/15 01:12:10 INFO namenode.FSNamesystem: dfs.namenode.safemode.extension = 3000019/10/15 01:12:10 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.window.num.buckets = 1019/10/15 01:12:10 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.num.users = 1019/10/15 01:12:10 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,2519/10/15 01:12:10 INFO namenode.FSNamesystem: Retry cache on namenode is enabled19/10/15 01:12:10 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis19/10/15 01:12:10 INFO util.GSet: Computing capacity for map NameNodeRetryCache19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 0.029999999329447746% max memory 889 MB = 273.1 KB19/10/15 01:12:10 INFO util.GSet: capacity = 2^15 = 32768 entries19/10/15 01:12:10 INFO namenode.FSImage: Allocated new BlockPoolId: BP-2097462600-172.18.0.71-157110193051819/10/15 01:12:10 INFO common.Storage: Storage directory /tmp/hadoop-root/dfs/name has been successfully formatted.19/10/15 01:12:10 INFO namenode.FSImageFormatProtobuf: Saving image file /tmp/hadoop-root/dfs/name/current/fsimage.ckpt_0000000000000000000 using no compression19/10/15 01:12:10 INFO namenode.FSImageFormatProtobuf: Image file /tmp/hadoop-root/dfs/name/current/fsimage.ckpt_0000000000000000000 of size 321 bytes saved in 0 seconds.19/10/15 01:12:10 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 019/10/15 01:12:10 INFO util.ExitUtil: Exiting with status 019/10/15 01:12:10 INFO namenode.NameNode: SHUTDOWN_MSG:/************************************************************SHUTDOWN_MSG: Shutting down NameNode at c7c57188b482/172.18.0.71************************************************************/[root@c7c57188b482 hadoop]# start-dfs.shStarting namenodes on [c7c57188b482]The authenticity of host &#x27;c7c57188b482 (172.18.0.71)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:wNaQZOYKNOWimeyHQIsFwCMyQcWanq3VgKjfmFrH4gw.ECDSA key fingerprint is MD5:dc:f1:fc:16:f2:51:af:a3:cf:59:55:75:e2:0b:89:bd.Are you sure you want to continue connecting (yes/no)? yesc7c57188b482: Warning: Permanently added &#x27;c7c57188b482,172.18.0.71&#x27; (ECDSA) to the list of known hosts.c7c57188b482: starting namenode, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/hadoop-root-namenode-c7c57188b482.outThe authenticity of host &#x27;localhost (127.0.0.1)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:wNaQZOYKNOWimeyHQIsFwCMyQcWanq3VgKjfmFrH4gw.ECDSA key fingerprint is MD5:dc:f1:fc:16:f2:51:af:a3:cf:59:55:75:e2:0b:89:bd.Are you sure you want to continue connecting (yes/no)? yeslocalhost: Warning: Permanently added &#x27;localhost&#x27; (ECDSA) to the list of known hosts.localhost: starting datanode, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/hadoop-root-datanode-c7c57188b482.outStarting secondary namenodes [0.0.0.0]The authenticity of host &#x27;0.0.0.0 (0.0.0.0)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:wNaQZOYKNOWimeyHQIsFwCMyQcWanq3VgKjfmFrH4gw.ECDSA key fingerprint is MD5:dc:f1:fc:16:f2:51:af:a3:cf:59:55:75:e2:0b:89:bd.Are you sure you want to continue connecting (yes/no)? yes0.0.0.0: Warning: Permanently added &#x27;0.0.0.0&#x27; (ECDSA) to the list of known hosts.0.0.0.0: starting secondarynamenode, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/hadoop-root-secondarynamenode-c7c57188b482.out[root@c7c57188b482 hadoop]# start-yarn.shstarting yarn daemonsstarting resourcemanager, logging to /root/software/hadoop/logs/yarn-root-resourcemanager-c7c57188b482.outlocalhost: starting nodemanager, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/yarn-root-nodemanager-c7c57188b482.out[root@c7c57188b482 hadoop]# jps | grep -E &#x27;ResourceManager|DataNode|NodeManager|SecondaryNameNode|NameNode&#x27;3121 SecondaryNameNode2913 DataNode3479 NodeManager3352 ResourceManager2766 NameNode","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/categories/bigdata/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/tags/bigdata/"},{"name":"hadoop","slug":"hadoop","permalink":"http://fansichao.github.com/blog/tags/hadoop/"}]},{"title":"大数据 SQL 优化","slug":"Tools/BigData/bigdata-hive-sql","date":"2021-10-23T11:54:51.156Z","updated":"2021-10-23T11:54:51.156Z","comments":true,"path":"Tools/BigData/bigdata-hive-sql.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-hive-sql.md/","excerpt":"","text":"原理解析https://cloud.tencent.com/developer/article/1638968 distinct &amp; group bydistinct 需要将 colA 中的所有内容都加载到内存中，大致可以理解为一个 hash 结构，key 自然就是 colA 的所有值。因为是 hash 结构，那运算速度自然就快。最后计算 hash 中有多少 key 就是最终的结果。 count(distinct)吃内存，查询快；group by 空间复杂度小，在时间复杂度允许的情况下，可以发挥他的空间复杂度优势 ! group by 是先排序后分组 语句说明优化建议优化样例1234567-- 低效率 20%-- distinct，导致map阶段无法对输出结果去重，必须将id作为key输出-- 从而 Shuffle大量的数据，并且进行排序聚合等处理SELECT COUNT( DISTINCT id ) FROM TABLE_NAME WHERE ...;-- 高效率 100%SELECT COUNT(*) FROM (SELECT DISTINCT id FROM TABLE_NAME WHERE … ) t; 常用 SQL123456789101112131415-- group by 统计多列select t.a, sum(t.b), count(t.c), count(t.d)from ( select a, b, null c, null d from some_table union all select a, 0 b, c, null d from some_table group by a,c union all select a, 0 b, null c, d from some_table group by a,d) t; 参考资源Hive/HiveSQL 常用优化方法全面总结","categories":[],"tags":[]},{"title":"Flink-流式处理","slug":"Tools/BigData/bigdata-flink","date":"2021-10-23T11:54:51.155Z","updated":"2021-10-23T11:54:51.155Z","comments":true,"path":"Tools/BigData/bigdata-flink.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-flink.md/","excerpt":"","text":"参考资源https://flink.apache.org/","categories":[],"tags":[]},{"title":"大数据生态圈","slug":"Tools/BigData/bigdata-ecosphere","date":"2021-10-23T11:54:51.155Z","updated":"2021-10-23T11:54:51.155Z","comments":true,"path":"Tools/BigData/bigdata-ecosphere.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-ecosphere.md/","excerpt":"","text":"1. 大数据生态圈 大数据生态圈 1.1. 大数据常用技术简介 Flume-日志收集工具 sqoop-数据同步传输工具 Zookeeper-分布式协作服务 Hbase-分布式列存储数据库 Hive-数据仓库 Tez OOzie-工作流调度系统 Hue (Hadoop user Experience)大数据协作框架，web 访问 Impala (数据查询系统) Sentry(事件日志记录和汇集的平台)【哨兵】 Solr(全文搜索服务器,基于 lucene) Lucene pig Ambari Storm(实时处理框架)【暴风雨】 Kylin【麒麟】 Kibana Kafka(分布式消息队列) Azkaban(批量工作流任务调度器) Nginx(反向代理服务器) spark 和 spark2(大数据处理的计算引擎) 大数据相关技术简介 参考资源 参考资源 大数据博主 什么是分布式系统！以及分布式系统架构的优缺点！ 大数据生态圈大数据特征： 1)大量化(Volume)：存储量大，增量大 TB-&gt;PB 2)多样化(Variety)： 来源多:搜索引擎，社交网络，通话记录，传感器 格式多:(非)结构化数据 ，文本、日志、视频、图片、地理位置等 3)快速化(Velocity)： 海量数据的处理需求不再局限在离线计算当中 4)价值密度低(Value)： 但是这种价值需要在海量数据之上，通过数据分析与机器学习更快速的挖掘出来 大数据带来的革命性变革： 1)成本降低 2)软件容错，硬件故障视为常态 3)简化分布式并行计算 1.1. 大数据常用技术简介Flume-日志收集工具Flume 数据流提供对日志数据进行简单处理的能力，如过滤、格式转换等。同时，Flume 还具备能够将日志写往各种数据目标的能力。 概念: 架构 agent 用于采集数据 collector 用户数据汇总 storage 是存储系统 sqoop-数据同步传输工具用于 hadoop(hive)与传统数据库的数据传输。 ETL Zookeeper-分布式协作服务一个分布式的，开放源码的分布式应用程序协调服务，是 Google 的 Chubby 一个开源的实现。 Zookeeper 解决分布环境下的数据管理问题：统一命名，状态同步，集群管理，配置同步等。Hadoop 的许多组件依赖于 Zookeeper,它运行在计算集群上面，用户管理 Hadoop 操作。分布式应用程序可以基于 ZooKeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。 快速理解： Zookeeper 的核心功能，文件系统和通信机制。 概念: 核心功能 文件系统 每个目录都是一个 znode 节点；Znode 节点可直接存储数据；类型，持久化 通信机制 客户端监听关心的 Znode 节点；znode 节点有变化时，通知客户端 核心 原子广播，保证了各个 Server 之间的同步。实现这种机制的协作叫做 ZAB 协议。(Zookeeper Atomic BrodCast) ZAB 协议：核心算法 paxos 算法，一种基于消息传递且具有高度容错性的一致性算法。分布式系统中的节点通信存在两种模型，共享内存，消息传递。 paxos 算法解决的问题是一个可能发生上述异常的分布式系统中如何就某个值达成一致，保证不论发生以上任何异常，都不会破坏决策的一致性。 Hbase-分布式列存储数据库hbase 是运行在 hdfs 之上的一种数据库，以键值对的形式存储数据，能够快速在主机内数十亿行数据中定位所需的数据并访问，而 HDFS 缺乏随即读写操作，不能满足实时需求。 概念: 特性: 海量数据存储 准实时查询，100ms 特点： 容量大，百亿行，百万列 面向列，列式存储，可单独对列进行操作 扩展性，底层依赖于 HDFS,动态增加机器即可 可靠性，HDFS 本身也有备份 高性能，LSM 数据结构，Rowkey 有序排序 Hbase 表结构： 列簇，1 张列簇不超过 5 个，列簇没有限制，列只有插入数据才存在，列在列簇中是有序的。eg:个人信息|教育信息|工作经历 不支持条件查询，列动态增加，数据自动切分，高并发读写。 1234567891011121314151617启动方式：输入：habse shell查询表：list查询表数据信息：(1)scan &#x27;表名&#x27; (2)count &#x27;表名&#x27;命令：(注意，复制可能报错，只能手打)# 查看scan &#x27;表名：列簇&#x27;，&#x27;条件&#x27;# 只返回前两行记录scan &#x27;table_name:info&#x27;,&#123;LIMIT =&gt;2&#125;# 查看具体某一行get &#x27;table_name:info&#x27;,&#x27;00123_22&#x27;# 模糊查找某一列数据scan &#x27;table_name:info&#x27;，FILTER=&gt;&quot;ColumnPrefixFilter(&#x27;td_id&#x27;) AND ValueFilter(=,&#x27;substring:$_08_03&#x27;)&quot; Hive-数据仓库Hive 是建立在 hadoop 上的数据仓库基础架构，类似一种 SQL 解析引擎，它将 SQL 语句转成 MapReduce,然后再 Hadoop 上执行。 1234567891011121314151617181920212223242526272829303132333435363738394041启动方式：hive;show tables;select * from table_name;quit;命令：# 创建数据文件hadoop fs -vi /home/testdata.dat# 创建库create database test# 创建表create table test(id int,name string,age string) ROW format DELIMITED FIELDSTERMINATED BY &#x27;\\t&#x27; stored as TEXTFILE;# 加载数据load data local inpath &#x27;/root/data/students.txt&#x27; into table test;# 删除表drop database if exists test;# 大小写转换select lower(&#x27;hello world&#x27;),upper(&#x27;hello world&#x27;)# 去掉前后的空格trim habse 和 hive 的区别 habse 是基于 Haddoop 实现的数据库，不支持 SQL hive 是基于 hadoop 实现的数据仓库，适合海量全量数据，支持类 SQL 操作。 数据仓库的特性 数据仓库用称做数据立方体的多维数据结构建模，它是一个从多个数据源收集的信息存储库，存放在一致的模式下，并且通常驻留在单个站点上。 数据仓库是面向主题的、集成的、其数据是随着时间变化而变化的，其数据是不可修改的。 Facebook 领导的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供完整的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计。像一些 data scientist 就可以直接查询，不需要学习其他编程接口。 Tez支持 DAG 作业的计算框架，对 MapReduce 的进一步拆分 Hortonworks 主推的优化 MapReduce 执行引擎，与 MapReduce 相比较，Tez 在性能方面更加出色。 OOzie-工作流调度系统用来管理 hadoop 任务，工作流调度：工作流程的编排、调整，安排事件的触发执行。OOzie 是一个可扩展的工作体系，集成于 Hadoop 的堆栈，用于协调多个 MapReduce 作业的执行。OOzie 的工作流是放置在控制依赖 DAG(有向无环图 Direct Acyclic Graph)的一组动作(例如，hadoop 的 Map/Reduce 作业，Pig 作业等)，其中指定了动作执行的顺序。OOzie 使用 hPDL(一种 XML 流程定义语言)来描述这个图。 一个基于工作流引擎的开源框架。由 Cloudera 公司贡献给 Apache 的，它能够提供对 Hadoop MapReduce 和 Pig Jobs 的任务调度与协调。 Hue (Hadoop user Experience)大数据协作框架，web 访问访问端口：8889 使用 Hue 我们可以在浏览器端的 Web 控制台上与 Hadoop 集群进行交互来分析处理数据，例如操作 HDFS 上的数据，运行 MapReduce Job,执行 Hive 的 SQL 语句，浏览 Hbase 数据库。 Impala (数据查询系统)提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBASE 的 PB 级的大数据。Impala 没有使用 MapReduce 进行并行运算，所以 Hive 适合于长时间的批处理查询分析，而 Impala 适合于实时交互式 SQL 查询。 Sentry(事件日志记录和汇集的平台)【哨兵】Sentry 是一个开源的实时错误报告工具，支持 Web 前后端、移动应用以及游戏。通常我们所说的 Sentry 是指后端，有 Django 编写。 Solr(全文搜索服务器,基于 lucene)Sentry 是一个独立的企业其搜索应用服务器，它是一个高性能，采用 JAVA5 开发，它对外提供类似于 Web-service 的 API 接口。用户可以通过 HTTP 请求，向搜索引擎提交一定格式的 XML 文件，生成索引。 Lucene它是一套用于全文检索和搜索的开发源代码程序库。Lucene 提供了一个简单却强大的应用接口程序,能够做全文索引和搜索，它是最受欢迎的免费 Java 信息检索程序库。 pigYahoo 开发的，并行地执行数据流处理的引擎，它包含了一种脚本语言，称为 Pig Latin，用来描述这些数据流。Pig Latin 本身提供了许多传统的数据操作，同时允许用户自己开发一些自定义函数用来读取、处理和写数据。在 LinkedIn 也是大量使用 为大型数据集的处理提供抽象，与 MapReduce 相比，Pig 提供了更丰富的数据结构，一般都是多值和嵌套的数据结构。它提供强大的数据变换，包括在 MapReduce 中被忽视的连接 Join 操作。 Ambari一种基于 web 的工具，支持 hadoop 集群的供应、管理和监控。 Storm(实时处理框架)【暴风雨】类似于 Hadoop 的实时处理框架，毫秒级。随着越来越多的场景对 Hadoop 的 MapReduce 高延迟无法容忍，比如网站统计、推荐系统、预警系统、金融系统(高频交易)等等，大数据实时处理解决方法的应用日趋广泛，其中 Strom 成为流计算技术中的佼佼者。 基本概念： Storm 的主从架构由 Nimbus(主结点)、zookeeper(协作框架)、supervisor(从节点)和 worker(各个机器)组成。 1)Nimbus 的作用：接收客户端代码，拆分成多个 task,将 task 信息存入 zookeper;将 task 分配给 supervisor,将映射关系存入 zookeeper;故障检测 2)supervisor 的作用：从 Nimbus 目录读取代码，从 zk 上读取分配的 task;启动工作进程 worker 执行任务；检测运行的工作进度 worker. worker 的作用：从 zk 上去读取分配的 task,并计算出 task 需要给哪些 task 分布消息；启动一个或多个 Executor 线程执行任务 Task. 4)zookeeper 的作用：协调 Nimbus 与 supervisor 进行通信；协调 supervisor 与 worker 进行通信；保证 Nimbus 的高可用性。 Kylin【麒麟】一个开源的分布式分析引擎，为 Hadoop 等大型分布式数据平台之上的超大规模数据集提供通过标准 SQL 查询及多维分析(OLAP)的功能，提供亚秒级的交互分析能力。 Tips:ETL(数据仓库技术) extract,transform,load(抽取)(转换)(加载) Kibana它是一个开源的分析和可视化平台，设计用于和 ElasticSearch 一起工作，你用 Kibana 来搜索，查看并存在 ES 索引中的数据进行交互。 常用端口(ES):5601参考链接：https://blog.csdn.net/u011262847/article/details/78007119 同时附 es-java-api: https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-search.html Kafka(分布式消息队列)端口号：9092 主要用于处理活跃的流式数据，这些数据包括网站的 pv,uv。 概念： 基本组成部分 producer Broker Consumer 基本概念 producer: 消息和数据的生产者，向 kafka 的一个 topic 发布消息的进程、代码、服务，负责发布消息到 Broker. Broker: Kafka 集群包含一个或多个服务器，这种服务被称为 Broker. Consumer: 消息和数据的消费者，订阅消息,向 Broker 读取消息的客户端。 Topic: kafka 消息的类别,每条发布到 kafka 集群的消息都有一个类别，这个类别称为 Topic. Partition： kafka 下数据存储的基本单元,每个 Topic 包含一个或多个 Partition. Consumer Group: 对于同一个 Topic,会广播给不同的 Group。每个 Consumer 属于一个特定的 Consumer Group. Replication Leader: 负责 partition 上 Producer 与 Consumer 的交互。 ReplicaManager: 负责管理当前 Broker 所有分区和副本的信息。 特点 多分区 多副本 多订阅者 基于 zookeeper 调度 应用场景： 消息队列 行为跟踪 元数据监控 日志收集 流处理，时间源 持久性日志 1234567891011121314151617手动导入数据到 Kafka 命令#创建主题,replication-factor 表示该 topic 需要在不同的 broker 中保存几份，partions 为几个分区./kafka-topics.sh --create --zookeeper cdh-node04:2111 --replication-factor 3 -- partitions 1 --topic test01#描述主题./kafka-topic.sh --zookeeper cdh-node04:2111 --describe --topic test01#生产者发送数据./kafka-console-producer.sh --broker-list cdh-node04:2111,cdh-node05:3111 --topic test01 +(复制黏贴的数据【固定格式：一般为 JSON 】)#消费者消费数据./kafaka-console-consumer.sh --zookeeper cdh-node04:2111 --topic test01 (--from-beginning 从头开始查看数据) Azkaban(批量工作流任务调度器)主要用于在一个工作流内以一个特定的顺序运行一组工作和流程，它的配置是通过简单的 key:value 键值对的方式，通过配置中的 dependencies 来设置依赖关系，这个依赖关系是无环的,否则会被视为无效的工作流。相比于 OOzie 的配置复杂度高，Azkaban 有如下有点： 1)通过 job 配置文件快速建立任务和任务之间的依赖关系。 2)提供功能清晰，简单易用的 web UI 界面。 3)提供模块化和可插拔的插件机制，原生支持 command,java,pig,hadoop。 基于 java 开发，代码结构清晰，易于二次开发。 跟上面很像，Linkedin 开源的面向 Hadoop 的开源工作流系统，提供了类似于 cron 的管理任务。 Nginx(反向代理服务器)它是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。Nginx 是一款轻量级的 Web 服务器/反向代理服务器以及电子邮件代理服务器，并在一个 BSD-like 协议下发型，其特点是占有内存小，并发能力强。事实上 nginx 的并发能力确实在同类型的网络服务器中表现较好，中国大陆使用 nginx 网站的有：百度，京东，腾讯，淘宝，网易。 应用： Nginx 实现负载均衡，链接：https://www.cnblogs.com/JimBo-Wang/p/6556360.html spark 和 spark2(大数据处理的计算引擎)Spark 是 UC Berkeley AMP lab 开发的一个集群计算的框架，类似于 Hadoop，但有很多的区别。最大的优化是让计算任务的中间结果可以存储在内存中，不需要每次都写入 HDFS，更适用于需要迭代的 MapReduce 算法场景中，可以获得更好的性能提升。例如一次排序测试中，对 100TB 数据进行排序，Spark 比 Hadoop 快三倍，并且只需要十分之一的机器。Spark 集群目前最大的可以达到 8000 节点，处理的数据达到 PB 级别，在互联网企业中应用非常广泛. 链接：https://www.cnblogs.com/smuxiaolei/p/7663744.html 相关概念： 1)在 spark 中，所有计算都是通过 RDDS 的创建、转化和操作完成的。RDDS(Resilent Distributed datasets,弹性分布式数据集)是并行分布在整个数据集中，是 spark 分发数据和计算的基础抽象类。 2)Spark 运行架构包括集群资源管理器(Cluster Manager),运行作业任务的工作节点(worker Node),每个应用的任务控制节点(Driver)和每个工作节点上负责任务的执行进程(Executor). Spark 程序的执行过程： 1)创建 SparkContext 对象 2)从外部数据源读取数据，创建 fileRDD 对象 3)构建依赖关系，fileRDD-&gt;filterRDD,形成 DAG 4)Cache()缓存，对 filterRDD 进行持久化 5)Count()执行。 spark 基础：http://dblab.xmu.edu.cn/blog/spark/ 与 Hadoop MapReduce 比较： 1)spark 采用多线程来执行任务，而 MapReduce 采用多进程，优点是减少了任务开销。 2)Excutor 中有一个 BlockManager 存储模块，会将内存和磁盘共同作为存储设备，当需要多轮时，可将中间结果存储到这个模块中，下次需要时，可以直接读取，不需要读写到 HDFS 等文件系统中，减少 IO 开销。 3)实例：100T 的数据量，spark 206 个节点，只需 23 分钟；MapReduce 2000 个节点，需要 72 分钟。 链接：http://dblab.xmu.edu.cn/blog/985-2/ RDD 在 Spark 架构中的运行过程(如图所示)：(1)创建 RDD 对象； (2)SparkContext 负责计算 RDD 之间的依赖关系，构建 DAG； (3)DAGScheduler 负责把 DAG 图分解成多个阶段，每个阶段中包含了多个任务，每个任务会被任务调度器分发给各个工作节点(Worker Node)上的 Executor 去执行。 大数据相关技术简介 Platfora 大数据发现和分析平台。 Qlikview 引导分析平台。 Sisense 商业智能软件，专门处理复杂数据的商业智能解决方案。 Sqream 快速、可扩展的大数据分析 SQL 数据库。 Splunk 运维智能平台。 Sumologic 安全的、专门定制的、基于云的机器数据分析服务。 Actian 大数据分析平台。 亚马逊 Redshift PB 级云端数据仓库服务。 CitusData 可扩展 PostgreSQL。 Exasol 用于分析数据的大规模并行处理(MPP)内存数据库。 惠普 Vertica SQL on Hadoop 大数据分析平台。 Mammothdb 与 SQL 兼容的 MPP 分析数据库。 微软 SQL Server 关系数据库管理系统。 甲骨文 Exadata 计算和存储综合系统，针对甲骨文数据库软件进行了优化。 SAP HANA 内存计算平台。 Snowflake 云数据仓库。 Teradata 企业级大数据分析和服务。 数据搜索引擎 Apache Drill 无数据库模式的 SQL 查询引擎，面向 Hadoop、NoSQL 和云存储。 Cloudera Impala 开源大规模并行处理 SQL 查询引擎。 谷歌 BigQuery 全面托管的 NoOps 数据分析服务。 Presto 面向大数据的分布式 SQL 查询引擎。 Spark 用于处理大数据的快速通用引擎。 平台/基础设施 亚马逊网络服务(AWS) 提供云计算服务 思科云 提供基础设施即服务 Heroku 为云端应用程序提供平台即服务 Infochimps 提供云服务的大数据解决方案 微软 Azure 企业级云计算平台。 Rackspace 托管专业服务和云计算服务 Softlayer(IBM) 提供云基础设施即服务 数据基础设施 Cask 面向 Hadoop 解决方案的开源应用程序平台。 Cloudera 提供基于 Hadoop 的软件、支持和服务。 Hortonworks 管理 HDP――开源企业 Apache Hadoop 数据平台。 MAPR 面向大数据部署环境的 Apache Hadoop 技术。 垂直领域应用/数据挖掘 Alpine Data Labs 高级分析平台，可处理 Apache Hadoop 和大数据。 R 免费软件环境，可处理统计计算和图形。 Rapidminer 开源预测分析平台 SAS 软件套件，可以挖掘、改动、管理和检索来自众多数据源的数据。 提取、转换和加载(ETL) IBM Datastage 使用一种高性能并行框架，整合多个系统上的数据。 Informatica 企业数据整合和管理软件。 Kettle-Pentaho Data Integration 提供了强大的提取、转换和加载(ETL)功能。 微软 SSIS 用于构建企业级数据整合和数据转换解决方案的平台。 甲骨文 Data Integrator 全面的数据整合平台。 SAP NetWeaver 为整合来自各个数据源的数据提供了灵活方式。 Talend 提供了开源整合软件产品 Cassandra 键值数据库和列式数据库的混合解决方案。 CouchBase 开源分布式 NoSQL 文档型数据库。 Databricks 使用 Spark 的基于云的大数据处理解决方案。 Datastax 为企业版的 Cassandra 数据库提供商业支持。 IBM DB2 可扩展的企业数据库服务器软件。 MemSQL 分布式内存数据库。 MongoDB 跨平台的文档型数据库。 MySQL 流行的开源数据库。 甲骨文-Oracle等软件 企业数据库软件套件。 PostgresSQL 对象关系数据库管理系统。 Riak 分布式 NoSQL 数据库。 Splice Machine Hadoop 关系数据库管理系统。 VoltDB 内存 NewSQL 数据库。 Actuate 嵌入式分析和报表解决方案。 BiBoard 交互式商业智能仪表板和可视化工具。 Chart.IO 这是面向数据库的企业级分析工具。 IBM Cognos 商业智能和绩效管理软件。 D3.JS 使用 HTML、SVG 和 CSS 可视化显示数据的 JavaScript 库。 Highcharts 面向互联网的交互式 JavaScirpt 图表。 Logi Analytics 自助服务式、基于 Web 的商业智能和分析应用软件。 微软 Power BI 交互式数据探查、可视化和演示工具。 Microstrategy 企业商业智能和分析软件。 甲骨文 Hyperion 企业绩效管理和商业智能系统。 Pentaho 大数据整合和分析解决方案。 SAP Business Objects 商业智能解决方案。 Tableau 专注于商业智能的交互式数据可视化产品系列。 Tibco Jaspersoft 商业智能套件 参考资源 大数据大纲&amp;大数据生态圈所涉及的技术 数据湖 大数据生态圈相关总结 一篇了解大数据架构及 Hadoop 生态圈 大数据生态圈 大数据分析技术领域-2015 相关技术","categories":[],"tags":[]},{"title":"Redis 学习之路","slug":"Tools/BigData/bigdata-Redis","date":"2021-10-23T11:54:51.154Z","updated":"2021-10-23T11:54:51.154Z","comments":true,"path":"Tools/BigData/bigdata-Redis.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-Redis.md/","excerpt":"","text":"参考资源 菜鸟驿站-Redis 教程 Redis-高性能 kv 数据库 内存管理库，可以接受多种数据格式 Redis 部署1234567891011121314# Installyum install lrzsz -ypip install redis# wget http://download.redis.io/releases/redis-5.0.5.tar.gzwget http://download.redis.io/releases/redis-3.2.9.tar.gztar -zxf redis-3.2.9.tar.gz# # 编译并指定安装目录cd redis-3.2.9# # 创建软链接make PREFIX=/usr/local/redis-3.2.9 installln -s /usr/local/redis-3.2.9 /usr/local/rediscp redis.conf /etc/redis.confcp /usr/local/redis/bin/redis-server /usr/local/bin/redis-server 配置 Redis 123456789101112# 配置 overcommit_memory 参数echo &quot;vm.overcommit_memory = 1&quot; &gt;&gt; /etc/sysctl.conf# 使其生效sysctl vm.overcommit_memory=1# 关闭透明大页面-临时echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled# 关闭透明大页面-永久,开机生效echo &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot; &gt;&gt; /etc/rc.local# 修改 redis.confprotected-mode yes 修改为 protected-mode no Redis 使用12# 启动 Redisredis-server /etc/redis.conf 启动页面内容如下 12345678910111213141516171819202122[root@e7489d44f6bf redis-3.2.9]# redis-server /etc/redis.conf _._ _.-``__ &#x27;&#x27;-._ _.-`` `. `_. &#x27;&#x27;-._ Redis 3.2.9 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ &#x27;&#x27;-._ ( &#x27; , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;| Port: 6379 | `-._ `._ / _.-&#x27; | PID: 4682 `-._ `-._ `-./ _.-&#x27; _.-&#x27; |`-._`-._ `-.__.-&#x27; _.-&#x27;_.-&#x27;| | `-._`-._ _.-&#x27;_.-&#x27; | http://redis.io `-._ `-._`-.__.-&#x27;_.-&#x27; _.-&#x27; |`-._`-._ `-.__.-&#x27; _.-&#x27;_.-&#x27;| | `-._`-._ _.-&#x27;_.-&#x27; | `-._ `-._`-.__.-&#x27;_.-&#x27; _.-&#x27; `-._ `-.__.-&#x27; _.-&#x27; `-._ _.-&#x27; `-.__.-&#x27;4682:M 25 Dec 04:20:48.273 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.4682:M 25 Dec 04:20:48.274 # Server started, Redis version 3.2.94682:M 25 Dec 04:20:48.274 * The server is now ready to accept connections on port 6379 Resources 菜鸟驿站-Redis 教程","categories":[{"name":"大数据","slug":"大数据","permalink":"http://fansichao.github.com/blog/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"大数据","slug":"大数据","permalink":"http://fansichao.github.com/blog/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"缓存机制","slug":"缓存机制","permalink":"http://fansichao.github.com/blog/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"}]},{"title":"bigdata-clean 大数据清洗","slug":"Tools/BigData/bigdata-clean","date":"2021-10-23T11:54:51.154Z","updated":"2021-10-23T11:54:51.154Z","comments":true,"path":"Tools/BigData/bigdata-clean.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/bigdata-clean.md/","excerpt":"","text":"unicode 特殊字符清洗校验程序 i in range(0,10000): a = &#x27;\\\\u&#x27; + str(i).zfill(4) print(a, a.encode(&#x27;utf-8&#x27;).decode(&quot;unicode_escape&quot;))​```bash数据样例\\u0000\\u0001 \u0001\\u0002 \u0002\\u0003 \u0003\\u0004 \u0004\\u0005 \u0005\\u0006 \u0006\\u0007 \u0007\\u0008 \b\\u0009\\u0010 \u0010\\u0011 \u0011\\u0012 \u0012\\u0013 \u0013\\u0014 \u0014\\u0015 \u0015\\u0016 \u0016\\u0017 \u0017\\u0018 \u0018\\u0019 \u0019\\u0020\\u0021 !\\u0022 &quot;\\u0023 #\\u0024 $\\u0025 %\\u0026 &amp;\\u0027 &#x27;\\u0028 (\\u0029 )\\u0030 0\\u0031 1\\u0032 2\\u0033 3\\u0034 4\\u0035 5\\u0036 6\\u0037 7\\u0038 8\\u0039 9\\u0040 @\\u0041 A\\u0042 B\\u0043 C\\u0044 D\\u0045 E\\u0046 F\\u0047 G\\u0048 H\\u0049 I\\u0050 P\\u0051 Q\\u0052 R\\u0053 S\\u0054 T\\u0055 U\\u0056 V\\u0057 W\\u0058 X\\u0059 Y\\u0060 `\\u0061 a\\u0062 b\\u0063 c\\u0064 d\\u0065 e\\u0066 f\\u0067 g\\u0068 h\\u0069 i\\u0070 p\\u0071 q\\u0072 r\\u0073 s\\u0074 t\\u0075 u\\u0076 v\\u0077 w\\u0078 x\\u0079 y\\u0080 \\u0081 \\u0082 \\u0083 \\u0084 \\u0085 \\u0086 \\u0087 \\u0088 \\u0089 \\u0090 \\u0091 \\u0092 \\u0093 \\u0094 \\u0095 \\u0096 \\u0097 \\u0098 \\u0099 \\u0100 Ā\\u0101 ā\\u0102 Ă\\u0103 ă\\u0104 Ą\\u0105 ą\\u0106 Ć\\u0107 ć\\u0108 Ĉ\\u0109 ĉ\\u0110 Đ\\u0111 đ\\u0112 Ē\\u0113 ē\\u0114 Ĕ\\u0115 ĕ\\u0116 Ė\\u0117 ė\\u0118 Ę\\u0119 ę\\u0120 Ġ\\u0121 ġ\\u0122 Ģ\\u0123 ģ\\u0124 Ĥ\\u0125 ĥ\\u0126 Ħ\\u0127 ħ\\u0128 Ĩ\\u0129 ĩ\\u0130 İ\\u0131 ı\\u0132 Ĳ\\u0133 ĳ\\u0134 Ĵ\\u0135 ĵ\\u0136 Ķ\\u0137 ķ\\u0138 ĸ\\u0139 Ĺ\\u0140 ŀ\\u0141 Ł\\u0142 ł\\u0143 Ń\\u0144 ń\\u0145 Ņ\\u0146 ņ\\u0147 Ň\\u0148 ň\\u0149 ŉ\\u0150 Ő\\u0151 ő\\u0152 Œ\\u0153 œ\\u0154 Ŕ\\u0155 ŕ\\u0156 Ŗ\\u0157 ŗ\\u0158 Ř\\u0159 ř\\u0160 Š\\u0161 š\\u0162 Ţ\\u0163 ţ\\u0164 Ť\\u0165 ť\\u0166 Ŧ\\u0167 ŧ\\u0168 Ũ\\u0169 ũ\\u0170 Ű\\u0171 ű\\u0172 Ų\\u0173 ų\\u0174 Ŵ\\u0175 ŵ\\u0176 Ŷ\\u0177 ŷ\\u0178 Ÿ\\u0179 Ź\\u0180 ƀ\\u0181 Ɓ\\u0182 Ƃ\\u0183 ƃ\\u0184 Ƅ\\u0185 ƅ\\u0186 Ɔ\\u0187 Ƈ\\u0188 ƈ\\u0189 Ɖ\\u0190 Ɛ\\u0191 Ƒ\\u0192 ƒ\\u0193 Ɠ\\u0194 Ɣ\\u0195 ƕ\\u0196 Ɩ\\u0197 Ɨ\\u0198 Ƙ\\u0199 ƙ\\u0200 Ȁ\\u0201 ȁ\\u0202 Ȃ\\u0203 ȃ\\u0204 Ȅ\\u0205 ȅ\\u0206 Ȇ\\u0207 ȇ\\u0208 Ȉ\\u0209 ȉ\\u0210 Ȑ\\u0211 ȑ\\u0212 Ȓ\\u0213 ȓ\\u0214 Ȕ\\u0215 ȕ\\u0216 Ȗ\\u0217 ȗ\\u0218 Ș\\u0219 ș\\u0220 Ƞ\\u0221 ȡ\\u0222 Ȣ\\u0223 ȣ\\u0224 Ȥ\\u0225 ȥ\\u0226 Ȧ\\u0227 ȧ\\u0228 Ȩ\\u0229 ȩ\\u0230 Ȱ\\u0231 ȱ\\u0232 Ȳ\\u0233 ȳ\\u0234 ȴ\\u0235 ȵ\\u0236 ȶ\\u0237 ȷ\\u0238 ȸ\\u0239 ȹ\\u0240 ɀ\\u0241 Ɂ\\u0242 ɂ\\u0243 Ƀ\\u0244 Ʉ\\u0245 Ʌ\\u0246 Ɇ\\u0247 ɇ\\u0248 Ɉ\\u0249 ɉ\\u0250 ɐ\\u0251 ɑ\\u0252 ɒ\\u0253 ɓ\\u0254 ɔ\\u0255 ɕ\\u0256 ɖ\\u0257 ɗ\\u0258 ɘ\\u0259 ə\\u0260 ɠ\\u0261 ɡ\\u0262 ɢ\\u0263 ɣ\\u0264 ɤ\\u0265 ɥ\\u0266 ɦ\\u0267 ɧ\\u0268 ɨ\\u0269 ɩ\\u0270 ɰ\\u0271 ɱ\\u0272 ɲ\\u0273 ɳ\\u0274 ɴ\\u0275 ɵ\\u0276 ɶ\\u0277 ɷ\\u0278 ɸ\\u0279 ɹ\\u0280 ʀ\\u0281 ʁ\\u0282 ʂ\\u0283 ʃ\\u0284 ʄ\\u0285 ʅ\\u0286 ʆ\\u0287 ʇ\\u0288 ʈ\\u0289 ʉ\\u0290 ʐ\\u0291 ʑ\\u0292 ʒ\\u0293 ʓ\\u0294 ʔ\\u0295 ʕ\\u0296 ʖ\\u0297 ʗ\\u0298 ʘ\\u0299 ʙ\\u0300 ̀\\u0301 ́\\u0302 ̂\\u0303 ̃\\u0304 ̄\\u0305 ̅\\u0306 ̆\\u0307 ̇\\u0308 ̈\\u0309 ̉\\u0310 ̐\\u0311 ̑\\u0312 ̒\\u0313 ̓\\u0314 ̔\\u0315 ̕\\u0316 ̖\\u0317 ̗\\u0318 ̘\\u0319 ̙\\u0320 ̠\\u0321 ̡\\u0322 ̢\\u0323 ̣\\u0324 ̤\\u0325 ̥\\u0326 ̦\\u0327 ̧\\u0328 ̨\\u0329 ̩\\u0330 ̰\\u0331 ̱\\u0332 ̲\\u0333 ̳\\u0334 ̴\\u0335 ̵\\u0336 ̶\\u0337 ̷\\u0338 ̸\\u0339 ̹\\u0340 ̀\\u0341 ́\\u0342 ͂\\u0343 ̓\\u0344 ̈́\\u0345 ͅ\\u0346 ͆\\u0347 ͇\\u0348 ͈\\u0349 ͉\\u0350 ͐\\u0351 ͑\\u0352 ͒\\u0353 ͓\\u0354 ͔\\u0355 ͕\\u0356 ͖\\u0357 ͗\\u0358 ͘\\u0359 ͙\\u0360 ͠\\u0361 ͡\\u0362 ͢\\u0363 ͣ\\u0364 ͤ\\u0365 ͥ\\u0366 ͦ\\u0367 ͧ\\u0368 ͨ\\u0369 ͩ\\u0370 Ͱ\\u0371 ͱ\\u0372 Ͳ\\u0373 ͳ\\u0374 ʹ\\u0375 ͵\\u0376 Ͷ\\u0377 ͷ\\u0378 ͸\\u0379 ͹\\u0380 ΀\\u0381 ΁\\u0382 ΂\\u0383 ΃\\u0384 ΄\\u0385 ΅\\u0386 Ά\\u0387 ·\\u0388 Έ\\u0389 Ή\\u0390 ΐ\\u0391 Α\\u0392 Β\\u0393 Γ\\u0394 Δ\\u0395 Ε\\u0396 Ζ\\u0397 Η\\u0398 Θ\\u0399 Ι\\u0400 Ѐ\\u0401 Ё\\u0402 Ђ\\u0403 Ѓ\\u0404 Є\\u0405 Ѕ\\u0406 І\\u0407 Ї\\u0408 Ј\\u0409 Љ\\u0410 А\\u0411 Б\\u0412 В\\u0413 Г\\u0414 Д\\u0415 Е\\u0416 Ж\\u0417 З\\u0418 И\\u0419 Й\\u0420 Р\\u0421 С\\u0422 Т\\u0423 У\\u0424 Ф\\u0425 Х\\u0426 Ц\\u0427 Ч\\u0428 Ш\\u0429 Щ\\u0430 а\\u0431 б\\u0432 в\\u0433 г\\u0434 д\\u0435 е\\u0436 ж\\u0437 з\\u0438 и\\u0439 й\\u0440 р\\u0441 с\\u0442 т\\u0443 у\\u0444 ф\\u0445 х\\u0446 ц\\u0447 ч\\u0448 ш\\u0449 щ\\u0450 ѐ\\u0451 ё\\u0452 ђ\\u0453 ѓ\\u0454 є\\u0455 ѕ\\u0456 і\\u0457 ї\\u0458 ј\\u0459 љ\\u0460 Ѡ\\u0461 ѡ\\u0462 Ѣ\\u0463 ѣ\\u0464 Ѥ\\u0465 ѥ\\u0466 Ѧ\\u0467 ѧ\\u0468 Ѩ\\u0469 ѩ\\u0470 Ѱ\\u0471 ѱ\\u0472 Ѳ\\u0473 ѳ\\u0474 Ѵ\\u0475 ѵ\\u0476 Ѷ\\u0477 ѷ\\u0478 Ѹ\\u0479 ѹ\\u0480 Ҁ\\u0481 ҁ\\u0482 ҂\\u0483 ҃\\u0484 ҄\\u0485 ҅\\u0486 ҆\\u0487 ҇\\u0488 ҈\\u0489 ҉\\u0490 Ґ\\u0491 ґ\\u0492 Ғ\\u0493 ғ\\u0494 Ҕ\\u0495 ҕ\\u0496 Җ\\u0497 җ\\u0498 Ҙ\\u0499 ҙ\\u0500 Ԁ\\u0501 ԁ\\u0502 Ԃ\\u0503 ԃ\\u0504 Ԅ\\u0505 ԅ\\u0506 Ԇ\\u0507 ԇ\\u0508 Ԉ\\u0509 ԉ\\u0510 Ԑ\\u0511 ԑ\\u0512 Ԓ\\u0513 ԓ\\u0514 Ԕ\\u0515 ԕ\\u0516 Ԗ\\u0517 ԗ\\u0518 Ԙ\\u0519 ԙ\\u0520 Ԡ\\u0521 ԡ\\u0522 Ԣ\\u0523 ԣ\\u0524 Ԥ\\u0525 ԥ\\u0526 Ԧ\\u0527 ԧ\\u0528 Ԩ\\u0529 ԩ\\u0530 ԰\\u0531 Ա\\u0532 Բ\\u0533 Գ\\u0534 Դ\\u0535 Ե\\u0536 Զ\\u0537 Է\\u0538 Ը\\u0539 Թ\\u0540 Հ\\u0541 Ձ\\u0542 Ղ\\u0543 Ճ\\u0544 Մ\\u0545 Յ\\u0546 Ն\\u0547 Շ\\u0548 Ո\\u0549 Չ\\u0550 Ր\\u0551 Ց\\u0552 Ւ\\u0553 Փ\\u0554 Ք\\u0555 Օ\\u0556 Ֆ\\u0557 ՗\\u0558 ՘\\u0559 ՙ\\u0560 ՠ\\u0561 ա\\u0562 բ\\u0563 գ\\u0564 դ\\u0565 ե\\u0566 զ\\u0567 է\\u0568 ը\\u0569 թ\\u0570 հ\\u0571 ձ\\u0572 ղ\\u0573 ճ\\u0574 մ\\u0575 յ\\u0576 ն\\u0577 շ\\u0578 ո\\u0579 չ\\u0580 ր\\u0581 ց\\u0582 ւ\\u0583 փ\\u0584 ք\\u0585 օ\\u0586 ֆ\\u0587 և\\u0588 ֈ\\u0589 ։\\u0590 ֐\\u0591 ֑\\u0592 ֒\\u0593 ֓\\u0594 ֔\\u0595 ֕\\u0596 ֖\\u0597 ֗\\u0598 ֘\\u0599 ֙\\u0600 ؀\\u0601 ؁\\u0602 ؂\\u0603 ؃\\u0604 ؄\\u0605 ؅\\u0606 ؆\\u0607 ؇\\u0608 ؈\\u0609 ؉\\u0610 ؐ\\u0611 ؑ\\u0612 ؒ\\u0613 ؓ\\u0614 ؔ\\u0615 ؕ\\u0616 ؖ\\u0617 ؗ\\u0618 ؘ\\u0619 ؙ\\u0620 ؠ\\u0621 ء\\u0622 آ\\u0623 أ\\u0624 ؤ\\u0625 إ\\u0626 ئ\\u0627 ا\\u0628 ب\\u0629 ة\\u0630 ذ\\u0631 ر\\u0632 ز\\u0633 س\\u0634 ش\\u0635 ص\\u0636 ض\\u0637 ط\\u0638 ظ\\u0639 ع\\u0640 ـ\\u0641 ف\\u0642 ق\\u0643 ك\\u0644 ل\\u0645 م\\u0646 ن\\u0647 ه\\u0648 و\\u0649 ى\\u0650 ِ\\u0651 ّ\\u0652 ْ\\u0653 ٓ\\u0654 ٔ\\u0655 ٕ\\u0656 ٖ\\u0657 ٗ\\u0658 ٘\\u0659 ٙ\\u0660 ٠\\u0661 ١\\u0662 ٢\\u0663 ٣\\u0664 ٤\\u0665 ٥\\u0666 ٦\\u0667 ٧\\u0668 ٨\\u0669 ٩\\u0670 ٰ\\u0671 ٱ\\u0672 ٲ\\u0673 ٳ\\u0674 ٴ\\u0675 ٵ\\u0676 ٶ\\u0677 ٷ\\u0678 ٸ\\u0679 ٹ\\u0680 ڀ\\u0681 ځ\\u0682 ڂ\\u0683 ڃ\\u0684 ڄ\\u0685 څ\\u0686 چ\\u0687 ڇ\\u0688 ڈ\\u0689 ډ\\u0690 ڐ\\u0691 ڑ\\u0692 ڒ\\u0693 ړ\\u0694 ڔ\\u0695 ڕ\\u0696 ږ\\u0697 ڗ\\u0698 ژ\\u0699 ڙ\\u0700 ܀\\u0701 ܁\\u0702 ܂\\u0703 ܃\\u0704 ܄\\u0705 ܅\\u0706 ܆\\u0707 ܇\\u0708 ܈\\u0709 ܉\\u0710 ܐ\\u0711 ܑ\\u0712 ܒ\\u0713 ܓ\\u0714 ܔ\\u0715 ܕ\\u0716 ܖ\\u0717 ܗ\\u0718 ܘ\\u0719 ܙ\\u0720 ܠ\\u0721 ܡ\\u0722 ܢ\\u0723 ܣ\\u0724 ܤ\\u0725 ܥ\\u0726 ܦ\\u0727 ܧ\\u0728 ܨ\\u0729 ܩ\\u0730 ܰ\\u0731 ܱ\\u0732 ܲ\\u0733 ܳ\\u0734 ܴ\\u0735 ܵ\\u0736 ܶ\\u0737 ܷ\\u0738 ܸ\\u0739 ܹ\\u0740 ݀\\u0741 ݁\\u0742 ݂\\u0743 ݃\\u0744 ݄\\u0745 ݅\\u0746 ݆\\u0747 ݇\\u0748 ݈\\u0749 ݉\\u0750 ݐ\\u0751 ݑ\\u0752 ݒ\\u0753 ݓ\\u0754 ݔ\\u0755 ݕ\\u0756 ݖ\\u0757 ݗ\\u0758 ݘ\\u0759 ݙ\\u0760 ݠ\\u0761 ݡ\\u0762 ݢ\\u0763 ݣ\\u0764 ݤ\\u0765 ݥ\\u0766 ݦ\\u0767 ݧ\\u0768 ݨ\\u0769 ݩ\\u0770 ݰ\\u0771 ݱ\\u0772 ݲ\\u0773 ݳ\\u0774 ݴ\\u0775 ݵ\\u0776 ݶ\\u0777 ݷ\\u0778 ݸ\\u0779 ݹ\\u0780 ހ\\u0781 ށ\\u0782 ނ\\u0783 ރ\\u0784 ބ\\u0785 ޅ\\u0786 ކ\\u0787 އ\\u0788 ވ\\u0789 މ\\u0790 ސ\\u0791 ޑ\\u0792 ޒ\\u0793 ޓ\\u0794 ޔ\\u0795 ޕ\\u0796 ޖ\\u0797 ޗ\\u0798 ޘ\\u0799 ޙ\\u0800 ࠀ\\u0801 ࠁ\\u0802 ࠂ\\u0803 ࠃ\\u0804 ࠄ\\u0805 ࠅ\\u0806 ࠆ\\u0807 ࠇ\\u0808 ࠈ\\u0809 ࠉ\\u0810 ࠐ\\u0811 ࠑ\\u0812 ࠒ\\u0813 ࠓ\\u0814 ࠔ\\u0815 ࠕ\\u0816 ࠖ\\u0817 ࠗ\\u0818 ࠘\\u0819 ࠙\\u0820 ࠠ\\u0821 ࠡ\\u0822 ࠢ\\u0823 ࠣ\\u0824 ࠤ\\u0825 ࠥ\\u0826 ࠦ\\u0827 ࠧ\\u0828 ࠨ\\u0829 ࠩ\\u0830 ࠰\\u0831 ࠱\\u0832 ࠲\\u0833 ࠳\\u0834 ࠴\\u0835 ࠵\\u0836 ࠶\\u0837 ࠷\\u0838 ࠸\\u0839 ࠹\\u0840 ࡀ\\u0841 ࡁ\\u0842 ࡂ\\u0843 ࡃ\\u0844 ࡄ\\u0845 ࡅ\\u0846 ࡆ\\u0847 ࡇ\\u0848 ࡈ\\u0849 ࡉ\\u0850 ࡐ\\u0851 ࡑ\\u0852 ࡒ\\u0853 ࡓ\\u0854 ࡔ\\u0855 ࡕ\\u0856 ࡖ\\u0857 ࡗ\\u0858 ࡘ\\u0859 ࡙\\u0860 ࡠ\\u0861 ࡡ\\u0862 ࡢ\\u0863 ࡣ\\u0864 ࡤ\\u0865 ࡥ\\u0866 ࡦ\\u0867 ࡧ\\u0868 ࡨ\\u0869 ࡩ\\u0870 ࡰ\\u0871 ࡱ\\u0872 ࡲ\\u0873 ࡳ\\u0874 ࡴ\\u0875 ࡵ\\u0876 ࡶ\\u0877 ࡷ\\u0878 ࡸ\\u0879 ࡹ\\u0880 ࢀ\\u0881 ࢁ\\u0882 ࢂ\\u0883 ࢃ\\u0884 ࢄ\\u0885 ࢅ\\u0886 ࢆ\\u0887 ࢇ\\u0888 ࢈\\u0889 ࢉ\\u0890 ࢐\\u0891 ࢑\\u0892 ࢒\\u0893 ࢓\\u0894 ࢔\\u0895 ࢕\\u0896 ࢖\\u0897 ࢗ\\u0898 ࢘\\u0899 ࢙\\u0900 ऀ\\u0901 ँ\\u0902 ं\\u0903 ः\\u0904 ऄ\\u0905 अ\\u0906 आ\\u0907 इ\\u0908 ई\\u0909 उ\\u0910 ऐ\\u0911 ऑ\\u0912 ऒ\\u0913 ओ\\u0914 औ\\u0915 क\\u0916 ख\\u0917 ग\\u0918 घ\\u0919 ङ\\u0920 ठ\\u0921 ड\\u0922 ढ\\u0923 ण\\u0924 त\\u0925 थ\\u0926 द\\u0927 ध\\u0928 न\\u0929 ऩ\\u0930 र\\u0931 ऱ\\u0932 ल\\u0933 ळ\\u0934 ऴ\\u0935 व\\u0936 श\\u0937 ष\\u0938 स\\u0939 ह\\u0940 ी\\u0941 ु\\u0942 ू\\u0943 ृ\\u0944 ॄ\\u0945 ॅ\\u0946 ॆ\\u0947 े\\u0948 ै\\u0949 ॉ\\u0950 ॐ\\u0951 ॑\\u0952 ॒\\u0953 ॓\\u0954 ॔\\u0955 ॕ\\u0956 ॖ\\u0957 ॗ\\u0958 क़\\u0959 ख़\\u0960 ॠ\\u0961 ॡ\\u0962 ॢ\\u0963 ॣ\\u0964 ।\\u0965 ॥\\u0966 ०\\u0967 १\\u0968 २\\u0969 ३\\u0970 ॰\\u0971 ॱ\\u0972 ॲ\\u0973 ॳ\\u0974 ॴ\\u0975 ॵ\\u0976 ॶ\\u0977 ॷ\\u0978 ॸ\\u0979 ॹ\\u0980 ঀ\\u0981 ঁ\\u0982 ং\\u0983 ঃ\\u0984 ঄\\u0985 অ\\u0986 আ\\u0987 ই\\u0988 ঈ\\u0989 উ\\u0990 ঐ\\u0991 ঑\\u0992 ঒\\u0993 ও\\u0994 ঔ\\u0995 ক\\u0996 খ\\u0997 গ\\u0998 ঘ\\u0999 ঙ\\u1000 က\\u1001 ခ\\u1002 ဂ\\u1003 ဃ\\u1004 င\\u1005 စ\\u1006 ဆ\\u1007 ဇ\\u1008 ဈ\\u1009 ဉ\\u1010 တ\\u1011 ထ\\u1012 ဒ\\u1013 ဓ\\u1014 န\\u1015 ပ\\u1016 ဖ\\u1017 ဗ\\u1018 ဘ\\u1019 မ\\u1020 ဠ\\u1021 အ\\u1022 ဢ\\u1023 ဣ\\u1024 ဤ\\u1025 ဥ\\u1026 ဦ\\u1027 ဧ\\u1028 ဨ\\u1029 ဩ\\u1030 ူ\\u1031 ေ\\u1032 ဲ\\u1033 ဳ\\u1034 ဴ\\u1035 ဵ\\u1036 ံ\\u1037 ့\\u1038 း\\u1039 ္\\u1040 ၀\\u1041 ၁\\u1042 ၂\\u1043 ၃\\u1044 ၄\\u1045 ၅\\u1046 ၆\\u1047 ၇\\u1048 ၈\\u1049 ၉\\u1050 ၐ\\u1051 ၑ\\u1052 ၒ\\u1053 ၓ\\u1054 ၔ\\u1055 ၕ\\u1056 ၖ\\u1057 ၗ\\u1058 ၘ\\u1059 ၙ\\u1060 ၠ\\u1061 ၡ\\u1062 ၢ\\u1063 ၣ\\u1064 ၤ\\u1065 ၥ\\u1066 ၦ\\u1067 ၧ\\u1068 ၨ\\u1069 ၩ\\u1070 ၰ\\u1071 ၱ\\u1072 ၲ\\u1073 ၳ\\u1074 ၴ\\u1075 ၵ\\u1076 ၶ\\u1077 ၷ\\u1078 ၸ\\u1079 ၹ\\u1080 ႀ\\u1081 ႁ\\u1082 ႂ\\u1083 ႃ\\u1084 ႄ\\u1085 ႅ\\u1086 ႆ\\u1087 ႇ\\u1088 ႈ\\u1089 ႉ\\u1090 ႐\\u1091 ႑\\u1092 ႒\\u1093 ႓\\u1094 ႔\\u1095 ႕\\u1096 ႖\\u1097 ႗\\u1098 ႘\\u1099 ႙\\u1100 ᄀ\\u1101 ᄁ\\u1102 ᄂ\\u1103 ᄃ\\u1104 ᄄ\\u1105 ᄅ\\u1106 ᄆ\\u1107 ᄇ\\u1108 ᄈ\\u1109 ᄉ\\u1110 ᄐ\\u1111 ᄑ\\u1112 ᄒ\\u1113 ᄓ\\u1114 ᄔ\\u1115 ᄕ\\u1116 ᄖ\\u1117 ᄗ\\u1118 ᄘ\\u1119 ᄙ\\u1120 ᄠ\\u1121 ᄡ\\u1122 ᄢ\\u1123 ᄣ\\u1124 ᄤ\\u1125 ᄥ\\u1126 ᄦ\\u1127 ᄧ\\u1128 ᄨ\\u1129 ᄩ\\u1130 ᄰ\\u1131 ᄱ\\u1132 ᄲ\\u1133 ᄳ\\u1134 ᄴ\\u1135 ᄵ\\u1136 ᄶ\\u1137 ᄷ\\u1138 ᄸ\\u1139 ᄹ\\u1140 ᅀ\\u1141 ᅁ\\u1142 ᅂ\\u1143 ᅃ\\u1144 ᅄ\\u1145 ᅅ\\u1146 ᅆ\\u1147 ᅇ\\u1148 ᅈ\\u1149 ᅉ\\u1150 ᅐ\\u1151 ᅑ\\u1152 ᅒ\\u1153 ᅓ\\u1154 ᅔ\\u1155 ᅕ\\u1156 ᅖ\\u1157 ᅗ\\u1158 ᅘ\\u1159 ᅙ\\u1160 ᅠ\\u1161 ᅡ\\u1162 ᅢ\\u1163 ᅣ\\u1164 ᅤ\\u1165 ᅥ\\u1166 ᅦ\\u1167 ᅧ\\u1168 ᅨ\\u1169 ᅩ\\u1170 ᅰ\\u1171 ᅱ\\u1172 ᅲ\\u1173 ᅳ\\u1174 ᅴ\\u1175 ᅵ\\u1176 ᅶ\\u1177 ᅷ\\u1178 ᅸ\\u1179 ᅹ\\u1180 ᆀ\\u1181 ᆁ\\u1182 ᆂ\\u1183 ᆃ\\u1184 ᆄ\\u1185 ᆅ\\u1186 ᆆ\\u1187 ᆇ\\u1188 ᆈ\\u1189 ᆉ\\u1190 ᆐ\\u1191 ᆑ\\u1192 ᆒ\\u1193 ᆓ\\u1194 ᆔ\\u1195 ᆕ\\u1196 ᆖ\\u1197 ᆗ\\u1198 ᆘ\\u1199 ᆙ\\u1200 ሀ\\u1201 ሁ\\u1202 ሂ\\u1203 ሃ\\u1204 ሄ\\u1205 ህ\\u1206 ሆ\\u1207 ሇ\\u1208 ለ\\u1209 ሉ\\u1210 ሐ\\u1211 ሑ\\u1212 ሒ\\u1213 ሓ\\u1214 ሔ\\u1215 ሕ\\u1216 ሖ\\u1217 ሗ\\u1218 መ\\u1219 ሙ\\u1220 ሠ\\u1221 ሡ\\u1222 ሢ\\u1223 ሣ\\u1224 ሤ\\u1225 ሥ\\u1226 ሦ\\u1227 ሧ\\u1228 ረ\\u1229 ሩ\\u1230 ሰ\\u1231 ሱ\\u1232 ሲ\\u1233 ሳ\\u1234 ሴ\\u1235 ስ\\u1236 ሶ\\u1237 ሷ\\u1238 ሸ\\u1239 ሹ\\u1240 ቀ\\u1241 ቁ\\u1242 ቂ\\u1243 ቃ\\u1244 ቄ\\u1245 ቅ\\u1246 ቆ\\u1247 ቇ\\u1248 ቈ\\u1249 ቉\\u1250 ቐ\\u1251 ቑ\\u1252 ቒ\\u1253 ቓ\\u1254 ቔ\\u1255 ቕ\\u1256 ቖ\\u1257 ቗\\u1258 ቘ\\u1259 ቙\\u1260 በ\\u1261 ቡ\\u1262 ቢ\\u1263 ባ\\u1264 ቤ\\u1265 ብ\\u1266 ቦ\\u1267 ቧ\\u1268 ቨ\\u1269 ቩ\\u1270 ተ\\u1271 ቱ\\u1272 ቲ\\u1273 ታ\\u1274 ቴ\\u1275 ት\\u1276 ቶ\\u1277 ቷ\\u1278 ቸ\\u1279 ቹ\\u1280 ኀ\\u1281 ኁ\\u1282 ኂ\\u1283 ኃ\\u1284 ኄ\\u1285 ኅ\\u1286 ኆ\\u1287 ኇ\\u1288 ኈ\\u1289 ኉\\u1290 ነ\\u1291 ኑ\\u1292 ኒ\\u1293 ና\\u1294 ኔ\\u1295 ን\\u1296 ኖ\\u1297 ኗ\\u1298 ኘ\\u1299 ኙ\\u1300 ጀ\\u1301 ጁ\\u1302 ጂ\\u1303 ጃ\\u1304 ጄ\\u1305 ጅ\\u1306 ጆ\\u1307 ጇ\\u1308 ገ\\u1309 ጉ\\u1310 ጐ\\u1311 ጑\\u1312 ጒ\\u1313 ጓ\\u1314 ጔ\\u1315 ጕ\\u1316 ጖\\u1317 ጗\\u1318 ጘ\\u1319 ጙ\\u1320 ጠ\\u1321 ጡ\\u1322 ጢ\\u1323 ጣ\\u1324 ጤ\\u1325 ጥ\\u1326 ጦ\\u1327 ጧ\\u1328 ጨ\\u1329 ጩ\\u1330 ጰ\\u1331 ጱ\\u1332 ጲ\\u1333 ጳ\\u1334 ጴ\\u1335 ጵ\\u1336 ጶ\\u1337 ጷ\\u1338 ጸ\\u1339 ጹ\\u1340 ፀ\\u1341 ፁ\\u1342 ፂ\\u1343 ፃ\\u1344 ፄ\\u1345 ፅ\\u1346 ፆ\\u1347 ፇ\\u1348 ፈ\\u1349 ፉ\\u1350 ፐ\\u1351 ፑ\\u1352 ፒ\\u1353 ፓ\\u1354 ፔ\\u1355 ፕ\\u1356 ፖ\\u1357 ፗ\\u1358 ፘ\\u1359 ፙ\\u1360 ፠\\u1361 ፡\\u1362 ።\\u1363 ፣\\u1364 ፤\\u1365 ፥\\u1366 ፦\\u1367 ፧\\u1368 ፨\\u1369 ፩\\u1370 ፰\\u1371 ፱\\u1372 ፲\\u1373 ፳\\u1374 ፴\\u1375 ፵\\u1376 ፶\\u1377 ፷\\u1378 ፸\\u1379 ፹\\u1380 ᎀ\\u1381 ᎁ\\u1382 ᎂ\\u1383 ᎃ\\u1384 ᎄ\\u1385 ᎅ\\u1386 ᎆ\\u1387 ᎇ\\u1388 ᎈ\\u1389 ᎉ\\u1390 ᎐\\u1391 ᎑\\u1392 ᎒\\u1393 ᎓\\u1394 ᎔\\u1395 ᎕\\u1396 ᎖\\u1397 ᎗\\u1398 ᎘\\u1399 ᎙\\u1400 ᐀\\u1401 ᐁ\\u1402 ᐂ\\u1403 ᐃ\\u1404 ᐄ\\u1405 ᐅ\\u1406 ᐆ\\u1407 ᐇ\\u1408 ᐈ\\u1409 ᐉ\\u1410 ᐐ\\u1411 ᐑ\\u1412 ᐒ\\u1413 ᐓ\\u1414 ᐔ\\u1415 ᐕ\\u1416 ᐖ\\u1417 ᐗ\\u1418 ᐘ\\u1419 ᐙ\\u1420 ᐠ\\u1421 ᐡ\\u1422 ᐢ\\u1423 ᐣ\\u1424 ᐤ\\u1425 ᐥ\\u1426 ᐦ\\u1427 ᐧ\\u1428 ᐨ\\u1429 ᐩ\\u1430 ᐰ\\u1431 ᐱ\\u1432 ᐲ\\u1433 ᐳ\\u1434 ᐴ\\u1435 ᐵ\\u1436 ᐶ\\u1437 ᐷ\\u1438 ᐸ\\u1439 ᐹ\\u1440 ᑀ\\u1441 ᑁ\\u1442 ᑂ\\u1443 ᑃ\\u1444 ᑄ\\u1445 ᑅ\\u1446 ᑆ\\u1447 ᑇ\\u1448 ᑈ\\u1449 ᑉ\\u1450 ᑐ\\u1451 ᑑ\\u1452 ᑒ\\u1453 ᑓ\\u1454 ᑔ\\u1455 ᑕ\\u1456 ᑖ\\u1457 ᑗ\\u1458 ᑘ\\u1459 ᑙ\\u1460 ᑠ\\u1461 ᑡ\\u1462 ᑢ\\u1463 ᑣ\\u1464 ᑤ\\u1465 ᑥ\\u1466 ᑦ\\u1467 ᑧ\\u1468 ᑨ\\u1469 ᑩ\\u1470 ᑰ\\u1471 ᑱ\\u1472 ᑲ\\u1473 ᑳ\\u1474 ᑴ\\u1475 ᑵ\\u1476 ᑶ\\u1477 ᑷ\\u1478 ᑸ\\u1479 ᑹ\\u1480 ᒀ\\u1481 ᒁ\\u1482 ᒂ\\u1483 ᒃ\\u1484 ᒄ\\u1485 ᒅ\\u1486 ᒆ\\u1487 ᒇ\\u1488 ᒈ\\u1489 ᒉ\\u1490 ᒐ\\u1491 ᒑ\\u1492 ᒒ\\u1493 ᒓ\\u1494 ᒔ\\u1495 ᒕ\\u1496 ᒖ\\u1497 ᒗ\\u1498 ᒘ\\u1499 ᒙ\\u1500 ᔀ\\u1501 ᔁ\\u1502 ᔂ\\u1503 ᔃ\\u1504 ᔄ\\u1505 ᔅ\\u1506 ᔆ\\u1507 ᔇ\\u1508 ᔈ\\u1509 ᔉ\\u1510 ᔐ\\u1511 ᔑ\\u1512 ᔒ\\u1513 ᔓ\\u1514 ᔔ\\u1515 ᔕ\\u1516 ᔖ\\u1517 ᔗ\\u1518 ᔘ\\u1519 ᔙ\\u1520 ᔠ\\u1521 ᔡ\\u1522 ᔢ\\u1523 ᔣ\\u1524 ᔤ\\u1525 ᔥ\\u1526 ᔦ\\u1527 ᔧ\\u1528 ᔨ\\u1529 ᔩ\\u1530 ᔰ\\u1531 ᔱ\\u1532 ᔲ\\u1533 ᔳ\\u1534 ᔴ\\u1535 ᔵ\\u1536 ᔶ\\u1537 ᔷ\\u1538 ᔸ\\u1539 ᔹ\\u1540 ᕀ\\u1541 ᕁ\\u1542 ᕂ\\u1543 ᕃ\\u1544 ᕄ\\u1545 ᕅ\\u1546 ᕆ\\u1547 ᕇ\\u1548 ᕈ\\u1549 ᕉ\\u1550 ᕐ\\u1551 ᕑ\\u1552 ᕒ\\u1553 ᕓ\\u1554 ᕔ\\u1555 ᕕ\\u1556 ᕖ\\u1557 ᕗ\\u1558 ᕘ\\u1559 ᕙ\\u1560 ᕠ\\u1561 ᕡ\\u1562 ᕢ\\u1563 ᕣ\\u1564 ᕤ\\u1565 ᕥ\\u1566 ᕦ\\u1567 ᕧ\\u1568 ᕨ\\u1569 ᕩ\\u1570 ᕰ\\u1571 ᕱ\\u1572 ᕲ\\u1573 ᕳ\\u1574 ᕴ\\u1575 ᕵ\\u1576 ᕶ\\u1577 ᕷ\\u1578 ᕸ\\u1579 ᕹ\\u1580 ᖀ\\u1581 ᖁ\\u1582 ᖂ\\u1583 ᖃ\\u1584 ᖄ\\u1585 ᖅ\\u1586 ᖆ\\u1587 ᖇ\\u1588 ᖈ\\u1589 ᖉ\\u1590 ᖐ\\u1591 ᖑ\\u1592 ᖒ\\u1593 ᖓ\\u1594 ᖔ\\u1595 ᖕ\\u1596 ᖖ\\u1597 ᖗ\\u1598 ᖘ\\u1599 ᖙ\\u1600 ᘀ\\u1601 ᘁ\\u1602 ᘂ\\u1603 ᘃ\\u1604 ᘄ\\u1605 ᘅ\\u1606 ᘆ\\u1607 ᘇ\\u1608 ᘈ\\u1609 ᘉ\\u1610 ᘐ\\u1611 ᘑ\\u1612 ᘒ\\u1613 ᘓ\\u1614 ᘔ\\u1615 ᘕ\\u1616 ᘖ\\u1617 ᘗ\\u1618 ᘘ\\u1619 ᘙ\\u1620 ᘠ\\u1621 ᘡ\\u1622 ᘢ\\u1623 ᘣ\\u1624 ᘤ\\u1625 ᘥ\\u1626 ᘦ\\u1627 ᘧ\\u1628 ᘨ\\u1629 ᘩ\\u1630 ᘰ\\u1631 ᘱ\\u1632 ᘲ\\u1633 ᘳ\\u1634 ᘴ\\u1635 ᘵ\\u1636 ᘶ\\u1637 ᘷ\\u1638 ᘸ\\u1639 ᘹ\\u1640 ᙀ\\u1641 ᙁ\\u1642 ᙂ\\u1643 ᙃ\\u1644 ᙄ\\u1645 ᙅ\\u1646 ᙆ\\u1647 ᙇ\\u1648 ᙈ\\u1649 ᙉ\\u1650 ᙐ\\u1651 ᙑ\\u1652 ᙒ\\u1653 ᙓ\\u1654 ᙔ\\u1655 ᙕ\\u1656 ᙖ\\u1657 ᙗ\\u1658 ᙘ\\u1659 ᙙ\\u1660 ᙠ\\u1661 ᙡ\\u1662 ᙢ\\u1663 ᙣ\\u1664 ᙤ\\u1665 ᙥ\\u1666 ᙦ\\u1667 ᙧ\\u1668 ᙨ\\u1669 ᙩ\\u1670 ᙰ\\u1671 ᙱ\\u1672 ᙲ\\u1673 ᙳ\\u1674 ᙴ\\u1675 ᙵ\\u1676 ᙶ\\u1677 ᙷ\\u1678 ᙸ\\u1679 ᙹ\\u1680 \\u1681 ᚁ\\u1682 ᚂ\\u1683 ᚃ\\u1684 ᚄ\\u1685 ᚅ\\u1686 ᚆ\\u1687 ᚇ\\u1688 ᚈ\\u1689 ᚉ\\u1690 ᚐ\\u1691 ᚑ\\u1692 ᚒ\\u1693 ᚓ\\u1694 ᚔ\\u1695 ᚕ\\u1696 ᚖ\\u1697 ᚗ\\u1698 ᚘ\\u1699 ᚙ\\u1700 ᜀ\\u1701 ᜁ\\u1702 ᜂ\\u1703 ᜃ\\u1704 ᜄ\\u1705 ᜅ\\u1706 ᜆ\\u1707 ᜇ\\u1708 ᜈ\\u1709 ᜉ\\u1710 ᜐ\\u1711 ᜑ\\u1712 ᜒ\\u1713 ᜓ\\u1714 ᜔\\u1715 ᜕\\u1716 ᜖\\u1717 ᜗\\u1718 ᜘\\u1719 ᜙\\u1720 ᜠ\\u1721 ᜡ\\u1722 ᜢ\\u1723 ᜣ\\u1724 ᜤ\\u1725 ᜥ\\u1726 ᜦ\\u1727 ᜧ\\u1728 ᜨ\\u1729 ᜩ\\u1730 ᜰ\\u1731 ᜱ\\u1732 ᜲ\\u1733 ᜳ\\u1734 ᜴\\u1735 ᜵\\u1736 ᜶\\u1737 ᜷\\u1738 ᜸\\u1739 ᜹\\u1740 ᝀ\\u1741 ᝁ\\u1742 ᝂ\\u1743 ᝃ\\u1744 ᝄ\\u1745 ᝅ\\u1746 ᝆ\\u1747 ᝇ\\u1748 ᝈ\\u1749 ᝉ\\u1750 ᝐ\\u1751 ᝑ\\u1752 ᝒ\\u1753 ᝓ\\u1754 ᝔\\u1755 ᝕\\u1756 ᝖\\u1757 ᝗\\u1758 ᝘\\u1759 ᝙\\u1760 ᝠ\\u1761 ᝡ\\u1762 ᝢ\\u1763 ᝣ\\u1764 ᝤ\\u1765 ᝥ\\u1766 ᝦ\\u1767 ᝧ\\u1768 ᝨ\\u1769 ᝩ\\u1770 ᝰ\\u1771 ᝱\\u1772 ᝲ\\u1773 ᝳ\\u1774 ᝴\\u1775 ᝵\\u1776 ᝶\\u1777 ᝷\\u1778 ᝸\\u1779 ᝹\\u1780 ក\\u1781 ខ\\u1782 គ\\u1783 ឃ\\u1784 ង\\u1785 ច\\u1786 ឆ\\u1787 ជ\\u1788 ឈ\\u1789 ញ\\u1790 ថ\\u1791 ទ\\u1792 ធ\\u1793 ន\\u1794 ប\\u1795 ផ\\u1796 ព\\u1797 ភ\\u1798 ម\\u1799 យ\\u1800 ᠀\\u1801 ᠁\\u1802 ᠂\\u1803 ᠃\\u1804 ᠄\\u1805 ᠅\\u1806 ᠆\\u1807 ᠇\\u1808 ᠈\\u1809 ᠉\\u1810 ᠐\\u1811 ᠑\\u1812 ᠒\\u1813 ᠓\\u1814 ᠔\\u1815 ᠕\\u1816 ᠖\\u1817 ᠗\\u1818 ᠘\\u1819 ᠙\\u1820 ᠠ\\u1821 ᠡ\\u1822 ᠢ\\u1823 ᠣ\\u1824 ᠤ\\u1825 ᠥ\\u1826 ᠦ\\u1827 ᠧ\\u1828 ᠨ\\u1829 ᠩ\\u1830 ᠰ\\u1831 ᠱ\\u1832 ᠲ\\u1833 ᠳ\\u1834 ᠴ\\u1835 ᠵ\\u1836 ᠶ\\u1837 ᠷ\\u1838 ᠸ\\u1839 ᠹ\\u1840 ᡀ\\u1841 ᡁ\\u1842 ᡂ\\u1843 ᡃ\\u1844 ᡄ\\u1845 ᡅ\\u1846 ᡆ\\u1847 ᡇ\\u1848 ᡈ\\u1849 ᡉ\\u1850 ᡐ\\u1851 ᡑ\\u1852 ᡒ\\u1853 ᡓ\\u1854 ᡔ\\u1855 ᡕ\\u1856 ᡖ\\u1857 ᡗ\\u1858 ᡘ\\u1859 ᡙ\\u1860 ᡠ\\u1861 ᡡ\\u1862 ᡢ\\u1863 ᡣ\\u1864 ᡤ\\u1865 ᡥ\\u1866 ᡦ\\u1867 ᡧ\\u1868 ᡨ\\u1869 ᡩ\\u1870 ᡰ\\u1871 ᡱ\\u1872 ᡲ\\u1873 ᡳ\\u1874 ᡴ\\u1875 ᡵ\\u1876 ᡶ\\u1877 ᡷ\\u1878 ᡸ\\u1879 ᡹\\u1880 ᢀ\\u1881 ᢁ\\u1882 ᢂ\\u1883 ᢃ\\u1884 ᢄ\\u1885 ᢅ\\u1886 ᢆ\\u1887 ᢇ\\u1888 ᢈ\\u1889 ᢉ\\u1890 ᢐ\\u1891 ᢑ\\u1892 ᢒ\\u1893 ᢓ\\u1894 ᢔ\\u1895 ᢕ\\u1896 ᢖ\\u1897 ᢗ\\u1898 ᢘ\\u1899 ᢙ\\u1900 ᤀ\\u1901 ᤁ\\u1902 ᤂ\\u1903 ᤃ\\u1904 ᤄ\\u1905 ᤅ\\u1906 ᤆ\\u1907 ᤇ\\u1908 ᤈ\\u1909 ᤉ\\u1910 ᤐ\\u1911 ᤑ\\u1912 ᤒ\\u1913 ᤓ\\u1914 ᤔ\\u1915 ᤕ\\u1916 ᤖ\\u1917 ᤗ\\u1918 ᤘ\\u1919 ᤙ\\u1920 ᤠ\\u1921 ᤡ\\u1922 ᤢ\\u1923 ᤣ\\u1924 ᤤ\\u1925 ᤥ\\u1926 ᤦ\\u1927 ᤧ\\u1928 ᤨ\\u1929 ᤩ\\u1930 ᤰ\\u1931 ᤱ\\u1932 ᤲ\\u1933 ᤳ\\u1934 ᤴ\\u1935 ᤵ\\u1936 ᤶ\\u1937 ᤷ\\u1938 ᤸ\\u1939 ᤹\\u1940 ᥀\\u1941 ᥁\\u1942 ᥂\\u1943 ᥃\\u1944 ᥄\\u1945 ᥅\\u1946 ᥆\\u1947 ᥇\\u1948 ᥈\\u1949 ᥉\\u1950 ᥐ\\u1951 ᥑ\\u1952 ᥒ\\u1953 ᥓ\\u1954 ᥔ\\u1955 ᥕ\\u1956 ᥖ\\u1957 ᥗ\\u1958 ᥘ\\u1959 ᥙ\\u1960 ᥠ\\u1961 ᥡ\\u1962 ᥢ\\u1963 ᥣ\\u1964 ᥤ\\u1965 ᥥ\\u1966 ᥦ\\u1967 ᥧ\\u1968 ᥨ\\u1969 ᥩ\\u1970 ᥰ\\u1971 ᥱ\\u1972 ᥲ\\u1973 ᥳ\\u1974 ᥴ\\u1975 ᥵\\u1976 ᥶\\u1977 ᥷\\u1978 ᥸\\u1979 ᥹\\u1980 ᦀ\\u1981 ᦁ\\u1982 ᦂ\\u1983 ᦃ\\u1984 ᦄ\\u1985 ᦅ\\u1986 ᦆ\\u1987 ᦇ\\u1988 ᦈ\\u1989 ᦉ\\u1990 ᦐ\\u1991 ᦑ\\u1992 ᦒ\\u1993 ᦓ\\u1994 ᦔ\\u1995 ᦕ\\u1996 ᦖ\\u1997 ᦗ\\u1998 ᦘ\\u1999 ᦙ\\u2000 \\u2001 \\u2002 \\u2003 \\u2004 \\u2005 \\u2006 \\u2007 \\u2008 \\u2009 \\u2010 ‐\\u2011 ‑\\u2012 ‒\\u2013 –\\u2014 —\\u2015 ―\\u2016 ‖\\u2017 ‗\\u2018 ‘\\u2019 ’\\u2020 †\\u2021 ‡\\u2022 •\\u2023 ‣\\u2024 ․\\u2025 ‥\\u2026 …\\u2027 ‧\\u2028 \\u2029 \\u2030 ‰\\u2031 ‱\\u2032 ′\\u2033 ″\\u2034 ‴\\u2035 ‵\\u2036 ‶\\u2037 ‷\\u2038 ‸\\u2039 ‹\\u2040 ⁀\\u2041 ⁁\\u2042 ⁂\\u2043 ⁃\\u2044 ⁄\\u2045 ⁅\\u2046 ⁆\\u2047 ⁇\\u2048 ⁈\\u2049 ⁉\\u2050 ⁐\\u2051 ⁑\\u2052 ⁒\\u2053 ⁓\\u2054 ⁔\\u2055 ⁕\\u2056 ⁖\\u2057 ⁗\\u2058 ⁘\\u2059 ⁙\\u2060 ⁠\\u2061 ⁡\\u2062 ⁢\\u2063 ⁣\\u2064 ⁤\\u2065 ⁥\\u2066 ⁦\\u2067 ⁧\\u2068 ⁨\\u2069 ⁩\\u2070 ⁰\\u2071 ⁱ\\u2072 ⁲\\u2073 ⁳\\u2074 ⁴\\u2075 ⁵\\u2076 ⁶\\u2077 ⁷\\u2078 ⁸\\u2079 ⁹\\u2080 ₀\\u2081 ₁\\u2082 ₂\\u2083 ₃\\u2084 ₄\\u2085 ₅\\u2086 ₆\\u2087 ₇\\u2088 ₈\\u2089 ₉\\u2090 ₐ\\u2091 ₑ\\u2092 ₒ\\u2093 ₓ\\u2094 ₔ\\u2095 ₕ\\u2096 ₖ\\u2097 ₗ\\u2098 ₘ\\u2099 ₙ\\u2100 ℀\\u2101 ℁\\u2102 ℂ\\u2103 ℃\\u2104 ℄\\u2105 ℅\\u2106 ℆\\u2107 ℇ\\u2108 ℈\\u2109 ℉\\u2110 ℐ\\u2111 ℑ\\u2112 ℒ\\u2113 ℓ\\u2114 ℔\\u2115 ℕ\\u2116 №\\u2117 ℗\\u2118 ℘\\u2119 ℙ\\u2120 ℠\\u2121 ℡\\u2122 ™\\u2123 ℣\\u2124 ℤ\\u2125 ℥\\u2126 Ω\\u2127 ℧\\u2128 ℨ\\u2129 ℩\\u2130 ℰ\\u2131 ℱ\\u2132 Ⅎ\\u2133 ℳ\\u2134 ℴ\\u2135 ℵ\\u2136 ℶ\\u2137 ℷ\\u2138 ℸ\\u2139 ℹ\\u2140 ⅀\\u2141 ⅁\\u2142 ⅂\\u2143 ⅃\\u2144 ⅄\\u2145 ⅅ\\u2146 ⅆ\\u2147 ⅇ\\u2148 ⅈ\\u2149 ⅉ\\u2150 ⅐\\u2151 ⅑\\u2152 ⅒\\u2153 ⅓\\u2154 ⅔\\u2155 ⅕\\u2156 ⅖\\u2157 ⅗\\u2158 ⅘\\u2159 ⅙\\u2160 Ⅰ\\u2161 Ⅱ\\u2162 Ⅲ\\u2163 Ⅳ\\u2164 Ⅴ\\u2165 Ⅵ\\u2166 Ⅶ\\u2167 Ⅷ\\u2168 Ⅸ\\u2169 Ⅹ\\u2170 ⅰ\\u2171 ⅱ\\u2172 ⅲ\\u2173 ⅳ\\u2174 ⅴ\\u2175 ⅵ\\u2176 ⅶ\\u2177 ⅷ\\u2178 ⅸ\\u2179 ⅹ\\u2180 ↀ\\u2181 ↁ\\u2182 ↂ\\u2183 Ↄ\\u2184 ↄ\\u2185 ↅ\\u2186 ↆ\\u2187 ↇ\\u2188 ↈ\\u2189 ↉\\u2190 ←\\u2191 ↑\\u2192 →\\u2193 ↓\\u2194 ↔\\u2195 ↕\\u2196 ↖\\u2197 ↗\\u2198 ↘\\u2199 ↙\\u2200 ∀\\u2201 ∁\\u2202 ∂\\u2203 ∃\\u2204 ∄\\u2205 ∅\\u2206 ∆\\u2207 ∇\\u2208 ∈\\u2209 ∉\\u2210 ∐\\u2211 ∑\\u2212 −\\u2213 ∓\\u2214 ∔\\u2215 ∕\\u2216 ∖\\u2217 ∗\\u2218 ∘\\u2219 ∙\\u2220 ∠\\u2221 ∡\\u2222 ∢\\u2223 ∣\\u2224 ∤\\u2225 ∥\\u2226 ∦\\u2227 ∧\\u2228 ∨\\u2229 ∩\\u2230 ∰\\u2231 ∱\\u2232 ∲\\u2233 ∳\\u2234 ∴\\u2235 ∵\\u2236 ∶\\u2237 ∷\\u2238 ∸\\u2239 ∹\\u2240 ≀\\u2241 ≁\\u2242 ≂\\u2243 ≃\\u2244 ≄\\u2245 ≅\\u2246 ≆\\u2247 ≇\\u2248 ≈\\u2249 ≉\\u2250 ≐\\u2251 ≑\\u2252 ≒\\u2253 ≓\\u2254 ≔\\u2255 ≕\\u2256 ≖\\u2257 ≗\\u2258 ≘\\u2259 ≙\\u2260 ≠\\u2261 ≡\\u2262 ≢\\u2263 ≣\\u2264 ≤\\u2265 ≥\\u2266 ≦\\u2267 ≧\\u2268 ≨\\u2269 ≩\\u2270 ≰\\u2271 ≱\\u2272 ≲\\u2273 ≳\\u2274 ≴\\u2275 ≵\\u2276 ≶\\u2277 ≷\\u2278 ≸\\u2279 ≹\\u2280 ⊀\\u2281 ⊁\\u2282 ⊂\\u2283 ⊃\\u2284 ⊄\\u2285 ⊅\\u2286 ⊆\\u2287 ⊇\\u2288 ⊈\\u2289 ⊉\\u2290 ⊐\\u2291 ⊑\\u2292 ⊒\\u2293 ⊓\\u2294 ⊔\\u2295 ⊕\\u2296 ⊖\\u2297 ⊗\\u2298 ⊘\\u2299 ⊙\\u2300 ⌀\\u2301 ⌁\\u2302 ⌂\\u2303 ⌃\\u2304 ⌄\\u2305 ⌅\\u2306 ⌆\\u2307 ⌇\\u2308 ⌈\\u2309 ⌉\\u2310 ⌐\\u2311 ⌑\\u2312 ⌒\\u2313 ⌓\\u2314 ⌔\\u2315 ⌕\\u2316 ⌖\\u2317 ⌗\\u2318 ⌘\\u2319 ⌙\\u2320 ⌠\\u2321 ⌡\\u2322 ⌢\\u2323 ⌣\\u2324 ⌤\\u2325 ⌥\\u2326 ⌦\\u2327 ⌧\\u2328 ⌨\\u2329 〈\\u2330 ⌰\\u2331 ⌱\\u2332 ⌲\\u2333 ⌳\\u2334 ⌴\\u2335 ⌵\\u2336 ⌶\\u2337 ⌷\\u2338 ⌸\\u2339 ⌹\\u2340 ⍀\\u2341 ⍁\\u2342 ⍂\\u2343 ⍃\\u2344 ⍄\\u2345 ⍅\\u2346 ⍆\\u2347 ⍇\\u2348 ⍈\\u2349 ⍉\\u2350 ⍐\\u2351 ⍑\\u2352 ⍒\\u2353 ⍓\\u2354 ⍔\\u2355 ⍕\\u2356 ⍖\\u2357 ⍗\\u2358 ⍘\\u2359 ⍙\\u2360 ⍠\\u2361 ⍡\\u2362 ⍢\\u2363 ⍣\\u2364 ⍤\\u2365 ⍥\\u2366 ⍦\\u2367 ⍧\\u2368 ⍨\\u2369 ⍩\\u2370 ⍰\\u2371 ⍱\\u2372 ⍲\\u2373 ⍳\\u2374 ⍴\\u2375 ⍵\\u2376 ⍶\\u2377 ⍷\\u2378 ⍸\\u2379 ⍹\\u2380 ⎀\\u2381 ⎁\\u2382 ⎂\\u2383 ⎃\\u2384 ⎄\\u2385 ⎅\\u2386 ⎆\\u2387 ⎇\\u2388 ⎈\\u2389 ⎉\\u2390 ⎐\\u2391 ⎑\\u2392 ⎒\\u2393 ⎓\\u2394 ⎔\\u2395 ⎕\\u2396 ⎖\\u2397 ⎗\\u2398 ⎘\\u2399 ⎙\\u2400 ␀\\u2401 ␁\\u2402 ␂\\u2403 ␃\\u2404 ␄\\u2405 ␅\\u2406 ␆\\u2407 ␇\\u2408 ␈\\u2409 ␉\\u2410 ␐\\u2411 ␑\\u2412 ␒\\u2413 ␓\\u2414 ␔\\u2415 ␕\\u2416 ␖\\u2417 ␗\\u2418 ␘\\u2419 ␙\\u2420 ␠\\u2421 ␡\\u2422 ␢\\u2423 ␣\\u2424\\u2425 ␥\\u2426 ␦\\u2427 ␧\\u2428 ␨\\u2429 ␩\\u2430 ␰\\u2431 ␱\\u2432 ␲\\u2433 ␳\\u2434 ␴\\u2435 ␵\\u2436 ␶\\u2437 ␷\\u2438 ␸\\u2439 ␹\\u2440 ⑀\\u2441 ⑁\\u2442 ⑂\\u2443 ⑃\\u2444 ⑄\\u2445 ⑅\\u2446 ⑆\\u2447 ⑇\\u2448 ⑈\\u2449 ⑉\\u2450 ⑐\\u2451 ⑑\\u2452 ⑒\\u2453 ⑓\\u2454 ⑔\\u2455 ⑕\\u2456 ⑖\\u2457 ⑗\\u2458 ⑘\\u2459 ⑙\\u2460 ①\\u2461 ②\\u2462 ③\\u2463 ④\\u2464 ⑤\\u2465 ⑥\\u2466 ⑦\\u2467 ⑧\\u2468 ⑨\\u2469 ⑩\\u2470 ⑰\\u2471 ⑱\\u2472 ⑲\\u2473 ⑳\\u2474 ⑴\\u2475 ⑵\\u2476 ⑶\\u2477 ⑷\\u2478 ⑸\\u2479 ⑹\\u2480 ⒀\\u2481 ⒁\\u2482 ⒂\\u2483 ⒃\\u2484 ⒄\\u2485 ⒅\\u2486 ⒆\\u2487 ⒇\\u2488 ⒈\\u2489 ⒉\\u2490 ⒐\\u2491 ⒑\\u2492 ⒒\\u2493 ⒓\\u2494 ⒔\\u2495 ⒕\\u2496 ⒖\\u2497 ⒗\\u2498 ⒘\\u2499 ⒙\\u2500 ─\\u2501 ━\\u2502 │\\u2503 ┃\\u2504 ┄\\u2505 ┅\\u2506 ┆\\u2507 ┇\\u2508 ┈\\u2509 ┉\\u2510 ┐\\u2511 ┑\\u2512 ┒\\u2513 ┓\\u2514 └\\u2515 ┕\\u2516 ┖\\u2517 ┗\\u2518 ┘\\u2519 ┙\\u2520 ┠\\u2521 ┡\\u2522 ┢\\u2523 ┣\\u2524 ┤\\u2525 ┥\\u2526 ┦\\u2527 ┧\\u2528 ┨\\u2529 ┩\\u2530 ┰\\u2531 ┱\\u2532 ┲\\u2533 ┳\\u2534 ┴\\u2535 ┵\\u2536 ┶\\u2537 ┷\\u2538 ┸\\u2539 ┹\\u2540 ╀\\u2541 ╁\\u2542 ╂\\u2543 ╃\\u2544 ╄\\u2545 ╅\\u2546 ╆\\u2547 ╇\\u2548 ╈\\u2549 ╉\\u2550 ═\\u2551 ║\\u2552 ╒\\u2553 ╓\\u2554 ╔\\u2555 ╕\\u2556 ╖\\u2557 ╗\\u2558 ╘\\u2559 ╙\\u2560 ╠\\u2561 ╡\\u2562 ╢\\u2563 ╣\\u2564 ╤\\u2565 ╥\\u2566 ╦\\u2567 ╧\\u2568 ╨\\u2569 ╩\\u2570 ╰\\u2571 ╱\\u2572 ╲\\u2573 ╳\\u2574 ╴\\u2575 ╵\\u2576 ╶\\u2577 ╷\\u2578 ╸\\u2579 ╹\\u2580 ▀\\u2581 ▁\\u2582 ▂\\u2583 ▃\\u2584 ▄\\u2585 ▅\\u2586 ▆\\u2587 ▇\\u2588 █\\u2589 ▉\\u2590 ▐\\u2591 ░\\u2592 ▒\\u2593 ▓\\u2594 ▔\\u2595 ▕\\u2596 ▖\\u2597 ▗\\u2598 ▘\\u2599 ▙\\u2600 ☀\\u2601 ☁\\u2602 ☂\\u2603 ☃\\u2604 ☄\\u2605 ★\\u2606 ☆\\u2607 ☇\\u2608 ☈\\u2609 ☉\\u2610 ☐\\u2611 ☑\\u2612 ☒\\u2613 ☓\\u2614 ☔\\u2615 ☕\\u2616 ☖\\u2617 ☗\\u2618 ☘\\u2619 ☙\\u2620 ☠\\u2621 ☡\\u2622 ☢\\u2623 ☣\\u2624 ☤\\u2625 ☥\\u2626 ☦\\u2627 ☧\\u2628 ☨\\u2629 ☩\\u2630 ☰\\u2631 ☱\\u2632 ☲\\u2633 ☳\\u2634 ☴\\u2635 ☵\\u2636 ☶\\u2637 ☷\\u2638 ☸\\u2639 ☹\\u2640 ♀\\u2641 ♁\\u2642 ♂\\u2643 ♃\\u2644 ♄\\u2645 ♅\\u2646 ♆\\u2647 ♇\\u2648 ♈\\u2649 ♉\\u2650 ♐\\u2651 ♑\\u2652 ♒\\u2653 ♓\\u2654 ♔\\u2655 ♕\\u2656 ♖\\u2657 ♗\\u2658 ♘\\u2659 ♙\\u2660 ♠\\u2661 ♡\\u2662 ♢\\u2663 ♣\\u2664 ♤\\u2665 ♥\\u2666 ♦\\u2667 ♧\\u2668 ♨\\u2669 ♩\\u2670 ♰\\u2671 ♱\\u2672 ♲\\u2673 ♳\\u2674 ♴\\u2675 ♵\\u2676 ♶\\u2677 ♷\\u2678 ♸\\u2679 ♹\\u2680 ⚀\\u2681 ⚁\\u2682 ⚂\\u2683 ⚃\\u2684 ⚄\\u2685 ⚅\\u2686 ⚆\\u2687 ⚇\\u2688 ⚈\\u2689 ⚉\\u2690 ⚐\\u2691 ⚑\\u2692 ⚒\\u2693 ⚓\\u2694 ⚔\\u2695 ⚕\\u2696 ⚖\\u2697 ⚗\\u2698 ⚘\\u2699 ⚙\\u2700 ✀\\u2701 ✁\\u2702 ✂\\u2703 ✃\\u2704 ✄\\u2705 ✅\\u2706 ✆\\u2707 ✇\\u2708 ✈\\u2709 ✉\\u2710 ✐\\u2711 ✑\\u2712 ✒\\u2713 ✓\\u2714 ✔\\u2715 ✕\\u2716 ✖\\u2717 ✗\\u2718 ✘\\u2719 ✙\\u2720 ✠\\u2721 ✡\\u2722 ✢\\u2723 ✣\\u2724 ✤\\u2725 ✥\\u2726 ✦\\u2727 ✧\\u2728 ✨\\u2729 ✩\\u2730 ✰\\u2731 ✱\\u2732 ✲\\u2733 ✳\\u2734 ✴\\u2735 ✵\\u2736 ✶\\u2737 ✷\\u2738 ✸\\u2739 ✹\\u2740 ❀\\u2741 ❁\\u2742 ❂\\u2743 ❃\\u2744 ❄\\u2745 ❅\\u2746 ❆\\u2747 ❇\\u2748 ❈\\u2749 ❉\\u2750 ❐\\u2751 ❑\\u2752 ❒\\u2753 ❓\\u2754 ❔\\u2755 ❕\\u2756 ❖\\u2757 ❗\\u2758 ❘\\u2759 ❙\\u2760 ❠\\u2761 ❡\\u2762 ❢\\u2763 ❣\\u2764 ❤\\u2765 ❥\\u2766 ❦\\u2767 ❧\\u2768 ❨\\u2769 ❩\\u2770 ❰\\u2771 ❱\\u2772 ❲\\u2773 ❳\\u2774 ❴\\u2775 ❵\\u2776 ❶\\u2777 ❷\\u2778 ❸\\u2779 ❹\\u2780 ➀\\u2781 ➁\\u2782 ➂\\u2783 ➃\\u2784 ➄\\u2785 ➅\\u2786 ➆\\u2787 ➇\\u2788 ➈\\u2789 ➉\\u2790 ➐\\u2791 ➑\\u2792 ➒\\u2793 ➓\\u2794 ➔\\u2795 ➕\\u2796 ➖\\u2797 ➗\\u2798 ➘\\u2799 ➙\\u2800 ⠀\\u2801 ⠁\\u2802 ⠂\\u2803 ⠃\\u2804 ⠄\\u2805 ⠅\\u2806 ⠆\\u2807 ⠇\\u2808 ⠈\\u2809 ⠉\\u2810 ⠐\\u2811 ⠑\\u2812 ⠒\\u2813 ⠓\\u2814 ⠔\\u2815 ⠕\\u2816 ⠖\\u2817 ⠗\\u2818 ⠘\\u2819 ⠙\\u2820 ⠠\\u2821 ⠡\\u2822 ⠢\\u2823 ⠣\\u2824 ⠤\\u2825 ⠥\\u2826 ⠦\\u2827 ⠧\\u2828 ⠨\\u2829 ⠩\\u2830 ⠰\\u2831 ⠱\\u2832 ⠲\\u2833 ⠳\\u2834 ⠴\\u2835 ⠵\\u2836 ⠶\\u2837 ⠷\\u2838 ⠸\\u2839 ⠹\\u2840 ⡀\\u2841 ⡁\\u2842 ⡂\\u2843 ⡃\\u2844 ⡄\\u2845 ⡅\\u2846 ⡆\\u2847 ⡇\\u2848 ⡈\\u2849 ⡉\\u2850 ⡐\\u2851 ⡑\\u2852 ⡒\\u2853 ⡓\\u2854 ⡔\\u2855 ⡕\\u2856 ⡖\\u2857 ⡗\\u2858 ⡘\\u2859 ⡙\\u2860 ⡠\\u2861 ⡡\\u2862 ⡢\\u2863 ⡣\\u2864 ⡤\\u2865 ⡥\\u2866 ⡦\\u2867 ⡧\\u2868 ⡨\\u2869 ⡩\\u2870 ⡰\\u2871 ⡱\\u2872 ⡲\\u2873 ⡳\\u2874 ⡴\\u2875 ⡵\\u2876 ⡶\\u2877 ⡷\\u2878 ⡸\\u2879 ⡹\\u2880 ⢀\\u2881 ⢁\\u2882 ⢂\\u2883 ⢃\\u2884 ⢄\\u2885 ⢅\\u2886 ⢆\\u2887 ⢇\\u2888 ⢈\\u2889 ⢉\\u2890 ⢐\\u2891 ⢑\\u2892 ⢒\\u2893 ⢓\\u2894 ⢔\\u2895 ⢕\\u2896 ⢖\\u2897 ⢗\\u2898 ⢘\\u2899 ⢙\\u2900 ⤀\\u2901 ⤁\\u2902 ⤂\\u2903 ⤃\\u2904 ⤄\\u2905 ⤅\\u2906 ⤆\\u2907 ⤇\\u2908 ⤈\\u2909 ⤉\\u2910 ⤐\\u2911 ⤑\\u2912 ⤒\\u2913 ⤓\\u2914 ⤔\\u2915 ⤕\\u2916 ⤖\\u2917 ⤗\\u2918 ⤘\\u2919 ⤙\\u2920 ⤠\\u2921 ⤡\\u2922 ⤢\\u2923 ⤣\\u2924 ⤤\\u2925 ⤥\\u2926 ⤦\\u2927 ⤧\\u2928 ⤨\\u2929 ⤩\\u2930 ⤰\\u2931 ⤱\\u2932 ⤲\\u2933 ⤳\\u2934 ⤴\\u2935 ⤵\\u2936 ⤶\\u2937 ⤷\\u2938 ⤸\\u2939 ⤹\\u2940 ⥀\\u2941 ⥁\\u2942 ⥂\\u2943 ⥃\\u2944 ⥄\\u2945 ⥅\\u2946 ⥆\\u2947 ⥇\\u2948 ⥈\\u2949 ⥉\\u2950 ⥐\\u2951 ⥑\\u2952 ⥒\\u2953 ⥓\\u2954 ⥔\\u2955 ⥕\\u2956 ⥖\\u2957 ⥗\\u2958 ⥘\\u2959 ⥙\\u2960 ⥠\\u2961 ⥡\\u2962 ⥢\\u2963 ⥣\\u2964 ⥤\\u2965 ⥥\\u2966 ⥦\\u2967 ⥧\\u2968 ⥨\\u2969 ⥩\\u2970 ⥰\\u2971 ⥱\\u2972 ⥲\\u2973 ⥳\\u2974 ⥴\\u2975 ⥵\\u2976 ⥶\\u2977 ⥷\\u2978 ⥸\\u2979 ⥹\\u2980 ⦀\\u2981 ⦁\\u2982 ⦂\\u2983 ⦃\\u2984 ⦄\\u2985 ⦅\\u2986 ⦆\\u2987 ⦇\\u2988 ⦈\\u2989 ⦉\\u2990 ⦐\\u2991 ⦑\\u2992 ⦒\\u2993 ⦓\\u2994 ⦔\\u2995 ⦕\\u2996 ⦖\\u2997 ⦗\\u2998 ⦘\\u2999 ⦙\\u3000 \\u3001 、\\u3002 。\\u3003 〃\\u3004 〄\\u3005 々\\u3006 〆\\u3007 〇\\u3008 〈\\u3009 〉\\u3010 【\\u3011 】\\u3012 〒\\u3013 〓\\u3014 〔\\u3015 〕\\u3016 〖\\u3017 〗\\u3018 〘\\u3019 〙\\u3020 〠\\u3021 〡\\u3022 〢\\u3023 〣\\u3024 〤\\u3025 〥\\u3026 〦\\u3027 〧\\u3028 〨\\u3029 〩\\u3030 〰\\u3031 〱\\u3032 〲\\u3033 〳\\u3034 〴\\u3035 〵\\u3036 〶\\u3037 〷\\u3038 〸\\u3039 〹\\u3040 ぀\\u3041 ぁ\\u3042 あ\\u3043 ぃ\\u3044 い\\u3045 ぅ\\u3046 う\\u3047 ぇ\\u3048 え\\u3049 ぉ\\u3050 ぐ\\u3051 け\\u3052 げ\\u3053 こ\\u3054 ご\\u3055 さ\\u3056 ざ\\u3057 し\\u3058 じ\\u3059 す\\u3060 だ\\u3061 ち\\u3062 ぢ\\u3063 っ\\u3064 つ\\u3065 づ\\u3066 て\\u3067 で\\u3068 と\\u3069 ど\\u3070 ば\\u3071 ぱ\\u3072 ひ\\u3073 び\\u3074 ぴ\\u3075 ふ\\u3076 ぶ\\u3077 ぷ\\u3078 へ\\u3079 べ\\u3080 む\\u3081 め\\u3082 も\\u3083 ゃ\\u3084 や\\u3085 ゅ\\u3086 ゆ\\u3087 ょ\\u3088 よ\\u3089 ら\\u3090 ゐ\\u3091 ゑ\\u3092 を\\u3093 ん\\u3094 ゔ\\u3095 ゕ\\u3096 ゖ\\u3097 ゗\\u3098 ゘\\u3099 ゙\\u3100 ㄀\\u3101 ㄁\\u3102 ㄂\\u3103 ㄃\\u3104 ㄄\\u3105 ㄅ\\u3106 ㄆ\\u3107 ㄇ\\u3108 ㄈ\\u3109 ㄉ\\u3110 ㄐ\\u3111 ㄑ\\u3112 ㄒ\\u3113 ㄓ\\u3114 ㄔ\\u3115 ㄕ\\u3116 ㄖ\\u3117 ㄗ\\u3118 ㄘ\\u3119 ㄙ\\u3120 ㄠ\\u3121 ㄡ\\u3122 ㄢ\\u3123 ㄣ\\u3124 ㄤ\\u3125 ㄥ\\u3126 ㄦ\\u3127 ㄧ\\u3128 ㄨ\\u3129 ㄩ\\u3130 ㄰\\u3131 ㄱ\\u3132 ㄲ\\u3133 ㄳ\\u3134 ㄴ\\u3135 ㄵ\\u3136 ㄶ\\u3137 ㄷ\\u3138 ㄸ\\u3139 ㄹ\\u3140 ㅀ\\u3141 ㅁ\\u3142 ㅂ\\u3143 ㅃ\\u3144 ㅄ\\u3145 ㅅ\\u3146 ㅆ\\u3147 ㅇ\\u3148 ㅈ\\u3149 ㅉ\\u3150 ㅐ\\u3151 ㅑ\\u3152 ㅒ\\u3153 ㅓ\\u3154 ㅔ\\u3155 ㅕ\\u3156 ㅖ\\u3157 ㅗ\\u3158 ㅘ\\u3159 ㅙ\\u3160 ㅠ\\u3161 ㅡ\\u3162 ㅢ\\u3163 ㅣ\\u3164 ㅤ\\u3165 ㅥ\\u3166 ㅦ\\u3167 ㅧ\\u3168 ㅨ\\u3169 ㅩ\\u3170 ㅰ\\u3171 ㅱ\\u3172 ㅲ\\u3173 ㅳ\\u3174 ㅴ\\u3175 ㅵ\\u3176 ㅶ\\u3177 ㅷ\\u3178 ㅸ\\u3179 ㅹ\\u3180 ㆀ\\u3181 ㆁ\\u3182 ㆂ\\u3183 ㆃ\\u3184 ㆄ\\u3185 ㆅ\\u3186 ㆆ\\u3187 ㆇ\\u3188 ㆈ\\u3189 ㆉ\\u3190 ㆐\\u3191 ㆑\\u3192 ㆒\\u3193 ㆓\\u3194 ㆔\\u3195 ㆕\\u3196 ㆖\\u3197 ㆗\\u3198 ㆘\\u3199 ㆙\\u3200 ㈀\\u3201 ㈁\\u3202 ㈂\\u3203 ㈃\\u3204 ㈄\\u3205 ㈅\\u3206 ㈆\\u3207 ㈇\\u3208 ㈈\\u3209 ㈉\\u3210 ㈐\\u3211 ㈑\\u3212 ㈒\\u3213 ㈓\\u3214 ㈔\\u3215 ㈕\\u3216 ㈖\\u3217 ㈗\\u3218 ㈘\\u3219 ㈙\\u3220 ㈠\\u3221 ㈡\\u3222 ㈢\\u3223 ㈣\\u3224 ㈤\\u3225 ㈥\\u3226 ㈦\\u3227 ㈧\\u3228 ㈨\\u3229 ㈩\\u3230 ㈰\\u3231 ㈱\\u3232 ㈲\\u3233 ㈳\\u3234 ㈴\\u3235 ㈵\\u3236 ㈶\\u3237 ㈷\\u3238 ㈸\\u3239 ㈹\\u3240 ㉀\\u3241 ㉁\\u3242 ㉂\\u3243 ㉃\\u3244 ㉄\\u3245 ㉅\\u3246 ㉆\\u3247 ㉇\\u3248 ㉈\\u3249 ㉉\\u3250 ㉐\\u3251 ㉑\\u3252 ㉒\\u3253 ㉓\\u3254 ㉔\\u3255 ㉕\\u3256 ㉖\\u3257 ㉗\\u3258 ㉘\\u3259 ㉙\\u3260 ㉠\\u3261 ㉡\\u3262 ㉢\\u3263 ㉣\\u3264 ㉤\\u3265 ㉥\\u3266 ㉦\\u3267 ㉧\\u3268 ㉨\\u3269 ㉩\\u3270 ㉰\\u3271 ㉱\\u3272 ㉲\\u3273 ㉳\\u3274 ㉴\\u3275 ㉵\\u3276 ㉶\\u3277 ㉷\\u3278 ㉸\\u3279 ㉹\\u3280 ㊀\\u3281 ㊁\\u3282 ㊂\\u3283 ㊃\\u3284 ㊄\\u3285 ㊅\\u3286 ㊆\\u3287 ㊇\\u3288 ㊈\\u3289 ㊉\\u3290 ㊐\\u3291 ㊑\\u3292 ㊒\\u3293 ㊓\\u3294 ㊔\\u3295 ㊕\\u3296 ㊖\\u3297 ㊗\\u3298 ㊘\\u3299 ㊙\\u3300 ㌀\\u3301 ㌁\\u3302 ㌂\\u3303 ㌃\\u3304 ㌄\\u3305 ㌅\\u3306 ㌆\\u3307 ㌇\\u3308 ㌈\\u3309 ㌉\\u3310 ㌐\\u3311 ㌑\\u3312 ㌒\\u3313 ㌓\\u3314 ㌔\\u3315 ㌕\\u3316 ㌖\\u3317 ㌗\\u3318 ㌘\\u3319 ㌙\\u3320 ㌠\\u3321 ㌡\\u3322 ㌢\\u3323 ㌣\\u3324 ㌤\\u3325 ㌥\\u3326 ㌦\\u3327 ㌧\\u3328 ㌨\\u3329 ㌩\\u3330 ㌰\\u3331 ㌱\\u3332 ㌲\\u3333 ㌳\\u3334 ㌴\\u3335 ㌵\\u3336 ㌶\\u3337 ㌷\\u3338 ㌸\\u3339 ㌹\\u3340 ㍀\\u3341 ㍁\\u3342 ㍂\\u3343 ㍃\\u3344 ㍄\\u3345 ㍅\\u3346 ㍆\\u3347 ㍇\\u3348 ㍈\\u3349 ㍉\\u3350 ㍐\\u3351 ㍑\\u3352 ㍒\\u3353 ㍓\\u3354 ㍔\\u3355 ㍕\\u3356 ㍖\\u3357 ㍗\\u3358 ㍘\\u3359 ㍙\\u3360 ㍠\\u3361 ㍡\\u3362 ㍢\\u3363 ㍣\\u3364 ㍤\\u3365 ㍥\\u3366 ㍦\\u3367 ㍧\\u3368 ㍨\\u3369 ㍩\\u3370 ㍰\\u3371 ㍱\\u3372 ㍲\\u3373 ㍳\\u3374 ㍴\\u3375 ㍵\\u3376 ㍶\\u3377 ㍷\\u3378 ㍸\\u3379 ㍹\\u3380 ㎀\\u3381 ㎁\\u3382 ㎂\\u3383 ㎃\\u3384 ㎄\\u3385 ㎅\\u3386 ㎆\\u3387 ㎇\\u3388 ㎈\\u3389 ㎉\\u3390 ㎐\\u3391 ㎑\\u3392 ㎒\\u3393 ㎓\\u3394 ㎔\\u3395 ㎕\\u3396 ㎖\\u3397 ㎗\\u3398 ㎘\\u3399 ㎙\\u3400 㐀\\u3401 㐁\\u3402 㐂\\u3403 㐃\\u3404 㐄\\u3405 㐅\\u3406 㐆\\u3407 㐇\\u3408 㐈\\u3409 㐉\\u3410 㐐\\u3411 㐑\\u3412 㐒\\u3413 㐓\\u3414 㐔\\u3415 㐕\\u3416 㐖\\u3417 㐗\\u3418 㐘\\u3419 㐙\\u3420 㐠\\u3421 㐡\\u3422 㐢\\u3423 㐣\\u3424 㐤\\u3425 㐥\\u3426 㐦\\u3427 㐧\\u3428 㐨\\u3429 㐩\\u3430 㐰\\u3431 㐱\\u3432 㐲\\u3433 㐳\\u3434 㐴\\u3435 㐵\\u3436 㐶\\u3437 㐷\\u3438 㐸\\u3439 㐹\\u3440 㑀\\u3441 㑁\\u3442 㑂\\u3443 㑃\\u3444 㑄\\u3445 㑅\\u3446 㑆\\u3447 㑇\\u3448 㑈\\u3449 㑉\\u3450 㑐\\u3451 㑑\\u3452 㑒\\u3453 㑓\\u3454 㑔\\u3455 㑕\\u3456 㑖\\u3457 㑗\\u3458 㑘\\u3459 㑙\\u3460 㑠\\u3461 㑡\\u3462 㑢\\u3463 㑣\\u3464 㑤\\u3465 㑥\\u3466 㑦\\u3467 㑧\\u3468 㑨\\u3469 㑩\\u3470 㑰\\u3471 㑱\\u3472 㑲\\u3473 㑳\\u3474 㑴\\u3475 㑵\\u3476 㑶\\u3477 㑷\\u3478 㑸\\u3479 㑹\\u3480 㒀\\u3481 㒁\\u3482 㒂\\u3483 㒃\\u3484 㒄\\u3485 㒅\\u3486 㒆\\u3487 㒇\\u3488 㒈\\u3489 㒉\\u3490 㒐\\u3491 㒑\\u3492 㒒\\u3493 㒓\\u3494 㒔\\u3495 㒕\\u3496 㒖\\u3497 㒗\\u3498 㒘\\u3499 㒙\\u3500 㔀\\u3501 㔁\\u3502 㔂\\u3503 㔃\\u3504 㔄\\u3505 㔅\\u3506 㔆\\u3507 㔇\\u3508 㔈\\u3509 㔉\\u3510 㔐\\u3511 㔑\\u3512 㔒\\u3513 㔓\\u3514 㔔\\u3515 㔕\\u3516 㔖\\u3517 㔗\\u3518 㔘\\u3519 㔙\\u3520 㔠\\u3521 㔡\\u3522 㔢\\u3523 㔣\\u3524 㔤\\u3525 㔥\\u3526 㔦\\u3527 㔧\\u3528 㔨\\u3529 㔩\\u3530 㔰\\u3531 㔱\\u3532 㔲\\u3533 㔳\\u3534 㔴\\u3535 㔵\\u3536 㔶\\u3537 㔷\\u3538 㔸\\u3539 㔹\\u3540 㕀\\u3541 㕁\\u3542 㕂\\u3543 㕃\\u3544 㕄\\u3545 㕅\\u3546 㕆\\u3547 㕇\\u3548 㕈\\u3549 㕉\\u3550 㕐\\u3551 㕑\\u3552 㕒\\u3553 㕓\\u3554 㕔\\u3555 㕕\\u3556 㕖\\u3557 㕗\\u3558 㕘\\u3559 㕙\\u3560 㕠\\u3561 㕡\\u3562 㕢\\u3563 㕣\\u3564 㕤\\u3565 㕥\\u3566 㕦\\u3567 㕧\\u3568 㕨\\u3569 㕩\\u3570 㕰\\u3571 㕱\\u3572 㕲\\u3573 㕳\\u3574 㕴\\u3575 㕵\\u3576 㕶\\u3577 㕷\\u3578 㕸\\u3579 㕹\\u3580 㖀\\u3581 㖁\\u3582 㖂\\u3583 㖃\\u3584 㖄\\u3585 㖅\\u3586 㖆\\u3587 㖇\\u3588 㖈\\u3589 㖉\\u3590 㖐\\u3591 㖑\\u3592 㖒\\u3593 㖓\\u3594 㖔\\u3595 㖕\\u3596 㖖\\u3597 㖗\\u3598 㖘\\u3599 㖙\\u3600 㘀\\u3601 㘁\\u3602 㘂\\u3603 㘃\\u3604 㘄\\u3605 㘅\\u3606 㘆\\u3607 㘇\\u3608 㘈\\u3609 㘉\\u3610 㘐\\u3611 㘑\\u3612 㘒\\u3613 㘓\\u3614 㘔\\u3615 㘕\\u3616 㘖\\u3617 㘗\\u3618 㘘\\u3619 㘙\\u3620 㘠\\u3621 㘡\\u3622 㘢\\u3623 㘣\\u3624 㘤\\u3625 㘥\\u3626 㘦\\u3627 㘧\\u3628 㘨\\u3629 㘩\\u3630 㘰\\u3631 㘱\\u3632 㘲\\u3633 㘳\\u3634 㘴\\u3635 㘵\\u3636 㘶\\u3637 㘷\\u3638 㘸\\u3639 㘹\\u3640 㙀\\u3641 㙁\\u3642 㙂\\u3643 㙃\\u3644 㙄\\u3645 㙅\\u3646 㙆\\u3647 㙇\\u3648 㙈\\u3649 㙉\\u3650 㙐\\u3651 㙑\\u3652 㙒\\u3653 㙓\\u3654 㙔\\u3655 㙕\\u3656 㙖\\u3657 㙗\\u3658 㙘\\u3659 㙙\\u3660 㙠\\u3661 㙡\\u3662 㙢\\u3663 㙣\\u3664 㙤\\u3665 㙥\\u3666 㙦\\u3667 㙧\\u3668 㙨\\u3669 㙩\\u3670 㙰\\u3671 㙱\\u3672 㙲\\u3673 㙳\\u3674 㙴\\u3675 㙵\\u3676 㙶\\u3677 㙷\\u3678 㙸\\u3679 㙹\\u3680 㚀\\u3681 㚁\\u3682 㚂\\u3683 㚃\\u3684 㚄\\u3685 㚅\\u3686 㚆\\u3687 㚇\\u3688 㚈\\u3689 㚉\\u3690 㚐\\u3691 㚑\\u3692 㚒\\u3693 㚓\\u3694 㚔\\u3695 㚕\\u3696 㚖\\u3697 㚗\\u3698 㚘\\u3699 㚙\\u3700 㜀\\u3701 㜁\\u3702 㜂\\u3703 㜃\\u3704 㜄\\u3705 㜅\\u3706 㜆\\u3707 㜇\\u3708 㜈\\u3709 㜉\\u3710 㜐\\u3711 㜑\\u3712 㜒\\u3713 㜓\\u3714 㜔\\u3715 㜕\\u3716 㜖\\u3717 㜗\\u3718 㜘\\u3719 㜙\\u3720 㜠\\u3721 㜡\\u3722 㜢\\u3723 㜣\\u3724 㜤\\u3725 㜥\\u3726 㜦\\u3727 㜧\\u3728 㜨\\u3729 㜩\\u3730 㜰\\u3731 㜱\\u3732 㜲\\u3733 㜳\\u3734 㜴\\u3735 㜵\\u3736 㜶\\u3737 㜷\\u3738 㜸\\u3739 㜹\\u3740 㝀\\u3741 㝁\\u3742 㝂\\u3743 㝃\\u3744 㝄\\u3745 㝅\\u3746 㝆\\u3747 㝇\\u3748 㝈\\u3749 㝉\\u3750 㝐\\u3751 㝑\\u3752 㝒\\u3753 㝓\\u3754 㝔\\u3755 㝕\\u3756 㝖\\u3757 㝗\\u3758 㝘\\u3759 㝙\\u3760 㝠\\u3761 㝡\\u3762 㝢\\u3763 㝣\\u3764 㝤\\u3765 㝥\\u3766 㝦\\u3767 㝧\\u3768 㝨\\u3769 㝩\\u3770 㝰\\u3771 㝱\\u3772 㝲\\u3773 㝳\\u3774 㝴\\u3775 㝵\\u3776 㝶\\u3777 㝷\\u3778 㝸\\u3779 㝹\\u3780 㞀\\u3781 㞁\\u3782 㞂\\u3783 㞃\\u3784 㞄\\u3785 㞅\\u3786 㞆\\u3787 㞇\\u3788 㞈\\u3789 㞉\\u3790 㞐\\u3791 㞑\\u3792 㞒\\u3793 㞓\\u3794 㞔\\u3795 㞕\\u3796 㞖\\u3797 㞗\\u3798 㞘\\u3799 㞙\\u3800 㠀\\u3801 㠁\\u3802 㠂\\u3803 㠃\\u3804 㠄\\u3805 㠅\\u3806 㠆\\u3807 㠇\\u3808 㠈\\u3809 㠉\\u3810 㠐\\u3811 㠑\\u3812 㠒\\u3813 㠓\\u3814 㠔\\u3815 㠕\\u3816 㠖\\u3817 㠗\\u3818 㠘\\u3819 㠙\\u3820 㠠\\u3821 㠡\\u3822 㠢\\u3823 㠣\\u3824 㠤\\u3825 㠥\\u3826 㠦\\u3827 㠧\\u3828 㠨\\u3829 㠩\\u3830 㠰\\u3831 㠱\\u3832 㠲\\u3833 㠳\\u3834 㠴\\u3835 㠵\\u3836 㠶\\u3837 㠷\\u3838 㠸\\u3839 㠹\\u3840 㡀\\u3841 㡁\\u3842 㡂\\u3843 㡃\\u3844 㡄\\u3845 㡅\\u3846 㡆\\u3847 㡇\\u3848 㡈\\u3849 㡉\\u3850 㡐\\u3851 㡑\\u3852 㡒\\u3853 㡓\\u3854 㡔\\u3855 㡕\\u3856 㡖\\u3857 㡗\\u3858 㡘\\u3859 㡙\\u3860 㡠\\u3861 㡡\\u3862 㡢\\u3863 㡣\\u3864 㡤\\u3865 㡥\\u3866 㡦\\u3867 㡧\\u3868 㡨\\u3869 㡩\\u3870 㡰\\u3871 㡱\\u3872 㡲\\u3873 㡳\\u3874 㡴\\u3875 㡵\\u3876 㡶\\u3877 㡷\\u3878 㡸\\u3879 㡹\\u3880 㢀\\u3881 㢁\\u3882 㢂\\u3883 㢃\\u3884 㢄\\u3885 㢅\\u3886 㢆\\u3887 㢇\\u3888 㢈\\u3889 㢉\\u3890 㢐\\u3891 㢑\\u3892 㢒\\u3893 㢓\\u3894 㢔\\u3895 㢕\\u3896 㢖\\u3897 㢗\\u3898 㢘\\u3899 㢙\\u3900 㤀\\u3901 㤁\\u3902 㤂\\u3903 㤃\\u3904 㤄\\u3905 㤅\\u3906 㤆\\u3907 㤇\\u3908 㤈\\u3909 㤉\\u3910 㤐\\u3911 㤑\\u3912 㤒\\u3913 㤓\\u3914 㤔\\u3915 㤕\\u3916 㤖\\u3917 㤗\\u3918 㤘\\u3919 㤙\\u3920 㤠\\u3921 㤡\\u3922 㤢\\u3923 㤣\\u3924 㤤\\u3925 㤥\\u3926 㤦\\u3927 㤧\\u3928 㤨\\u3929 㤩\\u3930 㤰\\u3931 㤱\\u3932 㤲\\u3933 㤳\\u3934 㤴\\u3935 㤵\\u3936 㤶\\u3937 㤷\\u3938 㤸\\u3939 㤹\\u3940 㥀\\u3941 㥁\\u3942 㥂\\u3943 㥃\\u3944 㥄\\u3945 㥅\\u3946 㥆\\u3947 㥇\\u3948 㥈\\u3949 㥉\\u3950 㥐\\u3951 㥑\\u3952 㥒\\u3953 㥓\\u3954 㥔\\u3955 㥕\\u3956 㥖\\u3957 㥗\\u3958 㥘\\u3959 㥙\\u3960 㥠\\u3961 㥡\\u3962 㥢\\u3963 㥣\\u3964 㥤\\u3965 㥥\\u3966 㥦\\u3967 㥧\\u3968 㥨\\u3969 㥩\\u3970 㥰\\u3971 㥱\\u3972 㥲\\u3973 㥳\\u3974 㥴\\u3975 㥵\\u3976 㥶\\u3977 㥷\\u3978 㥸\\u3979 㥹\\u3980 㦀\\u3981 㦁\\u3982 㦂\\u3983 㦃\\u3984 㦄\\u3985 㦅\\u3986 㦆\\u3987 㦇\\u3988 㦈\\u3989 㦉\\u3990 㦐\\u3991 㦑\\u3992 㦒\\u3993 㦓\\u3994 㦔\\u3995 㦕\\u3996 㦖\\u3997 㦗\\u3998 㦘\\u3999 㦙\\u4000 䀀\\u4001 䀁\\u4002 䀂\\u4003 䀃\\u4004 䀄\\u4005 䀅\\u4006 䀆\\u4007 䀇\\u4008 䀈\\u4009 䀉\\u4010 䀐\\u4011 䀑\\u4012 䀒\\u4013 䀓\\u4014 䀔\\u4015 䀕\\u4016 䀖\\u4017 䀗\\u4018 䀘\\u4019 䀙\\u4020 䀠\\u4021 䀡\\u4022 䀢\\u4023 䀣\\u4024 䀤\\u4025 䀥\\u4026 䀦\\u4027 䀧\\u4028 䀨\\u4029 䀩\\u4030 䀰\\u4031 䀱\\u4032 䀲\\u4033 䀳\\u4034 䀴\\u4035 䀵\\u4036 䀶\\u4037 䀷\\u4038 䀸\\u4039 䀹\\u4040 䁀\\u4041 䁁\\u4042 䁂\\u4043 䁃\\u4044 䁄\\u4045 䁅\\u4046 䁆\\u4047 䁇\\u4048 䁈\\u4049 䁉\\u4050 䁐\\u4051 䁑\\u4052 䁒\\u4053 䁓\\u4054 䁔\\u4055 䁕\\u4056 䁖\\u4057 䁗\\u4058 䁘\\u4059 䁙\\u4060 䁠\\u4061 䁡\\u4062 䁢\\u4063 䁣\\u4064 䁤\\u4065 䁥\\u4066 䁦\\u4067 䁧\\u4068 䁨\\u4069 䁩\\u4070 䁰\\u4071 䁱\\u4072 䁲\\u4073 䁳\\u4074 䁴\\u4075 䁵\\u4076 䁶\\u4077 䁷\\u4078 䁸\\u4079 䁹\\u4080 䂀\\u4081 䂁\\u4082 䂂\\u4083 䂃\\u4084 䂄\\u4085 䂅\\u4086 䂆\\u4087 䂇\\u4088 䂈\\u4089 䂉\\u4090 䂐\\u4091 䂑\\u4092 䂒\\u4093 䂓\\u4094 䂔\\u4095 䂕\\u4096 䂖\\u4097 䂗\\u4098 䂘\\u4099 䂙\\u4100 䄀\\u4101 䄁\\u4102 䄂\\u4103 䄃\\u4104 䄄\\u4105 䄅\\u4106 䄆\\u4107 䄇\\u4108 䄈\\u4109 䄉\\u4110 䄐\\u4111 䄑\\u4112 䄒\\u4113 䄓\\u4114 䄔\\u4115 䄕\\u4116 䄖\\u4117 䄗\\u4118 䄘\\u4119 䄙\\u4120 䄠\\u4121 䄡\\u4122 䄢\\u4123 䄣\\u4124 䄤\\u4125 䄥\\u4126 䄦\\u4127 䄧\\u4128 䄨\\u4129 䄩\\u4130 䄰\\u4131 䄱\\u4132 䄲\\u4133 䄳\\u4134 䄴\\u4135 䄵\\u4136 䄶\\u4137 䄷\\u4138 䄸\\u4139 䄹\\u4140 䅀\\u4141 䅁\\u4142 䅂\\u4143 䅃\\u4144 䅄\\u4145 䅅\\u4146 䅆\\u4147 䅇\\u4148 䅈\\u4149 䅉\\u4150 䅐\\u4151 䅑\\u4152 䅒\\u4153 䅓\\u4154 䅔\\u4155 䅕\\u4156 䅖\\u4157 䅗\\u4158 䅘\\u4159 䅙\\u4160 䅠\\u4161 䅡\\u4162 䅢\\u4163 䅣\\u4164 䅤\\u4165 䅥\\u4166 䅦\\u4167 䅧\\u4168 䅨\\u4169 䅩\\u4170 䅰\\u4171 䅱\\u4172 䅲\\u4173 䅳\\u4174 䅴\\u4175 䅵\\u4176 䅶\\u4177 䅷\\u4178 䅸\\u4179 䅹\\u4180 䆀\\u4181 䆁\\u4182 䆂\\u4183 䆃\\u4184 䆄\\u4185 䆅\\u4186 䆆\\u4187 䆇\\u4188 䆈\\u4189 䆉\\u4190 䆐\\u4191 䆑\\u4192 䆒\\u4193 䆓\\u4194 䆔\\u4195 䆕\\u4196 䆖\\u4197 䆗\\u4198 䆘\\u4199 䆙\\u4200 䈀\\u4201 䈁\\u4202 䈂\\u4203 䈃\\u4204 䈄\\u4205 䈅\\u4206 䈆\\u4207 䈇\\u4208 䈈\\u4209 䈉\\u4210 䈐\\u4211 䈑\\u4212 䈒\\u4213 䈓\\u4214 䈔\\u4215 䈕\\u4216 䈖\\u4217 䈗\\u4218 䈘\\u4219 䈙\\u4220 䈠\\u4221 䈡\\u4222 䈢\\u4223 䈣\\u4224 䈤\\u4225 䈥\\u4226 䈦\\u4227 䈧\\u4228 䈨\\u4229 䈩\\u4230 䈰\\u4231 䈱\\u4232 䈲\\u4233 䈳\\u4234 䈴\\u4235 䈵\\u4236 䈶\\u4237 䈷\\u4238 䈸\\u4239 䈹\\u4240 䉀\\u4241 䉁\\u4242 䉂\\u4243 䉃\\u4244 䉄\\u4245 䉅\\u4246 䉆\\u4247 䉇\\u4248 䉈\\u4249 䉉\\u4250 䉐\\u4251 䉑\\u4252 䉒\\u4253 䉓\\u4254 䉔\\u4255 䉕\\u4256 䉖\\u4257 䉗\\u4258 䉘\\u4259 䉙\\u4260 䉠\\u4261 䉡\\u4262 䉢\\u4263 䉣\\u4264 䉤\\u4265 䉥\\u4266 䉦\\u4267 䉧\\u4268 䉨\\u4269 䉩\\u4270 䉰\\u4271 䉱\\u4272 䉲\\u4273 䉳\\u4274 䉴\\u4275 䉵\\u4276 䉶\\u4277 䉷\\u4278 䉸\\u4279 䉹\\u4280 䊀\\u4281 䊁\\u4282 䊂\\u4283 䊃\\u4284 䊄\\u4285 䊅\\u4286 䊆\\u4287 䊇\\u4288 䊈\\u4289 䊉\\u4290 䊐\\u4291 䊑\\u4292 䊒\\u4293 䊓\\u4294 䊔\\u4295 䊕\\u4296 䊖\\u4297 䊗\\u4298 䊘\\u4299 䊙\\u4300 䌀\\u4301 䌁\\u4302 䌂\\u4303 䌃\\u4304 䌄\\u4305 䌅\\u4306 䌆\\u4307 䌇\\u4308 䌈\\u4309 䌉\\u4310 䌐\\u4311 䌑\\u4312 䌒\\u4313 䌓\\u4314 䌔\\u4315 䌕\\u4316 䌖\\u4317 䌗\\u4318 䌘\\u4319 䌙\\u4320 䌠\\u4321 䌡\\u4322 䌢\\u4323 䌣\\u4324 䌤\\u4325 䌥\\u4326 䌦\\u4327 䌧\\u4328 䌨\\u4329 䌩\\u4330 䌰\\u4331 䌱\\u4332 䌲\\u4333 䌳\\u4334 䌴\\u4335 䌵\\u4336 䌶\\u4337 䌷\\u4338 䌸\\u4339 䌹\\u4340 䍀\\u4341 䍁\\u4342 䍂\\u4343 䍃\\u4344 䍄\\u4345 䍅\\u4346 䍆\\u4347 䍇\\u4348 䍈\\u4349 䍉\\u4350 䍐\\u4351 䍑\\u4352 䍒\\u4353 䍓\\u4354 䍔\\u4355 䍕\\u4356 䍖\\u4357 䍗\\u4358 䍘\\u4359 䍙\\u4360 䍠\\u4361 䍡\\u4362 䍢\\u4363 䍣\\u4364 䍤\\u4365 䍥\\u4366 䍦\\u4367 䍧\\u4368 䍨\\u4369 䍩\\u4370 䍰\\u4371 䍱\\u4372 䍲\\u4373 䍳\\u4374 䍴\\u4375 䍵\\u4376 䍶\\u4377 䍷\\u4378 䍸\\u4379 䍹\\u4380 䎀\\u4381 䎁\\u4382 䎂\\u4383 䎃\\u4384 䎄\\u4385 䎅\\u4386 䎆\\u4387 䎇\\u4388 䎈\\u4389 䎉\\u4390 䎐\\u4391 䎑\\u4392 䎒\\u4393 䎓\\u4394 䎔\\u4395 䎕\\u4396 䎖\\u4397 䎗\\u4398 䎘\\u4399 䎙\\u4400 䐀\\u4401 䐁\\u4402 䐂\\u4403 䐃\\u4404 䐄\\u4405 䐅\\u4406 䐆\\u4407 䐇\\u4408 䐈\\u4409 䐉\\u4410 䐐\\u4411 䐑\\u4412 䐒\\u4413 䐓\\u4414 䐔\\u4415 䐕\\u4416 䐖\\u4417 䐗\\u4418 䐘\\u4419 䐙\\u4420 䐠\\u4421 䐡\\u4422 䐢\\u4423 䐣\\u4424 䐤\\u4425 䐥\\u4426 䐦\\u4427 䐧\\u4428 䐨\\u4429 䐩\\u4430 䐰\\u4431 䐱\\u4432 䐲\\u4433 䐳\\u4434 䐴\\u4435 䐵\\u4436 䐶\\u4437 䐷\\u4438 䐸\\u4439 䐹\\u4440 䑀\\u4441 䑁\\u4442 䑂\\u4443 䑃\\u4444 䑄\\u4445 䑅\\u4446 䑆\\u4447 䑇\\u4448 䑈\\u4449 䑉\\u4450 䑐\\u4451 䑑\\u4452 䑒\\u4453 䑓\\u4454 䑔\\u4455 䑕\\u4456 䑖\\u4457 䑗\\u4458 䑘\\u4459 䑙\\u4460 䑠\\u4461 䑡\\u4462 䑢\\u4463 䑣\\u4464 䑤\\u4465 䑥\\u4466 䑦\\u4467 䑧\\u4468 䑨\\u4469 䑩\\u4470 䑰\\u4471 䑱\\u4472 䑲\\u4473 䑳\\u4474 䑴\\u4475 䑵\\u4476 䑶\\u4477 䑷\\u4478 䑸\\u4479 䑹\\u4480 䒀\\u4481 䒁\\u4482 䒂\\u4483 䒃\\u4484 䒄\\u4485 䒅\\u4486 䒆\\u4487 䒇\\u4488 䒈\\u4489 䒉\\u4490 䒐\\u4491 䒑\\u4492 䒒\\u4493 䒓\\u4494 䒔\\u4495 䒕\\u4496 䒖\\u4497 䒗\\u4498 䒘\\u4499 䒙\\u4500 䔀\\u4501 䔁\\u4502 䔂\\u4503 䔃\\u4504 䔄\\u4505 䔅\\u4506 䔆\\u4507 䔇\\u4508 䔈\\u4509 䔉\\u4510 䔐\\u4511 䔑\\u4512 䔒\\u4513 䔓\\u4514 䔔\\u4515 䔕\\u4516 䔖\\u4517 䔗\\u4518 䔘\\u4519 䔙\\u4520 䔠\\u4521 䔡\\u4522 䔢\\u4523 䔣\\u4524 䔤\\u4525 䔥\\u4526 䔦\\u4527 䔧\\u4528 䔨\\u4529 䔩\\u4530 䔰\\u4531 䔱\\u4532 䔲\\u4533 䔳\\u4534 䔴\\u4535 䔵\\u4536 䔶\\u4537 䔷\\u4538 䔸\\u4539 䔹\\u4540 䕀\\u4541 䕁\\u4542 䕂\\u4543 䕃\\u4544 䕄\\u4545 䕅\\u4546 䕆\\u4547 䕇\\u4548 䕈\\u4549 䕉\\u4550 䕐\\u4551 䕑\\u4552 䕒\\u4553 䕓\\u4554 䕔\\u4555 䕕\\u4556 䕖\\u4557 䕗\\u4558 䕘\\u4559 䕙\\u4560 䕠\\u4561 䕡\\u4562 䕢\\u4563 䕣\\u4564 䕤\\u4565 䕥\\u4566 䕦\\u4567 䕧\\u4568 䕨\\u4569 䕩\\u4570 䕰\\u4571 䕱\\u4572 䕲\\u4573 䕳\\u4574 䕴\\u4575 䕵\\u4576 䕶\\u4577 䕷\\u4578 䕸\\u4579 䕹\\u4580 䖀\\u4581 䖁\\u4582 䖂\\u4583 䖃\\u4584 䖄\\u4585 䖅\\u4586 䖆\\u4587 䖇\\u4588 䖈\\u4589 䖉\\u4590 䖐\\u4591 䖑\\u4592 䖒\\u4593 䖓\\u4594 䖔\\u4595 䖕\\u4596 䖖\\u4597 䖗\\u4598 䖘\\u4599 䖙\\u4600 䘀\\u4601 䘁\\u4602 䘂\\u4603 䘃\\u4604 䘄\\u4605 䘅\\u4606 䘆\\u4607 䘇\\u4608 䘈\\u4609 䘉\\u4610 䘐\\u4611 䘑\\u4612 䘒\\u4613 䘓\\u4614 䘔\\u4615 䘕\\u4616 䘖\\u4617 䘗\\u4618 䘘\\u4619 䘙\\u4620 䘠\\u4621 䘡\\u4622 䘢\\u4623 䘣\\u4624 䘤\\u4625 䘥\\u4626 䘦\\u4627 䘧\\u4628 䘨\\u4629 䘩\\u4630 䘰\\u4631 䘱\\u4632 䘲\\u4633 䘳\\u4634 䘴\\u4635 䘵\\u4636 䘶\\u4637 䘷\\u4638 䘸\\u4639 䘹\\u4640 䙀\\u4641 䙁\\u4642 䙂\\u4643 䙃\\u4644 䙄\\u4645 䙅\\u4646 䙆\\u4647 䙇\\u4648 䙈\\u4649 䙉\\u4650 䙐\\u4651 䙑\\u4652 䙒\\u4653 䙓\\u4654 䙔\\u4655 䙕\\u4656 䙖\\u4657 䙗\\u4658 䙘\\u4659 䙙\\u4660 䙠\\u4661 䙡\\u4662 䙢\\u4663 䙣\\u4664 䙤\\u4665 䙥\\u4666 䙦\\u4667 䙧\\u4668 䙨\\u4669 䙩\\u4670 䙰\\u4671 䙱\\u4672 䙲\\u4673 䙳\\u4674 䙴\\u4675 䙵\\u4676 䙶\\u4677 䙷\\u4678 䙸\\u4679 䙹\\u4680 䚀\\u4681 䚁\\u4682 䚂\\u4683 䚃\\u4684 䚄\\u4685 䚅\\u4686 䚆\\u4687 䚇\\u4688 䚈\\u4689 䚉\\u4690 䚐\\u4691 䚑\\u4692 䚒\\u4693 䚓\\u4694 䚔\\u4695 䚕\\u4696 䚖\\u4697 䚗\\u4698 䚘\\u4699 䚙\\u4700 䜀\\u4701 䜁\\u4702 䜂\\u4703 䜃\\u4704 䜄\\u4705 䜅\\u4706 䜆\\u4707 䜇\\u4708 䜈\\u4709 䜉\\u4710 䜐\\u4711 䜑\\u4712 䜒\\u4713 䜓\\u4714 䜔\\u4715 䜕\\u4716 䜖\\u4717 䜗\\u4718 䜘\\u4719 䜙\\u4720 䜠\\u4721 䜡\\u4722 䜢\\u4723 䜣\\u4724 䜤\\u4725 䜥\\u4726 䜦\\u4727 䜧\\u4728 䜨\\u4729 䜩\\u4730 䜰\\u4731 䜱\\u4732 䜲\\u4733 䜳\\u4734 䜴\\u4735 䜵\\u4736 䜶\\u4737 䜷\\u4738 䜸\\u4739 䜹\\u4740 䝀\\u4741 䝁\\u4742 䝂\\u4743 䝃\\u4744 䝄\\u4745 䝅\\u4746 䝆\\u4747 䝇\\u4748 䝈\\u4749 䝉\\u4750 䝐\\u4751 䝑\\u4752 䝒\\u4753 䝓\\u4754 䝔\\u4755 䝕\\u4756 䝖\\u4757 䝗\\u4758 䝘\\u4759 䝙\\u4760 䝠\\u4761 䝡\\u4762 䝢\\u4763 䝣\\u4764 䝤\\u4765 䝥\\u4766 䝦\\u4767 䝧\\u4768 䝨\\u4769 䝩\\u4770 䝰\\u4771 䝱\\u4772 䝲\\u4773 䝳\\u4774 䝴\\u4775 䝵\\u4776 䝶\\u4777 䝷\\u4778 䝸\\u4779 䝹\\u4780 䞀\\u4781 䞁\\u4782 䞂\\u4783 䞃\\u4784 䞄\\u4785 䞅\\u4786 䞆\\u4787 䞇\\u4788 䞈\\u4789 䞉\\u4790 䞐\\u4791 䞑\\u4792 䞒\\u4793 䞓\\u4794 䞔\\u4795 䞕\\u4796 䞖\\u4797 䞗\\u4798 䞘\\u4799 䞙\\u4800 䠀\\u4801 䠁\\u4802 䠂\\u4803 䠃\\u4804 䠄\\u4805 䠅\\u4806 䠆\\u4807 䠇\\u4808 䠈\\u4809 䠉\\u4810 䠐\\u4811 䠑\\u4812 䠒\\u4813 䠓\\u4814 䠔\\u4815 䠕\\u4816 䠖\\u4817 䠗\\u4818 䠘\\u4819 䠙\\u4820 䠠\\u4821 䠡\\u4822 䠢\\u4823 䠣\\u4824 䠤\\u4825 䠥\\u4826 䠦\\u4827 䠧\\u4828 䠨\\u4829 䠩\\u4830 䠰\\u4831 䠱\\u4832 䠲\\u4833 䠳\\u4834 䠴\\u4835 䠵\\u4836 䠶\\u4837 䠷\\u4838 䠸\\u4839 䠹\\u4840 䡀\\u4841 䡁\\u4842 䡂\\u4843 䡃\\u4844 䡄\\u4845 䡅\\u4846 䡆\\u4847 䡇\\u4848 䡈\\u4849 䡉\\u4850 䡐\\u4851 䡑\\u4852 䡒\\u4853 䡓\\u4854 䡔\\u4855 䡕\\u4856 䡖\\u4857 䡗\\u4858 䡘\\u4859 䡙\\u4860 䡠\\u4861 䡡\\u4862 䡢\\u4863 䡣\\u4864 䡤\\u4865 䡥\\u4866 䡦\\u4867 䡧\\u4868 䡨\\u4869 䡩\\u4870 䡰\\u4871 䡱\\u4872 䡲\\u4873 䡳\\u4874 䡴\\u4875 䡵\\u4876 䡶\\u4877 䡷\\u4878 䡸\\u4879 䡹\\u4880 䢀\\u4881 䢁\\u4882 䢂\\u4883 䢃\\u4884 䢄\\u4885 䢅\\u4886 䢆\\u4887 䢇\\u4888 䢈\\u4889 䢉\\u4890 䢐\\u4891 䢑\\u4892 䢒\\u4893 䢓\\u4894 䢔\\u4895 䢕\\u4896 䢖\\u4897 䢗\\u4898 䢘\\u4899 䢙\\u4900 䤀\\u4901 䤁\\u4902 䤂\\u4903 䤃\\u4904 䤄\\u4905 䤅\\u4906 䤆\\u4907 䤇\\u4908 䤈\\u4909 䤉\\u4910 䤐\\u4911 䤑\\u4912 䤒\\u4913 䤓\\u4914 䤔\\u4915 䤕\\u4916 䤖\\u4917 䤗\\u4918 䤘\\u4919 䤙\\u4920 䤠\\u4921 䤡\\u4922 䤢\\u4923 䤣\\u4924 䤤\\u4925 䤥\\u4926 䤦\\u4927 䤧\\u4928 䤨\\u4929 䤩\\u4930 䤰\\u4931 䤱\\u4932 䤲\\u4933 䤳\\u4934 䤴\\u4935 䤵\\u4936 䤶\\u4937 䤷\\u4938 䤸\\u4939 䤹\\u4940 䥀\\u4941 䥁\\u4942 䥂\\u4943 䥃\\u4944 䥄\\u4945 䥅\\u4946 䥆\\u4947 䥇\\u4948 䥈\\u4949 䥉\\u4950 䥐\\u4951 䥑\\u4952 䥒\\u4953 䥓\\u4954 䥔\\u4955 䥕\\u4956 䥖\\u4957 䥗\\u4958 䥘\\u4959 䥙\\u4960 䥠\\u4961 䥡\\u4962 䥢\\u4963 䥣\\u4964 䥤\\u4965 䥥\\u4966 䥦\\u4967 䥧\\u4968 䥨\\u4969 䥩\\u4970 䥰\\u4971 䥱\\u4972 䥲\\u4973 䥳\\u4974 䥴\\u4975 䥵\\u4976 䥶\\u4977 䥷\\u4978 䥸\\u4979 䥹\\u4980 䦀\\u4981 䦁\\u4982 䦂\\u4983 䦃\\u4984 䦄\\u4985 䦅\\u4986 䦆\\u4987 䦇\\u4988 䦈\\u4989 䦉\\u4990 䦐\\u4991 䦑\\u4992 䦒\\u4993 䦓\\u4994 䦔\\u4995 䦕\\u4996 䦖\\u4997 䦗\\u4998 䦘\\u4999 䦙\\u5000 倀\\u5001 倁\\u5002 倂\\u5003 倃\\u5004 倄\\u5005 倅\\u5006 倆\\u5007 倇\\u5008 倈\\u5009 倉\\u5010 倐\\u5011 們\\u5012 倒\\u5013 倓\\u5014 倔\\u5015 倕\\u5016 倖\\u5017 倗\\u5018 倘\\u5019 候\\u5020 倠\\u5021 倡\\u5022 倢\\u5023 倣\\u5024 値\\u5025 倥\\u5026 倦\\u5027 倧\\u5028 倨\\u5029 倩\\u5030 倰\\u5031 倱\\u5032 倲\\u5033 倳\\u5034 倴\\u5035 倵\\u5036 倶\\u5037 倷\\u5038 倸\\u5039 倹\\u5040 偀\\u5041 偁\\u5042 偂\\u5043 偃\\u5044 偄\\u5045 偅\\u5046 偆\\u5047 假\\u5048 偈\\u5049 偉\\u5050 偐\\u5051 偑\\u5052 偒\\u5053 偓\\u5054 偔\\u5055 偕\\u5056 偖\\u5057 偗\\u5058 偘\\u5059 偙\\u5060 偠\\u5061 偡\\u5062 偢\\u5063 偣\\u5064 偤\\u5065 健\\u5066 偦\\u5067 偧\\u5068 偨\\u5069 偩\\u5070 偰\\u5071 偱\\u5072 偲\\u5073 偳\\u5074 側\\u5075 偵\\u5076 偶\\u5077 偷\\u5078 偸\\u5079 偹\\u5080 傀\\u5081 傁\\u5082 傂\\u5083 傃\\u5084 傄\\u5085 傅\\u5086 傆\\u5087 傇\\u5088 傈\\u5089 傉\\u5090 傐\\u5091 傑\\u5092 傒\\u5093 傓\\u5094 傔\\u5095 傕\\u5096 傖\\u5097 傗\\u5098 傘\\u5099 備\\u5100 儀\\u5101 儁\\u5102 儂\\u5103 儃\\u5104 億\\u5105 儅\\u5106 儆\\u5107 儇\\u5108 儈\\u5109 儉\\u5110 儐\\u5111 儑\\u5112 儒\\u5113 儓\\u5114 儔\\u5115 儕\\u5116 儖\\u5117 儗\\u5118 儘\\u5119 儙\\u5120 儠\\u5121 儡\\u5122 儢\\u5123 儣\\u5124 儤\\u5125 儥\\u5126 儦\\u5127 儧\\u5128 儨\\u5129 儩\\u5130 儰\\u5131 儱\\u5132 儲\\u5133 儳\\u5134 儴\\u5135 儵\\u5136 儶\\u5137 儷\\u5138 儸\\u5139 儹\\u5140 兀\\u5141 允\\u5142 兂\\u5143 元\\u5144 兄\\u5145 充\\u5146 兆\\u5147 兇\\u5148 先\\u5149 光\\u5150 児\\u5151 兑\\u5152 兒\\u5153 兓\\u5154 兔\\u5155 兕\\u5156 兖\\u5157 兗\\u5158 兘\\u5159 兙\\u5160 兠\\u5161 兡\\u5162 兢\\u5163 兣\\u5164 兤\\u5165 入\\u5166 兦\\u5167 內\\u5168 全\\u5169 兩\\u5170 兰\\u5171 共\\u5172 兲\\u5173 关\\u5174 兴\\u5175 兵\\u5176 其\\u5177 具\\u5178 典\\u5179 兹\\u5180 冀\\u5181 冁\\u5182 冂\\u5183 冃\\u5184 冄\\u5185 内\\u5186 円\\u5187 冇\\u5188 冈\\u5189 冉\\u5190 冐\\u5191 冑\\u5192 冒\\u5193 冓\\u5194 冔\\u5195 冕\\u5196 冖\\u5197 冗\\u5198 冘\\u5199 写\\u5200 刀\\u5201 刁\\u5202 刂\\u5203 刃\\u5204 刄\\u5205 刅\\u5206 分\\u5207 切\\u5208 刈\\u5209 刉\\u5210 刐\\u5211 刑\\u5212 划\\u5213 刓\\u5214 刔\\u5215 刕\\u5216 刖\\u5217 列\\u5218 刘\\u5219 则\\u5220 删\\u5221 刡\\u5222 刢\\u5223 刣\\u5224 判\\u5225 別\\u5226 刦\\u5227 刧\\u5228 刨\\u5229 利\\u5230 到\\u5231 刱\\u5232 刲\\u5233 刳\\u5234 刴\\u5235 刵\\u5236 制\\u5237 刷\\u5238 券\\u5239 刹\\u5240 剀\\u5241 剁\\u5242 剂\\u5243 剃\\u5244 剄\\u5245 剅\\u5246 剆\\u5247 則\\u5248 剈\\u5249 剉\\u5250 剐\\u5251 剑\\u5252 剒\\u5253 剓\\u5254 剔\\u5255 剕\\u5256 剖\\u5257 剗\\u5258 剘\\u5259 剙\\u5260 剠\\u5261 剡\\u5262 剢\\u5263 剣\\u5264 剤\\u5265 剥\\u5266 剦\\u5267 剧\\u5268 剨\\u5269 剩\\u5270 剰\\u5271 剱\\u5272 割\\u5273 剳\\u5274 剴\\u5275 創\\u5276 剶\\u5277 剷\\u5278 剸\\u5279 剹\\u5280 劀\\u5281 劁\\u5282 劂\\u5283 劃\\u5284 劄\\u5285 劅\\u5286 劆\\u5287 劇\\u5288 劈\\u5289 劉\\u5290 劐\\u5291 劑\\u5292 劒\\u5293 劓\\u5294 劔\\u5295 劕\\u5296 劖\\u5297 劗\\u5298 劘\\u5299 劙\\u5300 匀\\u5301 匁\\u5302 匂\\u5303 匃\\u5304 匄\\u5305 包\\u5306 匆\\u5307 匇\\u5308 匈\\u5309 匉\\u5310 匐\\u5311 匑\\u5312 匒\\u5313 匓\\u5314 匔\\u5315 匕\\u5316 化\\u5317 北\\u5318 匘\\u5319 匙\\u5320 匠\\u5321 匡\\u5322 匢\\u5323 匣\\u5324 匤\\u5325 匥\\u5326 匦\\u5327 匧\\u5328 匨\\u5329 匩\\u5330 匰\\u5331 匱\\u5332 匲\\u5333 匳\\u5334 匴\\u5335 匵\\u5336 匶\\u5337 匷\\u5338 匸\\u5339 匹\\u5340 區\\u5341 十\\u5342 卂\\u5343 千\\u5344 卄\\u5345 卅\\u5346 卆\\u5347 升\\u5348 午\\u5349 卉\\u5350 卐\\u5351 卑\\u5352 卒\\u5353 卓\\u5354 協\\u5355 单\\u5356 卖\\u5357 南\\u5358 単\\u5359 卙\\u5360 占\\u5361 卡\\u5362 卢\\u5363 卣\\u5364 卤\\u5365 卥\\u5366 卦\\u5367 卧\\u5368 卨\\u5369 卩\\u5370 印\\u5371 危\\u5372 卲\\u5373 即\\u5374 却\\u5375 卵\\u5376 卶\\u5377 卷\\u5378 卸\\u5379 卹\\u5380 厀\\u5381 厁\\u5382 厂\\u5383 厃\\u5384 厄\\u5385 厅\\u5386 历\\u5387 厇\\u5388 厈\\u5389 厉\\u5390 厐\\u5391 厑\\u5392 厒\\u5393 厓\\u5394 厔\\u5395 厕\\u5396 厖\\u5397 厗\\u5398 厘\\u5399 厙\\u5400 吀\\u5401 吁\\u5402 吂\\u5403 吃\\u5404 各\\u5405 吅\\u5406 吆\\u5407 吇\\u5408 合\\u5409 吉\\u5410 吐\\u5411 向\\u5412 吒\\u5413 吓\\u5414 吔\\u5415 吕\\u5416 吖\\u5417 吗\\u5418 吘\\u5419 吙\\u5420 吠\\u5421 吡\\u5422 吢\\u5423 吣\\u5424 吤\\u5425 吥\\u5426 否\\u5427 吧\\u5428 吨\\u5429 吩\\u5430 吰\\u5431 吱\\u5432 吲\\u5433 吳\\u5434 吴\\u5435 吵\\u5436 吶\\u5437 吷\\u5438 吸\\u5439 吹\\u5440 呀\\u5441 呁\\u5442 呂\\u5443 呃\\u5444 呄\\u5445 呅\\u5446 呆\\u5447 呇\\u5448 呈\\u5449 呉\\u5450 呐\\u5451 呑\\u5452 呒\\u5453 呓\\u5454 呔\\u5455 呕\\u5456 呖\\u5457 呗\\u5458 员\\u5459 呙\\u5460 呠\\u5461 呡\\u5462 呢\\u5463 呣\\u5464 呤\\u5465 呥\\u5466 呦\\u5467 呧\\u5468 周\\u5469 呩\\u5470 呰\\u5471 呱\\u5472 呲\\u5473 味\\u5474 呴\\u5475 呵\\u5476 呶\\u5477 呷\\u5478 呸\\u5479 呹\\u5480 咀\\u5481 咁\\u5482 咂\\u5483 咃\\u5484 咄\\u5485 咅\\u5486 咆\\u5487 咇\\u5488 咈\\u5489 咉\\u5490 咐\\u5491 咑\\u5492 咒\\u5493 咓\\u5494 咔\\u5495 咕\\u5496 咖\\u5497 咗\\u5498 咘\\u5499 咙\\u5500 唀\\u5501 唁\\u5502 唂\\u5503 唃\\u5504 唄\\u5505 唅\\u5506 唆\\u5507 唇\\u5508 唈\\u5509 唉\\u5510 唐\\u5511 唑\\u5512 唒\\u5513 唓\\u5514 唔\\u5515 唕\\u5516 唖\\u5517 唗\\u5518 唘\\u5519 唙\\u5520 唠\\u5521 唡\\u5522 唢\\u5523 唣\\u5524 唤\\u5525 唥\\u5526 唦\\u5527 唧\\u5528 唨\\u5529 唩\\u5530 唰\\u5531 唱\\u5532 唲\\u5533 唳\\u5534 唴\\u5535 唵\\u5536 唶\\u5537 唷\\u5538 唸\\u5539 唹\\u5540 啀\\u5541 啁\\u5542 啂\\u5543 啃\\u5544 啄\\u5545 啅\\u5546 商\\u5547 啇\\u5548 啈\\u5549 啉\\u5550 啐\\u5551 啑\\u5552 啒\\u5553 啓\\u5554 啔\\u5555 啕\\u5556 啖\\u5557 啗\\u5558 啘\\u5559 啙\\u5560 啠\\u5561 啡\\u5562 啢\\u5563 啣\\u5564 啤\\u5565 啥\\u5566 啦\\u5567 啧\\u5568 啨\\u5569 啩\\u5570 啰\\u5571 啱\\u5572 啲\\u5573 啳\\u5574 啴\\u5575 啵\\u5576 啶\\u5577 啷\\u5578 啸\\u5579 啹\\u5580 喀\\u5581 喁\\u5582 喂\\u5583 喃\\u5584 善\\u5585 喅\\u5586 喆\\u5587 喇\\u5588 喈\\u5589 喉\\u5590 喐\\u5591 喑\\u5592 喒\\u5593 喓\\u5594 喔\\u5595 喕\\u5596 喖\\u5597 喗\\u5598 喘\\u5599 喙\\u5600 嘀\\u5601 嘁\\u5602 嘂\\u5603 嘃\\u5604 嘄\\u5605 嘅\\u5606 嘆\\u5607 嘇\\u5608 嘈\\u5609 嘉\\u5610 嘐\\u5611 嘑\\u5612 嘒\\u5613 嘓\\u5614 嘔\\u5615 嘕\\u5616 嘖\\u5617 嘗\\u5618 嘘\\u5619 嘙\\u5620 嘠\\u5621 嘡\\u5622 嘢\\u5623 嘣\\u5624 嘤\\u5625 嘥\\u5626 嘦\\u5627 嘧\\u5628 嘨\\u5629 嘩\\u5630 嘰\\u5631 嘱\\u5632 嘲\\u5633 嘳\\u5634 嘴\\u5635 嘵\\u5636 嘶\\u5637 嘷\\u5638 嘸\\u5639 嘹\\u5640 噀\\u5641 噁\\u5642 噂\\u5643 噃\\u5644 噄\\u5645 噅\\u5646 噆\\u5647 噇\\u5648 噈\\u5649 噉\\u5650 噐\\u5651 噑\\u5652 噒\\u5653 噓\\u5654 噔\\u5655 噕\\u5656 噖\\u5657 噗\\u5658 噘\\u5659 噙\\u5660 噠\\u5661 噡\\u5662 噢\\u5663 噣\\u5664 噤\\u5665 噥\\u5666 噦\\u5667 噧\\u5668 器\\u5669 噩\\u5670 噰\\u5671 噱\\u5672 噲\\u5673 噳\\u5674 噴\\u5675 噵\\u5676 噶\\u5677 噷\\u5678 噸\\u5679 噹\\u5680 嚀\\u5681 嚁\\u5682 嚂\\u5683 嚃\\u5684 嚄\\u5685 嚅\\u5686 嚆\\u5687 嚇\\u5688 嚈\\u5689 嚉\\u5690 嚐\\u5691 嚑\\u5692 嚒\\u5693 嚓\\u5694 嚔\\u5695 嚕\\u5696 嚖\\u5697 嚗\\u5698 嚘\\u5699 嚙\\u5700 圀\\u5701 圁\\u5702 圂\\u5703 圃\\u5704 圄\\u5705 圅\\u5706 圆\\u5707 圇\\u5708 圈\\u5709 圉\\u5710 圐\\u5711 圑\\u5712 園\\u5713 圓\\u5714 圔\\u5715 圕\\u5716 圖\\u5717 圗\\u5718 團\\u5719 圙\\u5720 圠\\u5721 圡\\u5722 圢\\u5723 圣\\u5724 圤\\u5725 圥\\u5726 圦\\u5727 圧\\u5728 在\\u5729 圩\\u5730 地\\u5731 圱\\u5732 圲\\u5733 圳\\u5734 圴\\u5735 圵\\u5736 圶\\u5737 圷\\u5738 圸\\u5739 圹\\u5740 址\\u5741 坁\\u5742 坂\\u5743 坃\\u5744 坄\\u5745 坅\\u5746 坆\\u5747 均\\u5748 坈\\u5749 坉\\u5750 坐\\u5751 坑\\u5752 坒\\u5753 坓\\u5754 坔\\u5755 坕\\u5756 坖\\u5757 块\\u5758 坘\\u5759 坙\\u5760 坠\\u5761 坡\\u5762 坢\\u5763 坣\\u5764 坤\\u5765 坥\\u5766 坦\\u5767 坧\\u5768 坨\\u5769 坩\\u5770 坰\\u5771 坱\\u5772 坲\\u5773 坳\\u5774 坴\\u5775 坵\\u5776 坶\\u5777 坷\\u5778 坸\\u5779 坹\\u5780 垀\\u5781 垁\\u5782 垂\\u5783 垃\\u5784 垄\\u5785 垅\\u5786 垆\\u5787 垇\\u5788 垈\\u5789 垉\\u5790 垐\\u5791 垑\\u5792 垒\\u5793 垓\\u5794 垔\\u5795 垕\\u5796 垖\\u5797 垗\\u5798 垘\\u5799 垙\\u5800 堀\\u5801 堁\\u5802 堂\\u5803 堃\\u5804 堄\\u5805 堅\\u5806 堆\\u5807 堇\\u5808 堈\\u5809 堉\\u5810 堐\\u5811 堑\\u5812 堒\\u5813 堓\\u5814 堔\\u5815 堕\\u5816 堖\\u5817 堗\\u5818 堘\\u5819 堙\\u5820 堠\\u5821 堡\\u5822 堢\\u5823 堣\\u5824 堤\\u5825 堥\\u5826 堦\\u5827 堧\\u5828 堨\\u5829 堩\\u5830 堰\\u5831 報\\u5832 堲\\u5833 堳\\u5834 場\\u5835 堵\\u5836 堶\\u5837 堷\\u5838 堸\\u5839 堹\\u5840 塀\\u5841 塁\\u5842 塂\\u5843 塃\\u5844 塄\\u5845 塅\\u5846 塆\\u5847 塇\\u5848 塈\\u5849 塉\\u5850 塐\\u5851 塑\\u5852 塒\\u5853 塓\\u5854 塔\\u5855 塕\\u5856 塖\\u5857 塗\\u5858 塘\\u5859 塙\\u5860 塠\\u5861 塡\\u5862 塢\\u5863 塣\\u5864 塤\\u5865 塥\\u5866 塦\\u5867 塧\\u5868 塨\\u5869 塩\\u5870 塰\\u5871 塱\\u5872 塲\\u5873 塳\\u5874 塴\\u5875 塵\\u5876 塶\\u5877 塷\\u5878 塸\\u5879 塹\\u5880 墀\\u5881 墁\\u5882 墂\\u5883 境\\u5884 墄\\u5885 墅\\u5886 墆\\u5887 墇\\u5888 墈\\u5889 墉\\u5890 墐\\u5891 墑\\u5892 墒\\u5893 墓\\u5894 墔\\u5895 墕\\u5896 墖\\u5897 増\\u5898 墘\\u5899 墙\\u5900 夀\\u5901 夁\\u5902 夂\\u5903 夃\\u5904 处\\u5905 夅\\u5906 夆\\u5907 备\\u5908 夈\\u5909 変\\u5910 夐\\u5911 夑\\u5912 夒\\u5913 夓\\u5914 夔\\u5915 夕\\u5916 外\\u5917 夗\\u5918 夘\\u5919 夙\\u5920 夠\\u5921 夡\\u5922 夢\\u5923 夣\\u5924 夤\\u5925 夥\\u5926 夦\\u5927 大\\u5928 夨\\u5929 天\\u5930 夰\\u5931 失\\u5932 夲\\u5933 夳\\u5934 头\\u5935 夵\\u5936 夶\\u5937 夷\\u5938 夸\\u5939 夹\\u5940 奀\\u5941 奁\\u5942 奂\\u5943 奃\\u5944 奄\\u5945 奅\\u5946 奆\\u5947 奇\\u5948 奈\\u5949 奉\\u5950 奐\\u5951 契\\u5952 奒\\u5953 奓\\u5954 奔\\u5955 奕\\u5956 奖\\u5957 套\\u5958 奘\\u5959 奙\\u5960 奠\\u5961 奡\\u5962 奢\\u5963 奣\\u5964 奤\\u5965 奥\\u5966 奦\\u5967 奧\\u5968 奨\\u5969 奩\\u5970 奰\\u5971 奱\\u5972 奲\\u5973 女\\u5974 奴\\u5975 奵\\u5976 奶\\u5977 奷\\u5978 奸\\u5979 她\\u5980 妀\\u5981 妁\\u5982 如\\u5983 妃\\u5984 妄\\u5985 妅\\u5986 妆\\u5987 妇\\u5988 妈\\u5989 妉\\u5990 妐\\u5991 妑\\u5992 妒\\u5993 妓\\u5994 妔\\u5995 妕\\u5996 妖\\u5997 妗\\u5998 妘\\u5999 妙\\u6000 怀\\u6001 态\\u6002 怂\\u6003 怃\\u6004 怄\\u6005 怅\\u6006 怆\\u6007 怇\\u6008 怈\\u6009 怉\\u6010 怐\\u6011 怑\\u6012 怒\\u6013 怓\\u6014 怔\\u6015 怕\\u6016 怖\\u6017 怗\\u6018 怘\\u6019 怙\\u6020 怠\\u6021 怡\\u6022 怢\\u6023 怣\\u6024 怤\\u6025 急\\u6026 怦\\u6027 性\\u6028 怨\\u6029 怩\\u6030 怰\\u6031 怱\\u6032 怲\\u6033 怳\\u6034 怴\\u6035 怵\\u6036 怶\\u6037 怷\\u6038 怸\\u6039 怹\\u6040 恀\\u6041 恁\\u6042 恂\\u6043 恃\\u6044 恄\\u6045 恅\\u6046 恆\\u6047 恇\\u6048 恈\\u6049 恉\\u6050 恐\\u6051 恑\\u6052 恒\\u6053 恓\\u6054 恔\\u6055 恕\\u6056 恖\\u6057 恗\\u6058 恘\\u6059 恙\\u6060 恠\\u6061 恡\\u6062 恢\\u6063 恣\\u6064 恤\\u6065 恥\\u6066 恦\\u6067 恧\\u6068 恨\\u6069 恩\\u6070 恰\\u6071 恱\\u6072 恲\\u6073 恳\\u6074 恴\\u6075 恵\\u6076 恶\\u6077 恷\\u6078 恸\\u6079 恹\\u6080 悀\\u6081 悁\\u6082 悂\\u6083 悃\\u6084 悄\\u6085 悅\\u6086 悆\\u6087 悇\\u6088 悈\\u6089 悉\\u6090 悐\\u6091 悑\\u6092 悒\\u6093 悓\\u6094 悔\\u6095 悕\\u6096 悖\\u6097 悗\\u6098 悘\\u6099 悙\\u6100 愀\\u6101 愁\\u6102 愂\\u6103 愃\\u6104 愄\\u6105 愅\\u6106 愆\\u6107 愇\\u6108 愈\\u6109 愉\\u6110 愐\\u6111 愑\\u6112 愒\\u6113 愓\\u6114 愔\\u6115 愕\\u6116 愖\\u6117 愗\\u6118 愘\\u6119 愙\\u6120 愠\\u6121 愡\\u6122 愢\\u6123 愣\\u6124 愤\\u6125 愥\\u6126 愦\\u6127 愧\\u6128 愨\\u6129 愩\\u6130 愰\\u6131 愱\\u6132 愲\\u6133 愳\\u6134 愴\\u6135 愵\\u6136 愶\\u6137 愷\\u6138 愸\\u6139 愹\\u6140 慀\\u6141 慁\\u6142 慂\\u6143 慃\\u6144 慄\\u6145 慅\\u6146 慆\\u6147 慇\\u6148 慈\\u6149 慉\\u6150 慐\\u6151 慑\\u6152 慒\\u6153 慓\\u6154 慔\\u6155 慕\\u6156 慖\\u6157 慗\\u6158 慘\\u6159 慙\\u6160 慠\\u6161 慡\\u6162 慢\\u6163 慣\\u6164 慤\\u6165 慥\\u6166 慦\\u6167 慧\\u6168 慨\\u6169 慩\\u6170 慰\\u6171 慱\\u6172 慲\\u6173 慳\\u6174 慴\\u6175 慵\\u6176 慶\\u6177 慷\\u6178 慸\\u6179 慹\\u6180 憀\\u6181 憁\\u6182 憂\\u6183 憃\\u6184 憄\\u6185 憅\\u6186 憆\\u6187 憇\\u6188 憈\\u6189 憉\\u6190 憐\\u6191 憑\\u6192 憒\\u6193 憓\\u6194 憔\\u6195 憕\\u6196 憖\\u6197 憗\\u6198 憘\\u6199 憙\\u6200 戀\\u6201 戁\\u6202 戂\\u6203 戃\\u6204 戄\\u6205 戅\\u6206 戆\\u6207 戇\\u6208 戈\\u6209 戉\\u6210 成\\u6211 我\\u6212 戒\\u6213 戓\\u6214 戔\\u6215 戕\\u6216 或\\u6217 戗\\u6218 战\\u6219 戙\\u6220 戠\\u6221 戡\\u6222 戢\\u6223 戣\\u6224 戤\\u6225 戥\\u6226 戦\\u6227 戧\\u6228 戨\\u6229 戩\\u6230 戰\\u6231 戱\\u6232 戲\\u6233 戳\\u6234 戴\\u6235 戵\\u6236 戶\\u6237 户\\u6238 戸\\u6239 戹\\u6240 所\\u6241 扁\\u6242 扂\\u6243 扃\\u6244 扄\\u6245 扅\\u6246 扆\\u6247 扇\\u6248 扈\\u6249 扉\\u6250 扐\\u6251 扑\\u6252 扒\\u6253 打\\u6254 扔\\u6255 払\\u6256 扖\\u6257 扗\\u6258 托\\u6259 扙\\u6260 扠\\u6261 扡\\u6262 扢\\u6263 扣\\u6264 扤\\u6265 扥\\u6266 扦\\u6267 执\\u6268 扨\\u6269 扩\\u6270 扰\\u6271 扱\\u6272 扲\\u6273 扳\\u6274 扴\\u6275 扵\\u6276 扶\\u6277 扷\\u6278 扸\\u6279 批\\u6280 技\\u6281 抁\\u6282 抂\\u6283 抃\\u6284 抄\\u6285 抅\\u6286 抆\\u6287 抇\\u6288 抈\\u6289 抉\\u6290 抐\\u6291 抑\\u6292 抒\\u6293 抓\\u6294 抔\\u6295 投\\u6296 抖\\u6297 抗\\u6298 折\\u6299 抙\\u6300 挀\\u6301 持\\u6302 挂\\u6303 挃\\u6304 挄\\u6305 挅\\u6306 挆\\u6307 指\\u6308 挈\\u6309 按\\u6310 挐\\u6311 挑\\u6312 挒\\u6313 挓\\u6314 挔\\u6315 挕\\u6316 挖\\u6317 挗\\u6318 挘\\u6319 挙\\u6320 挠\\u6321 挡\\u6322 挢\\u6323 挣\\u6324 挤\\u6325 挥\\u6326 挦\\u6327 挧\\u6328 挨\\u6329 挩\\u6330 挰\\u6331 挱\\u6332 挲\\u6333 挳\\u6334 挴\\u6335 挵\\u6336 挶\\u6337 挷\\u6338 挸\\u6339 挹\\u6340 捀\\u6341 捁\\u6342 捂\\u6343 捃\\u6344 捄\\u6345 捅\\u6346 捆\\u6347 捇\\u6348 捈\\u6349 捉\\u6350 捐\\u6351 捑\\u6352 捒\\u6353 捓\\u6354 捔\\u6355 捕\\u6356 捖\\u6357 捗\\u6358 捘\\u6359 捙\\u6360 捠\\u6361 捡\\u6362 换\\u6363 捣\\u6364 捤\\u6365 捥\\u6366 捦\\u6367 捧\\u6368 捨\\u6369 捩\\u6370 捰\\u6371 捱\\u6372 捲\\u6373 捳\\u6374 捴\\u6375 捵\\u6376 捶\\u6377 捷\\u6378 捸\\u6379 捹\\u6380 掀\\u6381 掁\\u6382 掂\\u6383 掃\\u6384 掄\\u6385 掅\\u6386 掆\\u6387 掇\\u6388 授\\u6389 掉\\u6390 掐\\u6391 掑\\u6392 排\\u6393 掓\\u6394 掔\\u6395 掕\\u6396 掖\\u6397 掗\\u6398 掘\\u6399 掙\\u6400 搀\\u6401 搁\\u6402 搂\\u6403 搃\\u6404 搄\\u6405 搅\\u6406 搆\\u6407 搇\\u6408 搈\\u6409 搉\\u6410 搐\\u6411 搑\\u6412 搒\\u6413 搓\\u6414 搔\\u6415 搕\\u6416 搖\\u6417 搗\\u6418 搘\\u6419 搙\\u6420 搠\\u6421 搡\\u6422 搢\\u6423 搣\\u6424 搤\\u6425 搥\\u6426 搦\\u6427 搧\\u6428 搨\\u6429 搩\\u6430 搰\\u6431 搱\\u6432 搲\\u6433 搳\\u6434 搴\\u6435 搵\\u6436 搶\\u6437 搷\\u6438 搸\\u6439 搹\\u6440 摀\\u6441 摁\\u6442 摂\\u6443 摃\\u6444 摄\\u6445 摅\\u6446 摆\\u6447 摇\\u6448 摈\\u6449 摉\\u6450 摐\\u6451 摑\\u6452 摒\\u6453 摓\\u6454 摔\\u6455 摕\\u6456 摖\\u6457 摗\\u6458 摘\\u6459 摙\\u6460 摠\\u6461 摡\\u6462 摢\\u6463 摣\\u6464 摤\\u6465 摥\\u6466 摦\\u6467 摧\\u6468 摨\\u6469 摩\\u6470 摰\\u6471 摱\\u6472 摲\\u6473 摳\\u6474 摴\\u6475 摵\\u6476 摶\\u6477 摷\\u6478 摸\\u6479 摹\\u6480 撀\\u6481 撁\\u6482 撂\\u6483 撃\\u6484 撄\\u6485 撅\\u6486 撆\\u6487 撇\\u6488 撈\\u6489 撉\\u6490 撐\\u6491 撑\\u6492 撒\\u6493 撓\\u6494 撔\\u6495 撕\\u6496 撖\\u6497 撗\\u6498 撘\\u6499 撙\\u6500 攀\\u6501 攁\\u6502 攂\\u6503 攃\\u6504 攄\\u6505 攅\\u6506 攆\\u6507 攇\\u6508 攈\\u6509 攉\\u6510 攐\\u6511 攑\\u6512 攒\\u6513 攓\\u6514 攔\\u6515 攕\\u6516 攖\\u6517 攗\\u6518 攘\\u6519 攙\\u6520 攠\\u6521 攡\\u6522 攢\\u6523 攣\\u6524 攤\\u6525 攥\\u6526 攦\\u6527 攧\\u6528 攨\\u6529 攩\\u6530 攰\\u6531 攱\\u6532 攲\\u6533 攳\\u6534 攴\\u6535 攵\\u6536 收\\u6537 攷\\u6538 攸\\u6539 改\\u6540 敀\\u6541 敁\\u6542 敂\\u6543 敃\\u6544 敄\\u6545 故\\u6546 敆\\u6547 敇\\u6548 效\\u6549 敉\\u6550 敐\\u6551 救\\u6552 敒\\u6553 敓\\u6554 敔\\u6555 敕\\u6556 敖\\u6557 敗\\u6558 敘\\u6559 教\\u6560 敠\\u6561 敡\\u6562 敢\\u6563 散\\u6564 敤\\u6565 敥\\u6566 敦\\u6567 敧\\u6568 敨\\u6569 敩\\u6570 数\\u6571 敱\\u6572 敲\\u6573 敳\\u6574 整\\u6575 敵\\u6576 敶\\u6577 敷\\u6578 數\\u6579 敹\\u6580 斀\\u6581 斁\\u6582 斂\\u6583 斃\\u6584 斄\\u6585 斅\\u6586 斆\\u6587 文\\u6588 斈\\u6589 斉\\u6590 斐\\u6591 斑\\u6592 斒\\u6593 斓\\u6594 斔\\u6595 斕\\u6596 斖\\u6597 斗\\u6598 斘\\u6599 料\\u6600 昀\\u6601 昁\\u6602 昂\\u6603 昃\\u6604 昄\\u6605 昅\\u6606 昆\\u6607 昇\\u6608 昈\\u6609 昉\\u6610 昐\\u6611 昑\\u6612 昒\\u6613 易\\u6614 昔\\u6615 昕\\u6616 昖\\u6617 昗\\u6618 昘\\u6619 昙\\u6620 映\\u6621 昡\\u6622 昢\\u6623 昣\\u6624 昤\\u6625 春\\u6626 昦\\u6627 昧\\u6628 昨\\u6629 昩\\u6630 昰\\u6631 昱\\u6632 昲\\u6633 昳\\u6634 昴\\u6635 昵\\u6636 昶\\u6637 昷\\u6638 昸\\u6639 昹\\u6640 晀\\u6641 晁\\u6642 時\\u6643 晃\\u6644 晄\\u6645 晅\\u6646 晆\\u6647 晇\\u6648 晈\\u6649 晉\\u6650 晐\\u6651 晑\\u6652 晒\\u6653 晓\\u6654 晔\\u6655 晕\\u6656 晖\\u6657 晗\\u6658 晘\\u6659 晙\\u6660 晠\\u6661 晡\\u6662 晢\\u6663 晣\\u6664 晤\\u6665 晥\\u6666 晦\\u6667 晧\\u6668 晨\\u6669 晩\\u6670 晰\\u6671 晱\\u6672 晲\\u6673 晳\\u6674 晴\\u6675 晵\\u6676 晶\\u6677 晷\\u6678 晸\\u6679 晹\\u6680 暀\\u6681 暁\\u6682 暂\\u6683 暃\\u6684 暄\\u6685 暅\\u6686 暆\\u6687 暇\\u6688 暈\\u6689 暉\\u6690 暐\\u6691 暑\\u6692 暒\\u6693 暓\\u6694 暔\\u6695 暕\\u6696 暖\\u6697 暗\\u6698 暘\\u6699 暙\\u6700 最\\u6701 朁\\u6702 朂\\u6703 會\\u6704 朄\\u6705 朅\\u6706 朆\\u6707 朇\\u6708 月\\u6709 有\\u6710 朐\\u6711 朑\\u6712 朒\\u6713 朓\\u6714 朔\\u6715 朕\\u6716 朖\\u6717 朗\\u6718 朘\\u6719 朙\\u6720 朠\\u6721 朡\\u6722 朢\\u6723 朣\\u6724 朤\\u6725 朥\\u6726 朦\\u6727 朧\\u6728 木\\u6729 朩\\u6730 朰\\u6731 朱\\u6732 朲\\u6733 朳\\u6734 朴\\u6735 朵\\u6736 朶\\u6737 朷\\u6738 朸\\u6739 朹\\u6740 杀\\u6741 杁\\u6742 杂\\u6743 权\\u6744 杄\\u6745 杅\\u6746 杆\\u6747 杇\\u6748 杈\\u6749 杉\\u6750 材\\u6751 村\\u6752 杒\\u6753 杓\\u6754 杔\\u6755 杕\\u6756 杖\\u6757 杗\\u6758 杘\\u6759 杙\\u6760 杠\\u6761 条\\u6762 杢\\u6763 杣\\u6764 杤\\u6765 来\\u6766 杦\\u6767 杧\\u6768 杨\\u6769 杩\\u6770 杰\\u6771 東\\u6772 杲\\u6773 杳\\u6774 杴\\u6775 杵\\u6776 杶\\u6777 杷\\u6778 杸\\u6779 杹\\u6780 枀\\u6781 极\\u6782 枂\\u6783 枃\\u6784 构\\u6785 枅\\u6786 枆\\u6787 枇\\u6788 枈\\u6789 枉\\u6790 析\\u6791 枑\\u6792 枒\\u6793 枓\\u6794 枔\\u6795 枕\\u6796 枖\\u6797 林\\u6798 枘\\u6799 枙\\u6800 栀\\u6801 栁\\u6802 栂\\u6803 栃\\u6804 栄\\u6805 栅\\u6806 栆\\u6807 标\\u6808 栈\\u6809 栉\\u6810 栐\\u6811 树\\u6812 栒\\u6813 栓\\u6814 栔\\u6815 栕\\u6816 栖\\u6817 栗\\u6818 栘\\u6819 栙\\u6820 栠\\u6821 校\\u6822 栢\\u6823 栣\\u6824 栤\\u6825 栥\\u6826 栦\\u6827 栧\\u6828 栨\\u6829 栩\\u6830 栰\\u6831 栱\\u6832 栲\\u6833 栳\\u6834 栴\\u6835 栵\\u6836 栶\\u6837 样\\u6838 核\\u6839 根\\u6840 桀\\u6841 桁\\u6842 桂\\u6843 桃\\u6844 桄\\u6845 桅\\u6846 框\\u6847 桇\\u6848 案\\u6849 桉\\u6850 桐\\u6851 桑\\u6852 桒\\u6853 桓\\u6854 桔\\u6855 桕\\u6856 桖\\u6857 桗\\u6858 桘\\u6859 桙\\u6860 桠\\u6861 桡\\u6862 桢\\u6863 档\\u6864 桤\\u6865 桥\\u6866 桦\\u6867 桧\\u6868 桨\\u6869 桩\\u6870 桰\\u6871 桱\\u6872 桲\\u6873 桳\\u6874 桴\\u6875 桵\\u6876 桶\\u6877 桷\\u6878 桸\\u6879 桹\\u6880 梀\\u6881 梁\\u6882 梂\\u6883 梃\\u6884 梄\\u6885 梅\\u6886 梆\\u6887 梇\\u6888 梈\\u6889 梉\\u6890 梐\\u6891 梑\\u6892 梒\\u6893 梓\\u6894 梔\\u6895 梕\\u6896 梖\\u6897 梗\\u6898 梘\\u6899 梙\\u6900 椀\\u6901 椁\\u6902 椂\\u6903 椃\\u6904 椄\\u6905 椅\\u6906 椆\\u6907 椇\\u6908 椈\\u6909 椉\\u6910 椐\\u6911 椑\\u6912 椒\\u6913 椓\\u6914 椔\\u6915 椕\\u6916 椖\\u6917 椗\\u6918 椘\\u6919 椙\\u6920 椠\\u6921 椡\\u6922 椢\\u6923 椣\\u6924 椤\\u6925 椥\\u6926 椦\\u6927 椧\\u6928 椨\\u6929 椩\\u6930 椰\\u6931 椱\\u6932 椲\\u6933 椳\\u6934 椴\\u6935 椵\\u6936 椶\\u6937 椷\\u6938 椸\\u6939 椹\\u6940 楀\\u6941 楁\\u6942 楂\\u6943 楃\\u6944 楄\\u6945 楅\\u6946 楆\\u6947 楇\\u6948 楈\\u6949 楉\\u6950 楐\\u6951 楑\\u6952 楒\\u6953 楓\\u6954 楔\\u6955 楕\\u6956 楖\\u6957 楗\\u6958 楘\\u6959 楙\\u6960 楠\\u6961 楡\\u6962 楢\\u6963 楣\\u6964 楤\\u6965 楥\\u6966 楦\\u6967 楧\\u6968 楨\\u6969 楩\\u6970 楰\\u6971 楱\\u6972 楲\\u6973 楳\\u6974 楴\\u6975 極\\u6976 楶\\u6977 楷\\u6978 楸\\u6979 楹\\u6980 榀\\u6981 榁\\u6982 概\\u6983 榃\\u6984 榄\\u6985 榅\\u6986 榆\\u6987 榇\\u6988 榈\\u6989 榉\\u6990 榐\\u6991 榑\\u6992 榒\\u6993 榓\\u6994 榔\\u6995 榕\\u6996 榖\\u6997 榗\\u6998 榘\\u6999 榙\\u7000 瀀\\u7001 瀁\\u7002 瀂\\u7003 瀃\\u7004 瀄\\u7005 瀅\\u7006 瀆\\u7007 瀇\\u7008 瀈\\u7009 瀉\\u7010 瀐\\u7011 瀑\\u7012 瀒\\u7013 瀓\\u7014 瀔\\u7015 瀕\\u7016 瀖\\u7017 瀗\\u7018 瀘\\u7019 瀙\\u7020 瀠\\u7021 瀡\\u7022 瀢\\u7023 瀣\\u7024 瀤\\u7025 瀥\\u7026 瀦\\u7027 瀧\\u7028 瀨\\u7029 瀩\\u7030 瀰\\u7031 瀱\\u7032 瀲\\u7033 瀳\\u7034 瀴\\u7035 瀵\\u7036 瀶\\u7037 瀷\\u7038 瀸\\u7039 瀹\\u7040 灀\\u7041 灁\\u7042 灂\\u7043 灃\\u7044 灄\\u7045 灅\\u7046 灆\\u7047 灇\\u7048 灈\\u7049 灉\\u7050 灐\\u7051 灑\\u7052 灒\\u7053 灓\\u7054 灔\\u7055 灕\\u7056 灖\\u7057 灗\\u7058 灘\\u7059 灙\\u7060 灠\\u7061 灡\\u7062 灢\\u7063 灣\\u7064 灤\\u7065 灥\\u7066 灦\\u7067 灧\\u7068 灨\\u7069 灩\\u7070 灰\\u7071 灱\\u7072 灲\\u7073 灳\\u7074 灴\\u7075 灵\\u7076 灶\\u7077 灷\\u7078 灸\\u7079 灹\\u7080 炀\\u7081 炁\\u7082 炂\\u7083 炃\\u7084 炄\\u7085 炅\\u7086 炆\\u7087 炇\\u7088 炈\\u7089 炉\\u7090 炐\\u7091 炑\\u7092 炒\\u7093 炓\\u7094 炔\\u7095 炕\\u7096 炖\\u7097 炗\\u7098 炘\\u7099 炙\\u7100 焀\\u7101 焁\\u7102 焂\\u7103 焃\\u7104 焄\\u7105 焅\\u7106 焆\\u7107 焇\\u7108 焈\\u7109 焉\\u7110 焐\\u7111 焑\\u7112 焒\\u7113 焓\\u7114 焔\\u7115 焕\\u7116 焖\\u7117 焗\\u7118 焘\\u7119 焙\\u7120 焠\\u7121 無\\u7122 焢\\u7123 焣\\u7124 焤\\u7125 焥\\u7126 焦\\u7127 焧\\u7128 焨\\u7129 焩\\u7130 焰\\u7131 焱\\u7132 焲\\u7133 焳\\u7134 焴\\u7135 焵\\u7136 然\\u7137 焷\\u7138 焸\\u7139 焹\\u7140 煀\\u7141 煁\\u7142 煂\\u7143 煃\\u7144 煄\\u7145 煅\\u7146 煆\\u7147 煇\\u7148 煈\\u7149 煉\\u7150 煐\\u7151 煑\\u7152 煒\\u7153 煓\\u7154 煔\\u7155 煕\\u7156 煖\\u7157 煗\\u7158 煘\\u7159 煙\\u7160 煠\\u7161 煡\\u7162 煢\\u7163 煣\\u7164 煤\\u7165 煥\\u7166 煦\\u7167 照\\u7168 煨\\u7169 煩\\u7170 煰\\u7171 煱\\u7172 煲\\u7173 煳\\u7174 煴\\u7175 煵\\u7176 煶\\u7177 煷\\u7178 煸\\u7179 煹\\u7180 熀\\u7181 熁\\u7182 熂\\u7183 熃\\u7184 熄\\u7185 熅\\u7186 熆\\u7187 熇\\u7188 熈\\u7189 熉\\u7190 熐\\u7191 熑\\u7192 熒\\u7193 熓\\u7194 熔\\u7195 熕\\u7196 熖\\u7197 熗\\u7198 熘\\u7199 熙\\u7200 爀\\u7201 爁\\u7202 爂\\u7203 爃\\u7204 爄\\u7205 爅\\u7206 爆\\u7207 爇\\u7208 爈\\u7209 爉\\u7210 爐\\u7211 爑\\u7212 爒\\u7213 爓\\u7214 爔\\u7215 爕\\u7216 爖\\u7217 爗\\u7218 爘\\u7219 爙\\u7220 爠\\u7221 爡\\u7222 爢\\u7223 爣\\u7224 爤\\u7225 爥\\u7226 爦\\u7227 爧\\u7228 爨\\u7229 爩\\u7230 爰\\u7231 爱\\u7232 爲\\u7233 爳\\u7234 爴\\u7235 爵\\u7236 父\\u7237 爷\\u7238 爸\\u7239 爹\\u7240 牀\\u7241 牁\\u7242 牂\\u7243 牃\\u7244 牄\\u7245 牅\\u7246 牆\\u7247 片\\u7248 版\\u7249 牉\\u7250 牐\\u7251 牑\\u7252 牒\\u7253 牓\\u7254 牔\\u7255 牕\\u7256 牖\\u7257 牗\\u7258 牘\\u7259 牙\\u7260 牠\\u7261 牡\\u7262 牢\\u7263 牣\\u7264 牤\\u7265 牥\\u7266 牦\\u7267 牧\\u7268 牨\\u7269 物\\u7270 牰\\u7271 牱\\u7272 牲\\u7273 牳\\u7274 牴\\u7275 牵\\u7276 牶\\u7277 牷\\u7278 牸\\u7279 特\\u7280 犀\\u7281 犁\\u7282 犂\\u7283 犃\\u7284 犄\\u7285 犅\\u7286 犆\\u7287 犇\\u7288 犈\\u7289 犉\\u7290 犐\\u7291 犑\\u7292 犒\\u7293 犓\\u7294 犔\\u7295 犕\\u7296 犖\\u7297 犗\\u7298 犘\\u7299 犙\\u7300 猀\\u7301 猁\\u7302 猂\\u7303 猃\\u7304 猄\\u7305 猅\\u7306 猆\\u7307 猇\\u7308 猈\\u7309 猉\\u7310 猐\\u7311 猑\\u7312 猒\\u7313 猓\\u7314 猔\\u7315 猕\\u7316 猖\\u7317 猗\\u7318 猘\\u7319 猙\\u7320 猠\\u7321 猡\\u7322 猢\\u7323 猣\\u7324 猤\\u7325 猥\\u7326 猦\\u7327 猧\\u7328 猨\\u7329 猩\\u7330 猰\\u7331 猱\\u7332 猲\\u7333 猳\\u7334 猴\\u7335 猵\\u7336 猶\\u7337 猷\\u7338 猸\\u7339 猹\\u7340 獀\\u7341 獁\\u7342 獂\\u7343 獃\\u7344 獄\\u7345 獅\\u7346 獆\\u7347 獇\\u7348 獈\\u7349 獉\\u7350 獐\\u7351 獑\\u7352 獒\\u7353 獓\\u7354 獔\\u7355 獕\\u7356 獖\\u7357 獗\\u7358 獘\\u7359 獙\\u7360 獠\\u7361 獡\\u7362 獢\\u7363 獣\\u7364 獤\\u7365 獥\\u7366 獦\\u7367 獧\\u7368 獨\\u7369 獩\\u7370 獰\\u7371 獱\\u7372 獲\\u7373 獳\\u7374 獴\\u7375 獵\\u7376 獶\\u7377 獷\\u7378 獸\\u7379 獹\\u7380 玀\\u7381 玁\\u7382 玂\\u7383 玃\\u7384 玄\\u7385 玅\\u7386 玆\\u7387 率\\u7388 玈\\u7389 玉\\u7390 玐\\u7391 玑\\u7392 玒\\u7393 玓\\u7394 玔\\u7395 玕\\u7396 玖\\u7397 玗\\u7398 玘\\u7399 玙\\u7400 琀\\u7401 琁\\u7402 琂\\u7403 球\\u7404 琄\\u7405 琅\\u7406 理\\u7407 琇\\u7408 琈\\u7409 琉\\u7410 琐\\u7411 琑\\u7412 琒\\u7413 琓\\u7414 琔\\u7415 琕\\u7416 琖\\u7417 琗\\u7418 琘\\u7419 琙\\u7420 琠\\u7421 琡\\u7422 琢\\u7423 琣\\u7424 琤\\u7425 琥\\u7426 琦\\u7427 琧\\u7428 琨\\u7429 琩\\u7430 琰\\u7431 琱\\u7432 琲\\u7433 琳\\u7434 琴\\u7435 琵\\u7436 琶\\u7437 琷\\u7438 琸\\u7439 琹\\u7440 瑀\\u7441 瑁\\u7442 瑂\\u7443 瑃\\u7444 瑄\\u7445 瑅\\u7446 瑆\\u7447 瑇\\u7448 瑈\\u7449 瑉\\u7450 瑐\\u7451 瑑\\u7452 瑒\\u7453 瑓\\u7454 瑔\\u7455 瑕\\u7456 瑖\\u7457 瑗\\u7458 瑘\\u7459 瑙\\u7460 瑠\\u7461 瑡\\u7462 瑢\\u7463 瑣\\u7464 瑤\\u7465 瑥\\u7466 瑦\\u7467 瑧\\u7468 瑨\\u7469 瑩\\u7470 瑰\\u7471 瑱\\u7472 瑲\\u7473 瑳\\u7474 瑴\\u7475 瑵\\u7476 瑶\\u7477 瑷\\u7478 瑸\\u7479 瑹\\u7480 璀\\u7481 璁\\u7482 璂\\u7483 璃\\u7484 璄\\u7485 璅\\u7486 璆\\u7487 璇\\u7488 璈\\u7489 璉\\u7490 璐\\u7491 璑\\u7492 璒\\u7493 璓\\u7494 璔\\u7495 璕\\u7496 璖\\u7497 璗\\u7498 璘\\u7499 璙\\u7500 甀\\u7501 甁\\u7502 甂\\u7503 甃\\u7504 甄\\u7505 甅\\u7506 甆\\u7507 甇\\u7508 甈\\u7509 甉\\u7510 甐\\u7511 甑\\u7512 甒\\u7513 甓\\u7514 甔\\u7515 甕\\u7516 甖\\u7517 甗\\u7518 甘\\u7519 甙\\u7520 甠\\u7521 甡\\u7522 產\\u7523 産\\u7524 甤\\u7525 甥\\u7526 甦\\u7527 甧\\u7528 用\\u7529 甩\\u7530 田\\u7531 由\\u7532 甲\\u7533 申\\u7534 甴\\u7535 电\\u7536 甶\\u7537 男\\u7538 甸\\u7539 甹\\u7540 畀\\u7541 畁\\u7542 畂\\u7543 畃\\u7544 畄\\u7545 畅\\u7546 畆\\u7547 畇\\u7548 畈\\u7549 畉\\u7550 畐\\u7551 畑\\u7552 畒\\u7553 畓\\u7554 畔\\u7555 畕\\u7556 畖\\u7557 畗\\u7558 畘\\u7559 留\\u7560 畠\\u7561 畡\\u7562 畢\\u7563 畣\\u7564 畤\\u7565 略\\u7566 畦\\u7567 畧\\u7568 畨\\u7569 畩\\u7570 異\\u7571 畱\\u7572 畲\\u7573 畳\\u7574 畴\\u7575 畵\\u7576 當\\u7577 畷\\u7578 畸\\u7579 畹\\u7580 疀\\u7581 疁\\u7582 疂\\u7583 疃\\u7584 疄\\u7585 疅\\u7586 疆\\u7587 疇\\u7588 疈\\u7589 疉\\u7590 疐\\u7591 疑\\u7592 疒\\u7593 疓\\u7594 疔\\u7595 疕\\u7596 疖\\u7597 疗\\u7598 疘\\u7599 疙\\u7600 瘀\\u7601 瘁\\u7602 瘂\\u7603 瘃\\u7604 瘄\\u7605 瘅\\u7606 瘆\\u7607 瘇\\u7608 瘈\\u7609 瘉\\u7610 瘐\\u7611 瘑\\u7612 瘒\\u7613 瘓\\u7614 瘔\\u7615 瘕\\u7616 瘖\\u7617 瘗\\u7618 瘘\\u7619 瘙\\u7620 瘠\\u7621 瘡\\u7622 瘢\\u7623 瘣\\u7624 瘤\\u7625 瘥\\u7626 瘦\\u7627 瘧\\u7628 瘨\\u7629 瘩\\u7630 瘰\\u7631 瘱\\u7632 瘲\\u7633 瘳\\u7634 瘴\\u7635 瘵\\u7636 瘶\\u7637 瘷\\u7638 瘸\\u7639 瘹\\u7640 癀\\u7641 癁\\u7642 療\\u7643 癃\\u7644 癄\\u7645 癅\\u7646 癆\\u7647 癇\\u7648 癈\\u7649 癉\\u7650 癐\\u7651 癑\\u7652 癒\\u7653 癓\\u7654 癔\\u7655 癕\\u7656 癖\\u7657 癗\\u7658 癘\\u7659 癙\\u7660 癠\\u7661 癡\\u7662 癢\\u7663 癣\\u7664 癤\\u7665 癥\\u7666 癦\\u7667 癧\\u7668 癨\\u7669 癩\\u7670 癰\\u7671 癱\\u7672 癲\\u7673 癳\\u7674 癴\\u7675 癵\\u7676 癶\\u7677 癷\\u7678 癸\\u7679 癹\\u7680 皀\\u7681 皁\\u7682 皂\\u7683 皃\\u7684 的\\u7685 皅\\u7686 皆\\u7687 皇\\u7688 皈\\u7689 皉\\u7690 皐\\u7691 皑\\u7692 皒\\u7693 皓\\u7694 皔\\u7695 皕\\u7696 皖\\u7697 皗\\u7698 皘\\u7699 皙\\u7700 眀\\u7701 省\\u7702 眂\\u7703 眃\\u7704 眄\\u7705 眅\\u7706 眆\\u7707 眇\\u7708 眈\\u7709 眉\\u7710 眐\\u7711 眑\\u7712 眒\\u7713 眓\\u7714 眔\\u7715 眕\\u7716 眖\\u7717 眗\\u7718 眘\\u7719 眙\\u7720 眠\\u7721 眡\\u7722 眢\\u7723 眣\\u7724 眤\\u7725 眥\\u7726 眦\\u7727 眧\\u7728 眨\\u7729 眩\\u7730 眰\\u7731 眱\\u7732 眲\\u7733 眳\\u7734 眴\\u7735 眵\\u7736 眶\\u7737 眷\\u7738 眸\\u7739 眹\\u7740 着\\u7741 睁\\u7742 睂\\u7743 睃\\u7744 睄\\u7745 睅\\u7746 睆\\u7747 睇\\u7748 睈\\u7749 睉\\u7750 睐\\u7751 睑\\u7752 睒\\u7753 睓\\u7754 睔\\u7755 睕\\u7756 睖\\u7757 睗\\u7758 睘\\u7759 睙\\u7760 睠\\u7761 睡\\u7762 睢\\u7763 督\\u7764 睤\\u7765 睥\\u7766 睦\\u7767 睧\\u7768 睨\\u7769 睩\\u7770 睰\\u7771 睱\\u7772 睲\\u7773 睳\\u7774 睴\\u7775 睵\\u7776 睶\\u7777 睷\\u7778 睸\\u7779 睹\\u7780 瞀\\u7781 瞁\\u7782 瞂\\u7783 瞃\\u7784 瞄\\u7785 瞅\\u7786 瞆\\u7787 瞇\\u7788 瞈\\u7789 瞉\\u7790 瞐\\u7791 瞑\\u7792 瞒\\u7793 瞓\\u7794 瞔\\u7795 瞕\\u7796 瞖\\u7797 瞗\\u7798 瞘\\u7799 瞙\\u7800 砀\\u7801 码\\u7802 砂\\u7803 砃\\u7804 砄\\u7805 砅\\u7806 砆\\u7807 砇\\u7808 砈\\u7809 砉\\u7810 砐\\u7811 砑\\u7812 砒\\u7813 砓\\u7814 研\\u7815 砕\\u7816 砖\\u7817 砗\\u7818 砘\\u7819 砙\\u7820 砠\\u7821 砡\\u7822 砢\\u7823 砣\\u7824 砤\\u7825 砥\\u7826 砦\\u7827 砧\\u7828 砨\\u7829 砩\\u7830 砰\\u7831 砱\\u7832 砲\\u7833 砳\\u7834 破\\u7835 砵\\u7836 砶\\u7837 砷\\u7838 砸\\u7839 砹\\u7840 础\\u7841 硁\\u7842 硂\\u7843 硃\\u7844 硄\\u7845 硅\\u7846 硆\\u7847 硇\\u7848 硈\\u7849 硉\\u7850 硐\\u7851 硑\\u7852 硒\\u7853 硓\\u7854 硔\\u7855 硕\\u7856 硖\\u7857 硗\\u7858 硘\\u7859 硙\\u7860 硠\\u7861 硡\\u7862 硢\\u7863 硣\\u7864 硤\\u7865 硥\\u7866 硦\\u7867 硧\\u7868 硨\\u7869 硩\\u7870 硰\\u7871 硱\\u7872 硲\\u7873 硳\\u7874 硴\\u7875 硵\\u7876 硶\\u7877 硷\\u7878 硸\\u7879 硹\\u7880 碀\\u7881 碁\\u7882 碂\\u7883 碃\\u7884 碄\\u7885 碅\\u7886 碆\\u7887 碇\\u7888 碈\\u7889 碉\\u7890 碐\\u7891 碑\\u7892 碒\\u7893 碓\\u7894 碔\\u7895 碕\\u7896 碖\\u7897 碗\\u7898 碘\\u7899 碙\\u7900 礀\\u7901 礁\\u7902 礂\\u7903 礃\\u7904 礄\\u7905 礅\\u7906 礆\\u7907 礇\\u7908 礈\\u7909 礉\\u7910 礐\\u7911 礑\\u7912 礒\\u7913 礓\\u7914 礔\\u7915 礕\\u7916 礖\\u7917 礗\\u7918 礘\\u7919 礙\\u7920 礠\\u7921 礡\\u7922 礢\\u7923 礣\\u7924 礤\\u7925 礥\\u7926 礦\\u7927 礧\\u7928 礨\\u7929 礩\\u7930 礰\\u7931 礱\\u7932 礲\\u7933 礳\\u7934 礴\\u7935 礵\\u7936 礶\\u7937 礷\\u7938 礸\\u7939 礹\\u7940 祀\\u7941 祁\\u7942 祂\\u7943 祃\\u7944 祄\\u7945 祅\\u7946 祆\\u7947 祇\\u7948 祈\\u7949 祉\\u7950 祐\\u7951 祑\\u7952 祒\\u7953 祓\\u7954 祔\\u7955 祕\\u7956 祖\\u7957 祗\\u7958 祘\\u7959 祙\\u7960 祠\\u7961 祡\\u7962 祢\\u7963 祣\\u7964 祤\\u7965 祥\\u7966 祦\\u7967 祧\\u7968 票\\u7969 祩\\u7970 祰\\u7971 祱\\u7972 祲\\u7973 祳\\u7974 祴\\u7975 祵\\u7976 祶\\u7977 祷\\u7978 祸\\u7979 祹\\u7980 禀\\u7981 禁\\u7982 禂\\u7983 禃\\u7984 禄\\u7985 禅\\u7986 禆\\u7987 禇\\u7988 禈\\u7989 禉\\u7990 禐\\u7991 禑\\u7992 禒\\u7993 禓\\u7994 禔\\u7995 禕\\u7996 禖\\u7997 禗\\u7998 禘\\u7999 禙\\u8000 耀\\u8001 老\\u8002 耂\\u8003 考\\u8004 耄\\u8005 者\\u8006 耆\\u8007 耇\\u8008 耈\\u8009 耉\\u8010 耐\\u8011 耑\\u8012 耒\\u8013 耓\\u8014 耔\\u8015 耕\\u8016 耖\\u8017 耗\\u8018 耘\\u8019 耙\\u8020 耠\\u8021 耡\\u8022 耢\\u8023 耣\\u8024 耤\\u8025 耥\\u8026 耦\\u8027 耧\\u8028 耨\\u8029 耩\\u8030 耰\\u8031 耱\\u8032 耲\\u8033 耳\\u8034 耴\\u8035 耵\\u8036 耶\\u8037 耷\\u8038 耸\\u8039 耹\\u8040 聀\\u8041 聁\\u8042 聂\\u8043 聃\\u8044 聄\\u8045 聅\\u8046 聆\\u8047 聇\\u8048 聈\\u8049 聉\\u8050 聐\\u8051 聑\\u8052 聒\\u8053 聓\\u8054 联\\u8055 聕\\u8056 聖\\u8057 聗\\u8058 聘\\u8059 聙\\u8060 聠\\u8061 聡\\u8062 聢\\u8063 聣\\u8064 聤\\u8065 聥\\u8066 聦\\u8067 聧\\u8068 聨\\u8069 聩\\u8070 聰\\u8071 聱\\u8072 聲\\u8073 聳\\u8074 聴\\u8075 聵\\u8076 聶\\u8077 職\\u8078 聸\\u8079 聹\\u8080 肀\\u8081 肁\\u8082 肂\\u8083 肃\\u8084 肄\\u8085 肅\\u8086 肆\\u8087 肇\\u8088 肈\\u8089 肉\\u8090 肐\\u8091 肑\\u8092 肒\\u8093 肓\\u8094 肔\\u8095 肕\\u8096 肖\\u8097 肗\\u8098 肘\\u8099 肙\\u8100 脀\\u8101 脁\\u8102 脂\\u8103 脃\\u8104 脄\\u8105 脅\\u8106 脆\\u8107 脇\\u8108 脈\\u8109 脉\\u8110 脐\\u8111 脑\\u8112 脒\\u8113 脓\\u8114 脔\\u8115 脕\\u8116 脖\\u8117 脗\\u8118 脘\\u8119 脙\\u8120 脠\\u8121 脡\\u8122 脢\\u8123 脣\\u8124 脤\\u8125 脥\\u8126 脦\\u8127 脧\\u8128 脨\\u8129 脩\\u8130 脰\\u8131 脱\\u8132 脲\\u8133 脳\\u8134 脴\\u8135 脵\\u8136 脶\\u8137 脷\\u8138 脸\\u8139 脹\\u8140 腀\\u8141 腁\\u8142 腂\\u8143 腃\\u8144 腄\\u8145 腅\\u8146 腆\\u8147 腇\\u8148 腈\\u8149 腉\\u8150 腐\\u8151 腑\\u8152 腒\\u8153 腓\\u8154 腔\\u8155 腕\\u8156 腖\\u8157 腗\\u8158 腘\\u8159 腙\\u8160 腠\\u8161 腡\\u8162 腢\\u8163 腣\\u8164 腤\\u8165 腥\\u8166 腦\\u8167 腧\\u8168 腨\\u8169 腩\\u8170 腰\\u8171 腱\\u8172 腲\\u8173 腳\\u8174 腴\\u8175 腵\\u8176 腶\\u8177 腷\\u8178 腸\\u8179 腹\\u8180 膀\\u8181 膁\\u8182 膂\\u8183 膃\\u8184 膄\\u8185 膅\\u8186 膆\\u8187 膇\\u8188 膈\\u8189 膉\\u8190 膐\\u8191 膑\\u8192 膒\\u8193 膓\\u8194 膔\\u8195 膕\\u8196 膖\\u8197 膗\\u8198 膘\\u8199 膙\\u8200 舀\\u8201 舁\\u8202 舂\\u8203 舃\\u8204 舄\\u8205 舅\\u8206 舆\\u8207 與\\u8208 興\\u8209 舉\\u8210 舐\\u8211 舑\\u8212 舒\\u8213 舓\\u8214 舔\\u8215 舕\\u8216 舖\\u8217 舗\\u8218 舘\\u8219 舙\\u8220 舠\\u8221 舡\\u8222 舢\\u8223 舣\\u8224 舤\\u8225 舥\\u8226 舦\\u8227 舧\\u8228 舨\\u8229 舩\\u8230 舰\\u8231 舱\\u8232 舲\\u8233 舳\\u8234 舴\\u8235 舵\\u8236 舶\\u8237 舷\\u8238 舸\\u8239 船\\u8240 艀\\u8241 艁\\u8242 艂\\u8243 艃\\u8244 艄\\u8245 艅\\u8246 艆\\u8247 艇\\u8248 艈\\u8249 艉\\u8250 艐\\u8251 艑\\u8252 艒\\u8253 艓\\u8254 艔\\u8255 艕\\u8256 艖\\u8257 艗\\u8258 艘\\u8259 艙\\u8260 艠\\u8261 艡\\u8262 艢\\u8263 艣\\u8264 艤\\u8265 艥\\u8266 艦\\u8267 艧\\u8268 艨\\u8269 艩\\u8270 艰\\u8271 艱\\u8272 色\\u8273 艳\\u8274 艴\\u8275 艵\\u8276 艶\\u8277 艷\\u8278 艸\\u8279 艹\\u8280 芀\\u8281 芁\\u8282 节\\u8283 芃\\u8284 芄\\u8285 芅\\u8286 芆\\u8287 芇\\u8288 芈\\u8289 芉\\u8290 芐\\u8291 芑\\u8292 芒\\u8293 芓\\u8294 芔\\u8295 芕\\u8296 芖\\u8297 芗\\u8298 芘\\u8299 芙\\u8300 茀\\u8301 茁\\u8302 茂\\u8303 范\\u8304 茄\\u8305 茅\\u8306 茆\\u8307 茇\\u8308 茈\\u8309 茉\\u8310 茐\\u8311 茑\\u8312 茒\\u8313 茓\\u8314 茔\\u8315 茕\\u8316 茖\\u8317 茗\\u8318 茘\\u8319 茙\\u8320 茠\\u8321 茡\\u8322 茢\\u8323 茣\\u8324 茤\\u8325 茥\\u8326 茦\\u8327 茧\\u8328 茨\\u8329 茩\\u8330 茰\\u8331 茱\\u8332 茲\\u8333 茳\\u8334 茴\\u8335 茵\\u8336 茶\\u8337 茷\\u8338 茸\\u8339 茹\\u8340 荀\\u8341 荁\\u8342 荂\\u8343 荃\\u8344 荄\\u8345 荅\\u8346 荆\\u8347 荇\\u8348 荈\\u8349 草\\u8350 荐\\u8351 荑\\u8352 荒\\u8353 荓\\u8354 荔\\u8355 荕\\u8356 荖\\u8357 荗\\u8358 荘\\u8359 荙\\u8360 荠\\u8361 荡\\u8362 荢\\u8363 荣\\u8364 荤\\u8365 荥\\u8366 荦\\u8367 荧\\u8368 荨\\u8369 荩\\u8370 荰\\u8371 荱\\u8372 荲\\u8373 荳\\u8374 荴\\u8375 荵\\u8376 荶\\u8377 荷\\u8378 荸\\u8379 荹\\u8380 莀\\u8381 莁\\u8382 莂\\u8383 莃\\u8384 莄\\u8385 莅\\u8386 莆\\u8387 莇\\u8388 莈\\u8389 莉\\u8390 莐\\u8391 莑\\u8392 莒\\u8393 莓\\u8394 莔\\u8395 莕\\u8396 莖\\u8397 莗\\u8398 莘\\u8399 莙\\u8400 萀\\u8401 萁\\u8402 萂\\u8403 萃\\u8404 萄\\u8405 萅\\u8406 萆\\u8407 萇\\u8408 萈\\u8409 萉\\u8410 萐\\u8411 萑\\u8412 萒\\u8413 萓\\u8414 萔\\u8415 萕\\u8416 萖\\u8417 萗\\u8418 萘\\u8419 萙\\u8420 萠\\u8421 萡\\u8422 萢\\u8423 萣\\u8424 萤\\u8425 营\\u8426 萦\\u8427 萧\\u8428 萨\\u8429 萩\\u8430 萰\\u8431 萱\\u8432 萲\\u8433 萳\\u8434 萴\\u8435 萵\\u8436 萶\\u8437 萷\\u8438 萸\\u8439 萹\\u8440 葀\\u8441 葁\\u8442 葂\\u8443 葃\\u8444 葄\\u8445 葅\\u8446 葆\\u8447 葇\\u8448 葈\\u8449 葉\\u8450 葐\\u8451 葑\\u8452 葒\\u8453 葓\\u8454 葔\\u8455 葕\\u8456 葖\\u8457 著\\u8458 葘\\u8459 葙\\u8460 葠\\u8461 葡\\u8462 葢\\u8463 董\\u8464 葤\\u8465 葥\\u8466 葦\\u8467 葧\\u8468 葨\\u8469 葩\\u8470 葰\\u8471 葱\\u8472 葲\\u8473 葳\\u8474 葴\\u8475 葵\\u8476 葶\\u8477 葷\\u8478 葸\\u8479 葹\\u8480 蒀\\u8481 蒁\\u8482 蒂\\u8483 蒃\\u8484 蒄\\u8485 蒅\\u8486 蒆\\u8487 蒇\\u8488 蒈\\u8489 蒉\\u8490 蒐\\u8491 蒑\\u8492 蒒\\u8493 蒓\\u8494 蒔\\u8495 蒕\\u8496 蒖\\u8497 蒗\\u8498 蒘\\u8499 蒙\\u8500 蔀\\u8501 蔁\\u8502 蔂\\u8503 蔃\\u8504 蔄\\u8505 蔅\\u8506 蔆\\u8507 蔇\\u8508 蔈\\u8509 蔉\\u8510 蔐\\u8511 蔑\\u8512 蔒\\u8513 蔓\\u8514 蔔\\u8515 蔕\\u8516 蔖\\u8517 蔗\\u8518 蔘\\u8519 蔙\\u8520 蔠\\u8521 蔡\\u8522 蔢\\u8523 蔣\\u8524 蔤\\u8525 蔥\\u8526 蔦\\u8527 蔧\\u8528 蔨\\u8529 蔩\\u8530 蔰\\u8531 蔱\\u8532 蔲\\u8533 蔳\\u8534 蔴\\u8535 蔵\\u8536 蔶\\u8537 蔷\\u8538 蔸\\u8539 蔹\\u8540 蕀\\u8541 蕁\\u8542 蕂\\u8543 蕃\\u8544 蕄\\u8545 蕅\\u8546 蕆\\u8547 蕇\\u8548 蕈\\u8549 蕉\\u8550 蕐\\u8551 蕑\\u8552 蕒\\u8553 蕓\\u8554 蕔\\u8555 蕕\\u8556 蕖\\u8557 蕗\\u8558 蕘\\u8559 蕙\\u8560 蕠\\u8561 蕡\\u8562 蕢\\u8563 蕣\\u8564 蕤\\u8565 蕥\\u8566 蕦\\u8567 蕧\\u8568 蕨\\u8569 蕩\\u8570 蕰\\u8571 蕱\\u8572 蕲\\u8573 蕳\\u8574 蕴\\u8575 蕵\\u8576 蕶\\u8577 蕷\\u8578 蕸\\u8579 蕹\\u8580 薀\\u8581 薁\\u8582 薂\\u8583 薃\\u8584 薄\\u8585 薅\\u8586 薆\\u8587 薇\\u8588 薈\\u8589 薉\\u8590 薐\\u8591 薑\\u8592 薒\\u8593 薓\\u8594 薔\\u8595 薕\\u8596 薖\\u8597 薗\\u8598 薘\\u8599 薙\\u8600 蘀\\u8601 蘁\\u8602 蘂\\u8603 蘃\\u8604 蘄\\u8605 蘅\\u8606 蘆\\u8607 蘇\\u8608 蘈\\u8609 蘉\\u8610 蘐\\u8611 蘑\\u8612 蘒\\u8613 蘓\\u8614 蘔\\u8615 蘕\\u8616 蘖\\u8617 蘗\\u8618 蘘\\u8619 蘙\\u8620 蘠\\u8621 蘡\\u8622 蘢\\u8623 蘣\\u8624 蘤\\u8625 蘥\\u8626 蘦\\u8627 蘧\\u8628 蘨\\u8629 蘩\\u8630 蘰\\u8631 蘱\\u8632 蘲\\u8633 蘳\\u8634 蘴\\u8635 蘵\\u8636 蘶\\u8637 蘷\\u8638 蘸\\u8639 蘹\\u8640 虀\\u8641 虁\\u8642 虂\\u8643 虃\\u8644 虄\\u8645 虅\\u8646 虆\\u8647 虇\\u8648 虈\\u8649 虉\\u8650 虐\\u8651 虑\\u8652 虒\\u8653 虓\\u8654 虔\\u8655 處\\u8656 虖\\u8657 虗\\u8658 虘\\u8659 虙\\u8660 虠\\u8661 虡\\u8662 虢\\u8663 虣\\u8664 虤\\u8665 虥\\u8666 虦\\u8667 虧\\u8668 虨\\u8669 虩\\u8670 虰\\u8671 虱\\u8672 虲\\u8673 虳\\u8674 虴\\u8675 虵\\u8676 虶\\u8677 虷\\u8678 虸\\u8679 虹\\u8680 蚀\\u8681 蚁\\u8682 蚂\\u8683 蚃\\u8684 蚄\\u8685 蚅\\u8686 蚆\\u8687 蚇\\u8688 蚈\\u8689 蚉\\u8690 蚐\\u8691 蚑\\u8692 蚒\\u8693 蚓\\u8694 蚔\\u8695 蚕\\u8696 蚖\\u8697 蚗\\u8698 蚘\\u8699 蚙\\u8700 蜀\\u8701 蜁\\u8702 蜂\\u8703 蜃\\u8704 蜄\\u8705 蜅\\u8706 蜆\\u8707 蜇\\u8708 蜈\\u8709 蜉\\u8710 蜐\\u8711 蜑\\u8712 蜒\\u8713 蜓\\u8714 蜔\\u8715 蜕\\u8716 蜖\\u8717 蜗\\u8718 蜘\\u8719 蜙\\u8720 蜠\\u8721 蜡\\u8722 蜢\\u8723 蜣\\u8724 蜤\\u8725 蜥\\u8726 蜦\\u8727 蜧\\u8728 蜨\\u8729 蜩\\u8730 蜰\\u8731 蜱\\u8732 蜲\\u8733 蜳\\u8734 蜴\\u8735 蜵\\u8736 蜶\\u8737 蜷\\u8738 蜸\\u8739 蜹\\u8740 蝀\\u8741 蝁\\u8742 蝂\\u8743 蝃\\u8744 蝄\\u8745 蝅\\u8746 蝆\\u8747 蝇\\u8748 蝈\\u8749 蝉\\u8750 蝐\\u8751 蝑\\u8752 蝒\\u8753 蝓\\u8754 蝔\\u8755 蝕\\u8756 蝖\\u8757 蝗\\u8758 蝘\\u8759 蝙\\u8760 蝠\\u8761 蝡\\u8762 蝢\\u8763 蝣\\u8764 蝤\\u8765 蝥\\u8766 蝦\\u8767 蝧\\u8768 蝨\\u8769 蝩\\u8770 蝰\\u8771 蝱\\u8772 蝲\\u8773 蝳\\u8774 蝴\\u8775 蝵\\u8776 蝶\\u8777 蝷\\u8778 蝸\\u8779 蝹\\u8780 螀\\u8781 螁\\u8782 螂\\u8783 螃\\u8784 螄\\u8785 螅\\u8786 螆\\u8787 螇\\u8788 螈\\u8789 螉\\u8790 螐\\u8791 螑\\u8792 螒\\u8793 螓\\u8794 螔\\u8795 螕\\u8796 螖\\u8797 螗\\u8798 螘\\u8799 螙\\u8800 蠀\\u8801 蠁\\u8802 蠂\\u8803 蠃\\u8804 蠄\\u8805 蠅\\u8806 蠆\\u8807 蠇\\u8808 蠈\\u8809 蠉\\u8810 蠐\\u8811 蠑\\u8812 蠒\\u8813 蠓\\u8814 蠔\\u8815 蠕\\u8816 蠖\\u8817 蠗\\u8818 蠘\\u8819 蠙\\u8820 蠠\\u8821 蠡\\u8822 蠢\\u8823 蠣\\u8824 蠤\\u8825 蠥\\u8826 蠦\\u8827 蠧\\u8828 蠨\\u8829 蠩\\u8830 蠰\\u8831 蠱\\u8832 蠲\\u8833 蠳\\u8834 蠴\\u8835 蠵\\u8836 蠶\\u8837 蠷\\u8838 蠸\\u8839 蠹\\u8840 血\\u8841 衁\\u8842 衂\\u8843 衃\\u8844 衄\\u8845 衅\\u8846 衆\\u8847 衇\\u8848 衈\\u8849 衉\\u8850 衐\\u8851 衑\\u8852 衒\\u8853 術\\u8854 衔\\u8855 衕\\u8856 衖\\u8857 街\\u8858 衘\\u8859 衙\\u8860 衠\\u8861 衡\\u8862 衢\\u8863 衣\\u8864 衤\\u8865 补\\u8866 衦\\u8867 衧\\u8868 表\\u8869 衩\\u8870 衰\\u8871 衱\\u8872 衲\\u8873 衳\\u8874 衴\\u8875 衵\\u8876 衶\\u8877 衷\\u8878 衸\\u8879 衹\\u8880 袀\\u8881 袁\\u8882 袂\\u8883 袃\\u8884 袄\\u8885 袅\\u8886 袆\\u8887 袇\\u8888 袈\\u8889 袉\\u8890 袐\\u8891 袑\\u8892 袒\\u8893 袓\\u8894 袔\\u8895 袕\\u8896 袖\\u8897 袗\\u8898 袘\\u8899 袙\\u8900 褀\\u8901 褁\\u8902 褂\\u8903 褃\\u8904 褄\\u8905 褅\\u8906 褆\\u8907 複\\u8908 褈\\u8909 褉\\u8910 褐\\u8911 褑\\u8912 褒\\u8913 褓\\u8914 褔\\u8915 褕\\u8916 褖\\u8917 褗\\u8918 褘\\u8919 褙\\u8920 褠\\u8921 褡\\u8922 褢\\u8923 褣\\u8924 褤\\u8925 褥\\u8926 褦\\u8927 褧\\u8928 褨\\u8929 褩\\u8930 褰\\u8931 褱\\u8932 褲\\u8933 褳\\u8934 褴\\u8935 褵\\u8936 褶\\u8937 褷\\u8938 褸\\u8939 褹\\u8940 襀\\u8941 襁\\u8942 襂\\u8943 襃\\u8944 襄\\u8945 襅\\u8946 襆\\u8947 襇\\u8948 襈\\u8949 襉\\u8950 襐\\u8951 襑\\u8952 襒\\u8953 襓\\u8954 襔\\u8955 襕\\u8956 襖\\u8957 襗\\u8958 襘\\u8959 襙\\u8960 襠\\u8961 襡\\u8962 襢\\u8963 襣\\u8964 襤\\u8965 襥\\u8966 襦\\u8967 襧\\u8968 襨\\u8969 襩\\u8970 襰\\u8971 襱\\u8972 襲\\u8973 襳\\u8974 襴\\u8975 襵\\u8976 襶\\u8977 襷\\u8978 襸\\u8979 襹\\u8980 覀\\u8981 要\\u8982 覂\\u8983 覃\\u8984 覄\\u8985 覅\\u8986 覆\\u8987 覇\\u8988 覈\\u8989 覉\\u8990 覐\\u8991 覑\\u8992 覒\\u8993 覓\\u8994 覔\\u8995 覕\\u8996 視\\u8997 覗\\u8998 覘\\u8999 覙\\u9000 退\\u9001 送\\u9002 适\\u9003 逃\\u9004 逄\\u9005 逅\\u9006 逆\\u9007 逇\\u9008 逈\\u9009 选\\u9010 逐\\u9011 逑\\u9012 递\\u9013 逓\\u9014 途\\u9015 逕\\u9016 逖\\u9017 逗\\u9018 逘\\u9019 這\\u9020 造\\u9021 逡\\u9022 逢\\u9023 連\\u9024 逤\\u9025 逥\\u9026 逦\\u9027 逧\\u9028 逨\\u9029 逩\\u9030 逰\\u9031 週\\u9032 進\\u9033 逳\\u9034 逴\\u9035 逵\\u9036 逶\\u9037 逷\\u9038 逸\\u9039 逹\\u9040 遀\\u9041 遁\\u9042 遂\\u9043 遃\\u9044 遄\\u9045 遅\\u9046 遆\\u9047 遇\\u9048 遈\\u9049 遉\\u9050 遐\\u9051 遑\\u9052 遒\\u9053 道\\u9054 達\\u9055 違\\u9056 遖\\u9057 遗\\u9058 遘\\u9059 遙\\u9060 遠\\u9061 遡\\u9062 遢\\u9063 遣\\u9064 遤\\u9065 遥\\u9066 遦\\u9067 遧\\u9068 遨\\u9069 適\\u9070 遰\\u9071 遱\\u9072 遲\\u9073 遳\\u9074 遴\\u9075 遵\\u9076 遶\\u9077 遷\\u9078 選\\u9079 遹\\u9080 邀\\u9081 邁\\u9082 邂\\u9083 邃\\u9084 還\\u9085 邅\\u9086 邆\\u9087 邇\\u9088 邈\\u9089 邉\\u9090 邐\\u9091 邑\\u9092 邒\\u9093 邓\\u9094 邔\\u9095 邕\\u9096 邖\\u9097 邗\\u9098 邘\\u9099 邙\\u9100 鄀\\u9101 鄁\\u9102 鄂\\u9103 鄃\\u9104 鄄\\u9105 鄅\\u9106 鄆\\u9107 鄇\\u9108 鄈\\u9109 鄉\\u9110 鄐\\u9111 鄑\\u9112 鄒\\u9113 鄓\\u9114 鄔\\u9115 鄕\\u9116 鄖\\u9117 鄗\\u9118 鄘\\u9119 鄙\\u9120 鄠\\u9121 鄡\\u9122 鄢\\u9123 鄣\\u9124 鄤\\u9125 鄥\\u9126 鄦\\u9127 鄧\\u9128 鄨\\u9129 鄩\\u9130 鄰\\u9131 鄱\\u9132 鄲\\u9133 鄳\\u9134 鄴\\u9135 鄵\\u9136 鄶\\u9137 鄷\\u9138 鄸\\u9139 鄹\\u9140 酀\\u9141 酁\\u9142 酂\\u9143 酃\\u9144 酄\\u9145 酅\\u9146 酆\\u9147 酇\\u9148 酈\\u9149 酉\\u9150 酐\\u9151 酑\\u9152 酒\\u9153 酓\\u9154 酔\\u9155 酕\\u9156 酖\\u9157 酗\\u9158 酘\\u9159 酙\\u9160 酠\\u9161 酡\\u9162 酢\\u9163 酣\\u9164 酤\\u9165 酥\\u9166 酦\\u9167 酧\\u9168 酨\\u9169 酩\\u9170 酰\\u9171 酱\\u9172 酲\\u9173 酳\\u9174 酴\\u9175 酵\\u9176 酶\\u9177 酷\\u9178 酸\\u9179 酹\\u9180 醀\\u9181 醁\\u9182 醂\\u9183 醃\\u9184 醄\\u9185 醅\\u9186 醆\\u9187 醇\\u9188 醈\\u9189 醉\\u9190 醐\\u9191 醑\\u9192 醒\\u9193 醓\\u9194 醔\\u9195 醕\\u9196 醖\\u9197 醗\\u9198 醘\\u9199 醙\\u9200 鈀\\u9201 鈁\\u9202 鈂\\u9203 鈃\\u9204 鈄\\u9205 鈅\\u9206 鈆\\u9207 鈇\\u9208 鈈\\u9209 鈉\\u9210 鈐\\u9211 鈑\\u9212 鈒\\u9213 鈓\\u9214 鈔\\u9215 鈕\\u9216 鈖\\u9217 鈗\\u9218 鈘\\u9219 鈙\\u9220 鈠\\u9221 鈡\\u9222 鈢\\u9223 鈣\\u9224 鈤\\u9225 鈥\\u9226 鈦\\u9227 鈧\\u9228 鈨\\u9229 鈩\\u9230 鈰\\u9231 鈱\\u9232 鈲\\u9233 鈳\\u9234 鈴\\u9235 鈵\\u9236 鈶\\u9237 鈷\\u9238 鈸\\u9239 鈹\\u9240 鉀\\u9241 鉁\\u9242 鉂\\u9243 鉃\\u9244 鉄\\u9245 鉅\\u9246 鉆\\u9247 鉇\\u9248 鉈\\u9249 鉉\\u9250 鉐\\u9251 鉑\\u9252 鉒\\u9253 鉓\\u9254 鉔\\u9255 鉕\\u9256 鉖\\u9257 鉗\\u9258 鉘\\u9259 鉙\\u9260 鉠\\u9261 鉡\\u9262 鉢\\u9263 鉣\\u9264 鉤\\u9265 鉥\\u9266 鉦\\u9267 鉧\\u9268 鉨\\u9269 鉩\\u9270 鉰\\u9271 鉱\\u9272 鉲\\u9273 鉳\\u9274 鉴\\u9275 鉵\\u9276 鉶\\u9277 鉷\\u9278 鉸\\u9279 鉹\\u9280 銀\\u9281 銁\\u9282 銂\\u9283 銃\\u9284 銄\\u9285 銅\\u9286 銆\\u9287 銇\\u9288 銈\\u9289 銉\\u9290 銐\\u9291 銑\\u9292 銒\\u9293 銓\\u9294 銔\\u9295 銕\\u9296 銖\\u9297 銗\\u9298 銘\\u9299 銙\\u9300 錀\\u9301 錁\\u9302 錂\\u9303 錃\\u9304 錄\\u9305 錅\\u9306 錆\\u9307 錇\\u9308 錈\\u9309 錉\\u9310 錐\\u9311 錑\\u9312 錒\\u9313 錓\\u9314 錔\\u9315 錕\\u9316 錖\\u9317 錗\\u9318 錘\\u9319 錙\\u9320 錠\\u9321 錡\\u9322 錢\\u9323 錣\\u9324 錤\\u9325 錥\\u9326 錦\\u9327 錧\\u9328 錨\\u9329 錩\\u9330 錰\\u9331 錱\\u9332 録\\u9333 錳\\u9334 錴\\u9335 錵\\u9336 錶\\u9337 錷\\u9338 錸\\u9339 錹\\u9340 鍀\\u9341 鍁\\u9342 鍂\\u9343 鍃\\u9344 鍄\\u9345 鍅\\u9346 鍆\\u9347 鍇\\u9348 鍈\\u9349 鍉\\u9350 鍐\\u9351 鍑\\u9352 鍒\\u9353 鍓\\u9354 鍔\\u9355 鍕\\u9356 鍖\\u9357 鍗\\u9358 鍘\\u9359 鍙\\u9360 鍠\\u9361 鍡\\u9362 鍢\\u9363 鍣\\u9364 鍤\\u9365 鍥\\u9366 鍦\\u9367 鍧\\u9368 鍨\\u9369 鍩\\u9370 鍰\\u9371 鍱\\u9372 鍲\\u9373 鍳\\u9374 鍴\\u9375 鍵\\u9376 鍶\\u9377 鍷\\u9378 鍸\\u9379 鍹\\u9380 鎀\\u9381 鎁\\u9382 鎂\\u9383 鎃\\u9384 鎄\\u9385 鎅\\u9386 鎆\\u9387 鎇\\u9388 鎈\\u9389 鎉\\u9390 鎐\\u9391 鎑\\u9392 鎒\\u9393 鎓\\u9394 鎔\\u9395 鎕\\u9396 鎖\\u9397 鎗\\u9398 鎘\\u9399 鎙\\u9400 鐀\\u9401 鐁\\u9402 鐂\\u9403 鐃\\u9404 鐄\\u9405 鐅\\u9406 鐆\\u9407 鐇\\u9408 鐈\\u9409 鐉\\u9410 鐐\\u9411 鐑\\u9412 鐒\\u9413 鐓\\u9414 鐔\\u9415 鐕\\u9416 鐖\\u9417 鐗\\u9418 鐘\\u9419 鐙\\u9420 鐠\\u9421 鐡\\u9422 鐢\\u9423 鐣\\u9424 鐤\\u9425 鐥\\u9426 鐦\\u9427 鐧\\u9428 鐨\\u9429 鐩\\u9430 鐰\\u9431 鐱\\u9432 鐲\\u9433 鐳\\u9434 鐴\\u9435 鐵\\u9436 鐶\\u9437 鐷\\u9438 鐸\\u9439 鐹\\u9440 鑀\\u9441 鑁\\u9442 鑂\\u9443 鑃\\u9444 鑄\\u9445 鑅\\u9446 鑆\\u9447 鑇\\u9448 鑈\\u9449 鑉\\u9450 鑐\\u9451 鑑\\u9452 鑒\\u9453 鑓\\u9454 鑔\\u9455 鑕\\u9456 鑖\\u9457 鑗\\u9458 鑘\\u9459 鑙\\u9460 鑠\\u9461 鑡\\u9462 鑢\\u9463 鑣\\u9464 鑤\\u9465 鑥\\u9466 鑦\\u9467 鑧\\u9468 鑨\\u9469 鑩\\u9470 鑰\\u9471 鑱\\u9472 鑲\\u9473 鑳\\u9474 鑴\\u9475 鑵\\u9476 鑶\\u9477 鑷\\u9478 鑸\\u9479 鑹\\u9480 钀\\u9481 钁\\u9482 钂\\u9483 钃\\u9484 钄\\u9485 钅\\u9486 钆\\u9487 钇\\u9488 针\\u9489 钉\\u9490 钐\\u9491 钑\\u9492 钒\\u9493 钓\\u9494 钔\\u9495 钕\\u9496 钖\\u9497 钗\\u9498 钘\\u9499 钙\\u9500 销\\u9501 锁\\u9502 锂\\u9503 锃\\u9504 锄\\u9505 锅\\u9506 锆\\u9507 锇\\u9508 锈\\u9509 锉\\u9510 锐\\u9511 锑\\u9512 锒\\u9513 锓\\u9514 锔\\u9515 锕\\u9516 锖\\u9517 锗\\u9518 锘\\u9519 错\\u9520 锠\\u9521 锡\\u9522 锢\\u9523 锣\\u9524 锤\\u9525 锥\\u9526 锦\\u9527 锧\\u9528 锨\\u9529 锩\\u9530 锰\\u9531 锱\\u9532 锲\\u9533 锳\\u9534 锴\\u9535 锵\\u9536 锶\\u9537 锷\\u9538 锸\\u9539 锹\\u9540 镀\\u9541 镁\\u9542 镂\\u9543 镃\\u9544 镄\\u9545 镅\\u9546 镆\\u9547 镇\\u9548 镈\\u9549 镉\\u9550 镐\\u9551 镑\\u9552 镒\\u9553 镓\\u9554 镔\\u9555 镕\\u9556 镖\\u9557 镗\\u9558 镘\\u9559 镙\\u9560 镠\\u9561 镡\\u9562 镢\\u9563 镣\\u9564 镤\\u9565 镥\\u9566 镦\\u9567 镧\\u9568 镨\\u9569 镩\\u9570 镰\\u9571 镱\\u9572 镲\\u9573 镳\\u9574 镴\\u9575 镵\\u9576 镶\\u9577 長\\u9578 镸\\u9579 镹\\u9580 門\\u9581 閁\\u9582 閂\\u9583 閃\\u9584 閄\\u9585 閅\\u9586 閆\\u9587 閇\\u9588 閈\\u9589 閉\\u9590 閐\\u9591 閑\\u9592 閒\\u9593 間\\u9594 閔\\u9595 閕\\u9596 閖\\u9597 閗\\u9598 閘\\u9599 閙\\u9600 阀\\u9601 阁\\u9602 阂\\u9603 阃\\u9604 阄\\u9605 阅\\u9606 阆\\u9607 阇\\u9608 阈\\u9609 阉\\u9610 阐\\u9611 阑\\u9612 阒\\u9613 阓\\u9614 阔\\u9615 阕\\u9616 阖\\u9617 阗\\u9618 阘\\u9619 阙\\u9620 阠\\u9621 阡\\u9622 阢\\u9623 阣\\u9624 阤\\u9625 阥\\u9626 阦\\u9627 阧\\u9628 阨\\u9629 阩\\u9630 阰\\u9631 阱\\u9632 防\\u9633 阳\\u9634 阴\\u9635 阵\\u9636 阶\\u9637 阷\\u9638 阸\\u9639 阹\\u9640 陀\\u9641 陁\\u9642 陂\\u9643 陃\\u9644 附\\u9645 际\\u9646 陆\\u9647 陇\\u9648 陈\\u9649 陉\\u9650 限\\u9651 陑\\u9652 陒\\u9653 陓\\u9654 陔\\u9655 陕\\u9656 陖\\u9657 陗\\u9658 陘\\u9659 陙\\u9660 陠\\u9661 陡\\u9662 院\\u9663 陣\\u9664 除\\u9665 陥\\u9666 陦\\u9667 陧\\u9668 陨\\u9669 险\\u9670 陰\\u9671 陱\\u9672 陲\\u9673 陳\\u9674 陴\\u9675 陵\\u9676 陶\\u9677 陷\\u9678 陸\\u9679 陹\\u9680 隀\\u9681 隁\\u9682 隂\\u9683 隃\\u9684 隄\\u9685 隅\\u9686 隆\\u9687 隇\\u9688 隈\\u9689 隉\\u9690 隐\\u9691 隑\\u9692 隒\\u9693 隓\\u9694 隔\\u9695 隕\\u9696 隖\\u9697 隗\\u9698 隘\\u9699 隙\\u9700 需\\u9701 霁\\u9702 霂\\u9703 霃\\u9704 霄\\u9705 霅\\u9706 霆\\u9707 震\\u9708 霈\\u9709 霉\\u9710 霐\\u9711 霑\\u9712 霒\\u9713 霓\\u9714 霔\\u9715 霕\\u9716 霖\\u9717 霗\\u9718 霘\\u9719 霙\\u9720 霠\\u9721 霡\\u9722 霢\\u9723 霣\\u9724 霤\\u9725 霥\\u9726 霦\\u9727 霧\\u9728 霨\\u9729 霩\\u9730 霰\\u9731 霱\\u9732 露\\u9733 霳\\u9734 霴\\u9735 霵\\u9736 霶\\u9737 霷\\u9738 霸\\u9739 霹\\u9740 靀\\u9741 靁\\u9742 靂\\u9743 靃\\u9744 靄\\u9745 靅\\u9746 靆\\u9747 靇\\u9748 靈\\u9749 靉\\u9750 靐\\u9751 靑\\u9752 青\\u9753 靓\\u9754 靔\\u9755 靕\\u9756 靖\\u9757 靗\\u9758 靘\\u9759 静\\u9760 靠\\u9761 靡\\u9762 面\\u9763 靣\\u9764 靤\\u9765 靥\\u9766 靦\\u9767 靧\\u9768 靨\\u9769 革\\u9770 靰\\u9771 靱\\u9772 靲\\u9773 靳\\u9774 靴\\u9775 靵\\u9776 靶\\u9777 靷\\u9778 靸\\u9779 靹\\u9780 鞀\\u9781 鞁\\u9782 鞂\\u9783 鞃\\u9784 鞄\\u9785 鞅\\u9786 鞆\\u9787 鞇\\u9788 鞈\\u9789 鞉\\u9790 鞐\\u9791 鞑\\u9792 鞒\\u9793 鞓\\u9794 鞔\\u9795 鞕\\u9796 鞖\\u9797 鞗\\u9798 鞘\\u9799 鞙\\u9800 頀\\u9801 頁\\u9802 頂\\u9803 頃\\u9804 頄\\u9805 項\\u9806 順\\u9807 頇\\u9808 須\\u9809 頉\\u9810 預\\u9811 頑\\u9812 頒\\u9813 頓\\u9814 頔\\u9815 頕\\u9816 頖\\u9817 頗\\u9818 領\\u9819 頙\\u9820 頠\\u9821 頡\\u9822 頢\\u9823 頣\\u9824 頤\\u9825 頥\\u9826 頦\\u9827 頧\\u9828 頨\\u9829 頩\\u9830 頰\\u9831 頱\\u9832 頲\\u9833 頳\\u9834 頴\\u9835 頵\\u9836 頶\\u9837 頷\\u9838 頸\\u9839 頹\\u9840 顀\\u9841 顁\\u9842 顂\\u9843 顃\\u9844 顄\\u9845 顅\\u9846 顆\\u9847 顇\\u9848 顈\\u9849 顉\\u9850 顐\\u9851 顑\\u9852 顒\\u9853 顓\\u9854 顔\\u9855 顕\\u9856 顖\\u9857 顗\\u9858 願\\u9859 顙\\u9860 顠\\u9861 顡\\u9862 顢\\u9863 顣\\u9864 顤\\u9865 顥\\u9866 顦\\u9867 顧\\u9868 顨\\u9869 顩\\u9870 顰\\u9871 顱\\u9872 顲\\u9873 顳\\u9874 顴\\u9875 页\\u9876 顶\\u9877 顷\\u9878 顸\\u9879 项\\u9880 颀\\u9881 颁\\u9882 颂\\u9883 颃\\u9884 预\\u9885 颅\\u9886 领\\u9887 颇\\u9888 颈\\u9889 颉\\u9890 颐\\u9891 频\\u9892 颒\\u9893 颓\\u9894 颔\\u9895 颕\\u9896 颖\\u9897 颗\\u9898 题\\u9899 颙\\u9900 餀\\u9901 餁\\u9902 餂\\u9903 餃\\u9904 餄\\u9905 餅\\u9906 餆\\u9907 餇\\u9908 餈\\u9909 餉\\u9910 餐\\u9911 餑\\u9912 餒\\u9913 餓\\u9914 餔\\u9915 餕\\u9916 餖\\u9917 餗\\u9918 餘\\u9919 餙\\u9920 餠\\u9921 餡\\u9922 餢\\u9923 餣\\u9924 餤\\u9925 餥\\u9926 餦\\u9927 餧\\u9928 館\\u9929 餩\\u9930 餰\\u9931 餱\\u9932 餲\\u9933 餳\\u9934 餴\\u9935 餵\\u9936 餶\\u9937 餷\\u9938 餸\\u9939 餹\\u9940 饀\\u9941 饁\\u9942 饂\\u9943 饃\\u9944 饄\\u9945 饅\\u9946 饆\\u9947 饇\\u9948 饈\\u9949 饉\\u9950 饐\\u9951 饑\\u9952 饒\\u9953 饓\\u9954 饔\\u9955 饕\\u9956 饖\\u9957 饗\\u9958 饘\\u9959 饙\\u9960 饠\\u9961 饡\\u9962 饢\\u9963 饣\\u9964 饤\\u9965 饥\\u9966 饦\\u9967 饧\\u9968 饨\\u9969 饩\\u9970 饰\\u9971 饱\\u9972 饲\\u9973 饳\\u9974 饴\\u9975 饵\\u9976 饶\\u9977 饷\\u9978 饸\\u9979 饹\\u9980 馀\\u9981 馁\\u9982 馂\\u9983 馃\\u9984 馄\\u9985 馅\\u9986 馆\\u9987 馇\\u9988 馈\\u9989 馉\\u9990 馐\\u9991 馑\\u9992 馒\\u9993 馓\\u9994 馔\\u9995 馕\\u9996 首\\u9997 馗\\u9998 馘\\u9999 香","categories":[],"tags":[]},{"title":"Anaconda","slug":"Tools/Anaconda/readme","date":"2021-10-23T11:54:51.153Z","updated":"2021-10-23T11:54:51.153Z","comments":true,"path":"Tools/Anaconda/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Anaconda/readme.md/","excerpt":"","text":"目录大纲 常用命令模块 问题记录 参考资源 VSCode + Anaconda（Python）开发环境搭建","categories":[],"tags":[]},{"title":"ReadMe-大数据生态圈","slug":"Tools/BigData/README","date":"2021-10-23T11:54:51.153Z","updated":"2021-10-23T11:54:51.153Z","comments":true,"path":"Tools/BigData/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/BigData/README.md/","excerpt":"","text":"目录索引大数据知识 大数据可视化 大数据质量分析 大数据生态圈 大数据详细模块 Hadoop-分布式框架 Hbase-kv-数据库 Spark PrestoDB-数据查询工具 Hive-分布式数据库 Hive-Sql flink : 流式处理 消息队列 RabbitMQ-消息队列 Kafaka-消息队列 其他 ScyllaDb-底层数据库 Huey-任务队列 大数据清洗-异常字符 参考资源","categories":[],"tags":[]},{"title":"Config - 常用配置","slug":"Tools/Anaconda/config","date":"2021-10-23T11:54:51.152Z","updated":"2021-10-23T11:54:51.152Z","comments":true,"path":"Tools/Anaconda/config.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Anaconda/config.md/","excerpt":"","text":"配置国内镜像源 北京外国语大学开源软件镜像站 12345678# 生成配置文件 .condarcconda config --set show_channel_urls yes# 添加配置修改文件 .condarc# 清除索引缓存conda clean -i 配置如下 1234567891011121314channels: - defaultsshow_channel_urls: truedefault_channels: - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud","categories":[],"tags":[]},{"title":"问题记录","slug":"Tools/Anaconda/issue","date":"2021-10-23T11:54:51.152Z","updated":"2021-10-23T11:54:51.152Z","comments":true,"path":"Tools/Anaconda/issue.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Anaconda/issue.md/","excerpt":"","text":"activate 失效环境说明: Win10 Anaconda3 Win10-PowerShell 使用 conda activate 激活环境无效问题及常用 Conda 操作 查看版本号：conda --version Conda 低于 4.6 版本: 用 Win+X 组合键调出 PowerShell 管理员模式； 输入命令 conda install -n root -c pscondaenvs pscondaenvs 安装 PSCondaEnvs 包； 输入命令 Set-ExecutionPolicy RemoteSigned，在出现选项后输入 Y 回车，更改 PowerShell 的安全策略。 PowerShell 中使用 activate 环境名激活环境，使用 deactivate 退出环境（注意：需要去掉原命令中开头的 conda） Conda 大于等于 4.6 版本： 用 Win+X 组合键调出 PowerShell 管理员模式； 输入命令 conda init powershell 关闭后重新打开一个 powershell 窗口输入 conda activate 环境名激活环境，退出环境用 conda deactivate 上述 cmd 同样适用，powershell 替换为 cmd.exe 即可","categories":[],"tags":[]},{"title":"安装部署","slug":"Tools/Anaconda/install","date":"2021-10-23T11:54:51.152Z","updated":"2021-10-23T11:54:51.152Z","comments":true,"path":"Tools/Anaconda/install.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Anaconda/install.md/","excerpt":"","text":"安装部署简单, 快速安装。 Win10Centos8123456789101112131415# 下载安装包wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh# 安装软件bash Anaconda3-2020.02-Linux-x86_64.sh# 配置环境sudo vim /etc/profile# 添加如下内容export ANACONDA_PATH=/usr/local/anaconda3export PATH=$PATH:$ANACONDA_PATH/bin# 生效source /etc/profile 参考链接：https://blog.csdn.net/qq_44486439/article/details/107744449 Unbantuhttps://blog.csdn.net/ITBigGod/article/details/85690257","categories":[],"tags":[]},{"title":"策略知识","slug":"Tools/A-Tips/策略知识","date":"2021-10-23T11:54:51.151Z","updated":"2021-10-23T11:54:51.151Z","comments":true,"path":"Tools/A-Tips/策略知识.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/%E7%AD%96%E7%95%A5%E7%9F%A5%E8%AF%86.md/","excerpt":"","text":"股票类型ST股票https://baike.baidu.com/item/ST%E8%82%A1%E7%A5%A8/632784 出现财务状况或其他状况异常的。存在退市的风险，高风险股票。 公司向证监会交的财务报表，连续3年亏损，就有退市的风险。 强势股https://baike.baidu.com/item/%E5%BC%BA%E5%8A%BF%E8%82%A1强势股，是指在股市中稳健上涨的股票。强势股可能是一波行情的龙头股，也可以是热点板块中的代表性股票。在大盘处在上涨趋势或平衡市中操作。短线操作不必过分看重。 主要特点编辑 1.高换手率：强势股的每日成交换手率一般不低于5%，某些交易日达到10%以上，甚至可能达到20%～30%。 2.具有板块效应：强势股可能是一波行情的龙头股，也可以是热点板块中的代表性股票。强势股的涨跌，会影响同板块股票的涨跌。3.在一定时间交易价格内累创新高。 操作方法编辑 1、抓住龙头股不动：龙头股一般在大盘低迷时率先放量上涨或第一个封涨停，大胆的投资者如果能够及时介入龙头股，就可以持股不动，等待大盘行情结束，或龙头股明显形成头部时方卖出。2、介入换手率高的强势股：龙头股很多人不敢追，或等考虑清楚了，再想追而追不到。这时，应该及时寻找同板块的高换手率的强势股。3、在强势股技术性回调过程中介入：强势股因为受到市场关注程度高，而且可能有主力操纵，一般上涨迅速，回调时间短、幅度浅。4、强势股出现利空消息时：强势股在一轮上涨过程中，可能出现基本面的利空消息，这时该股短线会有短线下跌。由于板块热点还未消退，主力资金也还在其中，等该股短暂企稳之后，主力再次拉升的概率很大。 操作注意事项 在大盘处在上涨趋势或平衡市中操作。在大盘出现明显头部形态或明显下跌趋势时尽量不要操作。“涨时重势，跌时重质”。分析与操作强势股，关注要点还是换手率、市场热点和主力意图。对于业绩、成长性、行业发展以及利空消息等因素，短线操作不必过分看重。 白马股退市https://baike.baidu.com/item/%E9%80%80%E5%B8%82退市是上市公司由于未满足交易所有关财务等其他上市标准而主动或被动终止上市的情形，即由一家上市公司变为非上市公司。退市可分主动性退市和被动性退市，并有复杂的退市的程序。交易所对上市公司退市一般具有较大的自主权。 停牌https://baike.baidu.com/item/%E5%81%9C%E7%89%8C证券交易所对在本所上市的有价证券要进行定期或不定期的审核或复核，如发现某上市证券不宜继续上市时，交易所可开具 “停止证券上市通知书”，暂停其上市的规定 大中小盘股大盘股( large-cap share)是市值总额达20亿元以上的大公司所发行的股票 小盘股( large-cap share)是市值总额小于1亿元的小公司所发行的股票 中盘股 市值总额介于 大盘股和小盘股之间 绩优股绩优股就是业绩优良公司的股票。 一般而言，每股税后利润在全体上市公司中处于中上地位，公司上市后净资产收益率连续三年显著超过10%的股票当属绩优股之列。 绩优股的炒做特点，大资金、做长庄、大量收集、稳步拉抬、平稳出货 蓝筹股蓝筹股——业绩好，规模大。 绩优股——业绩好，规模不一定大。 绩优股——顾名思义，就是业绩优良公司的股票，但对于绩优股的定义国内外却有所不同。在我国，投资者衡量绩优股的主要指标是每股税后利润和净资产收益率。绩优股具有较高的投资回报和投资价值。蓝筹股——股票市场上，投资者把那些在其所属行业内占有重要支配性地位、业绩优良，成交活跃、红利优厚的大公司股票称为蓝筹股。 指标类型业绩预增https://baike.baidu.com/item/%E4%B8%9A%E7%BB%A9%E9%A2%84%E5%A2%9E业绩预增一般指上市公司的业绩预增股。即在上市公司的年报还没出来的时候股东或机构为了吸引投资者的眼光，就提前发布业绩预增的消息 业绩预增往往反映公司较好的盈利前景，从而可以提振投资者对公司股价的信心。 业绩预告类型: 大幅上升 总市值https://baike.baidu.com/item/%E6%80%BB%E5%B8%82%E5%80%BC总市值是指在某特定时间内总股本数乘以当时股价得出的股票总价值。 市净率(pb)市盈率(pE)市盈率ttm 12日VOL 50日VOL DDE大单净量 大单净量是大单净买入股数与流通盘的百分比比值https://baike.baidu.com/item/%E5%A4%A7%E5%8D%95%E5%87%80%E9%87%8F/9654457 量比 委比 换手率 每股净资产bps 净资产大于1 CCI底背离 陆股通持股市值前100，股价上穿过20日均线，陆股通持续6天净流入 90日360日线多头 连续放量 MACD买入信号 RSI买入信号 KDJ买入信号 细分行业龙头 陆股通持股市值前10%，股价上穿过20日均线，连续3日陆股通净买入额大于1500万 其他参数股性https://baike.baidu.com/item/%E8%82%A1%E6%80%A7股性又称“股票的市场表现”是指个股价格对大市变动的敏感程度，即股票的活跃程度、弹性程度，其可用β系数来表示。 β系数 = 某种股票的预期报酬 － 该期报酬中的非风险部分整个股票市场的预期报酬 － 该期报酬中的非风险部分。 参考策略语句非ST股，非退市，非停牌，总市值小于25亿，业绩预增大于50%，总市值从小到大排列 非ST股，非退市，非停牌，总市值小于27.7亿，业绩预增大于50%，总市值从小到大排列 非ST股;非退市;非停牌;10亿&lt;=总市值&lt;=25亿;业绩预增大于50%;业绩预告类型是大幅上升;总市值从小到大排列 市净率(pb)小于0.85，市盈率低于40，一年区间涨幅大于5%，连续两年每股自由现金流为正，12日VOL&gt;50日VOL 涨停；非新股；非ST；强势股；DDE大单净量大于0.8；量比大于5；委比大于99；换手率小于10； 非ST股，非退市，非停牌，总市值小于25亿，30天区间涨跌幅小于40%，业绩预增大于50%，总市值从小到大排列 涨跌幅小于1% ;股票简称不包含st ;换手率小于3.00% ;市净率(pb)小于0.850 ;流通a股小于2500000000股 ;每股净资产bps大于1元 ; dde大单净量小到大排名 涨跌幅小于1%；换手率小于3%；市净率小于0.85；净资产大于1；CCI底背离；DDE大单净量从大到小；流通股本小于50亿；股票简称不包含ST；非停牌； 30日平均换手率/300日平均换手率从小到大,市盈率ttm小于21且大于7,中小盘股,绩优股 陆股通持股市值前100，股价上穿过20日均线，陆股通持续6天净流入 券商持仓，总市值小于27亿元；90日360日线多头；不包含ST；非*ST；每股净资产大于1.2；连续放量；资产负债小于20%；非停牌股；市值由小到大 量比大于3.0，涨幅大于7%，macd大于0.39,流通市值小于80亿，市值从小到大 陆股通持股市值前10%，股价上穿过20日均线，连续3日陆股通净买入额大于1500万 过去3年的基本每股收益增长率&gt;3%,市值大于1000亿,过去30个交易日涨跌幅大于-5%,同花顺二级行业龙头是细分行业龙头,市值从小到大排名 MACD买入信号 RSI买入信号 KDJ买入信号 细分行业龙头 沪深300指数，30日涨幅小于30%，20日线上移，总市值从小到大排列 前一日特大单净额&gt;dde大单净额 昨日涨停 创业板","categories":[],"tags":[]},{"title":"命令大全","slug":"Tools/Anaconda/cmd","date":"2021-10-23T11:54:51.151Z","updated":"2021-10-23T11:54:51.152Z","comments":true,"path":"Tools/Anaconda/cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/Anaconda/cmd.md/","excerpt":"","text":"常用命令123456789101112131415161718192021222324252627# 检查版本conda --version# 升级版本conda update conda# 创建环境conda create --name xxxx python=3.9# 查看所有环境conda info -envs# 复制环境conda create -n xxx --clone xxxx# 删除环境conda remove -n xxxx# 查看已安装包conda list# 向指定环境中安装包conda install ---name env_xx xlrd_xxx# 删除指定环境包conda remove -n env_xxx xlrd_xxx# 删除环境conda remove -n env_xxx --all Win 命令 1234# 激活环境activate xxxxx Linux 命令 12# 激活环境source activate xxxx 功能模块配置国内镜像源123456789# 为 conda 添加国内镜像源conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes# 为 pip 添加国内镜像源pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -Upip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 修改镜像源12345678910111213# 添加阿里云源conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/#设置搜索时显示通道地址conda config --set show_channel_urls yes# 移除conda config --remove channels xxxx# 移除全部conda config --remove channels","categories":[],"tags":[]},{"title":"术语知识","slug":"Tools/A-Tips/readme","date":"2021-10-23T11:54:51.150Z","updated":"2021-10-23T11:54:51.150Z","comments":true,"path":"Tools/A-Tips/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/readme.md/","excerpt":"","text":"目录索引面试考点 加密算法与原理 数据结构与原理 算法与算法题 参考资源socket 编程入门：1 天玩转 socket 通信技术(非常详细) epoll 和 poll,select 的区别 RPC 简介及框架选择 微服务架构 Python 开发工程师面试题（六） 110 道 Python 面试真题(题目) 110 道 Python 面试真题(题目+答案)","categories":[],"tags":[]},{"title":"机试刷题 关键点","slug":"Tools/A-Tips/tips-cmd","date":"2021-10-23T11:54:51.150Z","updated":"2021-10-23T11:54:51.150Z","comments":true,"path":"Tools/A-Tips/tips-cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/tips-cmd.md/","excerpt":"","text":"机试必须使用 while True: try: xxxx except: break 因为牛客网许多题目都是多组测试用例的。 如果你不用循环，那么就只能通过第一组测试用例，对于第二组第三组肯定就不能通过了，所以说“输出为空”。 不能再文件头加顶部注释 例如 # xxxx 准备 纸+笔 Python 2.7.11 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 知识点 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt; 参数接收 raw_input() or input() 算法题库 时间复杂度最优算法等 数学算法 题库 取余divmod(10,3) 是否纯数字strA.isdigit() 是否纯字母strB.isalpha() 多进制转换bin() 十进制转二进制 bin(10) ‘0b1010’oct() 十进制转八进制 oct(10) ‘012’int() 其他进制转十进制 int(‘012’,8) 10hex() 十进制转十六进制 hex(10) ‘0xa’十进制输入时必须为数字,其他进制转十进制时必须为字符串。binary 二进制的octal 八进制的hexadecimal 十六进制的decimal 十进制的ord 字符转ASCII码 检验字符中是否含有特殊符号123456789import redef check_symbol_is_contain(pwd): pattern = re.compile(&#x27;[^a-z0-9A-Z+]+&#x27;) if pattern.findall(pwd): return True else: print(&quot;WARNING: The password should start with numbers or characters.&quot;) return False In [58]: pwd=’ABCabc123’In [59]: pattern = re.compile(‘[^a-z0-9A-Z+]+’)In [60]: pattern.findall(pwd)Out[60]: []In [61]: pwd=’ABCqwe123 &amp;(/)’In [62]: pattern.findall(pwd)Out[62]: [‘ &amp;(/)’] 用python实现密码校验程序 dict升序降序排序 多字段排序1234567891011In [26]: dicOut[26]: &#123;&#x27;a&#x27;: 234, &#x27;b&#x27;: 234, &#x27;c&#x27;: 123, &#x27;d&#x27;: 1&#125;# 根据key,val 进行排序In [24]: sorted(dic.items(),key=lambda x:(x[0],x[1]))Out[24]: [(&#x27;a&#x27;, 234), (&#x27;b&#x27;, 234), (&#x27;c&#x27;, 123), (&#x27;d&#x27;, 1)]# 根据val,key 进行排序In [25]: sorted(dic.items(),key=lambda x:(x[1],x[0]))Out[25]: [(&#x27;d&#x27;, 1), (&#x27;c&#x27;, 123), (&#x27;a&#x27;, 234), (&#x27;b&#x27;, 234)]# reverse 逆序In [28]: sorted(dic.items(),key=lambda x:(x[0],x[1]),reverse=True)Out[28]: [(&#x27;d&#x27;, 1), (&#x27;c&#x27;, 123), (&#x27;b&#x27;, 234), (&#x27;a&#x27;, 234)] python 列表、字典多排序问题 大小写字母判定isupper()islower()istitile() TODO 保留一位小数print(‘%.1f’%(3.5533)) 3.6多行输入问题 四舍五入round(3.556,2) 向上取整math.ceil(4.1) 5 向下取整math.floor(4.1) 4 平方根num ** 0.5 或 math.sqrt(144) 获取26个字母import stringstring.ascii_uppercase # 获取26个大写字母string.ascii_lowercase # 获取26个小写字母string.ascii_letters # 获取26个小写字母和26个大写字母 输入输出填充空格，适合取出等长字符In [10]: a.ljust(9)Out[10]: ‘asdasda ‘ 其他https://www.liepin.com/zhaopin/?init=-1&amp;headckid=d67304f60cc0086c&amp;flushckid=1&amp;fromSearchBtn=2&amp;dqs=070020050&amp;imscid=R000000058&amp;ckid=b2ff9cdd8716e548&amp;key=python&amp;siTag=I-7rQ0e90mv8a37po7dV3Q%7Eb82XZEfT3k9nLaGd2nO5lg&amp;d_sfrom=search_fp_bar&amp;d_ckId=4af130b69886296d7b935630c28b6b35&amp;d_curPage=0&amp;d_pageSize=40&amp;d_headId=4f003498703fbfa55bf56ca2cdf4f08b 今日完成内容 search &amp; dataload 后台views修改 导入数据集 问题修改 图规则维护 问题修改 今日完成内容 导入数据集 问题修改 图规则维护 问题修改 图规则加工 问题修改 部署软件-install.sh 环境安装测试 (Oracle/Mysql驱动安装测试) 知识树 &amp; 印象笔记整理 独立部署贵州交互 人行、商行等 部署在独立服务器，其他部署在另外一个服务器。使用 docker 部署环境(Oracle、Mysql、图库、es、doris等) 配置单向传输。 如何独立部署，技术上实现方法？ 模型筛查 - 样式提出 分支修改 - 贵州分支-py3转换 交互模块-贵州分支，trunk分支-trunk修改 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Python x xx __xx 这些变量区别 Python 高级知识点、语法等 动态修改容器内存 ，只可以改小，不可以改大必须设置 –memory-swap -1 缓存不受限制docker update –memory 6G –memory-swap -1 fdm_es74 https://blog.csdn.net/fuck487/article/details/86096134 代码更新测试 线上代码更新 Oracle11g - 版本升级 分支合并说明 已合并 branch_scfan涉及文件M src/server/fdm/services/dataset.pyM src/server/fdm/tools/monitor_tools.pyM src/server/fdm/views/dataset.pyM src/server/fdm/views/search.pyM src/web/fdm/services/datasetService.jsM src/web/fdm/services/searchService.jsM src/web/fdm/views/base/custDetailPageController.jsM src/web/fdm/views/data/subjectManageController.jsM src/web/fdm/views/data/subject_manage.html修复功能a. 436 主体管理页面 新增和删除附件 2020-08-24 问题记录 主体信息视图a. 数据源主体有多个手机号，之前只显示一个，需要获取数据源主体的所有手机号b. 账号清单中，两个账号的取现交易金额完全一样，且数值过大不符合实际交易数据。c. 交易信息中，查询对方姓名时，当前使用了模糊匹配，需要使用精准匹配，避免查询其他人。(需考虑 名称部分缺失时的输入匹配)问题大概如上所述，已经添加到问题清单中，后续问题修改和完善会随时跟进的。 密码gzqweR1234 branch_xypan 分支已合并修复功能SVN 5307 1. 标签搜索功能回退SVN 5306 2. 目标库管理，新增目标时选择其他类型时类型未上传3. 之前已修复 自主建模-标签管理，编辑查询规则时条件组显示异常 curl -XPUT ‘http://192.168.172.73:7401/_cluster/settings&#39; -H ‘Content-Type: application/json’ -d ‘{ “transient”: { “cluster”: { “max_shards_per_node”: 500000000 } }}‘ 已合并 branch_rqma(env) [fdm@fdm trunk]$ svn ci * -m ‘merge branch_rqma 修复 ipmac 数据集导入时，自动进行指标模型跑批’Sending srcSending src/server/fdm/mining/udm_mining.pySending src/server/fdm/scriptsSending src/server/fdm/services/init.pySending src/server/fdm/services/dataload.pySending src/server/fdm/services/ipmac.py SVN 5311 HR您好，我这有几个问题想问下您。 入职的Offer大概什么时候可以收到？ 我想问下后面日常工作、岗位职责中大概需要哪些技术我在这段时间再熟练、完善一下。 入职的话试用期大概多久，试用期的薪资是80%吗？ 用户打开网页打不开，你怎么解决，关键怎么排查？如何使用服务器的管理工具来进行监控， 乐观锁和悲观锁是什么，在什么场景使用，其区别？ 数据库的覆盖索引 项目中使用到的设计模式 算法题1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;…-&gt;n-1-&gt;n替换得到1-&gt;n-&gt;2-&gt;n-1-&gt;……单链数据，最后个元素放在第二位，倒数第二位放在第四位…. 位置调换要求a.自己生成链表数据b.不要用数组列表等结构c.不要用递归 最近半年看了什么书籍，学习路径和未来方向。 mv data/databases/graph.db data/databases/graph.db.bak nohup python -m fdm.scripts.reload_neo4j &gt; reload_neo4j.log &amp; sas 修改单节点最大分片数量curl -XPUT ‘http://192.168.172.73:7401/_cluster/settings&#39; -H ‘Content-Type: application/json’ -d ‘{ “transient”: { “cluster”: { “max_shards_per_node”: 500000000 } }}‘ logging模块https://www.cnblogs.com/nancyzhu/p/8551506.html 算法&amp;Python代码实现参考 https://github.com/qiwsir/algorithm 程序员必须掌握的核心算法有哪些？https://blog.csdn.net/m0_37907797/article/details/102661778 文件OS操作 123456789101112131415161718192021222324252627282930313233343536373839404142 python中对文件、文件夹的操作需要涉及到os模块和shutil模块。创建文件：1) os.mknod(“test.txt”) 创建空文件 2) open(“test.txt”,w) 直接打开一个文件，如果文件不存在则创建文件创建目录：os.mkdir(“file”) 创建目录复制文件：shutil.copyfile(“oldfile”,”newfile”) oldfile和newfile都只能是文件 shutil.copy(“oldfile”,”newfile”) oldfile只能是文件夹，newfile可以是文件，也可以是目标目录复制文件夹：shutil.copytree(“olddir”,”newdir”) olddir和newdir都只能是目录，且newdir必须不存在重命名文件（目录）os.rename(“oldname”,”newname”) 文件或目录都是使用这条命令移动文件（目录）shutil.move(“oldpos”,”newpos”)删除文件os.remove(“file”)删除目录os.rmdir(“dir”) 只能删除空目录 shutil.rmtree(“dir”) 空目录、有内容的目录都可以删转换目录os.chdir(“path”) 换路径判断目标os.path.exists(“goal”) 判断目标是否存在 os.path.isdir(“goal”) 判断目标是否目录 os.path.isfile(“goal”) 判断目标是否文件 触发模型 触发时间 爬虫相关知识123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# Python2 urllib2 与 Python3 urllib.request API对照https://blog.csdn.net/weixin_38002569/article/details/85340538# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Scrapy scrapy提升篇之配置https://segmentfault.com/a/1190000009321902scrapy使用随机User-Agenthttps://juejin.im/post/5b9fe92ce51d450e8d7651eeScrapy的随机代理中间件https://github.com/aivarsk/scrapy-proxies爬虫目录结构https://www.jianshu.com/p/6df878054091爬虫系列课程https://www.jianshu.com/nb/18470815爬虫settings 参数说明https://www.itbook5.com/2019/01/8926/1. DNS_TIMEOUT默认60s2. DOWNLOADER_MIDDLEWARES下载中间件3. DOWNLOAD_DELAY两次下载的间隔4. DOWNLOAD_TIMEOUT默认180s5. DOWNLOAD_MAXSIZE默认1024M6. LOG_ENABLED7. LOG_FILE默认是NONE8. LOG_LEVEL，默认是DEBUG，即打印DEBUG, INFO, WARNING, ERROR，所有LOG信息9. LOG_STDOUT，默认是false，所有的标准输出是否放在log中10. MEMDEBUG_ENABLED，默认是false11. RANDOMIZE_DOWNLOAD_DELAY默认是true, 等待0.5-1.5*DOWNLOAD_DELAY时间，防止被禁12. USER_AGENT默认是”Scrapy/VERSION （+http://scrapy.org） 12345# 字符串 url 链接比对d=difflib.Differ()diff=d.compare(url1.splitlines(),url2.splitlines())print(&#x27;\\n&#x27;.join(list(diff))) 标书制作 标书制作方法流程 含文档规范，注意事项等 标书制作流程(详细图文教程) ##知识点 Tips 知识点查看使用内存最多的 10 个进程ps -aux | sort -k4nr | head -n 10 查看使用 CPU 最多的 10 个进程ps -aux | sort -k3nr | head -n 10 Gremlin 语法 在 Gremlin 中进行分页查询 Gremlin 分页用于大数据集查询 Gremlin 语法 如何跳出 iframe 框架到新的页面 &gt; 服务器-158 新昌服务器-RPM 包依赖yum install libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk -yyum install postgresql-devel* -yyum install libjpeg-turbo-devel Docker run 打开一个新的容器 端口转发 主机端口:容器端口docker run –privileged=true -m 8G –cpus=”4” -itd –name code –net extnetwork –ip 172.18.0.81 -p 15001:3000 -p 15002:80 docker_7 /usr/sbin/initdocker exec -it code /bin/bash Doris Insert Into 插入官方文档http://doris.apache.org/documentation/cn/administrator-guide/load-data/insert-into-manual.html?highlight=all%20partitions%20have%20load%20data VScode-Markdown 中快速插入图片vscode 书写 Markdown 快速插入图片 picgo 2.0 插件使用 1.（Ctrl+alt+U）剪切板 2.（Ctrl+alt+E）文件夹 3.（Ctrl+alt+O）指定路径 Python-启用共享,方便其他依赖 python 的一些内置库 –enable-shared如果编译时加上了–enable-shared，才会编译这个共享库，默认的位置是 python 可执行程序所在目录的 lib 目录下，如/usr/local/python27 参考链接 12# 编译样例./configure --prefix=/usr/local --enable-shared --enable-optimizations 小知识点12345TX：发送流量RX：接收流量 查看所有进程中的得分情况1234567#!/bin/bashfor proc in $(find /proc -maxdepth 1 -regex &#x27;/proc/[0-9]+&#x27;); do printf &quot;%2d %5d %s\\n&quot; \\ &quot;$(cat $proc/oom_score)&quot; \\ &quot;$(basename $proc)&quot; \\ &quot;$(cat $proc/cmdline | tr &#x27;\\0&#x27; &#x27; &#x27; | head -c 50)&quot;done 2&gt;/dev/null | sort -nr | head -n 40 资源链接 站点地图… 各种网址 TODO 学历资料准备…. 证件等 热水袋 HugeGraph 200 docker-fdm_serverhttp://192.168.100.200:15022/ 可视化界面http://192.168.100.200:15021/graphs 后台界面有数据 200 本地 HugeGraph - 支持 HugeGraph 文件导入等功能目录: /home/colinvon/software/packages/hugegraphhttp://192.168.100.200:8088 可视化界面http://192.168.100.200:8080/graphs 后台界面无数据 3.服务启停参考脚本 200 /fdm_start.sh 4.对应配置修改项export PROJECT_GRAPH_MODE=NEO4jexport HUGEGRAPH_HOST=192.168.100.200#export HUGEGRAPH_PORT=8080export HUGEGRAPH_PORT=15021export HUGEGRAPH_DIR=/hugegraph/hugegraph-0.9.2export HUGEGRAPH_LOADER_DIR=/hugegraph/hugegraph-loader-0.9.0export HUGEGRAPH_STUDIO_DIR=/hugegraph/hugegraph-studio-0.9.0 模型固化 自主建模节点,新增模型 OK 模型固化 保存至中间库/报告 模型管理 删查 OK 改 TODO 模型运行 ok 模型日志 TODO 其他 跳转模型 - 通过回溯挖掘 跳转到自主建模 创建图 - 通过回溯挖掘的模型固化信息 - 创建自主建模 回溯挖掘参数传递 规则制定 系统跑批 模型更新 ok 单独日志记录 其他问题: 模型固化或，运行模型时，原有 ES 节点的日期限制是否剔除，还是仅增加跑批日期exp:es 节点 20170101-20180101. 跑批日期: 20170201第一种: 20170201第二种: 20170101-20180101 and 20170201 模型固化后的数据 加入到报告中吗？ 今日内容 模型固化 模型固化 保存至中间库/报告 进行中 模型删除 已完成 名称修改 udm 已完成 云计算 今日完成 模型固化-数据保存 已完成 模型固化-日志记录 进行中 JS 正则表达式使用Python 正则表达式使用python tools.py –rebuild_orm fdm_user_define_model_infopython tools.py –rebuild_orm fdm_user_define_model_nodepython tools.py –rebuild_orm fdm_user_define_model_batchpython tools.py –rebuild_orm fdm_user_define_model_log 英语作业：英语作业：1：抄写英语单词 P5 和 P7（8+4）2：完成练习册第一课时和第二课时3：熟背单词 P5 和 P7 Python 使用 re 模块正则提取字符串中括号内的内容示例123456789101112# -*- coding:utf-8 -*-#! python2import restring = &#x27;abe(ac)ad)&#x27;p1 = re.compile(r&#x27;[(](.*?)[)]&#x27;, re.S) #最小匹配p2 = re.compile(r&#x27;[(](.*)[)]&#x27;, re.S) #贪婪匹配print(re.findall(p1, string))print(re.findall(p2, string))输出：[&#x27;ac&#x27;][&#x27;ac)ad&#x27;] g.V(“1:13837540883”).repeat(bothE().otherV().simplePath()).until(hasId(“1:13837547883”).or().loops().is(gte(4))).hasId(“1:13837547883”).path().limit(1) 模型固化 bug 今日完成任务 模型固化 前端节点样式 修改 已完成 任务序号:117 数据保存 bug 修复 已完成 任务序号:98 模型固化-可疑报告保存 进行中 剩余任务 进行中 存在孤立空节点时报错 无规则可运行 存在多个模型固化节点时报错， 请重新运行此节点 模型固化-自主建模 基础节点存在部分问题 模型固化-数据保存 可疑报告模式待完成 模型固化使用说明 必须配置 ES 节点，最多配置一个模型固化节点。 今日完成 文档第三稿 已完成 数据选取, 金额无法显示问题 已完成 模型固化测试案例 已完成 模型固化修改 进行中 PI 币或可实现财富自由 https://m.jinse.com/blockchain/576343.html?source=m安卓下载地址：https://www.lanzous.com/i6pwe2jinvited code：world777 df[0:2].apply(lambda e:func(e,’phone_num’,’test’),axis=1, result_type=’broadcast’) 模型试运行的意义 模型试运行碰到的问题就是模型试运行中，因为需要运行自身的节点，但是自身节点未预览确定。导致无法试运行。 标签筛查-&gt;特征筛查sed -i “s/标签筛查/特征筛查/g” server/fdm/mining/index_inspact.pysed -i “s/标签筛查/特征筛查/g” server/fdm/mining/index_inspact.pycsed -i “s/标签筛查/特征筛查/g” server/fdm/scripts/init_menu.pysed -i “s/标签筛查/特征筛查/g” server/fdm/scripts/init_menu.pycsed -i “s/标签筛查/特征筛查/g” server/fdm/services/tag_warning.pysed -i “s/标签筛查/特征筛查/g” server/fdm/services/tag_warning.pycsed -i “s/标签筛查/特征筛查/g” server/fdm/tools/analog/data_show_suzhou.pysed -i “s/标签筛查/特征筛查/g” server/fdm/views/tag_warning.pysed -i “s/标签筛查/特征筛查/g” server/fdm/views/dataload.pycsed -i “s/标签筛查/特征筛查/g” server/fdm/views/tag_warning.pycsed -i “s/标签筛查/特征筛查/g” server/fdm/views/dataload.pysed -i “s/标签筛查/特征筛查/g” web/fdm/views/data/loadedDatasetController.jssed -i “s/标签筛查/特征筛查/g” web/fdm/services/dataloadService.jssed -i “s/标签筛查/特征筛查/g” web/fdm/main.html 筛查指标-&gt;特征筛查sed -i “s/筛查指标/特征筛查/g” server/fdm/scripts/init_index_inspact_model.py 指标筛查-&gt;特征筛查sed -i “s/指标筛查/特征筛查/g” web/fdm/views/warning_report/tag_of_warning_results.htmlsed -i “s/指标筛查/特征筛查/g” server/fdm/views/dataload.pysed -i “s/指标筛查/特征筛查/g” server/fdm/model/index_report.pysed -i “s/指标筛查/特征筛查/g” server/fdm/model/mining_models.pysed -i “s/指标筛查/特征筛查/g” server/fdm/mining/index_inspact.pysed -i “s/指标筛查/特征筛查/g” server/fdm/services/tag_warning.pysed -i “s/指标筛查/特征筛查/g” server/fdm/scripts/init_label.py 筛查特征-&gt;特征筛查sed -i “s/筛查特征/特征筛查/g” web/fdm/views/data/loaded_dataset.html 参考资源vscode Python 代码行长设置(修改代码自动换行长度) 12341. 明确代码格式化插件，默认是autopep82. 首选项，搜索autopep8, 添加项 --max-line-length=160 即可 如果其他语言，使用的是 preitter 插件 同样搜索 preitter， 找到 width ,修改此参数即可。 MarkDown 123$\\overline&#123;\\text&#123;上划线&#125;&#125;$~~中划线-删除线~~&lt;u&gt;下划线&lt;/u&gt; 中划线-删除线下划线 Bash-Shell 常用命令 12345678# 日志信息打印 标准错误和标准输出 打印到1.log中bash tmp.sh &gt; 1.log 2&gt;&amp;1# 指定行写入文件 1,10sed -n &#x27;1,10&#x27;p /etc/test1 &gt;&gt;test2 Spark-Hive 常用命令 123456789-- 查询数据select p_date,count(1) from db_ods_test.ods_ei_basic_tsc_tax_illegal_ds group by p_date order by p_date;-- 查看 HDFS 信息hadoopfs -ls hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/ 函数 说明 123456sub(pattern,repl,string) 把字符串中的所有匹配表达式pattern中的地方替换成repl[^**] 表示不匹配此字符集中的任何一个字符\\u4e00-\\u9fa5 汉字的unicode范围\\u0030-\\u0039 数字的unicode范围\\u0041-\\u005a 大写字母unicode范围\\u0061-\\u007a 小写字母unicode范围 将dataframe导成csv，并保存到本地 1234567891011121314dfResult = spark.sql(&quot;select * from tmp.lanfz_dirty_imei&quot;)dfResult.write.format(&quot;csv&quot;).option(&quot;header&quot;,&quot;true&quot;).mode(&quot;overwrite&quot;).save(&quot;/user/lanfz/dirty_imei/&quot;)# 注意：结果目录可能会产生多个文件# 提供以下两种方式合并文件，并获取到本地# 方式一(适用较大数据量)dfResult.write.format(&quot;csv&quot;).option(&quot;header&quot;,&quot;true&quot;).mode(&quot;overwrite&quot;).save(&quot;/user/lanfz/dirty_imei/&quot;)hadoop fs -getmerge /user/lanfz/dirty_imei/* dirty_imei.csv# 方式二(适用较小数据量)dfResult.repartition(1).write.format(&quot;csv&quot;).option(&quot;header&quot;,&quot;true&quot;).mode(&quot;overwrite&quot;).save(&quot;/user/lanfz/dirty_imei/&quot;)hadoop fs -get /user/lanfz/dirty_imei/* dirty_imei.csv virtualenvwrapper虚拟环境软件包，相比 Virtualenv 而言，集中了对环境的统一控制 软件配置 1234567# 安装 virtualenvwrapperpip3 install virtualenvwrapper# 配置环境变量 vim ~/.bashrcexport WORKON_HOME=$HOME/.virtualenvs (虚拟环境工作目录)export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.6 (虚拟环境运行的python版本)source /usr/local/bin/virtualenvwrapper.sh(virtualenvwrapper脚本所在目录) 常用命令 123456789101112131415161718192021# 查看所有虚拟环境lsvirtualenvworkon# 激活/切换虚拟环境workon [虚拟机环境名称]# 退出虚拟环境deactivate# 创建虚拟环境mkvirtualenv [虚拟机环境名称] [--python=xxxx 指定Python版本]# 删除虚拟环境rmvirtualenv [虚拟机环境名称]# 进入虚拟环境目录cdvirtualenv# 列出虚拟环境的包lssitepackages click 文件传参参考链接 Linux-crontab 定时任务配置TODO 待完善 crontab 命令用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行 Crontab 有三种格式。Linux/Java(Sprint)/Java(Quartz), 其中 Linux 不支持秒，其他都支持秒！！！ 默认 Linux 系统采用的是 linux-crontab。 Linux-crontab 使用说明 Cron 表达式的详细用法 Cron 验证工具-支持各种模式 Crontab 在线生成工具 Linux-Crontab 说明 123456789101112131415161718# 配置说明/var/spool/cron/ 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名/etc/crontab 这个文件负责调度各种管理和维护任务。/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。我们还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。# crontab [-u username] //省略用户表表示操作当前用户的crontab -e (编辑工作表) -l (列出工作表里的命令) -r (删除工作作)# crontab* 取值范围内的所有数字/ 每过多少个数字- 从X到Z，散列数字 Linux-Crontab 配置 123456789101112131415161718192021# 分 时 天 月 星期(0和7为周日)[0-59] [0-23] [1-31] [1-12] [0-7]特殊字符说明- *- , 匹配多个时间. 3,4- L 代表last. 5L 最后一个星期五/一个月的最后一天- W 指定最接近给定日期的工作日（星期一-星期五）. 15W，意思是：“最接近该月15日的工作日- ? “?”用来代替“*”以将月中的某一天或周中的某一天留空 # TODO- / */5 每5min执行一次# &gt; 参考样例# 每月最后一天0 0 L * *# 日和周的冲突问题 只有在日和周两者都不是*的时候，才是or的关系# 7月13号 或 7月的每周二0 0 13 7 2https://www.runoob.com/w3cnote/linux-crontab-tasks.html 浏览器相关12# SwitchyOmega.crx 安装提示 CRX_HEADER_INVALID重命名为rar,解压后，使用chrome的导入解压包进行导入 文件读写 with open as文件读写 1234567891011w：以写方式打开，a：以追加模式打开 (从 EOF 开始, 必要时创建新文件)r+：以读写模式打开w+：以读写模式打开 (参见 w )a+：以读写模式打开 (参见 a )rb：以二进制读模式打开wb：以二进制写模式打开 (参见 w )ab：以二进制追加模式打开 (参见 a )rb+：以二进制读写模式打开 (参见 r+ )wb+：以二进制读写模式打开 (参见 w+ )ab+：以二进制读写模式打开 (参见 a+ )fp.read([size]) 常用工具typoratypora 使用手册 json-flattenpython 函数用于将 json 对象展平为一个成对的字典，并将该字典取消扩展为 json 对象，适合数据传输 json-flatten zabbix-分布式系统监视和网络监视zabbix 浏览器插件Google 浏览器插件-掘金 (新标签页时打开掘金网站)","categories":[],"tags":[]},{"title":"乐观锁与悲观锁","slug":"Tools/A-Tips/tips001","date":"2021-10-23T11:54:51.150Z","updated":"2021-10-23T11:54:51.151Z","comments":true,"path":"Tools/A-Tips/tips001.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/tips001.md/","excerpt":"","text":"概念 乐观锁 概念: 乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做 使用场景 多读少写场景 优缺点 乐观锁并未真正加锁，效率高。一旦锁的粒度掌握不好，更新失败的概率就会比较高，容易发生业务失败 悲观锁 概念： 使用场景 多写少读场景 优缺点 悲观锁依赖数据库锁，效率低。更新失败的概率比较低 参考链接 什么是乐观锁，什么是悲观锁 乐观锁与悲观锁","categories":[],"tags":[]},{"title":"数据结构2","slug":"Tools/A-Tips/datastruct-index","date":"2021-10-23T11:54:51.149Z","updated":"2021-10-23T11:54:51.149Z","comments":true,"path":"Tools/A-Tips/datastruct-index.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/datastruct-index.md/","excerpt":"","text":"tags: 知识点 数据结构 2020 年 01月 知识简介数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。 数据结构数据结构说明 逻辑结构 1.集合: 数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系； 2.线性结构: 数据结构中的元素存在一对一的相互关系； 3.树形结构: 数据结构中的元素存在一对多的相互关系； 4.图形结构: 数据结构中的元素存在多对多的相互关系 物理结构/存储结构 数组(Array) 数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。 栈(Stack) 栈是一种特殊的线性表，它只能在一个表的一个固定端进行数据结点的插入和删除操作。栈按照后进先出的原则来存储数据。 队列(Queue) 队列和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。一般来说，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。队列中没有元素时，称为空队列。 链表(Linked List) 链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。链表由一系列数据结点构成，每个数据结点包括数据域和指针域两部分。其中，指针域保存了数据结构中下一个元素存放的地址。链表结构中数据元素的逻辑顺序是通过链表中的指针链接次序来实现的。 树(Tree) 树是典型的非线性结构，它是包括，2 个结点的有穷集合 K。在树结构中，有且仅有一个根结点，该结点没有前驱结点。在树结构中的其他结点都有且仅有一个前驱结点，而且可以有两个后继结点，m≥0。 图(Graph) 图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。如果两个顶点之间存在一条边，那么就表示这两个顶点具有相邻关系。 堆(Heap) 堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。堆的特点是根结点的值是所有结点中最小的或者最大的，并且根结点的两个子树也是一个堆结构。 散列表(Hash) 散列表源自于散列函数(Hash function)，其思想是如果在结构中存在关键字和 T 相等的记录，那么必定在 F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录 常用算法数据结构研究的内容: 就是如何按一定的逻辑结构，把数据组织起来，并选择适当的存储表示方法把逻辑结构组织好的数据存储到计算机的存储器里。研究的目的是为了更有效的处理数据，提高数据运算效率。数据的运算是定义在数据的逻辑结构上，但运算的具体实现要在存储结构上进行。一般有以下几种常用运算: (1)检索。检索就是在数据结构里查找满足一定条件的节点。一般是给定一个某字段的值，找具有该字段值的节点。 (2)插入。往数据结构中增加新的节点。 (3)删除。把指定的结点从数据结构中去掉。 (4)更新。改变指定节点的一个或多个字段的值。 (5)排序。把节点按某种指定的顺序重新排列。例如递增或递减","categories":[],"tags":[]},{"title":"术语知识","slug":"Tools/A-Tips/info","date":"2021-10-23T11:54:51.149Z","updated":"2021-10-23T11:54:51.149Z","comments":true,"path":"Tools/A-Tips/info.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/info.md/","excerpt":"","text":"参考资源 RPC 简介及框架选择 微服务架构 Python 爬虫自动化解析https://blog.csdn.net/u012922806/article/details/92234214 Python 自动化神器,无需写代码https://blog.csdn.net/weixin_41666747/article/details/112057316 Pholcus（幽灵蛛）是一款纯 Go 语言编写的支持分布式的高并发爬虫软件https://github.com/henrylee2cn/pholcus 1. http 状态码/header/请求方法, 哪些请求方法是幂等的2. https 加密原理HTTPS 加密原理 3. python 协程原理/缺点python 编程使用协程并发的优缺点 http 状态码/header/请求方法, 哪些请求方法是幂等的 5. python gevent 协程调度原理/缺点14. http 状态码 HTTP 响应代码 响应分为五类 信息响应(100–199) 成功响应(200–299) 重定向(300–399) 客户端错误(400–499) 服务器错误 (500–599) 17. 乐观锁 / 悲观锁 乐观锁与悲观锁 20. Hbase 底层原理Hbase 底层原理 大数据质量监控平台https://www.jianshu.com/p/64bdf3d5583e数据质量监控工具-Apache Griffinhttps://blog.csdn.net/vipshop_fin_dev/article/details/86362706 MarkDown-Html 语法机制 Spark SQL原理与应用https://blog.csdn.net/olizxq/article/details/81604658 Linux前台、后台、挂起、退出、查看命令汇总https://blog.csdn.net/weixin_40064477/article/details/78970312https://blog.csdn.net/matthewei6/article/details/50573592 Linux 文件的去重 https://www.cnblogs.com/followees/p/7845575.html – Hadoop集群的配置文件 /home/scrapyer/hadoop/bin/hadoop fs -conf /home/scrapyer/spark/conf/offline-hdfs/hdfs-site.xml","categories":[],"tags":[]},{"title":"优质有趣Github项目","slug":"Tools/A-Tips/A-hot-github","date":"2021-10-23T11:54:51.148Z","updated":"2021-10-23T11:54:51.148Z","comments":true,"path":"Tools/A-Tips/A-hot-github.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/A-hot-github.md/","excerpt":"","text":"tags: github 2019年 Github项目 有趣的项目 seq2seq-couplet AI自动对对联 nocode 无任何代码,新手必学项目,传奇项目 hangzhou_house_knowledge 杭州买房经历 呼吸不止,码字不停 有趣的项目呼吸不止,码字不停锻炼码字效率，暂停三秒，所有记录都会丢失。 多进程增量爬取智联招聘职位信息https://github.com/Python3SpiderOrg/zhilianzhaopin.git https://www.zhihu.com/answer/974431591 技术大类 ★★★★★ Python-资料大全-awesome-python ★★★★★ awesome 库集合 技术小类 Python 日志带颜色 Python 爬虫学习 工具类 ★★★★★ 浏览器插件大全 其他 ★☆☆☆☆ 破解网站大全 博客参考网站","categories":[],"tags":[]},{"title":"趣味算法题大全附详细解法","slug":"Tools/A-Tips/B04-趣味算法题","date":"2021-10-23T11:54:51.148Z","updated":"2021-10-23T11:54:51.148Z","comments":true,"path":"Tools/A-Tips/B04-趣味算法题.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/B04-%E8%B6%A3%E5%91%B3%E7%AE%97%E6%B3%95%E9%A2%98.md/","excerpt":"","text":"趣味算法题 1000 桶水，其中一桶有毒，猪喝毒水后会在 15 分钟内死去，想用一个小时找到这桶毒水，至少需要几头猪？ 有一栋 100 层高的大楼，给你两个完全相同的玻璃球。假设从某一层开始，丢下玻璃球会摔碎。那么怎么利用手中的两个球，用什么最优策略知道这个临界的层是第几层? 汉诺塔问题 一个人爬楼梯，每次只能爬 1 个或 2 个台阶，假设有 n 个台阶，那么这个人有多少种不同的爬楼梯方法？ 斐波那契数列 趣味算法题1000 桶水，其中一桶有毒，猪喝毒水后会在 15 分钟内死去，想用一个小时找到这桶毒水，至少需要几头猪？提示: 转为多维问题。在轮次中存活的猪可以同时喝水 题解 扩展题: 多桶有毒的情况？所有参数皆为可变参数的时候，如何来处理？ TODO 有一栋 100 层高的大楼，给你两个完全相同的玻璃球。假设从某一层开始，丢下玻璃球会摔碎。那么怎么利用手中的两个球，用什么最优策略知道这个临界的层是第几层?提示：动态规划. 平均每种情况下的次数。 题解 扩展思路： 多个球时，如何采用最优策略？ 如果 2 球时采用 10*10 = 100, 10 次作为间隔，最差 17 次, 最好 8 次. 如果 90 层没有碎，后面可以采用中分法来减少次数。如果 90 层碎了，则最坏情况为 9 + 8 = 17 次 汉诺塔问题 汉诺塔问题：古代有一个梵塔，塔内有三个座 A、B、C，A 座上有 64 个盘子，盘子大小不等，大的在下，小的在上。有一个和尚想把这个盘子从 A 座移到 B 座，但每次只能允许移动一个盘子，并且在移动过程中，3 个座上的盘子始终保持大盘在下，小盘在上。 题解 提示: 迭代法 一个人爬楼梯，每次只能爬 1 个或 2 个台阶，假设有 n 个台阶，那么这个人有多少种不同的爬楼梯方法？提示: 迭代法 题解 12345678910111213141516171819202122232425262728# 类似于 斐波那契数列# 0 1 1 2 3 5 8 13 21# 迭代法def fun(n): if n == 1: return 1 if n == 2: return 2 return fun(n-1) + fun(n-2)# 动态规划 存储计算中值，减少计算量def fun(n): if n == 1: return 1 if n == 2: return 2 a = 1 b = 2 tmp = a + b for i in range(3, n): tmp = a + b a = b b = tmp return tmpprint(fun(6)) 斐波那契数列斐波那契数列的 5 种 python 实现写法","categories":[],"tags":[]},{"title":"算法与数据结构之链表","slug":"Tools/A-Tips/datastruct-chain","date":"2021-10-23T11:54:51.148Z","updated":"2021-10-23T11:54:51.149Z","comments":true,"path":"Tools/A-Tips/datastruct-chain.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/datastruct-chain.md/","excerpt":"","text":"链表链表是计算机科学中最常用的数据结构之一。它也是最简单的结构之一，也是更高层结构(如堆栈、循环缓冲区和队列)的基础 定义 链表是计算机科学中最常用的数据结构之一。它也是最简单的结构之一，也是更高层结构(如堆栈、循环缓冲区和队列)的基础 列表是通过引用连接的单个数据元素的集合.数据元素可以由地址数据、地理数据、几何数据、路由信息或事务细节组成。通常，链接列表的每个元素都具有特定于列表的相同数据类型 单个列表元素称为节点。节点不同于顺序存储在内存中的数组。相反，它可能会在不同的内存段中找到它们，您可以通过跟踪从一个节点到下一个节点的指针找到这些内存段。通常使用 null 元素标记列表的结尾，该元素由 python 等效的 None 表示。 链表就是将一系列不连续的内存联系起来，将那种碎片内存进行合理的利用，解决空间的问题 链表允许插入和删除表上任意位置上的节点，但是不允许随即存取 内存中的存储形式可以分为连续存储和离散存储两种。因此，数据的物理存储结构就有连续存储和离散存储两种，它们对应了我们通常所说的数组和链表。 单链表数据结构 head 保存首尾节点的地址 data1,next -&gt; data2,next -&gt; data3,next 双链表数据结构 head=None 时为首节点，next=null 时为尾节点 head,data,next -&gt; head,data,next -&gt; head,data,next 链表类型 单链接列表 节点只指向列表中的下一个元素 双链接列表 节点指向列表中的下一个元素，也指向上一个节点 循环链表 循环链表就是首节点和末节点被连接在一起。循环链表中第一个节点之前就是最后一个节点 链表应用场景 数组应用场景： 数据比较少 经常做的运算是按序号访问数据元素；数组更容易实现，任何高级语言都支持； 构建的线性表较稳定。 链表应用场景： 对线性表的长度或者规模难以估计 频繁做插入删除操作 构建动态性比较强的线性表。 手把手实现 python 的链表数据结构 数组和链表差异分析 数组和链表的差异分析 差异点 链表是链式的存储结构；数组是顺序的存储结构。 链表通过指针来连接元素与元素，数组则是把所有元素按次序依次存储。 链表的插入删除元素相对数组较为简单，不需要移动元素，且较为容易实现长度扩充，但是寻找某个元素较为困难； 数组寻找某个元素较为简单，但插入与删除比较复杂，由于最大长度需要再编程一开始时指定，故当达到最大长度时，扩充长度不如链表方便。 相同点 两种结构均可实现数据的顺序存储，构造出来的模型呈线性结构。 单链表和双链表的差异 一、方向不同 单链表只有指向下一个结点的指针 双链表既有指向下一个结点的指针，也有指向上一个结点的指针 二、适用情况不同 单向链表更适合元素的增加与删除 双向链表更适合元素的查询工作 三、读取不同 单链表只能单向读取 双链表可以双向读取 链表的代码实现单链表 Python 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145class Node: def __init__(self, data): self.data = data self.next = None def __str__(self): return str(self.data)# 通过单链表构建一个list的结构： 添加 删除 插入 查找 获取长度 判断是否为空...# list1 = [] list1.append(5) [5,] slist = SingleList() slist.append(5)class SingleList: def __init__(self, node=None): self._head = node def isEmpty(self): return self._head == None def append(self, item): # 尾部添加 node = Node(item) if self.isEmpty(): self._head = node else: cur = self._head while cur.next != None: cur = cur.next cur.next = node # 求长度 def len(self): cur = self._head count = 0 while cur != None: count += 1 cur = cur.next return count # 遍历 def print_all(self): cur = self._head while cur != None: print(cur) cur = cur.next def pop(self, index): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if index == 0: self._head = self._head.next else: cur = self._head # 找到当前下标的前一个元素 while index - 1: cur = cur.next index -= 1 # 修改的next的指向位置 cur.next = cur.next.next def insert(self, index, item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) if index == 0: node.next = self._head self._head = node else: cur = self._head while index - 1: cur = cur.next index -= 1 node.next = cur.next cur.next = node def update(self, index, new_item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(new_item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(new_item) if index == 0: node.next = self._head.next self._head = node else: cur = self._head node.next = cur.next.next cur.next = node def remove(self, item): if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) cur = self._head while cur == node: cur = cur.next cur.next = cur.next.nextif __name__ == &#x27;__main__&#x27;: slist = SingleList() print(slist.isEmpty()) # True print(slist.len()) slist.append(5) print(slist.isEmpty()) # False print(slist.len()) # 1 slist.append(8) slist.append(6) slist.append(3) slist.append(1) print(slist.isEmpty()) # True print(slist.len()) print(&#x27;---------------------&#x27;) slist.print_all() print(&#x27;----------pop-------------&#x27;) slist.pop(2) slist.print_all() print(&#x27;--------insert-------&#x27;) slist.insert(1, 19) slist.print_all() print(&#x27;--------update-------&#x27;) slist.update(1, 18) slist.print_all() print(&#x27;--------remove-------&#x27;) slist.remove(18) slist.print_all() 双链表 Python 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145&#x27;&#x27;&#x27;双向链表&#x27;&#x27;&#x27;class Node: def __init__(self, data): self.data = data self.next = None self.prev = None def __str__(self): return str(self.data)class DoubleList: def __init__(self): self._head = None def isEmpty(self): return self._head == None def append(self, item): # 尾部添加 node = Node(item) if self.isEmpty(): self._head = node else: cur = self._head while cur.next != None: cur = cur.next cur.next = node # 求长度 def add(self, item): node = Node(item) if self.isEmpty(): self._head = node else: node.next = self._head self._head.prev = node self._head = node def len(self): cur = self._head count = 0 while cur != None: count += 1 cur = cur.next return count def print_all(self): cur = self._head while cur != None: print(cur) cur = cur.next def insert(self, index, item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) if index == 0: node.next = self._head node.prev = self._head.prev self._head = node else: cur = self._head while index - 1: cur = cur.next index -= 1 node.next = cur.next node.prev = cur.prev cur.next = node cur.prev = node.prev def remove(self, item): if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) cur = self._head while cur == node: cur = cur.next cur.next = cur.next.next cur.prev = cur.prev def update(self, index, new_item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(new_item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(new_item) if index == 0: node.next = self._head.next node.prev = self._head.prev self._head = node else: cur = self._head node.next = cur.next.next node.prev = cur.prev cur.next = node cur.prev = nodeif __name__ == &#x27;__main__&#x27;: dlist = DoubleList() print(dlist.len()) print(dlist.isEmpty()) # dlist.append(6) # dlist.append(9) # dlist.append(5) # print(dlist.len()) # print(dlist.isEmpty()) # dlist.print_all() dlist.add(6) dlist.add(9) dlist.add(5) dlist.print_all() print(&#x27;--------insert-------&#x27;) dlist.insert(1, 19) dlist.print_all() print(&#x27;--------update-------&#x27;) dlist.update(1, 18) dlist.print_all() print(&#x27;--------remove-------&#x27;) dlist.remove(18) dlist.print_all() 单链表和双链表的 Python 代码实现 相关资源","categories":[],"tags":[]},{"title":"数据结构","slug":"Tools/A-Tips/03-数据结构","date":"2021-10-23T11:54:51.147Z","updated":"2021-10-23T11:54:51.147Z","comments":true,"path":"Tools/A-Tips/03-数据结构.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/03-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md/","excerpt":"","text":"tags: 知识点 数据结构 2020 年 01 月 知识简介数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。 数据结构数据结构说明 逻辑结构 1.集合: 数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系； 2.线性结构: 数据结构中的元素存在一对一的相互关系； 3.树形结构: 数据结构中的元素存在一对多的相互关系； 4.图形结构: 数据结构中的元素存在多对多的相互关系 物理结构/存储结构 数组(Array) 数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。 栈(Stack) 栈是一种特殊的线性表，它只能在一个表的一个固定端进行数据结点的插入和删除操作。栈按照后进先出的原则来存储数据。 队列(Queue) 队列和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。一般来说，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。队列中没有元素时，称为空队列。 链表(Linked List) 链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。链表由一系列数据结点构成，每个数据结点包括数据域和指针域两部分。其中，指针域保存了数据结构中下一个元素存放的地址。链表结构中数据元素的逻辑顺序是通过链表中的指针链接次序来实现的。 树(Tree) 树是典型的非线性结构，它是包括，2 个结点的有穷集合 K。在树结构中，有且仅有一个根结点，该结点没有前驱结点。在树结构中的其他结点都有且仅有一个前驱结点，而且可以有两个后继结点，m≥0。 图(Graph) 图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。如果两个顶点之间存在一条边，那么就表示这两个顶点具有相邻关系。 堆(Heap) 堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。堆的特点是根结点的值是所有结点中最小的或者最大的，并且根结点的两个子树也是一个堆结构。 散列表(Hash) 散列表源自于散列函数(Hash function)，其思想是如果在结构中存在关键字和 T 相等的记录，那么必定在 F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录 常用算法数据结构研究的内容: 就是如何按一定的逻辑结构，把数据组织起来，并选择适当的存储表示方法把逻辑结构组织好的数据存储到计算机的存储器里。研究的目的是为了更有效的处理数据，提高数据运算效率。数据的运算是定义在数据的逻辑结构上，但运算的具体实现要在存储结构上进行。一般有以下几种常用运算: (1)检索。检索就是在数据结构里查找满足一定条件的节点。一般是给定一个某字段的值，找具有该字段值的节点。 (2)插入。往数据结构中增加新的节点。 (3)删除。把指定的结点从数据结构中去掉。 (4)更新。改变指定节点的一个或多个字段的值。 (5)排序。把节点按某种指定的顺序重新排列。例如递增或递减 Resourcespython 队列基本使用","categories":[],"tags":[]},{"title":"算法","slug":"Tools/A-Tips/04-算法","date":"2021-10-23T11:54:51.147Z","updated":"2021-10-23T11:54:51.148Z","comments":true,"path":"Tools/A-Tips/04-算法.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/04-%E7%AE%97%E6%B3%95.md/","excerpt":"","text":"tags: 知识点 算法 2020年 01月 洗牌算法洗牌算法Fisher–Yates shuffle 算法由 Ronald Fisher 和 Frank Yates 于 1938 年提出，在 1964 年由 Richard Durstenfeld 改编为适用于电脑编程的版本。这个算法很牛逼却很好理解，通俗的解释就是：将最后一个数和前面任意 n-1 个数中的一个数进行交换，然后倒数第二个数和前面任意 n-2 个数中的一个数进行交换。。。 参考链接: 洗牌算法 TODO 数据结构基础知识 数据结构是什么，其特性有缺点，使用场景，基础使用等等 TODO 算法的基础使用，优缺点，使用场景，底层逻辑，时间空间复杂度分析等等 数据结构常见数据结构与算法整理总结(上) 算法迭代法关键点: 将一个原问题修改为子问题 对子问题重复调用计算 特性： 重复计算多，耗时高，时间复杂度高 动态规划 关键点: 将一个原问题修改为子问题 试图只解决每个子问题一次，一旦其问题已经解决，会将其存储，从而避免重复计算 特性: 尽量避免重复计算，时间复杂度低。 关键概念 最优子结构 边界 状态转移公式 1234567891011121314151617181920212223242526# 动态规划 存储计算中值，减少计算量def fun(n): if n == 1: return 1 if n == 2: return 2 a = 1 b = 2 tmp = a + b for i in range(3, n): tmp = a + b a = b b = tmp return tmp# 迭代法def fun(n): if n == 1: return 1 if n == 2: return 2 return fun(n-1) + fun(n-2)f(10) = f(9) + f(8) 是【最优子结构】f(1) 与 f(2) 是【边界】f(n) = f(n-1) + f(n-2) 【状态转移公式】 相关资源 ★★★★★ TODO 五分钟学算法：算法与数据结构文章详细分类与整理！ 图解 递归与动态规划 ResourcesPython 算法及其实现 https://github.com/qiwsir/algorithmhttps://github.com/keon/algorithms https://github.com/TheAlgorithms/Pythonhttps://github.com/Jack-Lee-Hiter/AlgorithmsByPythonhttps://github.com/apachecn/Interview https://github.com/openai/gym","categories":[],"tags":[]},{"title":"术语知识","slug":"Tools/A-Tips/001-术语知识","date":"2021-10-23T11:54:51.146Z","updated":"2021-10-23T11:54:51.146Z","comments":true,"path":"Tools/A-Tips/001-术语知识.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/001-%E6%9C%AF%E8%AF%AD%E7%9F%A5%E8%AF%86.md/","excerpt":"","text":"术语知识线程安全 TCP、UDP TODO 后续术语单独成文，作为引用存放此处 FTP、FTPS、SFTP FTP、FTPS、SFTP FTP 工作原理 主动模式 被动模式 FTPS 隐式 FTPS 显式 FTPS SFTP FTP 简介: FTP 即 文件传输协议(英语：File Transfer Protocol 的缩写)是一个用于计算机网络上在客户端和服务器之间进行文件传输的应用层协议。完整的 FTP 是由 FTP 服务器 和 FTP 客户端组成的，客户端可以将本地的文件通过 FTP 协议上传到服务器，也可以将服务器的文件下载到本地。它是当今使用的最古老的文件传输协议之一，是一种非常便捷的移动文件的方式。 FTP 的工作原理: FTP 连接需要 FTP 服务器和客户端两方在网络上建立通信。建立 FTP 连接时会有两个不同的通信通道。一个被称为命令通道，它的作用是发出和响应指令。另一个为数据通道，用于客户端和服务器端进行数据交互。使用 FTP 传输文件时，用户需要通过向 FTP 服务器提供凭据来获得文件传输许可。当然某些公共 FTP 服务器可能不需要凭据即可访问其文件，但是无法保证数据传输的安全性，任何未加密公共网络上的数据发送都是非常危险的，所以为了保护传输数据的安全，由 FTP 衍生而出的就是下面的两种协议：FTPS 与 SFTP。 FTPS 隐式 显式: FTPS 有 FTPS 隐式 SSL 和 FTPS 显示 SSL 两种模式，两者都是用 SSL 加密。那么两者有什么区别呢？ FTPS 隐式 SSL：该模式通常在端口 990 上运行。在这个模式下全部数据的交换都需要在客户端和服务器之间建立 SSL 会话，并且服务器会拒绝任何不使用 SSL 进行的连接尝试。 FTPS 显式 SSL：显示 SSL 下服务器可以同时支持 FTP 和 FTPS 会话。开始会话前客户端需要先建立与 FTP 服务器的未加密连接，并在发送用户凭证前先发送 AUTH TLS 或 AUTH SSL 命令来请求服务器将命令通道切换到 SSL 加密通道，成功建立通道后再将用户凭证发送到 FTP 服务器，从而保证在会话期间的任何命令都可以通过 SSL 通道自动加密。 当启用隐式模式时，FTP 的默认端口就被改为 TCP/990，服务器自动建立安全连接，并且要求客户端也必须支持安全连接模式也就是使用 SSL 进行连接。当启用显式模式时，与 FTP 连接方式和默认端口一样，但是需要以命令 AUTH SSL/TLS 类型的命令进行激活安全连接后才能正常传输数据。 SFTP: SFTP 是 Secure File Transfer Protocol 的缩写，也叫作安全文件传送协议。如果说 FTPS 是在 FTP 协议上增加了一层 SSL ，那么 SFTP 就是是基于网络协议 SSH(安全外壳)的协议与前面所说的 FTP 完全不同。SFTP 不使用单独的命令通道和数据通道，而是数据和命令都会通过单个连接以特殊格式的数据包进行传输。 SFTP 提供了两种验证连接的方法。 与 FTP 一样，连接时只需要验证用户 ID 和密码就可以了。但是，与 FTP 不同的是，这些凭据是加密的，这是 SFTP 最主要的安全优势。 除密码外，还可以通过 SSH 密钥来验证并通过 SFTP 协议连接。 FTP 软件的主动模式和被动模式的区别： 主动模式 一般 FTP 的默认模式就是主动模式，也称为 port 模式。它是通过两个步骤来进行工作的： 首先客户端上的随机端口与服务器上的 FTP 端口 21 建立命令通道，客户端发送 PORT 命令，指定服务器与客户端其中一个端口连接，并建立数据通道。 然后服务器从端口 20 连接到为数据通道指定的客户端端口。建立连接后，即可通过这些客户端和服务器端口进行文件传输。 被动模式 在传输方式栏，你还可以手动调整为被动传输模式，在该模式下用户端进行文件传输时，会先通过随机端口 A 连接到服务器上的端口 21，并发出 PASV 命令建立命令通道，告诉服务端这次是被动模式连接。之后服务器会打开一个随机端口用于数据传输，而客户端通过与发出命令的端口不同的随机端口 B 建立数据通道，从而进行文件传输。 被动模式与主动模式不同的地方就是客户端启动数据连接。在主动模式下，客户端在命令通道上建立连接后，服务器将启动与客户端的数据连接。而在被动模式下，建立命令通道后，由客户端启动与服务器的数据连接。 因为这个区别，可以得出两者的优势和缺陷。比如主动模式有利于管理 FTP 服务端，因为只需要打开 21 端口的“准入”、20 端口的“准出” 即可，但是由于服务器连接到客户端的端口随机，所以客户端有可能会触发防火墙，甚至直接被防火墙拦截掉。反之被动模式则有利于管理客户端。 浅谈 FTP、FTPS 与 SFTP 术语简介 术语简称 英文名称 术语全称 IDE integrated-development-environment 集成开发环境 OOP object-oriented-programming 面向对象编程 OSS open-source-software 开源软件 API application-programming-interface 应用程序接口 SDK software-development-kit 软件开发包 ECMA European-computer-manufactures-association 欧洲计算机制造商协会 IIFE immediately-invoked-function-expression 立即执行函数表达式 ASP Active Server Page 动态服务器主页 ISP Internet Service Provider 因特网服务提供商 URL Uniform Resource Locator 统一资源定位系统 BBS Bulletin Board Service 公告牌服务 FTP File Transfer Protocol 文件传输协议 HTML HyperText Markup Language 超文本标记语言 HTTP HyperText Transfer Protocol 超文本传输协议 XML Extensible Markup Language 可扩展标记语言 XSL Extensible Style Sheet Language 可扩展设计语言 MVC Model View Controller 编程模式模型，视图，控制器 JSON JavaScript Object Notation JavaScript 对象表示法 AJAX Asynchronous JavaScript and XML 异步的 JavaScript 和 XMLPHP PHP Personal Home Page 超文本预处理器,已经正式更名为 “PHP: Hypertext Preprocessor” SSL secure-sockets-layer 安全套接层 TLS transport-layer-security 安全传输层协议 CURD create-update-retrieve-delete 创建，更新，读取，删除 CDN content-delivery-network 内容分发网络 DDOS distributed-denial-of-servuce 分布式拒绝服务攻击 DNS domain-name-system 域名系统 QPS query-per-second 每秒查询率 PO purchase-order 订单 OA office-automatic 办公自动化 SEO search-engine-optimization 搜索引擎优化 SEM search-engine-marketing 搜索引擎营销 DOS disk-operating-system 磁盘操作系统 SSD solid-state-drives 固态硬盘 VPN virtual-private-network 虚拟专用网络 POLA principle of least authority 最低授权原则 DDL Data Definition Language 数据库模式定义语言 TFS Taobao File System 分布式文件系统 UML Unified Modeling Language 统一建模语言或标准建模语言 TCP/IP Transmission Control Protocol/Internet Protocol 传输控制协议/因特网互联协议，又名网络通讯协议 SOA Service Oriented Architecture 面向服务的架构 ESB Enterprise Service Bus 企业服务总线 CRM Customer Relationship Management 客户关系管理 ERP Enterprise Resourse Planning 企业资源规划系统 MIS Management Information System 企业信息管理系统 CMS Content Management System 网站内容管理系统 SCM Supply Chain Management 供应链管理系统 AI Artificial Intelligence 人工智能 BI Business Intelligence 商务智能 PR PageRank 网页级别 PV page view 页面浏览量 EC Electronic Commerce 电子商务 B2C Business to Customer 商对客电子商务模式 B2B Business to Business 商对商电子商务模式 C2C customer to customer 个人与个人之间的电子商务 B2B2C business to business to Customer 电子购物平台模式 O2O Online To Offline 在线离线/线上到线下 P2P Peer to Peer 对等网络 B2G business-to-government 商家到政府 O2C-A Office to Customer 企业对客户进行专人定制服务 O2C-B Online to Configuration 在线配置型电子商务模式 O2C-C Oldpainters to Customization 品牌和服务叠加个性化定制","categories":[],"tags":[]},{"title":"知识清单","slug":"Tools/A-Tips/002-知识清单","date":"2021-10-23T11:54:51.146Z","updated":"2021-10-23T11:54:51.146Z","comments":true,"path":"Tools/A-Tips/002-知识清单.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/002-%E7%9F%A5%E8%AF%86%E6%B8%85%E5%8D%95.md/","excerpt":"","text":"TODO 清单面试资料大全 一面 http 状态码/header/请求方法, 哪些请求方法是幂等的 https 加密原理 python 协程原理/缺点 python GIL, 为什么有 GIL 还需要 threading python gevent 协程调度原理/缺点 设计一个文本编辑器实现插入/删除/查询 头条文章向用户推送避免重复推送的问题 工作中遇到的印象深刻的问题 两个单链表求和 两种存储引擎 http 的返回码 mysql 索引 链表操作(在线写代码) http 状态码 UDP / TCP 协议 链表操作 [手写代码] 乐观锁 / 悲观锁 三次握手 Socket Hbase 底层原理 Map 底层原理 数据库分表 / 分库 / 集群 给定一个二叉树. 返回二叉树每层的最左的值。 手里有一副扑克牌。按照下列规则吧他堆放桌上。一. 拿出最上面的一张牌. 放桌上. 然后把接下来的一张牌放在扑克牌的最下面。循环. 直到没有手牌。现在已知桌上牌的顺序。求原手牌的顺序。 redis 内存不足. 如何解决 mysql 索引的使用和原理 epoll 和 poll,select 的区别 实现一个有顺序的 LinkedList. 实现 deleteAll(int val)方法删除所有值为 val 的节点. 和 save(int val)方法添加一个值为 val 的节点。 线程池的工作流程。线程的几种状态. 什么情况会进入阻塞 JDK 基础 集合 锁 Mysql 的索引结构 聚簇索引 限流。限流算法。令牌桶的不足 GC CMS. CMS 的参数 JVM 的一些排查工具 jstat, jstack ,jmap 工作中遇到的问题如何排查 一排盒子. 每个盒子上标了能走的最大步数. 从第一个盒子开始. 判断能否走到最后的盒子 栈 增加一个 max 方法； 自己设计 hash； 微博限定用户每次输入最多 140 个字符. 用户如果传字符串很长的链接. 怎么办 输入一串空格分开的整数. 相邻不会重复如：1 2 4 3 5. 只返回其中一个峰值就可以. 比如返回 4 或者 5。 峰值定义：大于相邻两个数字就是峰值；对于头尾两个数字. 分别大于相邻的一个数字即算峰值 二叉树镜像 两个线程. 一个只能存有数组 1. 2. 3 和另一个存有 a. b. c. 然后通过调度. 最终结果输出 1a2b3c 输入一个 int 数组. 返回一个数组. 其中奇数都在左边. 偶数都在右边 附加条件 不使用额外的空间 java 多线程知识点. 如 synchronized. reentrantLock 以及两者比较 java 线程池. submit 跟 execute 的区别 stack 实现一个 min 方法. O(1)的复杂度 数据库两种引擎比较 数据库 3 个字段的联合索引. 在用单字段时能否命中索引 数据库如何建索引. 和如何分库分表 找到一个文件里出现次数最多的的数字. 文件大小远大于内存容量 10G 文件 1G 内存. 打印重复数字 查找前 topK 给一个数组和一个整数. 输出数组中所有和为给定整数的元素下标 MySQL 两种存储引擎的差异； where a&gt;1 and b&gt;1;where a = 1; where b = 2,如何为这种条件语句建立索引； LRU 的实现 介绍一个项目中遇到的问题。 一个 100G 的文件. 内存只有 8G. 如何给文件排序. 文件内容都是按行存储的 URL a. 产品设计过程中面对的挑战和难点；b. 周围同事对我的评价；c. 产品设计考虑的几个点 k 路归并排序 lru 原理要非常详细的数据结果和过程结构 给个数组. 只有重复的. 求所有和为 21 的下标:不用 n2 的暴力算法. 要考虑数字相同的下标. 先说思路没问 题才能共享屏幕写 根据二叉树前序遍历生成 avl 树 编程题：string 转 double hashmap 实现方式 数据库事务. 隔离级别 out Of memory Error 跟 stack Over flow Error 的比较 数据库的隔离级别 java 的 array 跟 list 的比较. 底层原理上的 有 sql 的编程题. 是问每门课程都大于 80 分的学生名字 java 编程题. a. 反转一句英语的所有单词：hello world - &gt; world hellob. 6 7 8 9 0 1 2 3 4 5. 找一个数 还有 tcp. 三次握手；ssl。 对称性加密跟非对称性加密的比较. 使用场景 数据库事务 java 的多线程 涉及面好广 还有密码学的. 加密算法 RSA 搜索引擎倒排原理及实现方式 Redis 高可用方案 主键与索引的联系和区别 索引的实现方式. 为什么会采用这种数据结构 Redis 缓存删除策略 编码实现 LRU 算法 统计大量访问日志(分几百 M 和 几百 G 的场景)；得出访问次数最多的前 K 个人 (单台机器实现) 给你一个连续素数数组 让你找出增长比第 k 小的位置 代码题：有序数组 A = [1, 2, 2, 3, 3, 5, 5, 5]. b = 5. 在 A 中找出 b 的序号的上下界. 考察思路和代码熟练度 自我介绍. 项目经历(会结合你的项目经历即兴问一些相关联的问题. 以设计思路. 框架性的思考为主) HTTPS 原理 Oracle MySQL 特性. 优劣势 Redis 等前沿技术栈的知识面 python 的装饰器 mysql 的 innodb 与 myisam 区别. 索引 10G 文件. 1G 内存. 找出最大的 K 个数. 找出重复数 简单的一道系统设计题：用 redis 做限 然后是 Mysql 各种基础知识 然后是 HTTP 状态码 502/504 然后是一道系统设计题：微信扫码登录 成都后台笔试:是输入[I love byte bytedance] Ilovebytebytedance 然后判断中括号里的单词能否组成括号外的语句中括号里的单词用空格符隔开. 括号外的语句不能由单词重叠组成如果输入这个[I love byte bytedance] Ilovebytedance. 预期结果返回 true 南京大数据后台一面：redis 相关的 zset 结构 redis 内存回收 多线程拒绝策略 数据库 B 树索引 treemap 原理 然后算法题一个是 给定一个数字只移动以为要求结果比原值大并且是所有方案中最小的值 还有个算法题是 16 进制加法 成都后台一面:. mybatis 的 Mapper 接口映射到 sql 文件的实现原 mysql 联合索引,实现,优点 一个算法题. 两数组 a,b. 把 a 数组中在 b 数组出现的数字. 按照它在 B 数组中出 现的顺序进行位置调整。 微博等热门评论. 在分页到很深的时候. 如何进行优化 成都后台一面 mysql 相关： 引擎 innodb 特性. 锁. 事务 kafka. rocketmq. 同步机制和事务机制 编程实现的是泛型链表的添加和删除. 主要是看敲代码的过程和怎样解释自己的代码吧 杭州后台；删除链表中重复的结点在一个排序的链表中. 存在重复的结点. 请删除该链表中重复的结点. 重复的结点不保留. 返回链表头指针。例如. 链表 1－＞ 2－＞ 3－＞ 3－＞ 4－4－＞ 5 处理后为 1-&gt;2-&gt;5 总结:比较注重 CS 修养. 底层源码实现 输入一个二叉树. 以及指定一个层次. 从右向左输出这一层的所有节点 设计一个 LRU. 尽可能的支持高并发 session 怎么用 cookie 实现的. session 和 cookie 的区别。 java 线程池是怎么工作的。 java bio nio 的区别 nio 是怎么实现的 CMS 的流程 CMS 的参数 线上的 GC 是怎么配置的？ redis 主从怎么实现的。 北京后台一面:介绍一下项目. 链表逆序. 设计一个王者的组队系统 北京: 限流 zset redis pipieline http 请求过程详解 mysql 索引 堆排序 求前 k 大个数 sql 什么时候不适合用索引. 索引太多会有啥问题. 同步 io 和异步 io 区别. coding 是多个数组合并. follow up 如果数组个数非常多但是每个里面的内容比较少 http 和 https 的区别. https 的实现 成都后台开发：第一个题是’反转二叉树’. 第二个题是 N 皇后问题(8 皇后问题的扩展) 单链表. 每 k 个进行一次翻转 设计一个限流工具. 每 5s 允许一个请求. 多的请求丢弃 设计一个限流工具. 在第 1. 6. 11. 16 秒允许一个请求. 多的丢弃 设计一个限流工具. 在第 1. 6. 11. 16 秒允许一个请求. 多的排队等待 介绍一个最熟悉的项目. 里面有什么亮点 简单工厂. 抽象工厂. 方法工厂的区别 java 线程池的有哪些参数. 以及意义 成都后台一面 concurrentMap 实现高并发的原理 java nio 和 bio 的区别 redis 的常用数据结构. 持久化方式. 写入时 rdb 机制 https 机制. http 服务端推送 写一个 lru cache. get set delete 都在 o(1) 深圳后端 python 的 gil 锁 消息队列如何实现高吞吐量 http 状态码 数据库外键的优缺点 算法给定 ab 两个数. a 可以+2019. ×5. ×17. 问最少经过多少步可以将 a 变换到 b(2019. 5. 17 是今天的日期. 完全是现场临时随便编了个题) 介绍下项⽬目 项⽬目中的难点是什什么. 怎么解决的 算法：数组中第 K ⼤大的数. 分析时间复杂度 volatile 的作⽤用 怎么保证原⼦子性 线程安全的单例例模式 ThreadLocal 的作⽤用. 应⽤用场景是什什么 HashMap 和 TreeMap 的区别. 以及各⾃自的优势 Mysql 的索引是怎么实现的. 为什什么这么实现. 优势在哪 北京后台 1 面： 502 504 cookie. session mysql 优化 mysql MyISAM 与 innodb 的区别 redis 分布式锁 缓存一致性 mysql 索引存储 jvm 垃圾回收算法 深圳后台一面： go string 的数据结构 goroutine 的调度 数组中第 k 大的数 武汉后台一面：1. ORACLE 和 mysql 的区别 工作中 Spring Aop 的案例 activemq 和 rabbitmq 的区别 数据库中的索引和事务 网络知识：TCP 的三次握手. 四次挥手。 分布式锁。 数据库的分布式事务。 算法题：遍历树. 求从根节点到叶子节点和为某值的路径。 105 北京后台一面 一排相邻的糖果屋. 不能从相邻糖果屋买糖. 请问最大能买多少颗糖？输入[1,2,3,1] 输出 4 上海后台一面：rabbitmq 的代替方式 聚集索引和飞聚集索引区别 哪些情况会用到索引 怎么排查慢查询 事务隔离级别 Tcp 三次握手四次挥手 Udp select poll epoll 算法：按层输出树的结点 Http 各状态码 Session 和 cookie 杭州后台一面二面： ctrl c 过程； 去除重复列表； 单链表求和； 二面： 多个人玩贪吃蛇设计 项目开发性设计. 自己设计. 自己定规则 B B+ 跳表区别 时间复杂度 Https 与 http 区别. tls 的加密流程 自增 ID 与 uuid 的优劣 Redis 的事务以及实现方式 给定字符串的全排列 介绍经历. java 线程池基础知识. 自己实现一个线程池. 然后是二叉树的 bfs. 最小公共子串得长度. 最大不重复子串的长度 dubbo 的容错机制有哪些. 负载均衡机制有哪些 fail-fast 一个有序数组. 求一个数出现的次数 数据库索引：表有 3 列 a,b,c. 需支持查询(a,b)(b) (b,c). 索引如何建 反转二叉树 数据库表(id, name, parentId)如何组装成树? 主键索引和非主键索引的区别 数据库事务的隔离级别 redis 和 memcached 数据库查询优化 编程题. 贪心算法 不同字符最大子串根据给定的输入字符串. 返回包含有最多 k 个不同字符的子字符串的长度及子字符串在输入字符串的起始下标如果有多个符合条件的子字符串. 则返回第一个子字符串的下标输入描述输入为一个待校验的字符串输出描述两个数字. 分表表示子字符串的长度以及子字符串首字符在输入字符串的下标 武汉后台: 介绍下项⽬目. ⽐比较详细(包括线程数. 负载. 机器器压⼒力力等) 设计微博评论的存储系统. 要求⽀支持分⻚页 Redis 的 hash 和 string 的区别以及各⾃自的优势和使⽤用场景 算法：给出⼀一个 xml 格式的字符串串. 校验这个 xml 是否是合法 成都后台： 手上有一堆扑克牌. 牌面顺序是 1234(从上到下). 规则是. 取手中最上面的牌放入桌上牌堆的最上面如果手中还有牌. 则将手中最上面的牌放入手中牌堆的最下面重复 1. 2 步骤这时桌上的牌堆顺序是 4231(从上到下) 题目：已知桌上牌堆的顺序. 求原来手中牌堆的顺序 有一个数组 -1 3 2 4 5 -6 7 -9,将该数组的负数和正数分离开多余的数放入数组的尾部 比如 3 -1 2 -6 4 -9 5 7 上海后台：数字金额转为中文说法. 例如 1001. 25 转为壹仟零壹元两毛五分 北京后台一二面：1. Redis 的分布式锁. 单节点和集群的优缺 自己项目里的 mysql 规模 3. 10g 文件. 1g 内存. 求 top k 和 重复数字 两个单向链表按照十进制求和. 不能使用已经有的数据结构和注意链表方向. 比如 1-＞ 3-＞ 5-＞ 9. 5-＞ 4. 等于 1-＞ 4-＞ 1-＞ 3 深圳后台: 一千个棋子. 甲先取乙后取. 每次最多取七个最少取一个. 问是否有一个方案让甲一定赢 3×7 的格子. 从左上角到右下角. 只能往右或者往下. 有多少种走法 一个不均匀硬币. 如何抛出均匀概率,然后有一个生成 0 到 13 随机数的算法. 如何用它均匀生成 0 到 9 随机数 两千万高考生成绩如何排序 用链表表示的大数求和 上海后台 MySQL 中的事务隔离级别 协程的原理和实现 gevent 中的协程的实现 反转链表 距离矩阵. 从左上开始. 只能往右或往下. 求从左上到右下的最短距离。 三面 ： leetcode 670. 然后系统设计题. 设计群消息已读功能. 三面应该是 1 道算法 1 道系统设计 假设是一个抽奖的游戏. 不同的人是有不同的概率倍数. 是一个整数. 例如 1. 3. 5. . . 输入 100 万人. 要求抽奖抽出来 2 万个人；并且假设每个人都有一个唯一 id 写一个函数做下抽奖. 输入和输出的数据结构自己设计 然后就是项目上的一些东西 redis 高可用怎么实现. redis 过期怎么实现. Mysql 索引的注意事项 code review 数据库索引+前缀匹配 缓存设计 并发控制(乐观锁. 悲观锁) xss &amp;&amp; csfr 杭州后台三面：推送的频率控制. 抖音评论列表的设计及缓存实现. MySQL 索引怎么建. http 头. http header sizeof 运算符计算要考虑哪些因素函数定义 int a[100000]可能出现什么问题一百万个用户抽奖. 奖品只有 1000 个. 每人最多中奖一次. 每个用户中奖倍率不一样. 给出代码实现。 问了 redis 数据结构和实现 问 hashmap 浅拷贝深拷贝实现 把一面的算法题再做一次 项目聊很多(使用的中间件实现原理) 带权重抽奖代码实现 类加载过程 热加载. 热替换 jvm 参数：-server -client JIT 即时编译原理 排查线上问题经历. 思路 聊部门情况","categories":[],"tags":[]},{"title":"IT 相关术语","slug":"Tools/A-Tips/01-IT术语","date":"2021-10-23T11:54:51.146Z","updated":"2021-10-23T11:54:51.147Z","comments":true,"path":"Tools/A-Tips/01-IT术语.md/","link":"","permalink":"http://fansichao.github.com/blog/Tools/A-Tips/01-IT%E6%9C%AF%E8%AF%AD.md/","excerpt":"","text":"架构类微服务架构 微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务和服务之间采用轻量级的通信机制相互沟通(通常是基于 HTTP 的 Restful API).每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构造 微服务之前采用 RestFul-Api 进行交互。 微服务的特征与界定 单体应用 vs 微服务架构 优点 提升开发交流，每个服务足够内聚，足够小，代码容易理解； 服务独立测试、部署、升级、发布； 按需定制的 DFX，资源利用率，每个服务可以各自进行 x 扩展和 z 扩展，而且，每个服务可以根据自己的需要部署到合适的硬件服务器上；每个服务按 需要选择 HA 的模式，选择接受服务的实例个数； 容易扩大开发团队，可以针对每个服务(service)组件开发团队； 提高容错性(fault isolation)，一个服务的内存泄露并不会让整个系统瘫痪； 新技术的应用，系统不会被长期限制在某个技术栈上； 缺点 没有银弹，微服务提高了系统的复杂度； 开发人员要处理分布式系统的复杂性； 服务之间的分布式通信问题； 服务的注册与发现问题； 服务之间的分布式事务问题； 数据隔离再来的报表处理问题； 服务之间的分布式一致性问题； 服务管理的复杂性，服务的编排； 不同服务实例的管理。 总的来说，微服务是服务化普及以后带来的高开发成本、协作成本，不断在降低成本、轻量级做改进。 知乎-微服务 常用技术Redis Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。 Redis 与其他 key - value 缓存产品有以下三个特点： Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。 Redis 支持数据的备份，即 master-slave 模式的数据备份。 Redis 优势 性能极高 – Redis 能读的速度是 110000 次/s,写的速度是 81000 次/s 。 丰富的数据类型 – Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来。 丰富的特性 – Redis 还支持 publish/subscribe, 通知, key 过期等等特性。 相关链接 Redis 菜鸟教程 Redis 架构原理及应用实践 redis 的高并发和高可用 HBaseHBase是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。 redisREmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统。 Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 NginxNginx (engine x) 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务.Nginx 是一款轻量级的 Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在 BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上 nginx 的并发能力在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。 OracleOracle Database，又名 Oracle RDBMS，或简称 Oracle。是甲骨文公司的一款关系数据库管理系统。它是在数据库领域一直处于领先地位的产品。可以说 Oracle 数据库系统是目前世界上流行的关系数据库管理系统，系统可移植性好、使用方便、功能强，适用于各类大、中、小、微机环境。它是一种高效率、可靠性好的、适应高吞吐量的数据库方案。 mysqlMySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL 是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。 MySQL 是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。MySQL 所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库 WSGIWeb 服务器网关接口（WSGI）已被用作 Python Web 应用程序开发的标准。WSGI 是 Web 服务器和 Web 应用程序之间通用接口的规范。 Werkzeug它是一个 WSGI 工具包，它实现了请求，响应对象和其他实用函数。这使得能够在其上构建 Web 框架。Flask 框架使用 Werkzeug 作为其基础之一。 Jinga2Jinja2 是 Python 的一个流行的模板引擎。Web 模板系统将模板与特定数据源组合以呈现动态网页。 Flask 通常被称为微框架。它旨在保持应用程序的核心简单而可扩展。Flask 没有用于数据库处理的内置抽象层，也没有形成验证支持。相反，Flask 支持扩展以向应用程序添加此类功能。一些流行的 Flask 扩展将在本教程后面讨论。 Web 框架Web 应用程序框架或简单的 Web 框架表示一组库和模块，使 Web 应用程序开发人员能够编写应用程序，而不必担心协议，线程管理等低级细节。 项目PythonPython 基本类型: Number（数字） String（字符串） List（列表） Tuple（元组） Set（集合） Dictionary（字典） 正则表达式: 是一个特殊的字符序列，一个字符串是否与我们所设定的这样的字符序列，相匹配快速检索文本、实现替换文本的操作 **json:**（xml） 轻量级 web 数据交换格式 匿名函数: python 使用 lambda 来创建匿名函数。 lambda 只是一个表达式，函数体比 def 简单很多。 lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。 lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。 虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。 **映射类 map()**：会根据提供的函数对指定序列做映射，映射的结果可以进行相应的类型转换。 **累积运算函数 reduce()**：会根据提供的运算函数对迭代类型参数中的元素进行累积运算 **过滤类 filter()**：根据提供的判断函数，对迭代类型参数进行过滤，保留使运算函数返回 true 的元素 高阶函数：一个函数可以作为参数传给另外一个函数，或者一个函数的返回值为另外一个函数（若返回值为该函数本身，则为递归），满足其一则为高阶函数。 FlaskFlask 是一个用 Python 编写的 Web 应用程序框架。它由 Armin Ronacher 开发，他领导一个名为 Pocco 的国际 Python 爱好者团体。Flask 基于 Werkzeug WSGI 工具包和 Jinja2 模板引擎。两者都是 Pocco 项目。 Flask 框架重要知识点总结归纳 （完整版） 基本原理: flask 的唯一 URL 原则 使用装饰器 route 路由注册 url Blueprint 指定 url 前缀 核心知识： 支持多种扩展 Flask-SQLAlchemy 管理数据库 Flask-Web Flask-Email 等等 支持全局变量 g.user=user_data 支持请求上下文 支持全局处理-发送前处理，返回后处理 支持自定义错误页面 支持网址重定向等 from flask import Blueprint, request, json, abort, current_app, jsonify, session as web_session, g 数据库sql 型数据库基本知识 DDL、DQL、DML、DCL，数据库优化经验 数据库的 DDL、DML 和 DCL 的区别与理解: DML（data manipulation language）： 它们是 SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这 4 条命令是用来对数据库里的数据进行操作的语言 DDL（data definition language）： DDL 比 DML 要多，主要的命令有 CREATE、ALTER、DROP 等，DDL 主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用 DCL（Data Control Language）： 是数据库控制功能。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke 等）语句。在默认状态下，只有 sysadmin,dbcreator,db_owner 或 db_securityadmin 等人员才有权力执行 DCL TCL - Transaction Control Language：事务控制语言，COMMIT - 保存已完成的工作，SAVEPOINT - 在事务中设置保存点，可以回滚到此处，ROLLBACK - 回滚，SET TRANSACTION - 改变事务选项 nosql 型nosql 和 sql 型区别就是 sql 型支持事务操作，nosql 不支持事务操作。 sql 以表结构关联方式存储，nosql 独立存储 sql 不支持大数据量存储，nosql 支持大数据量存储。 等等 数据库优化优化方法: 明确优化目标，了解被优化内容 换磁盘阵列升级硬件 改写 SQL 脚本添加索引 索引优化 查询进行优化 大表分区 exists 代替 in 中文字段可以考虑建一张字段转换表 数据库参数调整优化性能 调整数据库架构。 行业数据库对比,根据需求甚至可以替换数据库(由于 SqlAlchemy 框架,替换数据库成本低) 参考链接： 数据库优化 - 实例优化 30 多条 mysql 数据库优化方法 软件系统压力测试基本思路是在有限的资源（包括内存、CPU、磁盘和网络带宽）情况下对软件系统执行负载测试，了解其承载性能，性能指标包括：响应时间、并发用户数、吞吐量、资源利用率。 分析应用系统根据系统个资源的分布与使用情况，明确可能存在的性能瓶颈，例如：数据库操作、网络访问、文件上传下载、数据加工等等2, 编写测试案例包括：测试目的、测试环境、测试数据、测试脚本、预期结果。 并发测试使用 ab、siege、locust、jmeter 等压力测试工具对系统执行任务请求等操作。 检测系统资源使用 nmon 等工具，统计测试中各资源使用情况、响应情况。例如：网络阻塞情况、CPU、内存、缓存、磁盘使用情况、数据库数据锁、日志缓冲区等。 优化调整根据测试结果，定位性能瓶颈，优化代码。 编写测试报告 测试概要、测试环境、测试结果 测试结论：给出系统能够支持的上限，如用户并行数、操作数据量等 技术总结：记录系统优化方案、方法，以及暂时无法改善或改善无效的场景说明，为后续系统框架改造或技术选型的提供建议。 数据结构参考链接: 数据结构与算法（一）：数据结构 线性表：零个或者多个数据元素的有限序列。 顺序线性表：使用一段连续的地址存储单元放置线性表的数据元素。 链式线性表：线性表的数据元素可以存储在随意的存储单元，每一个节点不仅仅包括数据元素还有一个指向下一个节点的指针（基本的单链表） 栈与队列 栈：限定在表尾进行插入和删除的线性表。 队列：只允许在一端进行插入操作，而在另一端进行删除操作的线性表。 串：是由零个或多个字符组成的有限序列，又叫字符串。 树 树：n（n&gt;=0）个结点的有限集。 计算机相关概念没有银弹银弹，无论是在技术上或管理上，都不会有任何单一的重大突破，能够保证在生产力、可靠度或简洁性上获得改善，甚至，连一个数量级的改善都不会有.","categories":[],"tags":[]},{"title":"","slug":"TODO","date":"2021-10-23T11:54:51.145Z","updated":"2021-10-23T11:54:51.145Z","comments":true,"path":"TODO.md/","link":"","permalink":"http://fansichao.github.com/blog/TODO.md/","excerpt":"","text":"MarkDownVscodeMarkdown 图片复制插件 Markdow Preview Enhanced Paste Image (推荐)","categories":[],"tags":[]},{"title":"技术类笔记","slug":"README","date":"2021-10-23T11:54:51.144Z","updated":"2021-10-23T11:54:51.144Z","comments":true,"path":"README.md/","link":"","permalink":"http://fansichao.github.com/blog/README.md/","excerpt":"","text":"[toc] TODO ml-机器学习 Python-编程语言 Tools Django TODO-待办事项 Resources-资源 编程语言 Linux-操作系统 Web-前端 Python-编程语言 Go-编程语言 工具模块常用工具-Tools Tools 技术专栏: BigData-大数据专栏 Crawl-爬虫专栏 Databases-数据库专栏 Django-Python 后端框架 ml-机器学习 常用工具: Anaconda-环境管理器 Chrome-谷歌浏览器 Docker-容器 Git-版本库工具 GitHub-版本库网站 Graph-图库 Pycharm-代码编辑器 Vsocde-代码编辑器 项目实战-Projects传送门: Projects 算法算法","categories":[],"tags":[]},{"title":"选股思路","slug":"Projects/Stocks/01-选股思路","date":"2021-10-23T11:54:51.144Z","updated":"2021-10-23T11:54:51.144Z","comments":true,"path":"Projects/Stocks/01-选股思路.md/","link":"","permalink":"http://fansichao.github.com/blog/Projects/Stocks/01-%E9%80%89%E8%82%A1%E6%80%9D%E8%B7%AF.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"股票投资","slug":"Projects/Stocks/README","date":"2021-10-23T11:54:51.144Z","updated":"2021-10-23T11:54:51.144Z","comments":true,"path":"Projects/Stocks/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Projects/Stocks/README.md/","excerpt":"","text":"选股思路 股票池(产业链分析) 近期备选","categories":[],"tags":[]},{"title":"","slug":"Projects/README","date":"2021-10-23T11:54:51.143Z","updated":"2021-10-23T11:54:51.143Z","comments":true,"path":"Projects/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Projects/README.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"Projects/GUI编程/课堂抽签助手/config","date":"2021-10-23T11:54:51.142Z","updated":"2021-10-23T11:54:51.142Z","comments":true,"path":"Projects/GUI编程/课堂抽签助手/config.md/","link":"","permalink":"http://fansichao.github.com/blog/Projects/GUI%E7%BC%96%E7%A8%8B/%E8%AF%BE%E5%A0%82%E6%8A%BD%E7%AD%BE%E5%8A%A9%E6%89%8B/config.md/","excerpt":"","text":"{\"sleep\":0.01,\"range\":1}","categories":[],"tags":[]},{"title":"","slug":"Projects/GUI编程/课堂抽签助手/database-4bcf258d288d59d13e33eafc4692e706","date":"2021-10-23T11:54:51.142Z","updated":"2021-10-23T11:54:51.142Z","comments":true,"path":"Projects/GUI编程/课堂抽签助手/database-4bcf258d288d59d13e33eafc4692e706.md/","link":"","permalink":"http://fansichao.github.com/blog/Projects/GUI%E7%BC%96%E7%A8%8B/%E8%AF%BE%E5%A0%82%E6%8A%BD%E7%AD%BE%E5%8A%A9%E6%89%8B/database-4bcf258d288d59d13e33eafc4692e706.md/","excerpt":"","text":"{\"赵碧彤\":\"0\",\"赵春梅\":\"0\",\"赵谷菱\":\"1\",\"赵密思\":\"2\",\"赵暖瞳\":\"0\",\"赵卓妍\":\"1\",\"赵月怡\":\"1\",\"赵野雪\":\"0\",\"赵思菱\":\"0\",\"赵寄凡\":\"0\",\"赵芳媛\":\"0\",\"赵代容\":\"0\",\"赵燕楠\":\"1\",\"赵流逸\":\"0\",\"赵姝丽\":\"1\",\"赵绮怀\":\"2\",\"赵雨雪\":\"0\",\"赵经文\":\"0\",\"赵白亦\":\"0\",\"赵梦之\":\"1\",\"赵子怀\":\"0\",\"赵雪漫\":\"0\",\"赵书蝶\":\"1\",\"赵柯洁\":\"0\",\"赵凌晓\":\"1\",\"赵嘉懿\":\"0\",\"赵皓月\":\"0\",\"赵奥雅\":\"1\",\"赵令红\":\"0\",\"赵清莹\":\"0\",\"赵雪晴\":\"1\",\"赵曼凝\":\"0\",\"赵嘉悦\":\"1\",\"赵孤萍\":\"0\",\"赵芮优\":\"0\",\"赵彦露\":\"0\",\"赵格格\":\"0\",\"赵宣艳\":\"0\",\"赵杰秀\":\"1\",\"赵妙珍\":\"0\",\"赵宵月\":\"0\",\"赵嘉惠\":\"0\",\"赵晨辰\":\"1\",\"赵彩娟\":\"0\",\"赵好慕\":\"0\",\"赵童欣\":\"1\",\"赵冰旋\":\"0\",\"赵学英\":\"1\",\"赵笑阳\":\"1\",\"赵瑞绣\":\"1\",\"赵迎天\":\"0\",\"赵晴照\":\"0\",\"赵吉欣\":\"0\",\"赵亦寒\":\"2\",\"赵长英\":\"0\",\"赵智菱\":\"0\",\"赵天晴\":\"1\",\"赵初柳\":\"0\",\"赵成娥\":\"0\"}","categories":[],"tags":[]},{"title":"GUI 图形化编程","slug":"Projects/GUI编程/GUI","date":"2021-10-23T11:54:51.141Z","updated":"2021-10-23T11:54:51.141Z","comments":true,"path":"Projects/GUI编程/GUI.md/","link":"","permalink":"http://fansichao.github.com/blog/Projects/GUI%E7%BC%96%E7%A8%8B/GUI.md/","excerpt":"","text":"tags: GUI python3 tkinter turtle 附件参考资源 【Python】图形交互界面 GUI 之 tkinter 各大控件详解 tkinter 有趣的小项目汇总 tkinter-抽签助手 python turtle绘图-案例集锦（小猪佩奇、哆啦A梦、小黄人、樱花树、皮卡丘、汉诺塔、高达、星空等） Python——画一棵漂亮的樱花树（不同种樱花+玫瑰+圣诞树喔）","categories":[],"tags":[]},{"title":"Web-JS常用命令","slug":"Languages/Web/web-javascripts","date":"2021-10-23T11:54:51.139Z","updated":"2021-10-23T11:54:51.139Z","comments":true,"path":"Languages/Web/web-javascripts.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/web-javascripts.md/","excerpt":"","text":"插件列表插件列表 数据隐藏 tootik 常用模块函数JS 判断对象是否相等说明: 检查对象”值相等”是一个强大复杂的方法 需要依赖完善的测试库,包含各种边界类型情况. Underscore 和 Lo-Dash 有一个名为_.isEqual()方法，用来比较好的处理深度对象的比较 参考链接: Github-underscore 样例展示: 123456_.isEqual(&#123; a: 1 &#125;, &#123; a: 1 &#125;);true;_.isEqual(&#123; a: 1 &#125;, &#123; a: 2 &#125;);false;_.isEqual(&#123; a: 1 &#125;, &#123; a: 1, b: undefined &#125;);false; JS 数据类型转换功能说明: 实现所有类型相互转换。小数、整数。字符串、数组、字典、布尔、json 等 实现类型 强转/非强转 TODO 待寻找组件 1234567891011/* 数据转换常用函数 */// 字符串转数组var array = strA.split(&quot;&quot;);// 数组转字符串var strA = a.join(&quot;&quot;);// JSON对象转字符串var json_strA = JSON.stringify(json_obj);// 字符串转JSON对象var json_obj = JSON.parse(json_strA); JS 数组去重功能说明: 支持数组去重 支持不同内部数组，例如数组中含字符串、字典、数组等等 1234567891011// 数组去重样例 - 利用hasOwnPropertyfunction unique(arr) &#123; var obj = &#123;&#125;; return arr.filter(function (item, index, arr) &#123; return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true); &#125;);&#125;unique([1, 2, 3, 1, &#123; a: 1 &#125;, &#123; a: 1 &#125;])[(1, 2, 3, &#123; a: 1 &#125;)]; 参考资源: 本文附录: JS 去重方法大全 JS 深拷贝1234567891011121314151617181920212223242526272829303132333435/** * 深拷贝 * @param &#123;*&#125; obj 拷贝对象(object or array) * @param &#123;*&#125; cache 缓存数组 */function deepCopy (obj, cache = []) &#123; // typeof [] =&gt; &#x27;object&#x27; // typeof &#123;&#125; =&gt; &#x27;object&#x27; if (obj === null || typeof obj !== &#x27;object&#x27;) &#123; return obj &#125; // 如果传入的对象与缓存的相等, 则递归结束, 这样防止循环 /** * 类似下面这种 * var a = &#123;b:1&#125; * a.c = a * 资料: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value */ const hit = cache.filter(c =&gt; c.original === obj)[0] if (hit) &#123; return hit.copy &#125; const copy = Array.isArray(obj) ? [] : &#123;&#125; // 将copy首先放入cache, 因为我们需要在递归deepCopy的时候引用它 cache.push(&#123; original: obj, copy &#125;) Object.keys(obj).forEach(key =&gt; &#123; copy[key] = deepCopy(obj[key], cache) &#125;) return copy&#125; 参考链接:https://www.jianshu.com/p/6b0260d599a0 其他函数自动点击js 自动点击 onclick js 自动触发 onclick 事件 定时延时执行 1234567891011121314151617&lt;script type=&quot;text/javascript&quot;&gt;// 两秒后模拟点击setTimeout(function() &#123; // IE if(document.all) &#123; document.getElementById(&quot;clickMe&quot;).click(); &#125; // 其它浏览器 else &#123; var e = document.createEvent(&quot;MouseEvents&quot;); e.initEvent(&quot;click&quot;, true, true); document.getElementById(&quot;clickMe&quot;).dispatchEvent(e); &#125;&#125;, 2000);&lt;/script&gt;&lt;a href=&quot;http://www.sinmeng.net&quot; id=&quot;clickMe&quot; οnclick=&quot;alert(&#x27;clicked&#x27;);&quot;&gt;触发onclick&lt;/a&gt; 页面加载完毕后再执行函数对于动态 ID,存在 ID 未赋值,但是函数已执行，导致找不到 ID 的情况. 所以需要最后加载函数. 12345678&lt;script type=&quot;text/javascript&quot;&gt; // window.onload 页面加载完毕后再执行函数 window.onload=function()&#123; document.getElementById(&#x27;btn1&#x27;).onclick=function()&#123; alert(&#x27;helleo&#x27;); &#125;; &#125;;&lt;/script&gt; 获取 HTML 附带的参数值123456789// href ?var1=sss&amp;var2=sss&amp;var3=asdsdvar param = window.location.href.split(&quot;?&quot;);var pwd = param.length &gt; 1 ? param[1] : &quot;&quot;;var pwd = param.length &gt; 1 ? param[1] : &quot;&quot;;pwd = pwd.replace(&quot;?&quot;, &quot;&quot;);// 创建动态变量for (dic_str of pwd.split(&quot;&amp;&quot;)) &#123; window[dic_str.split(&quot;=&quot;)[0]] = dic_str.split(&quot;=&quot;)[1];&#125; 删除 div12345678// js js中的话要通过获取该元素的父级元素，再调用..removeChild(要删除的元素);var removeObj = document .getElementById(&quot;reducedLine&quot;) .getElementsByName(&quot;mlt24&quot;)[0];removeObj.parentNode.removeChild(removeObj);//jquery$(&quot;#divID&quot;).remove(); 模糊查询(模糊匹配)https://www.cnblogs.com/sxxya/p/10911623.htmlhttps://www.jianshu.com/p/4cd4f74a0b20 前端开发工具箱https://www.html.cn/tool/html2js/ js 给节点添加或删除类名 html 设置层 DIV 的显示和隐藏 根据 ID 修改元素var oneDom = document.getElementById(“one”);oneDom.className = “我很好”oneDom.className +=” “+”我很好”; JavaScript 字符串转换成数字的三种方法 js 动态创建变量名window[‘xxx’] 动态创建变量 123456789function create_variable(num) &#123; var name = &quot;test_&quot; + num; //生成变量名 window[name] = 100; window[&quot;name&quot;] = 200; //注意看中括号里的内容加引号和不加引号的区别&#125;create_variable(2);alert(test_2); // 100;alert(name); //200; 保留指定位数小数12var number = 1.23456789;number = number.toFixed(4); JS 数组深拷贝es6 克隆一个新的数组的方法： 12345const a1 = [1, 2, 3];// 写法一：const a2 = [...a1];// 写法2 ：const [...a2] = a1; 常用函数字符串替换1234567891011// 将 str 中的 a 替换为 Avar str = &quot;abcabcabc&quot;;var result = str.replace(&quot;a&quot;, &quot;A&quot;);console.log(&quot;result:&quot; + result);// 输出 result:Abcabcabc// 将str 中所有的 a 替换为 Avar str = &quot;abcabcabc&quot;;var result = str.replace(/a/g, &quot;A&quot;);console.log(&quot;result:&quot; + result); 检查 对象是否在数组中1234567891011// 检查 对象是否在数组中function check_obj_exists_array(obj, array) &#123; // return: 存在true 不存在false for (var i in array) &#123; if (check_obj_equal(obj, array[i])) &#123; return true; &#125; &#125; return false;&#125; 检查对象是否存在 或 空 未定义等1234567891011121314151617181920212223242526272829303132// 检查对象是否存在 或 空 未定义等function check_obj_is_has_val(obj) &#123; if ( obj == undefined || obj == null || [&quot;&#123;&#125;&quot;, &quot;[]&quot;, &quot;&quot;].indexOf(JSON.stringify(obj)) != -1 ) &#123; return false; &#125; return true;&#125;// Jquery isEmptyObject 判断对象是否为空方法// Jquery isEmptyObject 慎重使用$.isEmptyObject(1);true;$.isEmptyObject([]);true;$.isEmptyObject(&#123;&#125;);true;$.isEmptyObject(&quot;&quot;);true;$.isEmptyObject(&quot;&quot;);true;$.isEmptyObject(&quot;ss&quot;);false;a = 1;$.isEmptyObject(a.toString);true;$.isEmptyObject(&quot;1&quot;);false; 附录附录 1-JS 去重方法大全 原文链接: JavaScript 数组去重(12 种方法，史上最全) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186数组去重，一般都是在面试的时候才会碰到，一般是要求手写数组去重方法的代码。如果是被提问到，数组去重的方法有哪些？你能答出其中的10种，面试官很有可能对你刮目相看。在真实的项目中碰到的数组去重，一般都是后台去处理，很少让前端处理数组去重。虽然日常项目用到的概率比较低，但还是需要了解一下，以防面试的时候可能回被问到。注：写的匆忙，加上这几天有点忙，还没有非常认真核对过，不过思路是没有问题，可能一些小细节出错而已。数组去重的方法一、利用ES6 Set去重(ES6中最常用)function unique (arr) &#123; return Array.from(new Set(arr))&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr)) //[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“&#123;&#125;”空对象，后面的高阶方法会添加去掉重复“&#123;&#125;”的方法。二、利用for嵌套for，然后splice去重(ES5中最常用)function unique(arr)&#123; for(var i=0; i&lt;arr.length; i++)&#123; for(var j=i+1; j&lt;arr.length; j++)&#123; if(arr[i]==arr[j])&#123; //第一个等同于第二个，splice方法删除第二个 arr.splice(j,1); j--; &#125; &#125; &#125;return arr;&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr)) //[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;] //NaN和&#123;&#125;没有去重，两个null直接消失了双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。想快速学习更多常用的ES6语法，可以看我之前的文章《学习ES6笔记──工作中常用到的ES6语法》。三、利用indexOf去重function unique(arr) &#123; if (!Array.isArray(arr)) &#123; console.log(&#x27;type error!&#x27;) return &#125; var array = []; for (var i = 0; i &lt; arr.length; i++) &#123; if (array.indexOf(arr[i]) === -1) &#123; array.push(arr[i]) &#125; &#125; return array;&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr)) // [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;] //NaN、&#123;&#125;没有去重新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。四、利用sort()function unique(arr) &#123; if (!Array.isArray(arr)) &#123; console.log(&#x27;type error!&#x27;) return; &#125; arr = arr.sort() var arrry= [arr[0]]; for (var i = 1; i &lt; arr.length; i++) &#123; if (arr[i] !== arr[i-1]) &#123; arrry.push(arr[i]); &#125; &#125; return arrry;&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined] //NaN、&#123;&#125;没有去重利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。五、利用对象的属性不能相同的特点进行去重(这种数组去重的方法有问题，不建议用，有待改进)function unique(arr) &#123; if (!Array.isArray(arr)) &#123; console.log(&#x27;type error!&#x27;) return &#125; var arrry= []; var obj = &#123;&#125;; for (var i = 0; i &lt; arr.length; i++) &#123; if (!obj[arr[i]]) &#123; arrry.push(arr[i]) obj[arr[i]] = 1 &#125; else &#123; obj[arr[i]]++ &#125; &#125; return arrry;&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))//[1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;] //两个true直接去掉了，NaN和&#123;&#125;去重六、利用includesfunction unique(arr) &#123; if (!Array.isArray(arr)) &#123; console.log(&#x27;type error!&#x27;) return &#125; var array =[]; for(var i = 0; i &lt; arr.length; i++) &#123; if( !array.includes( arr[i]) ) &#123;//includes 检测数组是否有某个值 array.push(arr[i]); &#125; &#125; return array&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr)) //[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;] //&#123;&#125;没有去重七、利用hasOwnPropertyfunction unique(arr) &#123; var obj = &#123;&#125;; return arr.filter(function(item, index, arr)&#123; return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true) &#125;)&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;] //所有的都去重了利用hasOwnProperty 判断是否存在对象属性八、利用filterfunction unique(arr) &#123; return arr.filter(function(item, index, arr) &#123; //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素 return arr.indexOf(item, 0) === index; &#125;);&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]九、利用递归去重function unique(arr) &#123; var array= arr; var len = array.length; array.sort(function(a,b)&#123; //排序后更加方便去重 return a - b; &#125;) function loop(index)&#123; if(index &gt;= 1)&#123; if(array[index] === array[index-1])&#123; array.splice(index,1); &#125; loop(index - 1); //递归loop，然后数组去重 &#125; &#125; loop(len-1); return array;&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr))//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]十、利用Map数据结构去重function arrayNonRepeatfy(arr) &#123; let map = new Map(); let array = new Array(); // 数组用于返回结果 for (let i = 0; i &lt; arr.length; i++) &#123; if(map .has(arr[i])) &#123; // 如果有该key值 map .set(arr[i], true); &#125; else &#123; map .set(arr[i], false); // 如果没有该key值 array .push(arr[i]); &#125; &#125; return array ;&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。十一、利用reduce+includesfunction unique(arr)&#123; return arr.reduce((prev,cur) =&gt; prev.includes(cur) ? prev : [...prev,cur],[]);&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr));// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]十二、[...new Set(arr)][...new Set(arr)]//代码就是这么少----(其实，严格来说并不算是一种，相对于第一种方法来说只是简化了代码)PS：有些文章提到了foreach+indexOf数组去重的方法，个人觉得都是大同小异，所以没有写上去。 12// 根据ID 对DIV赋值document.getElementById(&quot;warningsetting_title&quot;).innerHTML = &quot;查询数据&quot;; 获取当前时间 字符串123456789101112131415161718192021222324252627// 获取当前时间function getDatetime() &#123; var d = new Date(); var year = d.getFullYear(); var month = change(d.getMonth() + 1); var day = change(d.getDate()); var hour = change(d.getHours()); var minute = change(d.getMinutes()); var second = change(d.getSeconds()); function change(t) &#123; if (t &lt; 10) &#123; return &quot;0&quot; + t; &#125; else &#123; return t; &#125; &#125; var time = year + &quot;-&quot; + month + &quot;-&quot; + day + &quot; &quot; + hour + &quot;:&quot; + minute + &quot;:&quot; + second; return time;&#125;console.log(getDatetime());// 执行结果// 2019-06-26 23:35:16 JS 序列化 与 反序列化1234567891011# js 序列化 转 json对象a=&#123;&#x27;a&#x27;:1, &#x27;b&#x27;:2&#125;&#123;a: 1, b: 2&#125;JSON.stringify(a)&quot;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&quot;JSON.stringify(value[, replacer[, space]])JSON.parse()","categories":[],"tags":[]},{"title":"Web-Gis 地图插件","slug":"Languages/Web/web-gis","date":"2021-10-23T11:54:51.138Z","updated":"2021-10-23T11:54:51.138Z","comments":true,"path":"Languages/Web/web-gis.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/web-gis.md/","excerpt":"","text":"tags: JavaScript 2019 年 地图 插件 百度地图 API TODO 写的更细？图文并茂？？ 地图 JavaScript 插件对比JS_地图插件对比 几款 JS 地图插件比较 百度地图 API 使用百度地图官方 API, 不完整，不易于使用. 官方链接 百度地图开放平台开发者注册 百度地图 API DrawingManager 工具栏官网 百度拾取坐标系统 输入地址查询 博客链接 百度地图添加可拖拽点+信息窗口提交表单 百度地图 javascript 开发，删除指定覆盖物方法 百度地图 – 鼠标绘制工具 DrawingManager 实现可以拖动地图上的标识来选点，并返回选择点的地址和坐标等信息 代码样例详见 【GIS 原型页面】, 代码可做工具书参考。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341/* &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 基础函数 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;*/// 获取 Input 框输入值var getInputValue = function (input_id) &#123; if (document.getElementById(input_id) == null) &#123; console.log(input_id + &quot;的div为空&quot;) return null &#125; var inputValue = document.getElementById(input_id).value; return inputValue&#125;// 设置 Input 框输入值var SetInputValue = function (input_id, ivalue) &#123; $(&#x27;#&#x27; + input_id).val(ivalue);&#125;// 校验经度 - 校验经度是否符合规范function checkLong(lng) &#123; var longrg = /^(\\-|\\+)?(((\\d|[1-9]\\d|1[0-7]\\d|0&#123;1,3&#125;)\\.\\d&#123;0,6&#125;)|(\\d|[1-9]\\d|1[0-7]\\d|0&#123;1,3&#125;)|180\\.0&#123;0,6&#125;|180)$/; if (!longrg.test(lng)) &#123; //return &#x27;经度整数部分为0-180,小数部分为0到6位!&#x27;; swal(&quot;提示!&quot;, &#x27;经度整数部分为0-180,小数部分为0到6位!&#x27;, &quot;warning&quot;) return false &#125; return true;&#125;// 检验纬度 - 校验纬度是否符合规范function checkLat(lat) &#123; var latreg = /^(\\-|\\+)?([0-8]?\\d&#123;1&#125;\\.\\d&#123;0,6&#125;|90\\.0&#123;0,6&#125;|[0-8]?\\d&#123;1&#125;|90)$/; if (!latreg.test(lat)) &#123; // return &#x27;纬度整数部分为0-90,小数部分为0到6位!&#x27;; swal(&quot;提示!&quot;, &#x27;纬度整数部分为0-90,小数部分为0到6位!&#x27;, &quot;warning&quot;) return false &#125; return true;&#125;// 数组去重function unique(arr) &#123; return Array.from(new Set(arr))&#125;/* &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 地图底层函数 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; */// 添加覆盖物-圆function add_circle(point, radius, styleOptions) &#123; // 点位置(经纬度) 半径(数字) 图样式 var circle = new BMap.Circle(point, radius, styleOptions); //创建圆 map.addOverlay(circle); // 增加圆 return circle&#125;// 添加覆盖物-矩形function add_rectangle(points, styleOptions) &#123; var rectangle = new BMap.Polygon(points, styleOptions); map.addOverlay(rectangle); return rectangle&#125;// 添加覆盖物-折线function add_polyline(points, styleOptions) &#123; var polyline = new BMap.Polyline(points, styleOptions) map.addOverlay(polyline); return polyline&#125;// 添加覆盖物-点function add_marker(point, styleOptions) &#123; var marker = new BMap.Marker(point); map.addOverlay(marker); return marker&#125;// 添加覆盖物-多边形function add_polygon(points, styleOptions) &#123; var polygon = new BMap.Polygon(points, styleOptions) map.addOverlay(polygon); return polygon&#125;// 设置点的弹跳动画function SetAnimation(marker) &#123; marker.setAnimation(BMAP_ANIMATION_BOUNCE);&#125;// 删除所有覆盖物function clearAll() &#123; for (var i = 0; i &lt; overlays.length; i++) &#123; map.removeOverlay(overlays[i]); &#125; overlays.length = 0 map.clearOverlays();&#125;// 显示所有覆盖物function showAll() &#123; for (var i = 0; i &lt; overlays.length; i++) &#123; overlays[i].show() &#125;&#125;// 隐藏所有覆盖物function hideAll() &#123; var allOverlay = map.getOverlays(); for (var i = 0; i &lt; allOverlay.length; i++) &#123; overlays[i].hide() &#125;&#125;/* &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 地图中层函数 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;*/// TODO 隐藏 弹出信息框 未使用var HideInfoWindow = function (marker) &#123; if (marker.isInfoWindowShown()) &#123; marker.hideInfoWindow();//这个是隐藏infowindow窗口的方法 &#125;&#125;// 工具栏-切换 DrawingModefunction switchDrawingMode(drawing_type) &#123; // BMAP_DRAWING_HANDER BMAP_DRAWING_MARKER... if (typeof(drawingManager) != &quot;undefined&quot; &amp;&amp; drawingManager) &#123; // drawingManager.getDrawingMode() drawingManager.setDrawingMode(drawing_type) drawingManager.close() if (drawing_type != BMAP_DRAWING_HANDER) &#123; drawingManager.open() &#125; &#125;&#125;/* 根据查询项 查询匹配的data数据 功能: 根据查询项 查询匹配的data数据 根据输入search_str,过滤数据,模糊匹配 :param string key: 查询列key :param string search_str: 查询的字符串 :param array data: 数据 exp: [&#123;&#x27;name&#x27;:&#x27;王二&#x27;&#125;] exp: 输入 [&#123;&#x27;name&#x27;:&#x27;王二&#x27;&#125;] &#x27;name&#x27; &#x27;王&#x27; 会返回数据 [&#123;&#x27;name&#x27;:&#x27;王二&#x27;&#125;] TODO 命中标红 TODO 多层嵌套不支持 例如. val为数组or字典等*/var SearchTableData = function (data, key, search_str) &#123; if (typeof(search_str) == &quot;undefined&quot; || search_str == &quot;&quot;) &#123; const newdata = [...data]; return newdata &#125; var newdata = []; search_str = search_str.toString() for (dic of data) &#123; if (!dic.hasOwnProperty(key)) &#123; break &#125; if (dic[key].indexOf(search_str) &gt;= 0) &#123; newdata.push(dic) &#125; &#125; return newdata&#125;// 右键菜单-删除标记var menuRemoveMarker = function (e, ee, marker) &#123; map.removeOverlay(marker);&#125;// 定位到当前地址function ToLocation() &#123; // 添加带有定位的导航控件 var navigationControl = new BMap.NavigationControl(&#123; // 靠左上角位置 anchor: BMAP_ANCHOR_TOP_LEFT, // LARGE类型 type: BMAP_NAVIGATION_CONTROL_LARGE, // 启用显示定位 enableGeolocation: true &#125;); map.addControl(navigationControl);// 添加定位控件 var geolocationControl = new BMap.GeolocationControl(); geolocationControl.addEventListener(&quot;locationSuccess&quot;, function (e) &#123; // 定位成功事件 var address = &#x27;&#x27;; address += e.addressComponent.province; address += e.addressComponent.city; address += e.addressComponent.district; address += e.addressComponent.street; address += e.addressComponent.streetNumber; &#125;); geolocationControl.addEventListener(&quot;locationError&quot;, function (e) &#123; // 定位失败事件 alert(e.message); &#125;); map.addControl(geolocationControl);&#125;// 用经纬度设置地图中心点function theLocation() &#123; if (document.getElementById(&quot;longitude&quot;).value != &quot;&quot; &amp;&amp; document.getElementById(&quot;latitude&quot;).value != &quot;&quot;) &#123; map.clearOverlays(); var new_point = new BMap.Point(document.getElementById(&quot;longitude&quot;).value, document.getElementById(&quot;latitude&quot;).value); var marker = new BMap.Marker(new_point); // 创建标注 map.addOverlay(marker); // 将标注添加到地图中 map.panTo(new_point); &#125;&#125;// 根据地址查询经纬度function searchlnglatByStationName(address) &#123; var localSearch = new BMap.LocalSearch(map); /* localSearch.setSearchCompleteCallback(function (searchResult) &#123; var poi = searchResult.getPoi(0); document.getElementById(&quot;atm_input_lng&quot;).value = poi.point.lng; document.getElementById(&quot;atm_input_lat&quot;).value = poi.point.lat; map.centerAndZoom(poi.point, 13); var marker = new BMap.Marker(new BMap.Point(poi.point.lng, poi.point.lat)); // 创建标注，为要查询的地方对应的经纬度 map.addOverlay(marker); var content = document.getElementById(&quot;text_&quot;).value + &quot;&lt;br/&gt;&lt;br/&gt;经度：&quot; + poi.point.lng + &quot;&lt;br/&gt;纬度：&quot; + poi.point.lat; var infoWindow = new BMap.InfoWindow(&quot;&lt;p style=&#x27;font-size:14px;&#x27;&gt;&quot; + content + &quot;&lt;/p&gt;&quot;); marker.addEventListener(&quot;click&quot;, function () &#123; this.openInfoWindow(infoWindow); &#125;); marker.setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画 &#125;); localSearch.search(address); */ localSearch.setSearchCompleteCallback(function (searchResult) &#123; var poi = searchResult.getPoi(0); document.getElementById(&quot;atm_input_lng&quot;).value = poi.point.lng; document.getElementById(&quot;atm_input_lat&quot;).value = poi.point.lat; &#125;); localSearch.search(address);&#125;// 获取点信息 TODO 直接return不行 使用val赋值获取var getPointInfo = function (point) &#123; var gc = new BMap.Geocoder(); gc.getLocation(point, function (rs) &#123; var addComp = rs.addressComponents; var mapAddress = addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber; $(&quot;#enemy_address&quot;).val(mapAddress) $(&quot;#address&quot;).val(mapAddress) $(&quot;#city&quot;).val(addComp.city) &#125;)&#125;// 生成OverlayIDvar generateRandomOverlayID = function (overlay_type) &#123; /* @param overlay_type: 覆盖物类型 atm or overlay */ if (overlay_type == &quot;atm&quot;) &#123; for (var dic of MARKDATA) &#123; var dic_num = dic[&#x27;overlay_id&#x27;].split(&#x27;atm&#x27;)[1] if (!max_atm_num) &#123; max_atm_num = dic_num &#125; else &#123; if (max_atm_num &lt; dic_num) &#123; max_atm_num = dic_num &#125; &#125; &#125; max_atm_num = max_atm_num + 1 var overlay_id = &quot;atm&quot; + (max_atm_num).toString() &#125; else &#123; for (var dic of ENEMY_DATA) &#123; var dic_num = dic[&#x27;overlay_id&#x27;].split(&#x27;atm&#x27;)[1] if (!max_enemy_num) &#123; max_enemy_num = dic_num &#125; else &#123; if (max_enemy_num &lt; dic_num) &#123; max_enemy_num = dic_num &#125; &#125; &#125; max_enemy_num = max_enemy_num + 1 var overlay_id = &quot;enemy&quot; + (max_enemy_num).toString() &#125; current_overlay_id = overlay_id return overlay_id&#125;// 根据覆盖物ID 获取覆盖物function getMapOverlay(overlay_id) &#123; /* 示例中，所有的Marker属性都是用 marker.overlay_id = overlay_id; 的方式为Marker对象赋值了一个id 因此，我的写法是： 先获取全部覆盖物： 然后判断覆盖物是否是Marker类型： 然后判断是否是我要删除的id(imei)： 然后拿到目标对象，执行删除操作 */ var reMarker = null; var allOverlay = map.getOverlays(); for (var i = 0; i &lt; allOverlay.length; i++) &#123; if (allOverlay[i].overlay_id == overlay_id) &#123; reMarker = allOverlay[i]; break; &#125; &#125; return reMarker;&#125;// 删除工具栏按钮 TODO 待寻找更好方法function delTools() &#123; var parent_class = &quot;BMapLib_Drawing BMap_noprint anchorTR&quot;; if (typeof(document.getElementsByClassName(parent_class)[0]) != &quot;undefined&quot;) &#123; for (var tmp of document.getElementsByClassName(parent_class)) &#123; tmp.classList.remove(&quot;BMapLib_Drawing&quot;, &quot;BMap_noprint&quot;, &quot;anchorTR&quot;); &#125; // document.getElementsByClassName(parent_class)[0].classList.remove(&quot;BMapLib_Drawing&quot;, &quot;BMap_noprint&quot;, &quot;anchorTR&quot;); &#125; var parent_class = &quot;BMapLib_Drawing_panel&quot;; if (typeof(document.getElementsByClassName(parent_class)[0]) != &quot;undefined&quot;) &#123; for (var tmp of document.getElementsByClassName(parent_class)) &#123; tmp.classList.remove(&quot;BMapLib_Drawing_panel&quot;); &#125; //document.getElementsByClassName(parent_class)[0].classList.remove(&quot;BMapLib_Drawing_panel&quot;); &#125;&#125; 附件参考链接参考链接: 高德地图 API","categories":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/tags/web/"}]},{"title":"Web-HTML技术文档","slug":"Languages/Web/web-html","date":"2021-10-23T11:54:51.138Z","updated":"2021-10-23T11:54:51.138Z","comments":true,"path":"Languages/Web/web-html.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/web-html.md/","excerpt":"","text":"tags: HTML JavaScript 使用技巧 2019年 IFrame在模态框中嵌入 IFrame在模态框中嵌入 IFrame 123456789101112131415161718192021222324252627&lt;a href=&quot;javascript;;&quot; class=&quot;col-3 tools-item waves-effect waves-light&quot; data-toggle=&quot;modal&quot; data-target=&quot;#modal-addHtml&quot; onclick=&#x27;changeHtml(&quot;银行行号识别&quot;,&quot;工作台.html&quot;)&#x27;&gt;&lt;div id=&quot;modal-addHtml&quot; class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-hidden=&quot;true&quot;&gt; &lt;div class=&quot;modal-dialog&quot; style=&quot;max-width: 1000px&quot;&gt; &lt;div class=&quot;modal-content&quot; style=&quot;min-width: 600px;&quot;&gt; &lt;div class=&quot;modal-header&quot;&gt; &lt;h5 class=&quot;modal-title&quot; id=&#x27;modal_title&#x27;&gt;页面&lt;/h5&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;&lt;i class=&quot;md md-clear&quot;&gt;&lt;/i&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;modal-body&quot;&gt; &lt;iframe id=&#x27;modal_iframe&#x27; frameborder=&quot;0&quot; style=&#x27;width: 100%;height: calc(100vh - 100px);&#x27;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;div class=&quot;modal-footer&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default w-sm waves-effect&quot; data-dismiss=&quot;modal&quot;&gt;取消&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary w-sm save-event waves-effect waves-light&quot;&gt;确定&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; function changeHtml(title,src)&#123; $(&quot;#modal_title&quot;).html(title); $(&quot;#modal_iframe&quot;).attr(&#x27;src&#x27;,src); &#125;&lt;/script&gt;","categories":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/tags/web/"}]},{"title":"Web-HTTP 请求(requests)详解","slug":"Languages/Web/web-http-requests","date":"2021-10-23T11:54:51.138Z","updated":"2021-10-23T11:54:51.138Z","comments":true,"path":"Languages/Web/web-http-requests.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/web-http-requests.md/","excerpt":"","text":"HTTP 请求 含义&amp;区别 HTTP 中 GET 与 POST 的区别 浅谈 HTTP 中 GET、POST 用法以及它们的区别HTTP Request GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE Methods python 用 GET,POST,PUT,DELETE 方式向 HTTP 提交数据 浅谈 HTTP 中 Get 与 Post 的区别-表格对比GET 和 POST 究竟有什么区别 Header 详解Requests 模块使用完整样例封装代码123456789101112131415161718192021222324252627282930313233343536373839import loggingimport requestsdef http_request(url, msg=&quot;&quot;, method=&quot;GET&quot;, is_logging=False, **kwargs): u&quot;&quot;&quot; 执行需要的 HTTP 请求命令 功能: 整合了所有 HTTP 参数请求 :param str url: 链接 :param str msg: 信息 :param str method: 请求方式 get - params=data post - data=data headers=headers &quot;&quot;&quot; # TODO GET params 不支持循环嵌套的数据. 例如&#123;&#x27;properties&#x27;: &#123;&#x27;data_mark&#x27;: &#x27;20191119064014&#x27;&#125;&#125; try: method_lis = [&#x27;GET&#x27;, &#x27;POST&#x27;, &#x27;HEAD&#x27;, &#x27;OPTIONS&#x27;, &#x27;PUT&#x27;, &#x27;DELETE&#x27;, &#x27;TRACE&#x27;, &#x27;CONNECT&#x27;] method = method if method.upper() in method_lis else method_lis[0] r = getattr(requests, method.lower(), None)(url, **kwargs) try: logging.info(&#x27;&gt;&gt; %s \\n[%s][URL]: %s&#x27; % (msg, method, urlparse.unquote(r.url))) ret = r.json() except Exception as e: if is_logging: logging.error(traceback.print_exc()) logging.error(r.status_code) logging.error(r.reason) ret = &quot;&quot; return ret except Exception as e: logging.error(traceback.print_exc()) logging.error(e) return &quot;&quot;","categories":[],"tags":[]},{"title":"Web-AngularJS使用手册","slug":"Languages/Web/web-angularJs","date":"2021-10-23T11:54:51.137Z","updated":"2021-10-23T11:54:51.137Z","comments":true,"path":"Languages/Web/web-angularJs.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/web-angularJs.md/","excerpt":"","text":"$watch多个变量监听参考链接 : https://blog.csdn.net/u010451286/article/details/50635839 12$scope.count=1;$scope.$watch(&#x27;count+count2&#x27;,function()&#123; ... ),true); bootstrap 的 modal 如何不通过 data-dismiss 关闭去掉 data-dismiss，在 handleSave()校验成功后用 1$(&quot;#createTask&quot;).modal(&quot;hide&quot;); 标签 ： web angularjs html 记录不怎么熟悉的语法 [toc] AngularJS 教程AngularJS Scope(作用域)$rootScope 123$rootScope : 根作用域,所有 controller 都可以调用，类似于项目级别的全局变量js赋值 : $rootScope.lastname = &quot;Refsnes&quot;;html调用 : $root.lastname $scope 作用域 1234之间无法互相访问Scope(作用域) 是应用在 HTML (视图) 和 JavaScript (控制器)之间的纽带。Scope 是一个对象，有可用的方法和属性。Scope 可应用在视图和控制器上 AngularJS 控制器123456789101112131415AngularJS 控制器 控制 AngularJS 应用程序的数据。 AngularJS 控制器是常规的 JavaScript 对象。ng-controllerng-controller 指令定义了应用程序控制器 ng-controller=&quot;myCtrl&quot; 属性是一个 AngularJS 指令。用于定义一个控制器。 myCtrl 函数是一个 JavaScript 函数。 JS引用 &lt;script src=&quot;personController.js&quot;&gt;&lt;/script&gt; 多个controllerjs文件中 定义一个app 之后可以定义多个controller HTML中也可以对应多个controller 多个 controller 控制器 123456789var app = angular.module(&#x27;myApp&#x27;, []);app.controller(&#x27;myCtrl1&#x27;, function($scope) &#123; $scope.firstName = &quot;Johns&quot;; $scope.lastName = &quot;Doef&quot;;&#125;); app.controller(&#x27;myCtrl2&#x27;, function($scope) &#123; $scope.firstName = &quot;Tom&quot;; $scope.lastName = &quot;kkk&quot;;&#125;); AngularJS 过滤器过滤器过滤器可以使用一个管道字符(|)添加到表达式和指令中。AngularJS 过滤器可用于转换数据 currency 格式化数字为货币格式 filter 从数组项中选择一个子集。 lowercase 格式化字符串为小写。 orderBy 根据某个表达式排列数组 uppercase 格式化字符串为大写 过滤输入 输入过滤器可以通过一个管道字符(|)和一个过滤器添加到指令中，该过滤器后跟一个冒号和一个模型名称。 12345678910111213141516171819202122232425262728293031323334353637&lt;p&gt;&lt;input type=&quot;text&quot; ng-model=&quot;test&quot;&gt;&lt;/p&gt;&lt;ul&gt; &lt;li ng-repeat=&quot;x in names | filter:test | orderBy:&#x27;country&#x27;&quot;&gt; &#123;&#123; (x.name | uppercase) + &#x27;, &#x27; + x.country &#125;&#125; &lt;/li&gt;&lt;/ul&gt;``` ### 自定义过滤器 以下实例自定义一个过滤器 reverse，将字符串反转```html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;&lt;body&gt;&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;姓名: &#123;&#123; msg | reverse &#125;&#125;&lt;/div&gt;&lt;script&gt;var app = angular.module(&#x27;myApp&#x27;, []);app.controller(&#x27;myCtrl&#x27;, function($scope) &#123; $scope.msg = &quot;Runoob&quot;;&#125;);app.filter(&#x27;reverse&#x27;, function() &#123; //可以注入依赖 return function(text) &#123; return text.split(&quot;&quot;).reverse().join(&quot;&quot;); &#125;&#125;);&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; uppercase，lowercase 大小写转换 AngularJS 服务(Service)AngularJS 服务(Service) AngularJS 中你可以创建自己的服务，或使用内建服务。在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。 $location$location 需要先在controller注入$location.absUrl(); 內建 service，获取当前页面的 url 地址 $http 服务$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。 $timeout 服务$interval 服务 AngularJS $interval 服务对应了 JS window.setInterval 函数。 $timeout 可用于设置单次或多次延时服务;$interval 可用于设置始终运行的延时服务。 创建自定义服务要使用自定义服务，需要在定义控制器的时候独立添加，设置依赖关系:当你创建了自定义服务，并连接到你的应用上后，你可以在控制器，指令，过滤器或其他服务中使用它。 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;&lt;p&gt;255 的16进制是:&lt;/p&gt;&lt;h1&gt;&#123;&#123;hex&#125;&#125;&lt;/h1&gt;&lt;/div&gt;&lt;p&gt;自定义服务，用于转换16进制数：&lt;/p&gt;&lt;script&gt;var app = angular.module(&#x27;myApp&#x27;, []);app.service(&#x27;hexafy&#x27;, function() &#123; this.myFunc = function (x) &#123; return x.toString(16); &#125;&#125;);app.controller(&#x27;myCtrl&#x27;, function($scope, hexafy) &#123; $scope.hex = hexafy.myFunc(255);&#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; AngularJS XMLHttpRequest$http 请求 $http.get $http.head $http.post $http.put $http.delete $http.jsonp $http.patch 简单 get/post 请求 123456789101112// 简单的 GET 请求，可以改为 POST$http(&#123; method: &#x27;GET&#x27;, url: &#x27;/someUrl&#x27;&#125;).then(function successCallback(response) &#123; // 请求成功执行代码 &#125;, function errorCallback(response) &#123; // 请求失败执行代码&#125;);$http.get(&#x27;/someUrl&#x27;, config).then(successCallback, errorCallback);$http.post(&#x27;/someUrl&#x27;, data, config).then(successCallback, errorCallback); AngularJS Select(选择框)AngularJS 可以使用数组或对象创建一个下拉列表选项。 ng-option 指令来创建一个下拉列表，列表项通过对象和数组循环输出$scope.names = [“Google”, “Runoob”, “Taobao”]; 设置下拉框初始值 方法 1 $scope.selectedCar = $scope.cars.car02; //设置第 2 个为初始值；方法 2 // 列表合并 //[].concat(METADATA).concat(CUSTACCT_METADATA).concat(CUST_METADATA),","categories":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/tags/web/"}]},{"title":"Web-Echarts","slug":"Languages/Web/web-echarts","date":"2021-10-23T11:54:51.137Z","updated":"2021-10-23T11:54:51.137Z","comments":true,"path":"Languages/Web/web-echarts.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/web-echarts.md/","excerpt":"","text":"tags: 画图 Echarts 2019年 优质软件 简介说明文档使用,详细见官网，官方文档最全. 样例参考官网实例 Life Expectancy and GDP","categories":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/tags/web/"}]},{"title":"Readme-Web 前端技术","slug":"Languages/Web/ReadMe","date":"2021-10-23T11:54:51.136Z","updated":"2021-10-23T11:54:51.136Z","comments":true,"path":"Languages/Web/ReadMe.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/ReadMe.md/","excerpt":"","text":"前端知识思维导图 Web-目录索引 Web-常用技术 Angularjs : 前端框架 html ： HTML-网页 js - JavaScripts Web-知识 Requests-各请求详解 Web-功能模块 Echarts-画图软件 Gis-地图插件","categories":[],"tags":[]},{"title":"","slug":"Languages/Web/bootstrap","date":"2021-10-23T11:54:51.136Z","updated":"2021-10-23T11:54:51.136Z","comments":true,"path":"Languages/Web/bootstrap.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Web/bootstrap.md/","excerpt":"","text":"BootStrap-页面样式http://aqvatarius.com/themes/atlant/html/ui-alerts-popups.htmlhttps://www.runoob.com/jqueryui/example-autocomplete.html https://gurayyarar.github.io/AdminBSBMaterialDesign/pages/ui/sortable-nestable.html jsonhttps://github.com/abogushov/django-admin-json-editor/tree/master/example http://www.htmleaf.com/Demo/201911295853.html http://lowcode.magicalcoder.com/magicalcoder/index-layui.html 可拖动布局之Gridsterhttps://www.cnblogs.com/JealousGirl/p/useGridster.htmlhttp://dsmorse.github.io/gridster.js/demos/adding-widgets-dynamically.htmlhttp://dsmorse.github.io/gridster.js/#documentationhttps://github.com/dsmorse/gridster.js/tree/v0.7.0 MUURI – 响应式、可排序、可拖拽的布局插件https://blog.csdn.net/weixin_30436891/article/details/96989994https://muuri.dev/https://github.com/haltu/muuri#table-of-contents gridstraphttps://rosspi.github.io/gridstrap.js/http://www.htmleaf.com/Demo/201911295853.htmlhttps://pic.w2bc.com/file/201911/29/201911293698/index.html 50个Bootstrap扩展插件https://blog.csdn.net/u010419967/article/details/39227859 gridstackjshttps://gridstackjs.com/demo/serialization.htmlhttps://gridstackjs.com/demo/two.html#https://gridstackjs.com/demo/nested.html","categories":[],"tags":[]},{"title":"SomePythonPackages","slug":"Languages/Python/lib3-z-packages","date":"2021-10-23T11:54:51.135Z","updated":"2021-10-23T11:54:51.136Z","comments":true,"path":"Languages/Python/lib3-z-packages.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-z-packages.md/","excerpt":"","text":"tags: 202101 difflib difflib 高性能模糊搜索，模糊搜索优化 使用样例 12345678910import diffliblis = [&#x27;哈哈&#x27;, &#x27;呵呵&#x27;, &#x27;啦啦&#x27;, &#x27;嘻嘻&#x27;, &#x27;乐乐&#x27;, &#x27;快快乐乐&#x27;, &#x27;乐乐高&#x27;]res = difflib.get_close_matches(&#x27;乐乐&#x27;, lis, 3, cutoff=0.6)第一个参数：搜索的关键词，第二个参数：待搜索的List,第三个参数：搜索出来结果的个数第四个参数(cutoff): 匹配度，模糊搜索一般调0.6就可以了，越大越精确 Resources","categories":[],"tags":[]},{"title":"SQLAlchemy-技术文档","slug":"Languages/Python/lib3-sqlalchemy","date":"2021-10-23T11:54:51.135Z","updated":"2021-10-23T11:54:51.135Z","comments":true,"path":"Languages/Python/lib3-sqlalchemy.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-sqlalchemy.md/","excerpt":"","text":"SQLAlchemy 是 Python 编程语言下的一款 ORM 框架，该框架建立在数据库 API 之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成 SQL，然后使用数据 API 执行 SQL 并获取执行结果。 SQLAlchemy SQL Toolkit 和 Object Relational Mapper 是一套用于处理数据库和 Python 的综合工具。它具有几个不同的功能区域，可以单独使用或组合使用。其主要组件如下所示，组件依赖关系按层组织： 上面，SQLAlchemy 的两个最重要的前端部分是Object Relational Mapper和 SQL Expression Language。SQL 表达式可以独立于 ORM 使用。使用 ORM 时，SQL 表达式语言仍然是面向公众的 API 的一部分，因为它在对象关系配置和查询中使用。 $$文档分为三个部分：SQLAlchemy ORM， SQLAlchemy Core 和 Dialects。 在 SQLAlchemy ORM 中，引入并完整描述了对象关系映射器。新用户应该从对象关系教程开始。如果您想使用为您自动构建的更高级别的 SQL，以及 Python 对象的管理，请继续阅读本教程。 在 SQLAlchemy Core 中，记录了 SQLAlchemy 的 SQL 和数据库集成和描述服务的广度，其核心是 SQL 表达式语言。SQL 表达式语言是一个独立于 ORM 包的工具包，它可用于构造可操作的 SQL 表达式，可以通过编程方式构造，修改和执行，返回类似游标的结果集。与 ORM 以域为中心的使用模式相反，表达式语言提供了以模式为中心的使用范例。新用户应该从这里开始使用 SQL Expression Language Tutorial。SQLAlchemy 引擎，连接和池服务也在 SQLAlchemy Core 中描述 。 在 Dialects 中，提供了所有提供的数据库和 DBAPI 后端的参考文档。$$ 官网链接： http://docs.sqlalchemy.org/en/latest/orm/tutorial.html不同 ORM 框架对比说明https://www.oschina.net/translate/sqlalchemy-vs-orms常见命令https://www.imooc.com/article/details/id/22343常见命令 2https://www.cnblogs.com/booolee/archive/2009/08/26/1554525.htmlsqlalchemy 框架说明https://nettee.github.io/posts/2016/SQLAlchemy-Translation/ $$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182sqlalchemy的使用1.sqlalchemy的使用数据库表结构[ (&#x27;1&#x27;, &#x27;Michael&#x27;), (&#x27;2&#x27;, &#x27;Bob&#x27;), (&#x27;3&#x27;, &#x27;Adam&#x27;)]ORM技术ORM技术：Object-Relational Mapping，把关系数据库的表结构映射到对象上在Python中，最有名的ORM框架是SQLAlchemy用法setp1：第一步，导入SQLAlchemy，并初始化DBSession：&amp;&amp; 导入:from sqlalchemy import Column, String, create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_base&amp;&amp; 创建对象的基类:Base = declarative_base()&amp;&amp; 定义User对象:class User(Base): &amp;&amp; 表的名字: __tablename__ = &#x27;user&#x27; &amp;&amp; 表的结构: id = Column(String(20), primary_key=True) name = Column(String(20))&amp;&amp; 初始化数据库连接:engine = create_engine(&#x27;mysql+mysqlconnector://root:password@localhost:3306/test&#x27;)&amp;&amp; 创建DBSession类型:DBSession = sessionmaker(bind=engine)create_engine()用来初始化数据库连接。SQLAlchemy用一个字符串表示连接信息：&#x27;数据库类型+数据库驱动名称://用户名:口令@机器地址:端口号/数据库名&#x27;setp2:使用session对象 -- Session对象可视为当前数据库连接。&amp;&amp; 创建session对象:session = DBSession()&amp;&amp; 创建新User对象:new_user = User(id=&#x27;5&#x27;, name=&#x27;Bob&#x27;)&amp;&amp; 添加到session:session.add(new_user)&amp;&amp; 提交即保存到数据库:session.commit()&amp;&amp; 关闭session:session.close()step3:查询数据库表如何从数据库表中查询数据呢？有了ORM，查询出来的可以不再是tuple，而是User对象。SQLAlchemy提供的查询接口如下&amp;&amp; 创建Session:session = DBSession()&amp;&amp; 创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:user = session.query(User).filter(User.id==&#x27;5&#x27;).one()&amp;&amp; 打印类型和对象的name属性:print &#x27;type:&#x27;, type(user)print &#x27;name:&#x27;, user.name&amp;&amp; 关闭Session:session.close()运行结果如下：type: &lt;class &#x27;__main__.User&#x27;&gt;name: Bob可见，ORM就是把数据库表的行与相应的对象建立关联，互相转换。setp4：ORM的外键关联 -- relationship(向外连接), ForeignKey(连接主键)由于关系数据库的多个表还可以用外键实现一对多、多对多等关联，相应地，ORM框架也可以提供两个对象之间的一对多、多对多等功能。例如，如果一个User拥有多个Book，就可以定义一对多关系如下：class User(Base): __tablename__ = &#x27;user&#x27; id = Column(String(20), primary_key=True) name = Column(String(20)) &amp;&amp; 一对多: books = relationship(&#x27;Book&#x27;)class Book(Base): __tablename__ = &#x27;book&#x27; id = Column(String(20), primary_key=True) name = Column(String(20)) &amp;&amp; “多”的一方的book表是通过外键关联到user表的: user_id = Column(String(20), ForeignKey(&#x27;user.id&#x27;))当我们查询一个User对象时，该对象的books属性将返回一个包含若干个Book对象的list。小结ORM框架的作用就是把数据库表的一行记录与一个对象互相做自动转换。正确使用ORM的前提是了解关系数据库的原理 !!!! 为什么用 SQLAlchemy 用 SQLAlchemy 的主要原因是，把你从底层的数据库和 SQL 奇葩语法中解放出来。SQLAlchemy 将常用语句和类型和 SQL 语句对应起来，让你可以更容易地理解数据库类型，而不需要担心太多细节。这样在处理像 Oracle 到 PostgreSQL 数据库这类的迁移工作，或从一个应用数据库到数据仓库时，事情就简单了。它还能确保数据在增加到数据库之前是经过安全的，适当转义处理的。这样可以避免 SQL 注入之类的事情发生。 SQLAlchemy 通过两个主要的模型来实现灵活的操作：SQL 表达式语言(通常也叫 Core)和 ORM(Object-relational mapping，对象关系映射)。这两个模型可以根据你的需要独立使用，也可以合在一起使用。 SQLAlchemy Core 和 SQL 表达式语言 SQL 表达式语言是用 Pythonic 方式的来表达 SQL 语句和表达式，只是对传统的 SQL 语言的轻微抽象。它侧重于实用数据库的模式(schema，其实是具体到一个 Tabel 和 View 等)，但是它实现了不同数据库之间标准化的接口。SQL 表达式语言也是 SQLAlchemyORM 的基础。 ORM SQLAlchemy ORM 与你在其他语言里遇到的 ORM 类似。它侧重于应用的 DomainModel(一种将数据与其行为集成在一起的模式)，借助工作单元的模式来维护对象状态。它还在 SQL 表达式语言之上增加了一层抽象，让用户可以更容易的操作数据库。你可以把 ORM 和 SQL 表达式语言结合起来构建强大的应用。ORM 构建了一个声明式的系统，与许多其他 ORM 模型(如 Ruby onRails)使用的 active-record systems 类似。 虽然 ORM 非常有用，但是你要注意，类的很多用法与数据库的工作方式是不一样的。我们将在后面的章节介绍这些差异。 !!!! Core 和 ORM 的选择 究竟是选择 Core 还是 ORM 作为应用的数据链接层呢？除了个人喜好，理由可以归结为一些影响因素。这两种模式的语法不太一样，但 Core 和 ORM 最大的差异是 Core 对数据模式和业务对象(business objects)的不同处理方式。 SQLAlchemy Core 是以模式为中心，和普通 SQL 一样有表，键和索引等。SQLAlchemyCore 最擅长的时数据仓库，报表分析，以及其他使用数据查询和其他操作可以牢牢掌控的地方。它拥有强大的数据库连接池( connectionpool)和数据结果集(ResultSet)优化，非常适合处理大量数据，甚至多数据库也适用。 但是，如果你更侧重于领域驱动设计(domain driven design)，那么 ORM 就可以将原数据和业务对象的底层的模式和结构大部分细节都封装起来。这样封装让数据库连接更简单，更像 Python 代码。大多数应用都更适合按照这种方法建模。ORM 可以用一种非常高效的方法把领域驱动设计方法导入传统应用，或者改造原来带有原始 SQL 语句的应用。还有一个好处就是，通过对底层数据库的合理抽象，ORM 让开发者把精力更多地集中在业务流程的实现上。 不过，ORM 是建立在 SQLAlchemy Core 基础之上的，你可以把处理 MySQL 的同样方式用于 Oracle 的数据仓库和 Amazon Redshift 数据库。当你需要业务对象和仓库数据时，ORM 可以无缝的衔接每个环节。 如果你的应用框架已经使用了 ORM，但是想要更强大的报表功能，使用 Core 如果你不想像普通 SQL 一样以模式为中心，用 ORM 如果你的数据不需要业务对象，用 Core 如果你把数据看成业务对象，用 ORM 如果要建立快速原型，用 ORM 如果你既要业务对象，又要其他数据无关的功能(报表，数据分析等等)，两个都用。 &amp;&amp; 01 基础使用$$ 以 MySQL 为例， URL 格式 mysql+&#123;driver&#125;://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;name&#125;， driver 是 Python 的数据库驱动，比如 MySQL 官方的数据库驱动 mysql-connector-python，driver 是 mysqlconnector； username 是数据库用户名； password 是密码； host 是数据库主机； port 是数据库端口； name 是数据库名。 DB2 的 URL 格式： URL =&#39;ibm_db_sa://lqr:qwe123@155.104.1.141:50000/lqr&#39; ORACLE 的 URL 格式： &quot;oracle://$DB_USER:$DB_PASSWD@$DB_HOST:$DB_PORT/$DB_INSTANCE&quot; $$ 1234567891011121314151617from sqlalchemy import create_engine, MetaDatafrom sqlalchemy.orm import sessionmakerdb_url = &quot;mysql+mysqlconnector://root:@localhost:3306/test&quot;&amp;&amp; 通过数据库连接url创建数据库引擎&amp;&amp; 如果想回显SQLAlchemy操作数据库的日志，设置echo=Trueengine = create_engine(db_url, echo=True)&amp;&amp; 通过数据库引擎绑定元信息metadata = MetaData(engine)&amp;&amp; 通过绑定数据库引擎获取数据库会话类Session = sessionmaker(bind=engine)&amp;&amp; 获取数据库会话session = Session() $$ 以 ORM 方式来对数据库中的数据做增删查改操作是通过 Session 实例来完成的，在学习了解如何以 ORM 方式操作数据之前首先我们要对数据的状态有个基本的了解。 首先在 ORM 中，数据库中的数据表对应于 Python 中的类，而数据表中的记录对应于类的实例对象。因此，对数据表中的记录进行增删查改在 Python 中实际上就是对实例对象的操作。数据实例对象有四种状态，分别是 Transient - (瞬时的) 表示该实例对象不在 session 中，当然也没有保存到数据库中，主键一般情况下为 None(如果一个 Persistent 状态的对象进行事务回滚后虽然主键有值，但却是 Transient 状态)。 Pending - (挂起的) 调用 session.add()后，Transient 状态的对象就会变成 Pending 状态的对象，这个时候它只是在 session 中，并没有保存到数据库，因此主键依旧为 None。只有触发了 session.flush()操作才会保存到数据库使得主键有值，比如查询操作就会触发 flush。 Persistent - (持久的)session 和数据库中都有对应的记录存在，为持久状态。 Detached - (游离的)数据库中可能有记录，但是 session 中不存在。对这种对象的操作不会触发任何 SQL 语句。要查看数据对象的状态可以用如下方式 1234&gt;&gt;&gt; from sqlalchemy import inspect&gt;&gt;&gt; status = inspect(data_object)&gt;&gt;&gt; status.persistentTrue &amp;&amp; 02 命令大全 [toc] $$!!!! 常用数据类型和参数 数据库的数据类型和常用参数示例 12345678910111213141516171819202122import sqlalchemyfrom datetime import datetimefrom sqlalchemy import create_engine,Column,Integer,String,Text,Boolean,Date,DateTime,Floatfrom sqlalchemy.ext.declarative import declarative_base&amp;&amp; ======================================================================================================================&amp;&amp; 数据库的数据类型和常用参数示例&amp;&amp; 1. Integer：整形，映射到数据库中的int类型。&amp;&amp; 2. String：字符类型，映射到数据库中的varchar类型，使用时，需要提供一个字符长度。&amp;&amp; 3. Text：文本类型，映射到数据库中的text类型。&amp;&amp; 4. Boolean：布尔类型，映射到数据库中的bool类型，在使用的时候，传递`True/False`进去。&amp;&amp; 5. Date：日期类型，没有时间。映射到数据库中是`date`类型，在使用的时候，传递`datetime.date()`进去。&amp;&amp; 6. DateTime：日期时间类型。映射到数据库中的是`datetime`类型，在使用的时候，传递`datetime.datetime()`进去。&amp;&amp; 7. Float：浮点类型。&amp;&amp; 1. `primary_key`：主键，True和False。&amp;&amp; 2. `autoincrement`：是否自动增长，True和False。&amp;&amp; 3. `unique`：是否唯一。&amp;&amp; 4. `nullable`：是否可空，默认是True。&amp;&amp; 5. `default`：默认值。&amp;&amp; 6. `onupdate`：在更新的时候，一般用在时间上面。 !!!! 常用接口/包导入 记录sqlalchemy的 API 导入 123&amp;&amp; 常用包引入from sqlalchemy import and_, func, or_ !!!! 详细接口/包导入 Sqlchemy 常用 API 接口、参数。 @@@@@ Sqlchemy 接口/包导入 1234import sqlalchemyprint dir(sqlalchemy)In [2]: print dir(sqlalchemy)[&#x27;ARRAY&#x27;, &#x27;BIGINT&#x27;, &#x27;BINARY&#x27;, &#x27;BLANK_SCHEMA&#x27;, &#x27;BLOB&#x27;, &#x27;BOOLEAN&#x27;, &#x27;BigInteger&#x27;, &#x27;Binary&#x27;, &#x27;Boolean&#x27;, &#x27;CHAR&#x27;, &#x27;CLOB&#x27;, &#x27;CheckConstraint&#x27;, &#x27;Column&#x27;, &#x27;ColumnDefault&#x27;, &#x27;Constraint&#x27;, &#x27;DATE&#x27;, &#x27;DATETIME&#x27;, &#x27;DDL&#x27;, &#x27;DECIMAL&#x27;, &#x27;Date&#x27;, &#x27;DateTime&#x27;, &#x27;DefaultClause&#x27;, &#x27;Enum&#x27;, &#x27;FLOAT&#x27;, &#x27;FetchedValue&#x27;, &#x27;Float&#x27;, &#x27;ForeignKey&#x27;, &#x27;ForeignKeyConstraint&#x27;, &#x27;INT&#x27;, &#x27;INTEGER&#x27;, &#x27;Index&#x27;, &#x27;Integer&#x27;, &#x27;Interval&#x27;, &#x27;JSON&#x27;, &#x27;LargeBinary&#x27;, &#x27;MetaData&#x27;, &#x27;NCHAR&#x27;, &#x27;NUMERIC&#x27;, &#x27;NVARCHAR&#x27;, &#x27;Numeric&#x27;, &#x27;PassiveDefault&#x27;, &#x27;PickleType&#x27;, &#x27;PrimaryKeyConstraint&#x27;, &#x27;REAL&#x27;, &#x27;SMALLINT&#x27;, &#x27;Sequence&#x27;, &#x27;SmallInteger&#x27;, &#x27;String&#x27;, &#x27;TEXT&#x27;, &#x27;TIME&#x27;, &#x27;TIMESTAMP&#x27;, &#x27;Table&#x27;, &#x27;Text&#x27;, &#x27;ThreadLocalMetaData&#x27;, &#x27;Time&#x27;, &#x27;TypeDecorator&#x27;, &#x27;Unicode&#x27;, &#x27;UnicodeText&#x27;, &#x27;UniqueConstraint&#x27;, &#x27;VARBINARY&#x27;, &#x27;VARCHAR&#x27;, &#x27;__all__&#x27;, &#x27;__builtins__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__go&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__path__&#x27;, &#x27;__version__&#x27;, &#x27;alias&#x27;, &#x27;all_&#x27;, &#x27;and_&#x27;, &#x27;any_&#x27;, &#x27;asc&#x27;, &#x27;between&#x27;, &#x27;bindparam&#x27;, &#x27;case&#x27;, &#x27;cast&#x27;, &#x27;collate&#x27;, &#x27;column&#x27;, &#x27;cprocessors&#x27;, &#x27;create_engine&#x27;, &#x27;cresultproxy&#x27;, &#x27;cutils&#x27;, &#x27;delete&#x27;, &#x27;desc&#x27;, &#x27;dialects&#x27;, &#x27;distinct&#x27;, &#x27;engine&#x27;, &#x27;engine_from_config&#x27;, &#x27;event&#x27;, &#x27;events&#x27;, &#x27;exc&#x27;, &#x27;except_&#x27;, &#x27;except_all&#x27;, &#x27;exists&#x27;, &#x27;extract&#x27;, &#x27;false&#x27;, &#x27;func&#x27;, &#x27;funcfilter&#x27;, &#x27;insert&#x27;, &#x27;inspect&#x27;, &#x27;inspection&#x27;, &#x27;interfaces&#x27;, &#x27;intersect&#x27;, &#x27;intersect_all&#x27;, &#x27;join&#x27;, &#x27;lateral&#x27;, &#x27;literal&#x27;, &#x27;literal_column&#x27;, &#x27;log&#x27;, &#x27;modifier&#x27;, &#x27;not_&#x27;, &#x27;null&#x27;, &#x27;nullsfirst&#x27;, &#x27;nullslast&#x27;, &#x27;or_&#x27;, &#x27;outerjoin&#x27;, &#x27;outparam&#x27;, &#x27;over&#x27;, &#x27;pool&#x27;, &#x27;processors&#x27;, &#x27;schema&#x27;, &#x27;select&#x27;, &#x27;sql&#x27;, &#x27;subquery&#x27;, &#x27;table&#x27;, &#x27;tablesample&#x27;, &#x27;text&#x27;, &#x27;true&#x27;, &#x27;tuple_&#x27;, &#x27;type_coerce&#x27;, &#x27;types&#x27;, &#x27;union&#x27;, &#x27;union_all&#x27;, &#x27;update&#x27;, &#x27;util&#x27;, &#x27;within_group&#x27;] $$ !!!! 查询-query 12345678910&amp;&amp; 查询去重session.query(Phone.brand).distinct().all()&amp;&amp; 查询数据是否存在session.query(User).filter(exists().where(Address.user_id == User.id))session.query(User).filter(User.addresses.any())&amp;&amp; 查询数据条数sessino.query(User).all().count()&amp;&amp; 查询模糊匹配session.query(User).filter(User.code.like(&#x27;%&#x27;+code.strip().upper()+&#x27;%&#x27;)).all() 查询-func 函数 12345678910from sqlalchemy import func&amp;&amp; 忽略大小写session.query(User).filter(func.upper(User.code)==&#x27;AAA&#x27;).all()session.query(User).filter(func.lower(User.code)==&#x27;aaa&#x27;).all()&amp;&amp; 日期格式转字符session.query(User).filter(func.to_char(User.code)==&#x27;2018-01-01&#x27;).all()&amp;&amp; 列表查询 + 倒序/顺序查询from sqlalchemy import asc, descUser.query.filter(User.id.in_((1, 2, 3))).order_by(desc(User.datetime)).all()&amp;&amp; 简单查询 123session.query(User).all()session.query(User.name, User.fullname).all()session.query(User, User.name).all() 带条件查询 filter_by filter like 123session.query(User).filter_by(name=&#x27;user1&#x27;).all())session.query(User).filter(User.name == &quot;user&quot;).all())print(session.query(User).filter(User.name.like(&quot;user%&quot;)).all() 多条件查询 and* or* like ilike 12print(session.query(User).filter(and_(User.name.like(&quot;user%&quot;), User.fullname.like(&quot;first%&quot;))).all())print(session.query(User).filter(or_(User.name.like(&quot;user%&quot;), User.password != None)).all()) sql 过滤 filter params 1session.query(User).filter(&quot;id&gt;:id&quot;).params(id=1).all() 关联查询 join outerjoin innerjoin 123session.query(User, Address).filter(User.id == Address.user_id).all()session.query(User).join(User.addresses).all()session.query(User).outerjoin(User.addresses).all() 聚合查询 func.count func.sum group_by label 12session.query(User.name, func.count(&#x27;*&#x27;).label(&quot;user_count&quot;)).group_by(User.name).all()session.query(User.name, func.sum(User.id).label(&quot;user_id_sum&quot;)).group_by(User.name).all() 子查询 subquery() 12stmt = session.query(Address.user_id, func.count(&#x27;*&#x27;).label(&quot;address_count&quot;)).group_by(Address.user_id).subquery()print(session.query(User, stmt.c.address_count).outerjoin((stmt, User.id == stmt.c.user_id)).order_by(User.id).all()) 12限制返回字段查询person = session.query(Person.name, Person.created_at,Person.updated_at).filter_by(name=&quot;zhongwei&quot;).order_by(Person.created_at).first() !!!! 更新-update !!!! 增加-add count User records, withoutusing a subquery.session.query(func.count(User.id)) return count of user “id” groupedby “name”session.query(func.count(User.id)). group_by(User.name) from sqlalchemy import distinctcount distinct “name” valuessession.query(func.count(distinct(User.name))) &amp;&amp; 03 模块说明 $$共有如下几种 one()如果只能查询到一个结果，返回它，否则抛出异常。没有结果时抛 sqlalchemy.orm.exc.NoResultFound，有超过一个结果时抛 sqlalchemy.orm.exc.MultipleResultsFound。 all()查询所有结果。返回列表，无结果返回空列表。大数据时全部加载内存中 ，需要限制或分页。 first()返回查询到的第一个结果，如果没有查询到结果，返回 None。 .scalar() one_or_none()和.one_or_none()的效果一样。如果查询到很多结果，抛出 sqlalchemy.orm.exc.MultipleResultsFound 异常。如果只有一个结果，返回它，没有结果返回 None。.one_or_none()比起.one()来，区别只是查询不到任何结果时不再抛出异常而是返回 None。 .get()这是个比较特殊的方法。它用于根据主键来返回查询结果，因此它有个参数就是要查询的对象的主键。如果没有该主键的结果返回 None，否则返回这个结果。 &amp;&amp; SqlAlchemy 官方文档-ORM 框架$$ SqlAlchemy 官方文档-ORM 框架 版本 1.2.12 $$!!!! 检查版本 查看 sqlalchemy 版本 12In [7]: print(sqlalchemy.__version__)1.2.10 !!!! 数据库连接 123456In [3]: from sqlalchemy import create_engine&amp;&amp; 连接到 SqliteIn [4]: engine = create_engine(&#x27;sqlite:///:memory:&#x27;, echo=True)&amp;&amp; echo 是否生成日志。True 生成所有Sql日志，False 不生成&amp;&amp; 连接到 其他数据库engine = create_engine(&#x27;postgresql://scott:tiger@localhost:5432/mydatabase&#x27;) !!!! 声明映射 12&gt;&gt;&gt; from sqlalchemy.ext.declarative import declarative_base&gt;&gt;&gt; Base = declarative_base() 使用 ORM 时，配置过程首先描述我们将要处理的数据库表，然后定义我们自己的类，这些类将映射到这些表。在现代 SQLAlchemy 中，这两个任务通常使用称为 Declarative 的系统一起执行，这允许我们创建包含指令的类，以描述它们将映射到的实际数据库表。 使用 Declarative 系统映射的类是根据基类定义的，该基类维护相对于该基类的类和表的目录 - 这称为声明性基类。我们的应用程序通常在一个常用的模块中只有一个这个基础的实例。我们使用 declarative_base() 函数创建基类，如下所示： 123&gt;&gt;&gt; from sqlalchemy.ext.declarative import declarative_base&gt;&gt;&gt; Base = declarative_base() 现在我们有了一个“基础”，我们可以根据它定义任意数量的映射类。我们将从一个名为的表开始 users，它将使用我们的应用程序为最终用户存储记录。调用的新类 User 将是我们映射此表的类。在类中，我们定义了有关我们将要映射的表的详细信息，主要是表名，以及列的名称和数据类型： 123456789101112&gt;&gt;&gt; from sqlalchemy import Column, Integer, String&gt;&gt;&gt; class User(Base):... __tablename__ = &#x27;users&#x27;...... id = Column(Integer, primary_key=True)... name = Column(String)... fullname = Column(String)... password = Column(String)...... def __repr__(self):... return &quot;&lt;User(name=&#x27;%s&#x27;, fullname=&#x27;%s&#x27;, password=&#x27;%s&#x27;)&gt;&quot; % (... self.name, self.fullname, self.password) 定义一个__repr__()方法，是可选的，以便我们的示例显示格式良好的 User 对象。 使用 Declarative 的类至少需要一个tablename属性，并且至少有一个 Column 属于主键[1]的一部分。SQLAlchemy 从不对类引用的表做任何假设，包括它没有名称，数据类型或约束的内置约定。但这并不意味着需要样板; 相反，我们鼓励您使用辅助函数和 mixin 类创建自己的自动约定，这在 Mixin 和 Custom Base Classes 中有详细描述。 构造我们的类时，Declarative 将所有 Column 对象替换为称为描述符的特殊 Python 访问器;这是一个称为仪器的过程。“instrumented”映射类将为我们提供在 SQL 上下文中引用表的方法，以及从数据库中持久保存和加载列的值。 除了映射过程对我们的类所做的之外，该类仍然主要是一个普通的 Python 类，我们可以定义我们的应用程序所需的任意数量的普通属性和方法。 !!!! 创建架构 User 通过声明系统构建我们的类，我们定义了有关表的信息，称为表元数据。SQLAlchemy 用于表示特定表的此信息的 Table 对象称为对象，这里 Declarative 为我们创建了一个对象。我们可以通过检查table属性来看到这个对象： 123456&gt;&gt;&gt; User.__table__Table(&#x27;users&#x27;, MetaData(bind=None), Column(&#x27;id&#x27;, Integer(), table=&lt;users&gt;, primary_key=True, nullable=False), Column(&#x27;name&#x27;, String(), table=&lt;users&gt;), Column(&#x27;fullname&#x27;, String(), table=&lt;users&gt;), Column(&#x27;password&#x27;, String(), table=&lt;users&gt;), schema=None) 古典映射 虽然强烈建议使用 Declarative 系统，但不需要使用 SQLAlchemy 的 ORM。在 Declarative 之外，任何普通的 Python 类都可以直接映射到 Table 使用该 mapper()函数的任何类; 这种不太常见的用法在 Classical Mappings 中有所描述。 当我们声明我们的类时，Declarative 使用 Python 元类，以便在类声明完成后执行其他活动; 在此阶段，它 Table 根据我们的规范创建了一个对象，并通过构造一个 Mapper 对象将其与类相关联。这个对象是我们通常不需要直接处理的幕后对象(尽管它可以在我们需要时提供有关我们的映射的大量信息)。 该 Table 对象是一个更大的集合的成员，称为 MetaData。使用 Declarative 时，可以使用.metadata 声明性基类的属性来使用此对象。 这 MetaData 是一个注册表，包括向数据库发出一组有限的模式生成命令的功能。由于我们的 SQLite 数据库实际上没有 users 表，我们可以使用 MetaData 为所有尚不存在的表向数据库发出 CREATE TABLE 语句。下面，我们调用该 MetaData.create_all()方法，将我们 Engine 作为数据库连接源传递。我们将看到首先发出特殊命令以检查 users 表的存在，然后是实际的语句：CREATE TABLE 123456789101112&gt;&gt;&gt; Base.metadata.create_all(engine)SELECT ...PRAGMA table_info(&quot;users&quot;)()CREATE TABLE users ( id INTEGER NOT NULL, name VARCHAR, fullname VARCHAR, password VARCHAR, PRIMARY KEY (id))()COMMIT 最小表格描述与完整描述 熟悉 CREATE TABLE 语法的用户可能会注意到 VARCHAR 列的生成没有长度; 在 SQLite 和 PostgreSQL 上，这是一种有效的数据类型，但在其他情况下，它是不允许的。因此，如果在其中一个数据库上运行本教程，并且您希望使用 SQLAlchemy 发出 CREATE TABLE，则可以向该 String 类型提供“length” ，如下所示： Column(String(50))在长度字段 String，以及关于可用类似精度/规模字段 Integer，Numeric 等不会被其他的 SQLAlchemy 创建表时比引用。 此外，Firebird 和 Oracle 需要序列来生成新的主键标识符，而 SQLAlchemy 不会在未经指示的情况下生成或假设这些标识符。为此，您使用 Sequence 构造： 1234567891011121314from sqlalchemy import SequenceColumn(Integer, Sequence(&#x27;user_id_seq&#x27;), primary_key=True)Table因此，通过我们的声明性映射生成的完整，万无一失的因素是：class User(Base): __tablename__ = &#x27;users&#x27; id = Column(Integer, Sequence(&#x27;user_id_seq&#x27;), primary_key=True) name = Column(String(50)) fullname = Column(String(50)) password = Column(String(12)) def __repr__(self): return &quot;&lt;User(name=&#x27;%s&#x27;, fullname=&#x27;%s&#x27;, password=&#x27;%s&#x27;)&gt;&quot; % ( self.name, self.fullname, self.password) 我们分别包含这个更详细的表定义，以突出主要针对 Python 内使用的最小构造与将用于在具有更严格要求的特定后端集上发出 CREATE TABLE 语句之间的区别。 !!!! 创建映射类的实例 完成映射后，现在让我们创建并检查一个 User 对象： 1234567&gt;&gt;&gt; ed_user = User(name=&#x27;ed&#x27;, fullname=&#x27;Ed Jones&#x27;, password=&#x27;edspassword&#x27;)&gt;&gt;&gt; ed_user.name&#x27;ed&#x27;&gt;&gt;&gt; ed_user.password&#x27;edspassword&#x27;&gt;&gt;&gt; str(ed_user.id)&#x27;None&#x27; 该init()方法 我们的 User 类(使用 Declarative 系统定义)提供了一个构造函数(例如init()方法)，它自动接受与我们映射的列匹配的关键字名称。我们可以自由地init()在我们的类上定义我们喜欢的任何显式方法，它将覆盖 Declarative 提供的默认方法。 尽管我们没有在构造函数中指定它，但是当我们访问它时，该 id 属性仍会产生一个值 None(而不是 Python 通常的提升 AttributeError 未定义属性的行为)。SQLAlchemy 的检测通常在首次访问时为列映射属性生成此默认值。对于我们实际分配了值的那些属性，检测系统正在跟踪这些分配，以便在最终的 INSERT 语句中使用以发送到数据库。 !!!! 创建会话 我们现在准备开始与数据库交谈了。ORM 对数据库的“处理”是 Session。当我们第一次设置应用程序时，在与 create_engine() 语句相同的级别上，我们定义一个 Session 类，它将作为新 Session 对象的工厂： 123456789&gt;&gt;&gt; from sqlalchemy.orm import sessionmaker&gt;&gt;&gt; Session = sessionmaker(bind=engine)如果您的应用程序尚未 Engine定义模块级对象，请将其设置为：&gt;&gt;&gt; Session = sessionmaker()稍后，当您使用创建引擎时create_engine()，将其连接到Session使用 configure()：&gt;&gt;&gt; Session.configure(bind=engine) &amp;&amp; once engine is available会话生命周期模式 何时制作 a 的问题在 Session 很大程度上取决于正在构建的应用程序类型。请记住，Session 它只是对象的工作空间，是特定数据库连接的本地工作空间 - 如果您将应用程序线程视为晚宴 Session 上的访客，则是客人的盘子，它所拥有的对象是食物(和数据库……厨房？)！有关此主题的更多信息，请参阅何时构建会话，何时提交会话以及何时关闭会话？。 这个定制 Session 类将创建 Session 绑定到我们数据库的新对象。调用时也可以定义其他事务特征 sessionmaker; 这些将在后面的章节中描述。然后，只要您需要与数据库进行对话，就可以实例化 Session： session = Session()以上 Session 内容与我们的 SQLite 相关联 Engine，但尚未打开任何连接。当它第一次使用时，它从由 Engine 它维护的连接池中检索连接 ，并保持它，直到我们提交所有更改和/或关闭会话对象。 !!!! 添加和更新对象 为了坚持我们的 User 目标，我们 add()对我们 Session： 12&gt;&gt;&gt; ed_user = User(name=&#x27;ed&#x27;, fullname=&#x27;Ed Jones&#x27;, password=&#x27;edspassword&#x27;)&gt;&gt;&gt; session.add(ed_user) 此时，我们说该实例正在等待 ; 尚未发布任何 SQL，并且该对象尚未由数据库中的行表示。该 Session 会发出 SQL 坚持，只要需要，使用被称为一个过程冲洗。如果我们查询数据库，则首先刷新所有待处理信息，然后立即发出查询。Ed JonesEd Jones 例如，下面我们创建一个 Query 加载实例的新对象 User。我们“过滤” name 属性 ed，并表示我们只想要完整行列表中的第一个结果。User 返回一个实例，它等同于我们添加的实例： SQL&gt;&gt;&gt; our_user = session.query(User).filter_by(name=’ed’).first() our_user&lt;User(name=’ed’, fullname=’Ed Jones’, password=’edspassword’)&gt;实际上，Session 已经确定返回的行与在其内部对象映射中已经表示的行相同，因此我们实际上得到了与我们刚刚添加的实例相同的实例： ed_user is our_userTrue这里工作的 ORM 概念称为身份映射， 并确保在一个特定行上的所有操作都在 Session 同一组数据上运行。一旦具有特定主键的对象存在于其中 Session，则所有 SQL 查询 Session 将始终返回该特定主键的相同 Python 对象; 如果尝试在会话中放置具有相同主键的第二个已经持久化的对象，它也会引发错误。 我们可以 User 一次添加更多对象 add_all()： session.add_all([… User(name=’wendy’, fullname=’Wendy Williams’, password=’foobar’),… User(name=’mary’, fullname=’Mary Contrary’, password=’xxg527’),… User(name=’fred’, fullname=’Fred Flinstone’, password=’blah’)])此外，我们已经确定 Ed 的密码不太安全，所以我们改变它： ed_user.password = ‘f8s7ccs’该 Session 被关注。例如，它知道已被修改：Ed Jones session.dirtyIdentitySet([&lt;User(name=’ed’, fullname=’Ed Jones’, password=’f8s7ccs’)&gt;])并且有三个新 User 对象待定： session.newIdentitySet([&lt;User(name=’wendy’, fullname=’Wendy Williams’, password=’foobar’)&gt;,&lt;User(name=’mary’, fullname=’Mary Contrary’, password=’xxg527’)&gt;,&lt;User(name=’fred’, fullname=’Fred Flinstone’, password=’blah’)&gt;])我们告诉我们 Session，我们想要对数据库发出所有剩余的更改并提交事务，该事务一直在进行中。我们通过这样做 commit()。在 Session 发出 UPDATE 关于“ED”的密码更改，以及声明 INSERT 三个新语句 User 我们添加的对象： SQL&gt;&gt;&gt; session.commit()commit()刷新对数据库的剩余更改，并提交事务。会话引用的连接资源现在返回到连接池。此会话的后续操作将在新事务中进行，该事务将在首次需要时再次重新获取连接资源。 如果我们看看之前的 Ed id 属性 None，它现在有一个值： SQL&gt;&gt;&gt; ed_user.id1在 Session 数据库中插入新行后，所有新生成的标识符和数据库生成的默认值都可以立即在实例上使用，也可以通过首次访问加载来实现。在这种情况下，整个行在访问时被重新加载，因为在我们发布之后开始了新的事务 commit()。默认情况下，SQLAlchemy 会在第一次在新事务中访问时刷新先前事务中的数据，以便最新状态可用。重新加载的级别是可配置的，如使用会话中所述。 会话对象状态 当我们的 User 对象从外部移动 Session 到 Session 没有主键的内部，实际被插入时，它在四个可用的“对象状态”中的三个之间移动 - 瞬态，待定和持久。了解这些状态及其含义总是一个好主意 - 请务必阅读 Quickie Intro to Object States 以获得快速概述。 !!!! 回滚 由于 Session 交易中的工作，我们也可以回滚所做的更改。让我们做两个我们将要改变的变化; ed_user 的用户名设置为 Edwardo： ed_user.name = ‘Edwardo’我们将添加另一个错误的用户，fake_user： fake_user = User(name=’fakeuser’, fullname=’Invalid’, password=’12345’)session.add(fake_user)查询会话，我们可以看到它们被刷新到当前事务中： SQL&gt;&gt;&gt; session.query(User).filter(User.name.in_([‘Edwardo’, ‘fakeuser’])).all()[&lt;User(name=’Edwardo’, fullname=’Ed Jones’, password=’f8s7ccs’)&gt;, &lt;User(name=’fakeuser’, fullname=’Invalid’, password=’12345’)&gt;]回滚过去，我们可以看到这个 ed_user 名字又回来了 ed，并且 fake_user 已经被踢出了会议： SQL&gt;&gt;&gt; session.rollback() SQL&gt;&gt;&gt; ed_user.nameu’ed’ fake_user in sessionFalse发出 SELECT 说明了对数据库所做的更改： SQL&gt;&gt;&gt; session.query(User).filter(User.name.in_([‘ed’, ‘fakeuser’])).all()[&lt;User(name=’ed’, fullname=’Ed Jones’, password=’f8s7ccs’)&gt;] !!!! Querying 甲 Query 对象使用所创建的 query()上方法 Session。此函数采用可变数量的参数，可以是类和类检测描述符的任意组合。下面，我们指出 Query 哪个加载 User 实例。在迭代上下文中计算时，将 User 返回存在的对象列表： SQL&gt;&gt;&gt; for instance in session.query(User).order_by(User.id):… print(instance.name, instance.fullname)ed Ed Joneswendy Wendy Williamsmary Mary Contraryfred Fred Flinstone该 Query 还接受 ORM，仪表描述作为参数。每当多个类实体或基于列的实体表示为函数的参数时 query()，返回结果表示为元组： SQL&gt;&gt;&gt; for name, fullname in session.query(User.name, User.fullname):… print(name, fullname)ed Ed Joneswendy Wendy Williamsmary Mary Contraryfred Fred Flinstone返回的元组 Query 被命名为 元组，由 KeyedTuple 类提供，并且可以像普通的 Python 对象一样对待。名称与属性的属性名称以及类的类名称相同： SQL&gt;&gt;&gt; for row in session.query(User, User.name).all():… print(row.User, row.name)&lt;User(name=’ed’, fullname=’Ed Jones’, password=’f8s7ccs’)&gt; ed&lt;User(name=’wendy’, fullname=’Wendy Williams’, password=’foobar’)&gt; wendy&lt;User(name=’mary’, fullname=’Mary Contrary’, password=’xxg527’)&gt; mary&lt;User(name=’fred’, fullname=’Fred Flinstone’, password=’blah’)&gt; fred您可以使用 label()构造控制单个列表达式的名称，该 构造可从任何 ColumnElement 派生对象获得，以及映射到其中的任何类属性(例如 User.name)： SQL&gt;&gt;&gt; for row in session.query(User.name.label(‘name_label’)).all():… print(row.name_label)edwendymaryfred给予完整实体的名称，例如 User，假设调用中存在多个实体 query()，可以使用 aliased()以下方法控制 ： from sqlalchemy.orm import aliaseduser_alias = aliased(User, name=’user_alias’) SQL&gt;&gt;&gt; for row in session.query(user_alias, user_alias.name).all():… print(row.user_alias)&lt;User(name=’ed’, fullname=’Ed Jones’, password=’f8s7ccs’)&gt;&lt;User(name=’wendy’, fullname=’Wendy Williams’, password=’foobar’)&gt;&lt;User(name=’mary’, fullname=’Mary Contrary’, password=’xxg527’)&gt;&lt;User(name=’fred’, fullname=’Fred Flinstone’, password=’blah’)&gt;基本操作 Query 包括发出 LIMIT 和 OFFSET，最方便的是使用 Python 数组切片，通常与 ORDER BY 结合使用： SQL&gt;&gt;&gt; for u in session.query(User).order_by(User.id)[1:3]:… print(u)&lt;User(name=’wendy’, fullname=’Wendy Williams’, password=’foobar’)&gt;&lt;User(name=’mary’, fullname=’Mary Contrary’, password=’xxg527’)&gt;和过滤结果，使用 filter_by()，使用关键字参数完成： SQL&gt;&gt;&gt; for name, in session.query(User.name).… filter_by(fullname=’Ed Jones’):… print(name)ed…或者 filter()，它使用更灵活的 SQL 表达式语言结构。这些允许您使用常规 Python 运算符和映射类的类级属性： SQL&gt;&gt;&gt; for name, in session.query(User.name).… filter(User.fullname==’Ed Jones’):… print(name)ed该 Query 对象是完全生成的，这意味着大多数方法调用返回一个新 Query 对象，可以在其上添加进一步的标准。例如，要查询名为“ed”且名称为“Ed Jones”的用户，可以调用 filter()两次，使用 AND 以下命令连接条件 ： SQL&gt;&gt;&gt; for user in session.query(User).… filter(User.name==’ed’).… filter(User.fullname==’Ed Jones’):… print(user)&lt;User(name=’ed’, fullname=’Ed Jones’, password=’f8s7ccs’)&gt; @@@@@ 通用过滤器运算符 以下是一些最常用的运算符的概述 filter()： 等于 1query.filter(User.name == &#x27;ed&#x27;) 不等于 1query.filter(User.name != &#x27;ed&#x27;) 模糊匹配 like 区分大小写 12query.filter(User.name.like(&#x27;%ed%&#x27;))ColumnOperators.like()呈现LIKE运算符，对某些后端不区分大小写，对其他后端区分大小写。对于保证不区分大小写的比较，请使用 ColumnOperators.ilike()。 模糊匹配 ilike 不区分大小写 1234query.filter(User.name.ilike(&#x27;%ed%&#x27;))注意大多数后端不直接支持ILIKE。对于那些，ColumnOperators.ilike()运算符呈现一个表达式，将LIKE与应用于每个操作数的LOWER SQL函数相结合。 在什么之内 in 123456query.filter(User.name.in_([&#x27;ed&#x27;, &#x27;wendy&#x27;, &#x27;jack&#x27;]))&amp;&amp;works with query objects too:query.filter(User.name.in_( session.query(User.name).filter(User.name.like(&#x27;%ed%&#x27;)))) 不在什么之内 not in 1query.filter(~User.name.in_([&#x27;ed&#x27;, &#x27;wendy&#x27;, &#x27;jack&#x27;])) 为空 is null 123query.filter(User.name == None)&amp;&amp; alternatively, if pep8/linters are a concernquery.filter(User.name.is_(None)) 非空 IS NOT NULL: 123query.filter(User.name != None)&amp;&amp; alternatively, if pep8/linters are a concernquery.filter(User.name.isnot(None)) 且 and 1234567&amp;&amp; use and_()from sqlalchemy import and_query.filter(and_(User.name == &#x27;ed&#x27;, User.fullname == &#x27;Ed Jones&#x27;))&amp;&amp; or send multiple expressions to .filter()query.filter(User.name == &#x27;ed&#x27;, User.fullname == &#x27;Ed Jones&#x27;)&amp;&amp; or chain multiple filter()/filter_by() callsquery.filter(User.name == &#x27;ed&#x27;).filter(User.fullname == &#x27;Ed Jones&#x27;) 或 OR: 12from sqlalchemy import or_query.filter(or_(User.name == &#x27;ed&#x27;, User.name == &#x27;wendy&#x27;)) 精准匹配 MATCH: 1query.filter(User.name.match(&#x27;wendy&#x27;)) 注意 match()使用特定于数据库 MATCH 或 CONTAINS 函数; 它的行为会因后端而异，并且在某些后端(例如 SQLite)上不可用。 @@@@@ 返回列表和标量 有许多方法可以 Query 立即发出 SQL 并返回包含已加载数据库结果的值。这是一个简短的旅游： all() 返回一个列表： 123456789101112131415161718192021222324252627282930&gt;&gt;&gt; query = session.query(User).filter(User.name.like(&#x27;%ed&#x27;)).order_by(User.id)SQL&gt;&gt;&gt; query.all()[&lt;User(name=&#x27;ed&#x27;, fullname=&#x27;Ed Jones&#x27;, password=&#x27;f8s7ccs&#x27;)&gt;, &lt;User(name=&#x27;fred&#x27;, fullname=&#x27;Fred Flinstone&#x27;, password=&#x27;blah&#x27;)&gt;]first() 应用限制为1并将第一个结果作为标量返回：SQL&gt;&gt;&gt; query.first()&lt;User(name=&#x27;ed&#x27;, fullname=&#x27;Ed Jones&#x27;, password=&#x27;f8s7ccs&#x27;)&gt;one()完全提取所有行，如果结果中不存在一个对象标识或复合行，则会引发错误。找到多行：&gt;&gt;&gt; user = query.one()Traceback (most recent call last):...MultipleResultsFound: Multiple rows were found for one()没有找到行：&gt;&gt;&gt; user = query.filter(User.id == 99).one()Traceback (most recent call last):...NoResultFound: No row was found for one()该one()方法非常适用于希望处理“找不到物品”而不是“找到多件物品”的系统; 例如RESTful Web服务，可能希望在找不到结果时引发“未找到404”，但在找到多个结果时引发应用程序错误。one_or_none()就像one()，除非没有找到结果，它不会引起错误; 它只是回来了None。像 one()，但是，它如果有多个结果发现引发错误。scalar()调用该one()方法，并在成功时返回该行的第一列：&gt;&gt;&gt; query = session.query(User.id).filter(User.name == &#x27;ed&#x27;).\\... order_by(User.id)SQL&gt;&gt;&gt; query.scalar()1 @@@@@ 使用文本 Query 通过指定它们对 text()构造的使用，可以灵活地使用文字字符串 ，这是大多数适用方法所接受的。例如， filter()和 order_by()： 123456789101112131415161718192021222324252627282930313233343536373839&gt;&gt;&gt; from sqlalchemy import textSQL&gt;&gt;&gt; for user in session.query(User).\\... filter(text(&quot;id&lt;224&quot;)).\\... order_by(text(&quot;id&quot;)).all():... print(user.name)edwendymaryfred可以使用冒号使用基于字符串的SQL指定绑定参数。要指定值，请使用以下params() 方法：SQL&gt;&gt;&gt; session.query(User).filter(text(&quot;id&lt;:value and name=:name&quot;)).\\... params(value=224, name=&#x27;fred&#x27;).order_by(User.id).one()&lt;User(name=&#x27;fred&#x27;, fullname=&#x27;Fred Flinstone&#x27;, password=&#x27;blah&#x27;)&gt;要使用完全基于字符串的语句，text()可以将表示完整语句的构造传递给 from_statement()。如果没有其他说明符，字符串SQL中的列将根据名称与模型列匹配，例如下面我们只使用星号表示加载所有列：SQL&gt;&gt;&gt; session.query(User).from_statement(... text(&quot;SELECT * FROM users where name=:name&quot;)).\\... params(name=&#x27;ed&#x27;).all()[&lt;User(name=&#x27;ed&#x27;, fullname=&#x27;Ed Jones&#x27;, password=&#x27;f8s7ccs&#x27;)&gt;]匹配名称上的列适用于简单的情况，但在处理包含重复列名的复杂语句或使用不易与特定名称匹配的匿名ORM构造时可能会变得难以处理。此外，在处理结果行时，我们可能会发现在映射列中存在键入行为。对于这些情况，text()构造允许我们在位置上将其文本SQL链接到Core或ORM映射的列表达式; 我们可以通过将列表达式作为位置参数传递给TextClause.columns()方法来实现这一点 ：&gt;&gt;&gt; stmt = text(&quot;SELECT name, id, fullname, password &quot;... &quot;FROM users where name=:name&quot;)&gt;&gt;&gt; stmt = stmt.columns(User.name, User.id, User.fullname, User.password)SQL&gt;&gt;&gt; session.query(User).from_statement(stmt).params(name=&#x27;ed&#x27;).all()[&lt;User(name=&#x27;ed&#x27;, fullname=&#x27;Ed Jones&#x27;, password=&#x27;f8s7ccs&#x27;)&gt;]版本1.1中的新增功能：该TextClause.columns()方法现在接受列表达式，这些列表达式将与纯文本SQL结果集进行位置匹配，从而无需在SQL语句中匹配甚至是唯一的列名。从text()构造中进行选择时，Query 仍然可以指定要返回的列和实体; 而不是 query(User)我们也可以单独要求列，如在任何其他情况下：&gt;&gt;&gt; stmt = text(&quot;SELECT name, id FROM users where name=:name&quot;)&gt;&gt;&gt; stmt = stmt.columns(User.name, User.id)SQL&gt;&gt;&gt; session.query(User.id, User.name).\\... from_statement(stmt).params(name=&#x27;ed&#x27;).all()[(1, u&#x27;ed&#x27;)]也可以看看使用Textual SQL -text()从仅核心查询的角度解释构造。 @@@@@ Counting 计数 Query 包括一种方便的计数方法 count()： 123456789101112131415161718192021SQL&gt;&gt;&gt; session.query(User).filter(User.name.like(&#x27;%ed&#x27;)).count()2指望 count()Query.count()曾经是一个非常复杂的方法，当它试图猜测现有查询周围是否需要子查询时，在某些奇特的情况下它不会做正确的事情。现在它每次都使用一个简单的子查询，它只有两行长并且总是返回正确的答案。使用func.count()如果一个特定的语句绝对不能容忍的子查询存在。该count()方法用于确定SQL语句将返回多少行。查看上面生成的SQL，SQLAlchemy总是将我们查询的任何内容放入子查询中，然后从中计算行数。在某些情况下，这可以简化为更简单，但SQLAlchemy的现代版本不会尝试猜测何时合适，因为可以使用更明确的方法发出确切的SQL。SELECT count(*) FROM table对于需要具体指出“要计数的东西”的情况，我们可以直接使用构造中func.count()可用 的表达式指定“计数”函数func。下面我们用它来返回每个不同用户名的计数：&gt;&gt;&gt; from sqlalchemy import funcSQL&gt;&gt;&gt; session.query(func.count(User.name), User.name).group_by(User.name).all()[(1, u&#x27;ed&#x27;), (1, u&#x27;fred&#x27;), (1, u&#x27;mary&#x27;), (1, u&#x27;wendy&#x27;)]为了实现我们的简单，我们可以将其应用为：SELECT count(*) FROM tableSQL&gt;&gt;&gt; session.query(func.count(&#x27;*&#x27;)).select_from(User).scalar()4select_from()如果我们User直接用主键表示计数，则可以删除用法：SQL&gt;&gt;&gt; session.query(func.count(User.id)).scalar()4 !!!! 建立关系 让我们考虑如何 User 映射和查询与之相关的第二个表。我们系统中的用户可以存储与其用户名关联的任意数量的电子邮件地址。这意味着从 users 存储电子邮件地址的新表到基本的一对多关联，我们将调用它 addresses。使用声明，我们将此表及其映射类定义为 Address： 123456789101112131415161718192021222324252627282930313233343536373839404142&gt;&gt;&gt; from sqlalchemy import ForeignKey&gt;&gt;&gt; from sqlalchemy.orm import relationship&gt;&gt;&gt; class Address(Base):... __tablename__ = &#x27;addresses&#x27;... id = Column(Integer, primary_key=True)... email_address = Column(String, nullable=False)... user_id = Column(Integer, ForeignKey(&#x27;users.id&#x27;))...... user = relationship(&quot;User&quot;, back_populates=&quot;addresses&quot;)...... def __repr__(self):... return &quot;&lt;Address(email_address=&#x27;%s&#x27;)&gt;&quot; % self.email_address&gt;&gt;&gt; User.addresses = relationship(... &quot;Address&quot;, order_by=Address.id, back_populates=&quot;user&quot;)上面的类介绍了ForeignKey构造，它是一个应用于的指令，Column它指示此列中的值应该被约束为指定的远程列中存在的值。这是关系数据库的核心功能，并且是“粘合剂”，它将未连接的表集合转换为具有丰富的重叠关系。的ForeignKey是，在以上的值表示addresses.user_id列应被约束在这些值users.id列中，即它的主键。第二个指令，称为relationship()ORM ，使用该属性告诉ORM Address类本身应该链接到User类Address.user。 relationship()使用两个表之间的外键关系来确定此链接的性质，确定Address.user将是多对一。另一个relationship()指令放在 User属性下的映射类中User.addresses。在两个 relationship()指令中，relationship.back_populates分配参数 以引用补充属性名称; 通过这样做，每个人都relationship() 可以做出与反向表达的相同关系的智能决策; 一方面，Address.user指的是一个User实例，另一方面User.addresses指的是一个列表 Address 实例。注意该relationship.back_populates参数是一个非常常见的SQLAlchemy功能的较新版本 relationship.backref。该relationship.backref 参数还没有到哪里去了，永远保持可用！这relationship.back_populates是一回事，除了更冗长，更容易操纵。有关整个主题的概述，请参阅使用Backref链接关系部分。多对一关系的反面总是一对多。基本关系模式的完整可用relationship()配置目录。两个互补关系Address.user并且User.addresses 被称为一个双向关系，并且是SQLAlchemy的ORM的一个关键特征。Linking Relationships with Backref部分详细 讨论了“backref”功能。relationship()假设声明系统正在使用中，可以使用字符串指定远程类所关注的参数。一旦所有映射完成，这些字符串将被计算为Python表达式，以便生成实际参数，在上面的例子中是User类。在此评估期间允许使用的名称包括根据声明的基础创建的所有类的名称。有关relationship()参数样式的更多详细信息，请参阅docstring 。你知道吗 ？大多数(尽管不是全部)关系数据库中的FOREIGN KEY约束只能链接到主键列或具有UNIQUE约束的列。引用多列主键的FOREIGN KEY约束，本身有多列，称为“复合外键”。它还可以引用这些列的子集。FOREIGN KEY列可以自动更新，以响应引用的列或行的更改。这称为CASCADE 引用操作，是关系数据库的内置函数。FOREIGN KEY可以参考自己的表。这被称为“自引用”外键。在外键- 维基百科上阅读更多关于外键的信息。我们需要addresses在数据库中创建表，因此我们将从元数据中发出另一个CREATE，它将跳过已经创建的表：SQL&gt;&gt;&gt; Base.metadata.create_all(engine) !!!! 使用相关对象 现在，当我们创建一个 User 空白 addresses 集合时，将会出现。此处可以使用各种集合类型(例如集和字典)(有关详细信息，请参阅自定义集合访问)，但默认情况下，集合是 Python 列表。 123456789101112131415161718192021222324252627282930&gt;&gt;&gt; jack = User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;&gt;&gt; jack.addresses[]我们可以自由地在Address对象上添加User对象。在这种情况下，我们只是直接指定一个完整列表：&gt;&gt;&gt; jack.addresses = [... Address(email_address=&#x27;jack@google.com&#x27;),... Address(email_address=&#x27;j25@yahoo.com&#x27;)]使用双向关系时，在一个方向上添加的元素会自动在另一个方向上可见。此行为基于属性on-change事件发生，并在Python中进行评估，而不使用任何SQL：&gt;&gt;&gt; jack.addresses[1]&lt;Address(email_address=&#x27;j25@yahoo.com&#x27;)&gt;&gt;&gt;&gt; jack.addresses[1].user&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;让我们添加并提交到数据库。以及相应 集合中的两个成员都使用称为级联的过程一次添加到会话中：Jack BeanjackAddressaddresses&gt;&gt;&gt; session.add(jack)SQL&gt;&gt;&gt; session.commit()查询杰克，我们得到杰克回来。尚未为Jack的地址发布SQL：SQL&gt;&gt;&gt; jack = session.query(User).\\... filter_by(name=&#x27;jack&#x27;).one()&gt;&gt;&gt; jack&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;我们来看看这个addresses系列吧。观看SQL：SQL&gt;&gt;&gt; jack.addresses[&lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt;, &lt;Address(email_address=&#x27;j25@yahoo.com&#x27;)&gt;]当我们访问addresses集合时，突然发出了SQL。这是延迟加载关系的一个例子。该addresses集合现在已加载，其行为就像普通列表一样。我们将介绍一些优化加载这个集合的方法。 !!!! 用连接查询 现在我们有两个表，我们可以显示更多的功能 Query，特别是如何创建同时处理这两个表的查询。SQL JOIN 上的 Wikipedia 页面提供了对连接技术的一个很好的介绍，其中几个我们将在这里说明。 要在 User 和之间构造一个简单的隐式连接 Address，我们可以使用 Query.filter()它们将它们的相关列等同起来。下面我们使用这个方法一次加载 User 和 Address 实体： 1234567891011121314151617181920212223242526272829303132333435363738394041424344SQL&gt;&gt;&gt; for u, a in session.query(User, Address).\\... filter(User.id==Address.user_id).\\... filter(Address.email_address==&#x27;jack@google.com&#x27;).\\... all():... print(u)... print(a)&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;&lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt;另一方面，实际的SQL JOIN语法最容易使用以下Query.join()方法实现：SQL&gt;&gt;&gt; session.query(User).join(Address).\\... filter(Address.email_address==&#x27;jack@google.com&#x27;).\\... all()[&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;]Query.join()知道如何加入User ，Address因为它们之间只有一个外键。如果没有外键或多个外键，Query.join() 则在使用以下表单之一时效果更好：query.join(Address, User.id==Address.user_id) &amp;&amp; explicit conditionquery.join(User.addresses) &amp;&amp; specify relationship from left to rightquery.join(Address, User.addresses) &amp;&amp; same, with explicit targetquery.join(&#x27;addresses&#x27;) &amp;&amp; same, using a string正如您所期望的那样，使用以下outerjoin()函数将相同的想法用于“外部”连接 ：query.outerjoin(User.addresses) &amp;&amp; LEFT OUTER JOIN参考文档join()包含此方法接受的调用样式的详细信息和示例; join() 对于任何SQL-fluent应用程序而言，它是使用中心的重要方法。Query如果有多个实体，可以选择什么？当省略ON子句或ON子句是纯SQL表达式时，该Query.join()方法通常从实体列表中最左边的项加入。要控制JOIN列表中的第一个实体，请使用以下Query.select_from()方法：query = session.query(User, Address).select_from(Address).join(User)@@@@@ 使用别名在跨多个表进行查询时，如果需要多次引用同一个表，则SQL通常要求使用其他名称对该表进行别名，以便可以将该表与该表的其他实例区分开来。Query最明确使用aliased构造的支持。下面我们Address 两次加入实体，找到同时拥有两个不同电子邮件地址的用户：&gt;&gt;&gt; from sqlalchemy.orm import aliased&gt;&gt;&gt; adalias1 = aliased(Address)&gt;&gt;&gt; adalias2 = aliased(Address)SQL&gt;&gt;&gt; for username, email1, email2 in \\... session.query(User.name, adalias1.email_address, adalias2.email_address).\\... join(adalias1, User.addresses).\\... join(adalias2, User.addresses).\\... filter(adalias1.email_address==&#x27;jack@google.com&#x27;).\\... filter(adalias2.email_address==&#x27;j25@yahoo.com&#x27;):... print(username, email1, email2)jack jack@google.com j25@yahoo.com @@@@@ 使用子查询 的 Query 是适合于产生其可以被用作子查询语句。假设我们想要加载 User 对象以及 Address 每个用户拥有多少条记录的计数。生成这样的 SQL 的最佳方法是获取按用户 ID 分组的地址计数，并将 JOIN 连接到父级。在这种情况下，我们使用 LEFT OUTER JOIN，以便为没有任何地址的用户返回行，例如： 1234567891011121314151617181920212223242526272829303132333435SELECT users.*, adr_count.address_count FROM users LEFT OUTER JOIN (SELECT user_id, count(*) AS address_count FROM addresses GROUP BY user_id) AS adr_count ON users.id=adr_count.user_id使用Query，我们从内到外构建一个这样的语句。的statement存取器返回一个表示由特定生成的声明SQL表达式 Query-这是一个实例select() 构建体，其中描述了SQL表达式语言教程：&gt;&gt;&gt; from sqlalchemy.sql import func&gt;&gt;&gt; stmt = session.query(Address.user_id, func.count(&#x27;*&#x27;).\\... label(&#x27;address_count&#x27;)).\\... group_by(Address.user_id).subquery()所述func关键字生成SQL函数，以及subquery()关于方法 Query产生表示嵌入的别名内SELECT语句中的SQL表达构建体(它实际上是简写query.statement.alias())。一旦我们得到了语句，它就像一个Table构造，比如我们在users本教程开始时创建的 构造 。语句中的列可通过以下属性访问c：SQL&gt;&gt;&gt; for u, count in session.query(User, stmt.c.address_count).\\... outerjoin(stmt, User.id==stmt.c.user_id).order_by(User.id):... print(u, count)&lt;User(name=&#x27;ed&#x27;, fullname=&#x27;Ed Jones&#x27;, password=&#x27;f8s7ccs&#x27;)&gt; None&lt;User(name=&#x27;wendy&#x27;, fullname=&#x27;Wendy Williams&#x27;, password=&#x27;foobar&#x27;)&gt; None&lt;User(name=&#x27;mary&#x27;, fullname=&#x27;Mary Contrary&#x27;, password=&#x27;xxg527&#x27;)&gt; None&lt;User(name=&#x27;fred&#x27;, fullname=&#x27;Fred Flinstone&#x27;, password=&#x27;blah&#x27;)&gt; None&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt; 2@@@@@ 从子查询中选择实体上面，我们刚刚选择了一个包含子查询列的结果。如果我们希望子查询映射到实体怎么办？为此，我们使用aliased() 将映射类的“别名”与子查询相关联：SQL&gt;&gt;&gt; stmt = session.query(Address).\\... filter(Address.email_address != &#x27;j25@yahoo.com&#x27;).\\... subquery()&gt;&gt;&gt; adalias = aliased(Address, stmt)&gt;&gt;&gt; for user, address in session.query(User, adalias).\\... join(adalias, User.addresses):... print(user)... print(address)&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;&lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt; @@@@@ 使用 Exists 存在 SQL 中的 EXISTS 关键字是一个布尔运算符，如果给定的表达式包含任何行，则返回 True。它可以在许多场景中用于代替连接，也可用于定位在相关表中没有相应行的行。 有一个显式的 EXISTS 结构，如下所示： 12345678910111213141516171819202122&gt;&gt;&gt; from sqlalchemy.sql import exists&gt;&gt;&gt; stmt = exists().where(Address.user_id==User.id)SQL&gt;&gt;&gt; for name, in session.query(User.name).filter(stmt):... print(name)jack该Query功能几家运营商，这使得使用情况自动存在。上面，声明可以User.addresses使用any()以下关系表达 ：SQL&gt;&gt;&gt; for name, in session.query(User.name).\\... filter(User.addresses.any()):... print(name)jackany() 采用标准，限制匹配的行：SQL&gt;&gt;&gt; for name, in session.query(User.name).\\... filter(User.addresses.any(Address.email_address.like(&#x27;%google%&#x27;))):... print(name)jackhas()与any()多对一关系是同一个运算符 (请注意~这里的运算符，这意味着“NOT”)：SQL&gt;&gt;&gt; session.query(Address).\\... filter(~Address.user.has(User.name==&#x27;jack&#x27;)).all()[] @@@@@ 公共关系运算符 以下是构建关系的所有运算符 - 每个运算符都链接到其 API 文档，其中包含有关使用和行为的完整详细信息： eq() (多对一“等于”比较)： query.filter(Address.user == someuser)ne() (多对一“不等于”比较)： query.filter(Address.user != someuser)IS NULL(多对一比较，也使用eq())： query.filter(Address.user == None)contains() (用于一对多收藏)： query.filter(User.addresses.contains(someaddress))any() (用于收藏)： 1234query.filter(User.addresses.any(Address.email_address == &#x27;bar&#x27;))&amp;&amp; also takes keyword arguments:query.filter(User.addresses.any(email_address=&#x27;bar&#x27;)) has() (用于标量引用)： 1234query.filter(Address.user.has(name=&#x27;ed&#x27;))Query.with_parent() (用于任何关系)：session.query(Address).with_parent(someuser, &#x27;addresses&#x27;) !!!! 渴望加载 回想一下，当我们访问 a 的集合并发出 SQL 时，我们说明了一个延迟加载操作。如果您想减少查询数量(在很多情况下显着)，我们可以对查询操作应用急切加载。SQLAlchemy 提供三种类型的预先加载，其中两种是自动加载，第三种涉及自定义标准。所有这三个通常都是通过称为查询选项的函数调用的，这些函数通过该方法为我们希望如何加载各种属性提供了额外的指令。User.addressesUserQueryQuery.options() @@@@@ 子查询加载 在这种情况下，我们想表明 User.addresses 应该急切加载。加载一组对象及其相关集合的一个很好的选择是 orm.subqueryload()选项，它会发出第二个 SELECT 语句，该语句完全加载与刚刚加载的结果相关联的集合。名称“子查询”源于这样一个事实，即直接通过它构造的 SELECT 语句 Query 被重新使用，作为子查询嵌入到相关表的 SELECT 中。这有点精心但很容易使用： from sqlalchemy.orm import subqueryloadSQL&gt;&gt;&gt; jack = session.query(User).… options(subqueryload(User.addresses)).… filter_by(name=’jack’).one()jack&lt;User(name=’jack’, fullname=’Jack Bean’, password=’gjffdd’)&gt; jack.addresses[&lt;Address(email_address=‘&#x6a;&#97;&#99;&#x6b;&#x40;&#x67;&#111;&#x6f;&#x67;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;‘)&gt;, &lt;Address(email_address=‘&#106;&#x32;&#53;&#64;&#121;&#97;&#104;&#111;&#x6f;&#46;&#x63;&#x6f;&#109;‘)&gt;]注意 subqueryload()当与限制一起使用时 Query.first()，Query.limit()或者 Query.offset() 还应包括 Query.order_by()在一个独特的列上，以确保正确的结果。请参阅订购的重要性。 @@@@@ 加入加载 另一种自动急切加载功能更为人所知并被称为 orm.joinedload()。这种加载方式发出 JOIN，默认情况下为 LEFT OUTER JOIN，因此只需一步加载主对象以及相关对象或集合。我们 addresses 以这种方式说明加载相同的 集合 - 请注意，即使实际上正在填充 User.addresses 集合 jack，查询也会发出额外的连接，无论如何： 123456789101112131415&gt;&gt;&gt; from sqlalchemy.orm import joinedloadSQL&gt;&gt;&gt; jack = session.query(User).\\... options(joinedload(User.addresses)).\\... filter_by(name=&#x27;jack&#x27;).one()&gt;&gt;&gt; jack&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;&gt;&gt;&gt; jack.addresses[&lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt;, &lt;Address(email_address=&#x27;j25@yahoo.com&#x27;)&gt;]请注意，即使OUTER JOIN导致两行，我们仍然只有一个User返回实例。这是因为Query基于对象标识将“uniquing”策略应用于返回的实体。具体来说，可以应用联合的预先加载而不会影响查询结果。虽然joinedload()已经存在了很长时间，但是subqueryload() 是一种新形式的渴望加载。 subqueryload()往往更适合加载相关集合，而joinedload()往往更适合多对一关系，因为只有一行加载了潜在客户和相关对象。joinedload() 不是替代品 join() 创建的 joinedload()联接是匿名别名，因此不会影响查询结果。一个 Query.order_by() 或 Query.filter()电话无法引用这些别名表-所谓的“用户空间”连接被利用人工 Query.join()。其基本原理 joinedload()是仅应用于影响相关对象或集合作为优化细节的加载方式 - 可以添加或删除它，而不会影响实际结果。有关如何使用它的详细说明，请参阅“ 加入的渴望加载的禅 ”一节。 @@@@@ 明确加入+ Eagerload 第三种类型的热切加载是当我们显式构造 JOIN 以便定位主行时，并且还想将额外的表应用于主对象上的相关对象或集合。此功能是通过该 orm.contains_eager()函数提供的，最常用于在需要对同一对象进行过滤的查询上预加载多对一对象。下面我们说明加载 Address 一行以及相关 User 对象，过滤 User 命名的“jack”并使用 orm.contains_eager()“user”列应用于 Address.user 属性： 123456789101112&gt;&gt;&gt; from sqlalchemy.orm import contains_eagerSQL&gt;&gt;&gt; jacks_addresses = session.query(Address).\\... join(Address.user).\\... filter(User.name==&#x27;jack&#x27;).\\... options(contains_eager(Address.user)).\\... all()&gt;&gt;&gt; jacks_addresses[&lt;Address(email_address=&#x27;jack@google.com&#x27;)&gt;, &lt;Address(email_address=&#x27;j25@yahoo.com&#x27;)&gt;]&gt;&gt;&gt; jacks_addresses[0].user&lt;User(name=&#x27;jack&#x27;, fullname=&#x27;Jack Bean&#x27;, password=&#x27;gjffdd&#x27;)&gt;有关预先加载的更多信息，包括默认情况下如何配置各种加载形式，请参阅关系加载技术一节。 !!!! Deleting 让我们尝试删除 jack，看看情况如何。我们将会话中的对象标记为已删除，然后我们将发出 count 查询以查看没有行保留： 12345678910&gt;&gt;&gt; session.delete(jack)SQL&gt;&gt;&gt; session.query(User).filter_by(name=&#x27;jack&#x27;).count()0到现在为止还挺好。杰克的Address物品怎么样？SQL&gt;&gt;&gt; session.query(Address).filter(... Address.email_address.in_([&#x27;jack@google.com&#x27;, &#x27;j25@yahoo.com&#x27;])... ).count()2哦，他们还在那里！分析刷新SQL，我们可以看到user_id每个地址的 列都设置为NULL，但是没有删除行。SQLAlchemy并不认为删除级联，你必须告诉它这样做。 @@@@@ 配置 delete / delete- 我们将在关系上配置级联选项 User.addresses 以更改行为。虽然 SQLAlchemy 允许您在任何时间点向映射添加新属性和关系，但在这种情况下需要删除现有关系，因此我们需要完全拆除映射并重新开始 - 我们将关闭 Session： 1234567891011121314151617181920212223242526272829303132&gt;&gt;&gt; session.close()ROLLBACK并使用新的declarative_base()：&gt;&gt;&gt; Base = declarative_base()接下来我们将声明User该类，添加addresses包括级联配置的关系(我们也将构造函数保留在外)：&gt;&gt;&gt; class User(Base):... __tablename__ = &#x27;users&#x27;...... id = Column(Integer, primary_key=True)... name = Column(String)... fullname = Column(String)... password = Column(String)...... addresses = relationship(&quot;Address&quot;, back_populates=&#x27;user&#x27;,... cascade=&quot;all, delete, delete-orphan&quot;)...... def __repr__(self):... return &quot;&lt;User(name=&#x27;%s&#x27;, fullname=&#x27;%s&#x27;, password=&#x27;%s&#x27;)&gt;&quot; % (... self.name, self.fullname, self.password)然后我们重新创建Address，注意到在这种情况下我们已经Address.user通过User类创建了关系：&gt;&gt;&gt; class Address(Base):... __tablename__ = &#x27;addresses&#x27;... id = Column(Integer, primary_key=True)... email_address = Column(String, nullable=False)... user_id = Column(Integer, ForeignKey(&#x27;users.id&#x27;))... user = relationship(&quot;User&quot;, back_populates=&quot;addresses&quot;)...... def __repr__(self):... return &quot;&lt;Address(email_address=&#x27;%s&#x27;)&gt;&quot; % self.email_address 现在，当我们加载用户时 jack(下面使用 get()，按主键加载)，从相应的 addresses 集合中删除地址将导致 Address 删除： 1234567891011&amp;&amp; load Jack by primary keySQL&gt;&gt;&gt; jack = session.query(User).get(5)&amp;&amp; remove one Address (lazy load fires off)SQL&gt;&gt;&gt; del jack.addresses[1]&amp;&amp; only one address remainsSQL&gt;&gt;&gt; session.query(Address).filter(... Address.email_address.in_([&#x27;jack@google.com&#x27;, &#x27;j25@yahoo.com&#x27;])... ).count()1 删除 Jack 将删除 Jack 以及 Address 与用户关联的其余内容： 12345678910&gt;&gt;&gt; session.delete(jack)SQL&gt;&gt;&gt; session.query(User).filter_by(name=&#x27;jack&#x27;).count()0SQL&gt;&gt;&gt; session.query(Address).filter(... Address.email_address.in_([&#x27;jack@google.com&#x27;, &#x27;j25@yahoo.com&#x27;])... ).count()0更多关于瀑布 有关级联配置的更多详细信息，请参见 Cascades。级联功能还可以平滑地与关系数据库的功能集成。有关详细信息，请参阅使用被动删除。ON DELETE CASCADE !!!! 建立多对多的关系 我们在这里进入奖金回合，但是让我们展示一个多对多的关系。我们也会潜入其他一些功能，只是为了参观。我们将使我们的应用程序成为博客应用程序，用户可以在其中编写 BlogPost 包含 Keyword 与之关联的项目的项目。 对于普通的多对多，我们需要创建一个未映射的 Table 构造作为关联表。这看起来如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&gt;&gt;&gt; from sqlalchemy import Table, Text&gt;&gt;&gt; &amp;&amp; association table&gt;&gt;&gt; post_keywords = Table(&#x27;post_keywords&#x27;, Base.metadata,... Column(&#x27;post_id&#x27;, ForeignKey(&#x27;posts.id&#x27;), primary_key=True),... Column(&#x27;keyword_id&#x27;, ForeignKey(&#x27;keywords.id&#x27;), primary_key=True)... )在上面，我们可以看到声明a Table直接与声明映射类有点不同。 Table是构造函数，因此每个单独的Column参数用逗号分隔。该 Column对象也明确地赋予其名称，而不是从指定的属性名称中获取。接下来，我们定义BlogPost并Keyword使用互补 relationship()结构，每个引用post_keywords 表作为关联表：&gt;&gt;&gt; class BlogPost(Base):... __tablename__ = &#x27;posts&#x27;...... id = Column(Integer, primary_key=True)... user_id = Column(Integer, ForeignKey(&#x27;users.id&#x27;))... headline = Column(String(255), nullable=False)... body = Column(Text)...... &amp;&amp; many to many BlogPost&lt;-&gt;Keyword... keywords = relationship(&#x27;Keyword&#x27;,... secondary=post_keywords,... back_populates=&#x27;posts&#x27;)...... def __init__(self, headline, body, author):... self.author = author... self.headline = headline... self.body = body...... def __repr__(self):... return &quot;BlogPost(%r, %r, %r)&quot; % (self.headline, self.body, self.author)&gt;&gt;&gt; class Keyword(Base):... __tablename__ = &#x27;keywords&#x27;...... id = Column(Integer, primary_key=True)... keyword = Column(String(50), nullable=False, unique=True)... posts = relationship(&#x27;BlogPost&#x27;,... secondary=post_keywords,... back_populates=&#x27;keywords&#x27;)...... def __init__(self, keyword):... self.keyword = keyword注意 上面的类声明说明了显式init()方法。请记住，使用 Declarative 时，它是可选的！ 以上，多对多关系是 BlogPost.keywords。多对多关系的定义特征是 secondary 关键字参数，它引用 Table 表示关联表的对象。该表仅包含引用关系两边的列; 如果它有任何其他列，例如它自己的主键，或其他表的外键，SQLAlchemy 需要一个不同的使用模式，称为“关联对象”，在关联对象中描述 。 我们也希望我们的 BlogPost 班级有一个 author 领域。我们将此添加为另一个双向关系，除了我们将遇到的一个问题是单个用户可能有很多博客帖子。当我们访问时 User.posts，我们希望能够进一步过滤结果，以免加载整个集合。为此，我们使用被 relationship()调用接受的设置 lazy=’dynamic’，该设置 在属性上配置备用加载器策略： 123456789101112131415161718192021222324252627282930313233343536&gt;&gt;&gt; BlogPost.author = relationship(User, back_populates=&quot;posts&quot;)&gt;&gt;&gt; User.posts = relationship(BlogPost, back_populates=&quot;author&quot;, lazy=&quot;dynamic&quot;)创建新表：SQL&gt;&gt;&gt; Base.metadata.create_all(engine)用法与我们一直在做的不同。让我们给Wendy一些博文：SQL&gt;&gt;&gt; wendy = session.query(User).\\... filter_by(name=&#x27;wendy&#x27;).\\... one()&gt;&gt;&gt; post = BlogPost(&quot;Wendy&#x27;s Blog Post&quot;, &quot;This is a test&quot;, wendy)&gt;&gt;&gt; session.add(post)我们将关键字唯一地存储在数据库中，但我们知道我们还没有，所以我们可以创建它们：&gt;&gt;&gt; post.keywords.append(Keyword(&#x27;wendy&#x27;))&gt;&gt;&gt; post.keywords.append(Keyword(&#x27;firstpost&#x27;))我们现在可以使用关键字“firstpost”查找所有博文。我们将使用 any运算符来查找“其中任何关键字都包含关键字字符串&#x27;firstpost&#x27;的博客帖子”：SQL&gt;&gt;&gt; session.query(BlogPost).\\... filter(BlogPost.keywords.any(keyword=&#x27;firstpost&#x27;)).\\... all()[BlogPost(&quot;Wendy&#x27;s Blog Post&quot;, &#x27;This is a test&#x27;, &lt;User(name=&#x27;wendy&#x27;, fullname=&#x27;Wendy Williams&#x27;, password=&#x27;foobar&#x27;)&gt;)]如果我们想要查找用户拥有的帖子wendy，我们可以告诉查询缩小到该User对象作为父对象：SQL&gt;&gt;&gt; session.query(BlogPost).\\... filter(BlogPost.author==wendy).\\... filter(BlogPost.keywords.any(keyword=&#x27;firstpost&#x27;)).\\... all()[BlogPost(&quot;Wendy&#x27;s Blog Post&quot;, &#x27;This is a test&#x27;, &lt;User(name=&#x27;wendy&#x27;, fullname=&#x27;Wendy Williams&#x27;, password=&#x27;foobar&#x27;)&gt;)]或者我们可以使用Wendy自己的posts关系，这是一种“动态”关系，直接从那里查询：SQL&gt;&gt;&gt; wendy.posts.\\... filter(BlogPost.keywords.any(keyword=&#x27;firstpost&#x27;)).\\... all()[BlogPost(&quot;Wendy&#x27;s Blog Post&quot;, &#x27;This is a test&#x27;, &lt;User(name=&#x27;wendy&#x27;, fullname=&#x27;Wendy Williams&#x27;, password=&#x27;foobar&#x27;)&gt;)] $$ 本节介绍可与映射器一起使用的各种配置模式。它假设您已经完成了对象关系教程，并且知道如何构建和使用基本的映射器和关系。 !!!! 映射的类型 现代 SQLAlchemy 具有两种不同的映射器配置样式。“Classical”风格是 SQLAlchemy 的原始映射 API，而“Declarative”是建立在“Classical”之上的更丰富，更简洁的系统。两种样式可以互换使用，因为每种样式的最终结果完全相同 - 由 mapper()函数映射到可选单元的用户定义类 ，通常为 a Table。 @@@@@ 声明性映射 该声明映射是映射在现代 SQLAlchemy 的构造的典型方式。利用 Declarative 系统，可以立即定义用户定义类的组件以及 Table 类映射到的 元数据： 12345678910111213141516171819202122232425262728293031from sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, String, ForeignKeyBase = declarative_base()class User(Base): __tablename__ = &#x27;user&#x27; id = Column(Integer, primary_key=True) name = Column(String) fullname = Column(String) password = Column(String)上面是一个包含四列的基本单表映射。其他属性(例如与其他映射类的关系)也在类定义中内联声明：class User(Base): __tablename__ = &#x27;user&#x27; id = Column(Integer, primary_key=True) name = Column(String) fullname = Column(String) password = Column(String) addresses = relationship(&quot;Address&quot;, backref=&quot;user&quot;, order_by=&quot;Address.id&quot;)class Address(Base): __tablename__ = &#x27;address&#x27; id = Column(Integer, primary_key=True) user_id = Column(ForeignKey(&#x27;user.id&#x27;)) email_address = Column(String)声明映射系统在Object Relational Tutorial中引入 。有关此系统如何工作的其他详细信息，请参阅声明。 @@@@@ 经典映射 甲古典映射是指使用一个映射类的构造 mapper()函数，而无需使用声明性系统。这是 SQLAlchemy 的原始类映射 API，仍然是 ORM 提供的基本映射系统。 在“经典”形式中，表元数据与 Table 构造分别创建 ，然后 User 通过 mapper()函数与类关联： 1234567891011121314151617181920212223242526272829303132333435from sqlalchemy import Table, MetaData, Column, Integer, String, ForeignKeyfrom sqlalchemy.orm import mappermetadata = MetaData()user = Table(&#x27;user&#x27;, metadata, Column(&#x27;id&#x27;, Integer, primary_key=True), Column(&#x27;name&#x27;, String(50)), Column(&#x27;fullname&#x27;, String(50)), Column(&#x27;password&#x27;, String(12)) )class User(object): def __init__(self, name, fullname, password): self.name = name self.fullname = fullname self.password = passwordmapper(User, user)通过properties字典提供有关映射属性的信息，例如与其他类的关系。下面的示例说明了第二个Table 对象，映射到一个名为的类Address，然后链接到Uservia relationship()：address = Table(&#x27;address&#x27;, metadata, Column(&#x27;id&#x27;, Integer, primary_key=True), Column(&#x27;user_id&#x27;, Integer, ForeignKey(&#x27;user.id&#x27;)), Column(&#x27;email_address&#x27;, String(50)) )mapper(User, user, properties=&#123; &#x27;addresses&#x27; : relationship(Address, backref=&#x27;user&#x27;, order_by=address.c.id)&#125;)mapper(Address, address)使用经典映射时，必须直接提供类，而不必使用Declarative提供的“字符串查找”系统。SQL表达式通常根据Table对象来指定，即address.c.id上面是Address关系，而不是Address.id，因为Address可能尚未链接到表元数据，也不能在此处指定字符串。文档中的一些示例仍然使用经典方法，但请注意，经典方法和声明方法是完全可互换的。两个系统最终都创建了相同的配置，由一个Table用户定义的类组成，并与一个链接在一起mapper()。当我们谈论“行为mapper()”时，这包括使用声明系统时 - 它仍然在幕后使用。 @@@@@ 映射，对象的运行时自省 Mapper 无论使用何种方法，都可以使用 Runtime Inspection API 系统从任何映射类获取该对象。使用该 inspect()函数，可以 Mapper 从映射的类中获取： 1234567891011121314151617181920212223242526&gt;&gt;&gt; from sqlalchemy import inspect&gt;&gt;&gt; insp = inspect(User)提供详细信息，包括Mapper.columns：&gt;&gt;&gt; insp.columns&lt;sqlalchemy.util._collections.OrderedProperties object at 0x102f407f8&gt;这是一个名称空间，可以以列表格式或通过单个名称查看：&gt;&gt;&gt; list(insp.columns)[Column(&#x27;id&#x27;, Integer(), table=&lt;user&gt;, primary_key=True, nullable=False), Column(&#x27;name&#x27;, String(length=50), table=&lt;user&gt;), Column(&#x27;fullname&#x27;, String(length=50), table=&lt;user&gt;), Column(&#x27;password&#x27;, String(length=12), table=&lt;user&gt;)]&gt;&gt;&gt; insp.columns.nameColumn(&#x27;name&#x27;, String(length=50), table=&lt;user&gt;)其他名称空间包括Mapper.all_orm_descriptors，包括所有映射属性以及混合，关联代理：&gt;&gt;&gt; insp.all_orm_descriptors&lt;sqlalchemy.util._collections.ImmutableProperties object at 0x1040e2c68&gt;&gt;&gt;&gt; insp.all_orm_descriptors.keys()[&#x27;fullname&#x27;, &#x27;password&#x27;, &#x27;name&#x27;, &#x27;id&#x27;]以及Mapper.column_attrs：&gt;&gt;&gt; list(insp.column_attrs)[&lt;ColumnProperty at 0x10403fde0; id&gt;, &lt;ColumnProperty at 0x10403fce8; name&gt;, &lt;ColumnProperty at 0x1040e9050; fullname&gt;, &lt;ColumnProperty at 0x1040e9148; password&gt;]&gt;&gt;&gt; insp.column_attrs.name&lt;ColumnProperty at 0x10403fce8; name&gt;&gt;&gt;&gt; insp.column_attrs.name.expressionColumn(&#x27;name&#x27;, String(length=50), table=&lt;user&gt;) !!!! 映射列和表达式 !!!! 映射类继承层次结构 !!!! 非传统映射 !!!! 配置版本计数器 !!!! 类映射 API $$本节介绍**relationship()**其用法的功能和深入讨论。有关关系的介绍，请从对象关系教程开始， 然后进入构建关系。 !!!! 基本关系模式 关系相关导入 1234from sqlalchemy import Table, Column, Integer, ForeignKeyfrom sqlalchemy.orm import relationshipfrom sqlalchemy.ext.declarative import declarative_baseBase = declarative_base() @@@@@ 一对多 一对多关系将外键放在引用父对象的子表上。 relationship()然后在父项上指定，作为引用子项表示的项集合： 1234567891011121314151617181920212223242526272829class Parent(Base): __tablename__ = &#x27;parent&#x27; id = Column(Integer, primary_key=True) children = relationship(&quot;Child&quot;)class Child(Base): __tablename__ = &#x27;child&#x27; id = Column(Integer, primary_key=True) parent_id = Column(Integer, ForeignKey(&#x27;parent.id&#x27;))要在一对多中建立双向关系，其中“反向”是多对一，请指定一个附加relationship()并使用以下relationship.back_populates参数连接两者：class Parent(Base): __tablename__ = &#x27;parent&#x27; id = Column(Integer, primary_key=True) children = relationship(&quot;Child&quot;, back_populates=&quot;parent&quot;)class Child(Base): __tablename__ = &#x27;child&#x27; id = Column(Integer, primary_key=True) parent_id = Column(Integer, ForeignKey(&#x27;parent.id&#x27;)) parent = relationship(&quot;Parent&quot;, back_populates=&quot;children&quot;)Child将获得parent具有多对一语义的属性。或者，该backref选项可用于单个relationship()而不是使用 back_populates：class Parent(Base): __tablename__ = &#x27;parent&#x27; id = Column(Integer, primary_key=True) children = relationship(&quot;Child&quot;, backref=&quot;parent&quot;) @@@@@ 多对一 多对一将外键放在引用该子对象的父表中。 relationship()在父级上声明，将创建一个新的标量持有属性： 12345678910111213141516171819202122232425262728class Parent(Base): __tablename__ = &#x27;parent&#x27; id = Column(Integer, primary_key=True) child_id = Column(Integer, ForeignKey(&#x27;child.id&#x27;)) child = relationship(&quot;Child&quot;)class Child(Base): __tablename__ = &#x27;child&#x27; id = Column(Integer, primary_key=True)通过添加秒relationship() 并relationship.back_populates在两个方向上应用参数来实现双向行为：class Parent(Base): __tablename__ = &#x27;parent&#x27; id = Column(Integer, primary_key=True) child_id = Column(Integer, ForeignKey(&#x27;child.id&#x27;)) child = relationship(&quot;Child&quot;, back_populates=&quot;parents&quot;)class Child(Base): __tablename__ = &#x27;child&#x27; id = Column(Integer, primary_key=True) parents = relationship(&quot;Parent&quot;, back_populates=&quot;child&quot;)或者，backref参数可以应用于单个relationship()，例如Parent.child：class Parent(Base): __tablename__ = &#x27;parent&#x27; id = Column(Integer, primary_key=True) child_id = Column(Integer, ForeignKey(&#x27;child.id&#x27;)) child = relationship(&quot;Child&quot;, backref=&quot;parents&quot;) @@@@@ 一对一 One To One 本质上是双向关系，双方都有标量属性。为实现此目的，该 uselist 标志指示在关系的“多”侧放置标量属性而不是集合。将一对多转换为一对一： class Parent(Base):tablename = ‘parent’id = Column(Integer, primary_key=True)child = relationship(“Child”, uselist=False, back_populates=”parent”) class Child(Base):tablename = ‘child’id = Column(Integer, primary_key=True)parent_id = Column(Integer, ForeignKey(‘parent.id’))parent = relationship(“Parent”, back_populates=”child”)或多对一： class Parent(Base):tablename = ‘parent’id = Column(Integer, primary_key=True)child_id = Column(Integer, ForeignKey(‘child.id’))child = relationship(“Child”, back_populates=”parent”) class Child(Base):tablename = ‘child’id = Column(Integer, primary_key=True)parent = relationship(“Parent”, back_populates=”child”, uselist=False)与往常一样，可以使用 relationship.backref 和 backref()函数来代替 relationship.back_populates 方法; 要 uselist 在 backref 上指定，请使用以下 backref()函数： from sqlalchemy.orm import backref class Parent(Base):tablename = ‘parent’id = Column(Integer, primary_key=True)child_id = Column(Integer, ForeignKey(‘child.id’))child = relationship(“Child”, backref=backref(“parent”, uselist=False)) @@@@@ 多对多 Many to Many 在两个类之间添加了一个关联表。关联表由 secondary 参数表示 relationship()。通常，Table 使用 MetaData 与声明性基类关联的对象，以便 ForeignKey 指令可以找到要链接的远程表： association_table = Table(‘association’, Base.metadata,Column(‘left_id’, Integer, ForeignKey(‘left.id’)),Column(‘right_id’, Integer, ForeignKey(‘right.id’))) class Parent(Base):tablename = ‘left’id = Column(Integer, primary_key=True)children = relationship(“Child”,secondary=association_table) class Child(Base):tablename = ‘right’id = Column(Integer, primary_key=True)对于双向关系，关系的两侧都包含一个集合。指定 using relationship.back_populates，并为每个 relationship()指定公共关联表： association_table = Table(‘association’, Base.metadata,Column(‘left_id’, Integer, ForeignKey(‘left.id’)),Column(‘right_id’, Integer, ForeignKey(‘right.id’))) class Parent(Base):tablename = ‘left’id = Column(Integer, primary_key=True)children = relationship(“Child”,secondary=association_table,back_populates=”parents”) class Child(Base):tablename = ‘right’id = Column(Integer, primary_key=True)parents = relationship(“Parent”,secondary=association_table,back_populates=”children”)当使用 backref 参数代替时 relationship.back_populates，backref 将自动使用相同的 secondary 参数作为反向关系： association_table = Table(‘association’, Base.metadata,Column(‘left_id’, Integer, ForeignKey(‘left.id’)),Column(‘right_id’, Integer, ForeignKey(‘right.id’))) class Parent(Base):tablename = ‘left’id = Column(Integer, primary_key=True)children = relationship(“Child”,secondary=association_table,backref=”parents”) class Child(Base):tablename = ‘right’id = Column(Integer, primary_key=True)所述 secondary 的论点 relationship()也接受返回最终的说法，当第一次使用映射器，其仅被评估一个可调用。使用它，我们可以 association_table 在以后定义，只要在所有模块初始化完成后它可用于 callable： class Parent(Base):tablename = ‘left’id = Column(Integer, primary_key=True)children = relationship(“Child”,secondary=lambda: association_table,backref=”parents”)使用声明性扩展时，也接受传统的“表的字符串名称”，匹配存储在 Base.metadata.tables 以下表中的表的名称： class Parent(Base):tablename = ‘left’id = Column(Integer, primary_key=True)children = relationship(“Child”,secondary=”association”,backref=”parents”) @@@@@ 删除多个表中的行 这是唯一的一个行为 secondary 参数 relationship() 是，Table 它在这里指定为自动受 INSERT 和 DELETE 语句，如对象添加或从集合中删除。有没有必要从该表中手动删除。从集合中删除记录的行为将具有在 flush 上删除行的效果： 123456789101112&amp;&amp; row will be deleted from the &quot;secondary&quot; table&amp;&amp; automaticallymyparent.children.remove(somechild)经常出现的一个问题是当子对象直接递送到“辅助”表中的行时如何删除Session.delete()：session.delete(somechild)这里有几种可能性：如果存在relationship()from Parentto Child，但 没有将特定链接Child到每个的反向关系Parent，则SQLAlchemy将不会意识到在删除此特定 Child对象时，它需要维护将其链接到的“辅助”表Parent。不会删除“辅助”表。如果存在将特定链接Child到每个特定的关系Parent，假设它被调用Child.parents，默认情况下SQLAlchemy将加载到Child.parents集合中以查找所有Parent对象，并从建立此链接的“辅助”表中删除每一行。请注意，此关系不需要是bidrectional; SQLAlchemy严格查看relationship()与Child被删除对象相关的每个内容。这里性能更高的选项是使用ON DELETE CASCADE指令和数据库使用的外键。假设数据库支持此功能，则可以使数据库本身自动删除“辅助”表中的行，因为删除了“child”中的引用行。Child.parents 在这种情况下，可以指示SQLAlchemy 使用passive_deletes 指令on 来放弃在集合中的主动加载relationship(); 有关详细信息，请参阅使用被动删除。请再次注意，这些行为仅与使用的secondary选项相关relationship()。如果处理显式映射且不存在于secondary相关选项中的关联表，则relationship()可以使用级联规则来自动删除实体以响应被删除的相关实体 - 有关此功能的信息，请参阅级联。 @@@@@ 关联对象 关联对象模式是多对多的变体：当关联表包含除左表和右表外键之外的其他列时，它会被使用。secondary 您可以将新类直接映射到关联表，而不是使用参数。关系的左侧通过一对多引用关联对象，关联类通过多对一引用右侧。下面我们说明映射到的关联表 Association，其包括称为柱类 extra_data，它是与之间每个关联一起存储的字符串值 Parent 和 Child： class Association(Base):tablename = ‘association’left_id = Column(Integer, ForeignKey(‘left.id’), primary_key=True)right_id = Column(Integer, ForeignKey(‘right.id’), primary_key=True)extra_data = Column(String(50))child = relationship(“Child”) class Parent(Base):tablename = ‘left’id = Column(Integer, primary_key=True)children = relationship(“Association”) class Child(Base):tablename = ‘right’id = Column(Integer, primary_key=True)与往常一样，双向版本使用 relationship.back_populates 或 relationship.backref： class Association(Base):tablename = ‘association’left_id = Column(Integer, ForeignKey(‘left.id’), primary_key=True)right_id = Column(Integer, ForeignKey(‘right.id’), primary_key=True)extra_data = Column(String(50))child = relationship(“Child”, back_populates=”parents”)parent = relationship(“Parent”, back_populates=”children”) class Parent(Base):tablename = ‘left’id = Column(Integer, primary_key=True)children = relationship(“Association”, back_populates=”parent”) class Child(Base):tablename = ‘right’id = Column(Integer, primary_key=True)parents = relationship(“Association”, back_populates=”child”)以直接形式使用关联模式要求子对象在被附加到父对象之前与关联实例相关联; 类似地，从父级到子级的访问通过关联对象： 123456789101112&amp;&amp; create parent, append a child via associationp = Parent()a = Association(extra_data=&quot;some data&quot;)a.child = Child()p.children.append(a)&amp;&amp; iterate through child objects via association, including association&amp;&amp; attributesfor assoc in p.children: print(assoc.extra_data) print(assoc.child)为了增强关联对象模式以便直接访问Association对象是可选的，SQLAlchemy提供了关联代理扩展。此扩展允许配置属性，这些属性将通过单个访问访问两个“跳”，一个“跳”到关联对象，第二个跳转到目标属性。 !!!! 邻接列表关系 !!!! 将关系与 Backref 联系起来 !!!! 配置关系如何连接 !!!! 集合配置和技术 !!!! 特殊关系持久性模式 !!!! 关系 API$$ !!!! 加载列 !!!! 关系加载技术 !!!! 加载继承层次结构 !!!! 构造函数和对象初始化 !!!! 查询 API $$orm.mapper()和 declareative 扩展主要用于 ORM 接口，配置映射后。 使用 Session 进行持久化操作。 !!!! 会话基础 !!!! 国家管理 !!!! 瀑布 !!!! 交易和连接管理 !!!! 额外的持久性技术 !!!! 上下文/线程本地会话 !!!! 使用事件跟踪对象和会话更改 !!!! 会话 API$$ !!!! ORM 活动 !!!! ORM 内部 !!!! ORM 例外 !!!! 不推荐使用的 ORM 事件接口 $$!!!! 关联代理 !!!! 自动地图 !!!! 烤查询 !!!! 陈述 !!!! 变异追踪 !!!! 订购清单 !!!! 水平分片 !!!! 混合属性 !!!! 可转位 !!!! 替代级仪表$$ !!!! 映射食谱 !!!! 继承映射食谱 !!!! 特殊 API !!!! 扩展 ORM &amp;&amp; SqlAlchemy 官方文档-核心 &amp;&amp; SqlAlchemy 官方文档-数据库 API &amp;&amp; 04 功能脚本 $$ 12345678910111213141516171819202122232425262728&amp;&amp; -*- coding:utf-8 -*-from nose.tools import eq_, raises, assert_truefrom sqlalchemy.orm import aliasedfrom ..model.report import *def re_create_table(ORM): try: ORM.__table__.drop(current_engine) except Exception ,e: print u&quot;表不存在&quot; &amp;&amp;print Exception ,e ORM.__table__.create(current_engine)def re_create_tables(ORMS): for orm in ORMS: try: orm.__table__.drop(current_engine) except Exception ,e: print u&quot;表不存在&quot; &amp;&amp;print Exception ,e ORMS.reverse() for orm in ORMS: orm.__table__.create(current_engine)if __name__ == &#x27;__main__&#x27;: re_create_tables([Interest_Summary_test,FtpAcct_test,FTPAdj_test]) re_create_table(SearchDataset) $$ 方法一会存在额外无用 Key,需要删除 12res = session.query(User).first()res.__dict__ 方法二to_dict()，配置在 Base 中即可。 1234567891011121314151617181920212223242526272829303132Base = sqlalchemy.ext.declarative.declarative_base()class Post(Base): __tablename__ = &#x27;post&#x27; id = Column(Integer, primary_key=True) title = Column(String)&amp;&amp; 在基类中添加to_dict方法def to_dict(self): return &#123;c.name: getattr(self, c.name, None) for c in self.__table__.columns&#125;Base.to_dict = to_dictp = session.query(Post).first()p.to_dict()&amp;&amp; to_dict代码样例def to_dict(self): attrlist = [a for a in self.__dict__.keys() if not a.startswith(&#x27;_&#x27;)] data = &#123;&#125; for name in attrlist: d = getattr(self, name, None) if isinstance(d, datetime.datetime): d = d.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;) elif isinstance(d, datetime.date): d = d.strftime(&#x27;%Y-%m-%d&#x27;) elif isinstance(d, datetime.time): d = d.strftime(&#x27;%H:%M:%S&#x27;) data[name] = d return datasetattr(Base, &#x27;to_dict&#x27;, to_dict) &amp;&amp; 05 常见问题 Sqlalchemy to_dicthttps://www.cnblogs.com/zishu/p/10977232.html 123456789101112131415161718from exts import dbclass User(db.Model): __tablename__ = &#x27;user&#x27; id = db.Column(db.Integer, primary_key=True, autoincrement=True) username = db.Column(db.String(50), nullable=False) age = db.Column(db.Integer, nullable=False) # 把SQLAlchemy查询对象转换成字典 def to_dict(self): return &#123;c.name: getattr(self, c.name) for c in self.__table__.columns&#125;# 将查出来的所有对象都转换成json的函数def to_json(all_vendors): v = [ven.to_dict() for ven in all_vendors] return v","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Selenium-技术文档","slug":"Languages/Python/lib3-selenium","date":"2021-10-23T11:54:51.134Z","updated":"2021-10-23T11:54:51.134Z","comments":true,"path":"Languages/Python/lib3-selenium.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-selenium.md/","excerpt":"","text":"简介说明安装部署常用下网站 FirexDriver-geckodriver 下载 chromedriver 下载 查看 Chrome 浏览器版本 geckodriver-Selenium-Firefox 版本支持表 问题selenium.common.exceptions.WebDriverException: Message: newSession参考链接：https://blog.csdn.net/qq_29012939/article/details/86591383 解决方法： 123451、我用的浏览器是火狐浏览器，主要原因是geckodriver的版本太低，而浏览器的版本是64.0。更新为v0.23.0：https://github.com/mozilla/geckodriver/releases将下载下来的geckodriver.exe放入python安装路径下的Scripts文件夹内 selenium.common.exceptions.InvalidSessionIdException: Message: Tried to run command without establishing a connection解决方法 1去掉browser.close()即可 案例-模拟淘宝登录[Python 模拟登录]https://blog.csdn.net/u014044812/article/details/99584382 参考链接: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#!/usr/bin/python#-*-coding:utf-8-*-from selenium import webdriverfrom time import sleepfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilitiesfrom selenium.webdriver.common.action_chains import ActionChainsfrom selenium.webdriver.common.keys import Keysimport urllib2import jsonimport tracebackimport sys#dcap = dict(DesiredCapabilities.PHANTOMJS)#dcap[&quot;phantomjs.page.settings.userAgent&quot;] = (# &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&quot;#)#driver = webdriver.PhantomJS(executable_path=&#x27;/home/sevencm/phantomjs/bin/phantomjs&#x27;,desired_capabilities=dcap)#profiledir=&#x27;/home/sevencm/.mozilla/firefox/miinxjat.default&#x27;#profile=webdriver.FirefoxProfile(profiledir)#option=webdriver.ChromeOptions()#option.add_argument(&#x27;--user-data-dir=/home/sevencm/.config/google-chrome/Default&#x27;)#driver = webdriver.Chrome()driver = webdriver.Firefox()#driver.viewportSize=&#123;&#x27;width&#x27;:1024,&#x27;height&#x27;:800&#125;#driver.maximize_window()#driver.delete_all_cookies()driver.get(&quot;https://login.taobao.com/member/login.jhtml?from=taobaoindex&amp;f=top&amp;style=&amp;sub=true&amp;redirect_url=https%3A%2F%2Fmyseller.taobao.com%2Fseller_admin.htm&quot;) #load the switchelement=WebDriverWait(driver,60).until(lambda driver : driver.find_element_by_xpath(&quot;//*[@id=&#x27;J_Quick2Static&#x27;]&quot;))element.click()driver.implicitly_wait(20)sleep(1)username=driver.find_element_by_name(&quot;TPL_username&quot;)if not username.is_displayed: driver.implicitly_wait(20) driver.find_element_by_xpath(&quot;//*[@id=&#x27;J_Quick2Static&#x27;]&quot;).click()driver.implicitly_wait(20)sleep(2)name = &quot;12312312@qq.com&quot;passwd = &quot;123123&quot;username.send_keys(name)username.send_keys(Keys.TAB)driver.implicitly_wait(20)sleep(2)pwc=driver.find_element_by_name(&quot;TPL_password&quot;)pwc.send_keys(passwd)sleep(1)driver.save_screenshot(&#x27;login-screeshot-1.png&#x27;)sleep(2)while True: try: #定位滑块元素,如果不存在，则跳出循环 show=driver.find_element_by_xpath(&quot;//*[@id=&#x27;nocaptcha&#x27;]&quot;) showval=show.value_of_css_property(&quot;display&quot;) if not show.is_displayed(): break source=driver.find_element_by_xpath(&quot;//*[@id=&#x27;nc_1_n1z&#x27;]&quot;) sleep(3) #定义鼠标拖放动作 #ActionChains(driver).drag_and_drop_by_offset(source,400,0).perform() #driver.save_screenshot(&#x27;login-screeshot-11.png&#x27;) action = ActionChains(driver) sleep(1) action.click_and_hold(source).perform() for index in range(20): try: action.move_by_offset(2, 0).perform() #平行移动鼠标 driver.save_screenshot(&#x27;login-screeshot-i-&#x27;+str(index)+&#x27;.png&#x27;) except Exception as e: print(e) break if(index==19): action.release() sleep(1) driver.save_screenshot(&#x27;login-screeshot-i-&#x27;+str(index)+&#x27;.png&#x27;) else: sleep(0.01) #等待停顿时间 sleep(0.1) #print(show.get_attribute(&quot;outerHTML&quot;)) sleep(2) driver.save_screenshot(&#x27;login-screeshot-0.png&#x27;) #查看是否认证成功，获取text值 //*[@id=&quot;nc_1__scale_text&quot;]/span text=driver.find_element_by_xpath(&quot;//*[@id=&#x27;nc_1__scale_text&#x27;]/span&quot;) if text.text.startswith(u&#x27;验证通过&#x27;): print(&#x27;成功滑动&#x27;) break if text.text.startswith(u&#x27;请点击&#x27;): print(&#x27;成功滑动&#x27;) break if text.text.startswith(u&#x27;请按住&#x27;): continue except Exception as e: print(traceback.format_exc()) print(e) print &quot;111111111111111111111&quot; import time time.sleep(10) #driver.find_element_by_xpath(&quot;//div[@id=&#x27;nocaptcha&#x27;]/div/span/a&quot;).click()driver.find_element_by_xpath(&quot;//*[@id=&#x27;J_SubmitStatic&#x27;]&quot;).click()sleep(2)driver.save_screenshot(&#x27;login-screeshot-2.png&#x27;)#以下是获得cookie代码cookie = [item[&quot;name&quot;] + &quot;=&quot; + item[&quot;value&quot;] for item in driver.get_cookies()]cookiestr = &#x27;;&#x27;.join(item for item in cookie)#print cookiestrdata=&#123;&#x27;cookie&#x27;:cookiestr&#125;print(data)#post cookie到接口try: headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125; request = urllib2.Request(url=&#x27;http://127.0.0.1:8080/update/taobao/cookie&#x27;, headers=headers, data=json.dumps(data)) response = urllib2.urlopen(request) print(response.read())except Exception as e: print(e)#driver.close()driver.quit()sys.exit(0) 案例-模拟 B 站登录https://blog.csdn.net/qq_36853469/article/details/100579355 附件参考链接selenium 变速移动验证码滑块","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Python 正则表达式","slug":"Languages/Python/lib3-re","date":"2021-10-23T11:54:51.134Z","updated":"2021-10-23T11:54:51.134Z","comments":true,"path":"Languages/Python/lib3-re.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-re.md/","excerpt":"","text":"tags: 2020年 02月 Python进阶 Python3 Xpath获取两个对象间的值 1234567891011121314151617181920假设数据如下：&lt;div class=&quot;a&quot;&gt; &lt;div class=&quot;b&quot;&gt; text1 &lt;/div&gt; 需要的数据在这里 &lt;div class=&quot;d&quot;&gt; text2 &lt;/div&gt;&lt;/div&gt;通过如下xpath获取：div[1]//div[contains(text(),&quot;text1&quot;)]/following-sibling::node()[position() &lt;= count( div[1]//div[contains(text(),&quot;text2&quot;)]/following-sibling::node()) + 1] re简介说明正则表达式(Regular Expression)是一种文本模式，包括普通字符(例如，a 到 z 之间的字母)和特殊字符(称为”元字符”)。 正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。 文内说明: 环境说明 CentOS7.5 Python3.6.0 学习说明 正则表达式,了解其基础和常用使用即可,具体使用查阅工具书。 使用样例findall123456789101112131415import re# 字符串直接匹配 re.I 忽略大小写In [16]: reg_str = &quot;python123%^$^(*pythoN&quot;In [17]: reg = &#x27;python&#x27;In [18]: re.findall(reg,reg_str,re.I)Out[18]: [&#x27;python&#x27;, &#x27;pythoN&#x27;]# 匹配数字In [23]: reg_str = &quot;python123%^$^(*pythoN2135&quot;In [25]: reg = &#x27;\\d&#123;2&#125;&#x27;In [26]: re.findall(reg,reg_str)Out[26]: [&#x27;12&#x27;, &#x27;21&#x27;, &#x27;35&#x27;] 语法学习元字符123456789元字符. 匹配除换行符外的任意字符\\w 匹配字母数字下划线或汉字\\s 匹配任意的空白符\\d 匹配数字\\b 匹配单词的开始或结束^ 匹配字符串的开始$ 匹配字符串的结束 反义代码12345678910\\W 匹配任意不是字母、数字、下划线、汉字的字符\\S 匹配任意不是空白符的字符\\D 非数字\\B 匹配不是单次开头或结束的位置[^a] 匹配出了a以外的字符[^abcd] 匹配出了abcd以外的字符 限定符1234567* 重复零次或多次+ 重复一次或多次? 重复零次或一次&#123;n&#125; 重复n次&#123;n,&#125; 重复n次或多次&#123;n,m&#125; 重复n-m次 贪婪 &amp; 非贪婪12345贪婪 尽可能多的匹配 默认贪婪非贪婪 ? 尽可能少的匹配用于 * + ? 后面 组匹配123456789In [34]: reg_str = &quot;phone: 12345678910 , email : aqwe@.com&quot;In [35]: reg = &quot;phone: (\\d&#123;11&#125;) , email : (\\w.+)@.com&quot;In [36]: re.search(reg,reg_str).group(0)Out[36]: &#x27;phone: 12345678910 , email : aqwe@.com&#x27;In [37]: re.search(reg,reg_str).group(1)Out[37]: &#x27;12345678910&#x27;In [38]: re.search(reg,reg_str).group(2)Out[38]: &#x27;aqwe&#x27; 常用函数123search 只匹配第一个findall 查询所有 附件参考链接 正则表达式-菜鸟教程 正则表达式在线工具 常用正则表达式 常用正则表达式12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# 一、校验数字的表达式数字：^[0-9]*$n位的数字：^\\d&#123;n&#125;$至少n位的数字：^\\d&#123;n,&#125;$m-n位的数字：^\\d&#123;m,n&#125;$零和非零开头的数字：^(0|[1-9][0-9]*)$非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(\\.[0-9]&#123;1,2&#125;)?$带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)$正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$有两位小数的正实数：^[0-9]+(\\.[0-9]&#123;2&#125;)?$有1~3位小数的正实数：^[0-9]+(\\.[0-9]&#123;1,3&#125;)?$非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$非零的负整数：^\\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\\d*$非负整数：^\\d+$ 或 ^[1-9]\\d*|0$非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$# 校验字符的表达式汉字：^[\\u4e00-\\u9fa5]&#123;0,&#125;$英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$长度为3-20的所有字符：^.&#123;3,20&#125;$由26个英文字母组成的字符串：^[A-Za-z]+$由26个大写英文字母组成的字符串：^[A-Z]+$由26个小写英文字母组成的字符串：^[a-z]+$由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;3,20&#125;$中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$可以输入含有^%&amp;&#x27;,;=?$\\&quot;等字符：[^%&amp;&#x27;,;=?$\\x22]+禁止输入含有~的字符：[^~\\x22]+# 三、特殊需求表达式Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\\.?InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;电话号码正则表达式(支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号): ((\\d&#123;11&#125;)|^((\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;)|(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;))$)身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$钱的输入格式：有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$中文字符的正则表达式：[\\u4e00-\\u9fa5]双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Nosetests-技术文档","slug":"Languages/Python/lib3-nosetests","date":"2021-10-23T11:54:51.133Z","updated":"2021-10-23T11:54:51.133Z","comments":true,"path":"Languages/Python/lib3-nosetests.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-nosetests.md/","excerpt":"","text":"https://www.bbsmax.com/A/x9J2j0yWJ6/ Noestests 介绍nostests 优点: 编写测试更容易。nose 可以自动识别继承于 unittest.TestCase 的测试单元，并执行测试，而且，nose 也可以测试非继承于 unittest.TestCase 的测试单元。nose 提供了丰富的 API 便于编写测试代码。 执行测试更容易。 只要遵循一些简单的规则去组织你的类库和测试代码，nose 是可以自动识别单元测试的。执行测试是非常耗资源的，但是，一段第一个测试模块被加载后，nose 就开始执行测试。 建立测试环境更容易。 做你想做的事情更容易。 nose 拥有很多内置的插件帮助进行暑输出抓取、错误查找、代码覆盖、文档测试(doctest)等等。同样，如果你不喜欢这些内置插件提供的功能或者这些插件不能满足你的项目结构，你可以自定义开发插件来完成你想要做的事情。 unittest 核心工作原理unittest 中最核心的四个概念 test case: 测试用例。一个完整的测试流程。 test suite: 多个测试用例集合。带有顺序性 test runner: 执行测试用例 test fixture: 负责测试环境的创建和销毁 unittest 关键类说明 TestCase 也就是测试用例 TestSuite 多个测试用例集合在一起，就是 TestSuite TestLoader 是用来加载 TestCase 到 TestSuite 中的 TestRunner 是来执行测试用例的,测试的结果会保存到 TestResult 实例中，包括运行了多少测试用例，成功了多少，失败了多少等信息 Noestest 使用安装部署1pip install nose 插件TODO 如何配置插件 使用 pip 安装所需要的插件，然后通过 nosetests 命令行配置插件。如果通过 nose.main()或者 nose.run()执行测试，可以将要使用的插件关键字参数的列表传递进去 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 显示已安装插件nosetests --plugins# -v 显示插件详细信息(env) [scfan@scfan project]$ nosetests --plugins -vPlugin capture score: 1600 Output capture plugin. Enabled by default. Disable with ``-s`` or ``--nocapture``. This plugin captures stdout during test execution, appending any output captured to the error or failure output, should the test fail or raise an error.Plugin failuredetail score: 1600 Plugin that provides extra information in tracebacks of test failures.Plugin xunit score: 1500 This plugin provides test results in the standard XUnit XML format.Plugin deprecated score: 1000 Installs a DEPRECATED error class for the DeprecatedTest exception. Enabled by default.Plugin skip score: 1000 Plugin that installs a SKIP error class for the SkipTest exception. When SkipTest is raised, the exception will be logged in the skipped attribute of the result, &#x27;S&#x27; or &#x27;SKIP&#x27; (verbose) will be output, and the exception will not be counted as an error or failure.Plugin multiprocess score: 1000 Run tests in multiple processes. Requires processing module.Plugin logcapture score: 500 Log capture plugin. Enabled by default. Disable with --nologcapture. This plugin captures logging statements issued during test execution, appending any output captured to the error or failure output, should the test fail or raise an error.Plugin coverage score: 200 Activate a coverage report using Ned Batchelder&#x27;s coverage module...... nosetests 参数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199-V,—version 输出nose的版本-p,—plugins 输出可获取的插件列表。-v=DEFUALT,—verbose=DEFAULT 使用更多的verbose--verbosity=VERBOSITY 设置verbosity;--verbosity=2与-v设置一致-q,—quiet=DEFAULT 使用更少的verbose-c=FILES,—config=FILES 设置配置文件。可以设置很多次，然后将所有的配置文件合并。-w=WHERE,--where=WHERE 设置查找的根目录。-py3where=WHERE 顾名思义，针对python3.x以上设置查找路径。-m=REGEX,--match=REGEX,—testmatch=REGEX 设置用于自动化收集用例的正则表达式。--tests=NAMES 执行这些测试。--debug-log=FILE 设置调试的日志文件路径。--logging-config=FILE,—log-config=FILE 设置日志文件的配置文件。-I=REGEX，—ignore-files=REGEX 设置自动收集测试用例时忽略的正则表达式。-e=REGEX,—exclude=REGEX 排除要执行的测试用例的正则表达式-i=REGEX,—include=REGEX 包含要执行的测试用例的正则表达式-x,—stop 执行测试发生错误后，停止执行测试。--noexe 不查找可以执行文件。-a=ATTR,--attr=ATTR 只执行包含ATTR属性的测试用例。-A=EXPR,—eval-attr=EXPR 只执行属性与EXPR匹配的测试用例。-s,—nocapture 不抓取标准输出(stdout)--nologcapture 禁止使用日志插件--logging-format=FORMAT 打印语句的自定义格式--logging-datefmt=FORMAT 日志的日期时间格式--logging-filter=FILTER 日志语句的过滤器。--logging-clear-handlers 清除日志的其他handlers--logging-level=DEFUALT 设置日志的等级--with-coverage 开启coverage插件--cover-package=PACKAGE 限定coverage所在包--cover-erase 在执行之前 清除上次coverage统计结果--cover-testes 在coverage报告中包含测试模块--cover-html 产生html的coverage报告--cover-html-dir=DIR 设置存储html的目录--cover-xml 产生xml的coverage报告--cover-xml-file=FILE 设置存储coverage报告的xml文件--cover-config-file=DEFUALT 设置coverage的配置文件-pdb 当测试失败或产生错误是进入调试模式--pdb-failures 当测试失败时进入调试模式--pdb-errors 当测试产生错误时进入调试模式--with-doctest开启doctest插件--doctest-tests 在测试模块中查询doctests--with-profile 开启profile插件--profile-sort=SORT 设置profiler 输出排序--profile-stats-file=FILE 设置统计所在的文件地址--with-id 开启TestId插件--processes=NUM 开始测试处理器的个数--processes-timeout=SECONDS 设置超时时间。--with-xuint 开始Xunit插件--xuint-file=FILE 设置XUnit报告所在的xml文件--all-modules 开启AllModules插件--collect-only 开启只收集测试功能。只收集测试用例及输出测试名字，而不执行测试 Nosetests 语法说明TODO 详细说明 扩展 nose-printlog可以在控制台输出日志，也可以将日志显示在 caplog 中 1234# 安装插件pip install nose-printlog# 运行命令样例nosetests -sv test_data_load.py --logging-format=&quot;%(asctime)s:%(name)s:%(levelname)s: %(message)s&quot; --with-printlog 附件用 HTMLTestRunner 输出漂亮的 HTML 报告参考链接：CSDN 博客 unittest 单元测试 tools_unittest_HTMLTestRunner.py下载链接 测试代码tools_mathfunc.py 1234567891011121314151617181920212223(env) [scfan@WOM tools]$ cat tools_mathfunc.py#! -*- coding:utf-8 -*-u&quot;&quot;&quot; 常见数学类函数- add- minux- divide- multi&quot;&quot;&quot;def add(x,y): return x+ydef minus(x,y): return x-ydef divide(x,y): return x/ydef multi(x,y): return x * y test_unittest_htmlreport.py 1234567891011121314151617181920212223242526272829303132333435363738394041# coding=utf-8u&quot;&quot;&quot; 单元测试unittest 生成HTML报告测试运行命令:cd /home/scfan/pro/server &amp;&amp; python -m pro.tests.test_unittest_htmlreport&quot;&quot;&quot;import unittestfrom ..tools.tools_unittest_HTMLTestRunner import HTMLTestRunnerfrom ..tools.tools_mathfunc import *class TestMathFunc(unittest.TestCase): def test_add(self): self.assertEqual(3, add(1, 2)) self.assertNotEqual(3, add(2, 2)) def test_minus(self): self.assertEqual(1, minus(3, 2)) def test_multi(self): self.assertEqual(6, multi(3, 2)) def test_divide(self): self.assertEqual(2, divide(6, 3)) self.assertEqual(2.5, divide(5, 2))if __name__ == &#x27;__main__&#x27;: suite = unittest.TestSuite() tests = [TestMathFunc(&quot;test_add&quot;), TestMathFunc(&quot;test_minus&quot;), TestMathFunc(&quot;test_divide&quot;)] suite.addTests(tests) with open(&#x27;HTMLReport.html&#x27;, &#x27;w&#x27;) as f: runner = HTMLTestRunner(stream=f, title = &#x27;MathFunc Test Report&#x27;, description=&#x27;generated by HTMLTestRunner.&#x27;, verbosity=2 ) runner.run(suite) 参考资源参考链接： Python 官方 unittest 文档 CSDN 博客 unittest 单元测试 CSDN 博客 unittest 单元测试 B Python 多个单元测试软件说明 Nose 全面使用介绍 扩展: Python 测试框架对比 软件通用测试流程和设计方法详解","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Pandas-技术文档","slug":"Languages/Python/lib3-pandas","date":"2021-10-23T11:54:51.133Z","updated":"2021-10-23T11:54:51.133Z","comments":true,"path":"Languages/Python/lib3-pandas.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-pandas.md/","excerpt":"","text":"Pandas 简介Pandas 是 python 的一个数据分析包，最初由 AQR Capital Management 于 2008 年 4 月开发，并于 2009 年底开源出来，目前由专注于 Python 数据包开发的 PyData 开发 team 继续开发和维护，属于 PyData 项目的一部分。Pandas 最初被作为金融数据分析工具而开发出来，因此，pandas 为时间序列分析提供了很好的支持。 Pandas 的名称来自于面板数据(panel data)和 python 数据分析(data analysis)。panel data 是经济学中关于多维数据集的一个术语，在 Pandas 中也提供了 panel 的数据类型。 Pandas 官网文档: https://pandas.pydata.org/pandas-docs/stable/ Numpy 官方文档: https://docs.scipy.org/doc/ Pandas 数据类型Pandas 所支持的数据类型: float/float64 int/int64 bool datetime64[ns] datetime64[ns, tz] timedelta[ns] category object Pandas 增加指定列名: 1df.to_csv(&quot;cnn_predict_result.csv&quot;,encoding=&quot;utf_8_sig&quot;,index=False,columns=columns) 数据汇总: 123groupby_col = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]sum_col = &quot;amount&quot;df_new = df.groupby(groupby_col)[[sum_col]].sum() DataFrame 转 list: 1np.array(data_x).tolist() 字符串按照 | 分割: 1data[&#x27;name&#x27;].str.split(&#x27;|&#x27;,expand=True) series 转 DataFrame 处理: 123456789101112131415161718192021222324# data[&#x27;xx&#x27;] = df.groupby(groupby_cols_li)[sum_col].count()# pandas DataFrame groupby 之后转为 series 字段显示不容易处理# _key# cust_name cust# 吐尔逊姑 384 384# 帕拉哈提 6203 6203# 使用 reset_index() 重设索引 series,自动转DataFrame解决问题a= df.groupby(groupby_col)[sum_col].sum()In [169]: a.to_frame()Out[169]: _keycust_name cust吐尔逊姑阿吾提 384 384帕拉哈提 6203 6203帕提古力·麦麦提赛来 6109 6109海生林 1372 1372In [185]: a.reset_index()Out[185]: cust_name cust _key0 吐尔逊姑阿吾提 384 3841 帕拉哈提 6203 62032 帕提古力·麦麦提赛来 6109 61093 海生林 1372 1372 按照数据类型区分: 12345678910111213141516171819# 将df按照指定字段值拆分成多个小dfIn [73]: dfOut[73]: aa bb cc0 a b c1 1 2 32 2 3 4In [71]: df[df[&quot;aa&quot;].isin([2])]Out[71]: aa bb cc2 2 3 4In [72]: df[df[&quot;aa&quot;].isin([&quot;a&quot;])]Out[72]: aa bb cc0 a b cset(list(df.agg(&quot;aa&quot;))) # 获取单列的值种类 判断空值: df[‘$open’].isnull().any() # 判断 open 这一列列是否有 NaNdf[‘$open’].isnull().all() # 判断 open 列是否全部为 NaN 字符切割，切割中文: 必须要 utf-8 编码 使用 slice 切割 全空列先剔除 1234df = pd.read_csv(file_path,sep=&#x27;|&#x27;,low_memory=False,encoding=&#x27;utf-8&#x27;)if df[col].isnull().all(): continuedf[col] = df[col].str.slice(start=0,stop=-2,step=None) low_memory: 默认 low_memory=True,使用低内存加载数据，但是可能存在类型混淆的情况需要 low_memory=False 或者指定字段类型 1df = pd.read_csv(&#x27;somefile.csv&#x27;, low_memory=False, dtype=str) pandas 转换为时间格式df = pd.read_csv(fp, dtype=str,sep=’|’)df[“JY_JYSJ”] = pd.to_datetime(df[“JY_JYSJ”], format=”%Y-%m-%d%H:%M:%S”)df.to_csv(fp, index=False,sep=’|’) Pandas 删除删除 指定列。含空数据的行: 12可以通过subset参数来删除在age和sex中含有空数据的全部行df4 = df4.dropna(subset=[&quot;age&quot;,&quot;sex&quot;]) 删除 全空列: 12df = df.dropna(axis=1,how=&#x27;all&#x27;)axis参数说明axis = 1 行处理 默认axis = 1 列处理 删除含有空数据的全部行 12df4 = pd.read_csv(&#x27;4.csv&#x27;, encoding=&#x27;utf-8&#x27;)df4 = df4.dropna() 删除含有空数据的全部列 12可以通过axis参数来删除含有空数据的全部列df4 = df4.dropna(axis=1) Pandas 修改精度处理df.round({‘A’: 1, ‘C’: 2}) 字段重命名: $a 重命名为 a 无返回值 d 12df.rename(columns=&#123;&#x27;$a&#x27;: &#x27;a&#x27;, &#x27;$b&#x27;: &#x27;b&#x27;&#125;, inplace=True)# inplace 直接修改，所以无返回值。 inplace=False 不直接修改，故有返回值 指定列填充值: 12col = &quot;aaaaa&quot;df[col] = df[col].ffill(0) 列函数处理: 12# 整列每行采用同一个函数处理c=c[[&quot;a&quot;,&quot;b&quot;]].apply(foo,axis=1) 数据去重 drop_duplicates: 12df.drop_duplicates([cols],inplace=True)df.drop_duplicates(subset=&#x27;id:ID&#x27;,keep=&#x27;first&#x27;,inplace=True) 查看开头为 xxx 的字符 .str.startswith(‘0’): 1df[&quot;JY_FROM_CERTID&quot;] = df[df[&quot;JY_FROM_CERTID&quot;].str.startswith(&#x27;0&#x27;)] 去除指定左边开头的字符 str.lstrip(“9”): 1df[&quot;JY_FROM_CERTID&quot;] = df[&quot;JY_FROM_CERTID&quot;].str.lstrip(&quot;9&quot;) pandas 列类型转换为 日期格式: 1234567# # 方法1df[&#x27;date&#x27;] = pd.to_datetime(df[&#x27;date&#x27;])df.set_index(&quot;date&quot;, inplace=True)# 方法2df2.index = pd.DatetimeIndex(df2[&quot;date&quot;])del df2[&quot;date&quot;]结论：.to_datetime仅转换格式，.DatetimeIndex还能设置为索引 类型转换: 123str float int datetimedf[col] = df[col].astype(&#x27;str&#x27;)# 不能使用 df[col].astype(&#x27;str&#x27;,inplace=True) 替换科学计数法: 将字段类型转为 int64，即可去除科学计数法。但是空值转换会报错，所以需要先填充空值 12data2[[&#x27;col1&#x27;,&#x27;col2&#x27;]] = data2[[&#x27;col1&#x27;,&#x27;col2&#x27;]].fillna(-1)data2[[&#x27;col1&#x27;,&#x27;col2&#x27;]] = data2[[&#x27;col1&#x27;,&#x27;col2&#x27;]].astype(&#x27;int64&#x27;,errors=&#x27;ignore&#x27;) 当 int 类型进行 concat 合并的时候，有可能会出现科学计数法，需要先转为 object. Numpy 全局设置无科学计数法: 1234import numpy as npnp.set_printoptions(suppress=True, threshold=np.nan)# suppress=True 取消科学记数法# threshold=np.nan 完整输出(没有省略号) Pandas 全局设置完整输出: 1234import pandas as pdpd.set_option(&#x27;display.max_columns&#x27;, 10000, &#x27;display.max_rows&#x27;, 10000)# display.max_columns 显示最大列数# display.max_rows 显示最大行数 数据合并: 参考链接： pandas 的 concat 函数和 append 方法 PANDAS 数据合并与重塑(join/merge 篇) 12concatdf_new = pd.concat([df1,df2]) Pandas 查询列表查询 in 和 not in: 方法 1: merge 实现 123456789df = pd.DataFrame(&#123;&#x27;countries&#x27;:[&#x27;US&#x27;,&#x27;UK&#x27;,&#x27;Germany&#x27;,&#x27;China&#x27;]&#125;)countries = pd.DataFrame(&#123;&#x27;countries&#x27;:[&#x27;UK&#x27;,&#x27;China&#x27;], &#x27;matched&#x27;:True&#125;)# INdf.merge(countries,how=&#x27;inner&#x27;,on=&#x27;countries&#x27;)# NOT INnot_in = df.merge(countries,how=&#x27;left&#x27;,on=&#x27;countries&#x27;)not_in = not_in[pd.isnull(not_in[&#x27;matched&#x27;])] 方法 2: apply 12criterion = lambda row: row[&#x27;countries&#x27;] not in countriesnot_in = df[df.apply(criterion, axis=1)] pandas 行列循环: 1df.iterrows() Pandsa 注意事项replace 会导致空列类型变更，object-&gt;float: 1tran_dfs[col] = tran_dfs[col].replace(&quot;nan&quot;,np.nan) astype(str)会导致空值变成字符串 nan: 12345678910111213141516171819202122232425262728293031tran_dfs[col] = tran_dfs[col].astype(str)Pandas天坑：1、replace，使用replace必须注意method参数，默认为&quot;pad&quot;及填充，会造成replace(&quot;&quot;, None) 用前值进行补充，必须改为method=None2、pd.isnull 使用isnull判断时，空值string不认为是空，故需要同时判别数值空或字符空时，在这之前将整个df.replace(&quot;&quot;, np.nan, method=None)3、groupby 若groupby字段中存在空置，会造成空置列数据不进入统计，故在group前转换为字符, df.replace(np.nan, &quot;&quot;, method=None)4、merge 若两列字符进行拼接，若列中存在空置，会报错提示无法处理object与float类型，故merge时同样需要将列进行replace为空字符5、将列强制类型转换为str时，空值会变成&#x27;nan&#x27;字符6. replace后，会造成列类型变更为float。 列全空时会存在此情况。列不为全空时，类型不会变更。replace后会对列类型进行重新检查。从而导致列类型变更。In [32]: import numpy as np;df = pd.DataFrame([[np.nan,np.nan],[np.nan,4],[np.nan,np.nan]],columns=[&#x27;a&#x27;,&quot;b&quot;],dtype=str)In [33]: df.dtypesOut[33]:a objectb objectdtype: objectIn [34]: df[&#x27;a&#x27;] = df[&#x27;a&#x27;].replace(&#x27;1&#x27;,&quot;11111&quot;, method=None);df.dtypesOut[34]:a float64b objectdtype: object Pandas 功能模块取出重复数据drop_duplicates 为我们提供了数据去重的方法,那怎么得到哪些数据有重复呢?实现步骤： 采用 drop_duplicates 对数据去两次重，一次将重复数据全部去除(keep=False)记为 data1,另一次将重复数据保留一个(keep=’first)记为 data2;求 data1 和 data2 的差集即可:data2.append(data1).drop_duplicates(keep=False) 两列转为字典格式使用 set_index 将 key 变更为索引列。使用 to_dict 生成 索引-value 的字典 12345678910In [30]: print df[[&#x27;col&#x27;,&#x27;name&#x27;]][0:2] col name2 ACCT_NATURE 账户属性3 ACCT_NET_CITY 开户网点_市In [29]: df[[&#x27;col&#x27;,&#x27;name&#x27;]].set_index(&#x27;col&#x27;).to_dict()[&#x27;name&#x27;]Out[29]:&#123;&#x27;ACCT_CLASS&#x27;: &#x27;\\xe8\\xb4\\xa6\\xe6\\x88\\xb7\\xe7\\xb1\\xbb\\xe5\\x88\\xab&#x27;, &#x27;ACCT_CLOSE_DATE&#x27;: &#x27;\\xe9\\x94\\x80\\xe6\\x88\\xb7\\xe6\\x97\\xa5\\xe6\\x9c\\x9f&#x27;,&#125; 中文切割dtype=unicode Pandas 对中文进行切割时，必须使用 unicode 123df[&#x27;CERT_LEFT_2&#x27;] = df[&#x27;CUST_CERTNO&#x27;].str.slice(0, 2)df[&#x27;CERT_LEFT_4&#x27;] = df[&#x27;CUST_CERTNO&#x27;].str.slice(0, 4) 日期-最大最小值1df[&#x27;JY_JYSJ&#x27;].astype(&#x27;datetime64&#x27;).max() 统计出现频次新加一行df3.loc[‘new’] = [‘a’,’a’,’a’,’a’] 设置空列 reindex12345678910111213141516171819202122232425In [20]: dfOut[20]: a0 11 2In [21]: df.reindex(columns=[&#x27;a&#x27;,&#x27;b&#x27;])Out[21]: a b0 1 NaN1 2 NaNIn [27]: df.dtypesOut[27]:a objectdtype: objectIn [28]: df.reindex(columns=[&#x27;a&#x27;,&#x27;b&#x27;]).dtypesOut[28]:a objectb float64dtype: object# 注意类型问题# 没有inplace参数df = df.reindex(columns=[&#x27;a&#x27;,&#x27;b&#x27;]) 忽略大小写替换字符1# df.astype(str).apply(lambda x: re.sub(&#x27;nan&#x27;, &#x27;sss&#x27;, x, flags=re.IGNORECASE)) 忽略大小写替换字符 读取时指定类型和字段名称12cust_df = pd.read_csv(nj_config[&#x27;cust&#x27;][&#x27;filepath&#x27;], dtype=str, sep=&#x27;|&#x27;, names=nj_config[&#x27;cust&#x27;][&#x27;name_code_dic&#x27;].keys()).dropna(how=&quot;all&quot;) 判断列空12345df[&#x27;$open&#x27;].isnull().any() # 判断open这一列列是否有 NaNdf[&#x27;$open&#x27;].isnull().all() # 判断open列是否全部为NaNdf.isnull().all() # 判断某列是否全部为NaN 数据类型转换1234567891011_STRICT_MODE = &quot;raise&quot;_MIDDLE_MODE = &quot;coerce&quot;_EASY_MODE = &quot;ignore&quot; acct_df[curr] = pd.to_numeric(acct_df[curr].astype(str).\\ str.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;nan&quot;, &quot;0&quot;), errors=VERIFY_MODE,downcast=&#x27;float&#x27;)end_date = pd.to_datetime(df_tranjrnl[&#x27;TRAN_DATE&#x27;], errors=&#x27;coerce&#x27;).dt.date.max() Pandas bool 值取反12345678In [16]: a =np.array([True,False,True,True,False])In [17]: c = (1-a).astype(np.bool)In [18]: cOut[18]: array([False, True, False, False, True]) Pandas groupby + apply + sortValues12来个例子， groupby + apply + sortValues的例子data.groupby(&#x27;customer_id&#x27;)[&#x27;repayment_date&#x27;].apply(lambda x:x.sort_values(ascending=False)).reset_index() DataFrame 转 列表数据12345678910111213141516171819In [45]: import pandas as pdIn [46]: import numpy as npIn [47]: df = pd.DataFrame([&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;, &#123;&#x27;a&#x27;:4,&#x27;b&#x27;:3&#125;])In [48]: dfOut[48]: a b0 1 21 4 3In [49]: np.array(df)Out[49]:array([[1, 2], [4, 3]])In [50]: np.array(df).tolist()Out[50]: [[1, 2], [4, 3]] DataFrame 转 Json 数据12345678910111213In [47]: df = pd.DataFrame([&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;, &#123;&#x27;a&#x27;:4,&#x27;b&#x27;:3&#125;])In [51]: dfOut[51]: a b0 1 21 4 3In [52]: df.to_json(orient=&quot;records&quot;, force_ascii=False)Out[52]: &#x27;[&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;,&#123;&quot;a&quot;:4,&quot;b&quot;:3&#125;]&#x27;In [56]:Out[56]: [&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;, &#123;&#x27;a&#x27;: 4, &#x27;b&#x27;: 3&#125;] 分组时字符串拼接1234567891011121314In [28]: dfOut[28]: dic_date dataset_name_md5 file_path file_type0 2017-02-28 8c77f148425e1a5c7f402661b4c8b68f TRANJRNL-60001-2017-02-28.csv TRANJRNL1 2017-02-28 8c77f148425e1a5c7f402661b4c8b68f CUSTACCT-60001-2017-02-28.csv CUSTACCT2 2017-02-28 8c77f148425e1a5c7f402661b4c8b68f TRANJRNL-60002-2017-02-28.csv TRANJRNL3 2017-02-28 8c77f148425e1a5c7f402661b4c8b68f CUSTACCT-60002-2017-02-28.csv CUSTACCTIn [29]: df.groupby(by=[&#x27;dic_date&#x27;, &#x27;dataset_name_md5&#x27;, &#x27;file_type&#x27;]).aggregate(lambda x:&#x27;|&#x27;.join(x)).reset_index()Out[29]: dic_date dataset_name_md5 file_type file_path0 2017-02-28 8c77f148425e1a5c7f402661b4c8b68f CUSTACCT CUSTACCT-60001-2017-02-28.csv|CUSTACCT-60002-2...1 2017-02-28 8c77f148425e1a5c7f402661b4c8b68f TRANJRNL TRANJRNL-60001-2017-02-28.csv|TRANJRNL-60002-2... Pandas 分组时字符串列合并的方法 Pandas 日期格式化为字符串12345678910111213141516171819tran_dates = pandas.to_datetime(df_all[tran_date_col], infer_datetime_format=True).dt.strftime(&#x27;%Y%m%d&#x27;).unique().tolist()In [136]: df[&#x27;dic_date&#x27;]Out[136]:0 2017-02-281 2017-02-282 2017-02-283 2017-02-28Name: dic_date, dtype: objectIn [137]: pandas.to_datetime(df[&#x27;dic_date&#x27;], infer_datetime_format=True, errors=&quot;coerce&quot;).dt.strftime(&#x27;%Y%m%d&#x27;)Out[137]:0 201702281 201702282 201702283 20170228Name: dic_date, dtype: object 本对方数据翻转本对方数据翻转 公式 1df.loc[翻转条件, [本方,对方]] = df.loc[翻转条件, [对方,本方]] 本对方数据翻转 样例 1234567df_tran.loc[df_tran[&quot;TRAN_DIRECT&quot;] == &#x27;C&#x27;, [&#x27;CUST_CERTNO&#x27;, &#x27;CUST_NAME&#x27;, &#x27;CUST_NAMESPELL&#x27;, &#x27;ACCT_NO&#x27;, &#x27;CARD_NO&#x27;, &#x27;PEER_CERTNO&#x27;, &#x27;PEER_NAME&#x27;, &#x27;PEER_ACCT_NAMESPELL&#x27;, &#x27;PEER_ACCTNO&#x27;, &#x27;PEER_CARDNO&#x27;]] = df_tran.loc[df_tran[&quot;TRAN_DIRECT&quot;] == &#x27;C&#x27;, [&#x27;PEER_CERTNO&#x27;, &#x27;PEER_NAME&#x27;, &#x27;PEER_ACCT_NAMESPELL&#x27;, &#x27;PEER_ACCTNO&#x27;, &#x27;PEER_CARDNO&#x27;, &#x27;CUST_CERTNO&#x27;, &#x27;CUST_NAME&#x27;, &#x27;CUST_NAMESPELL&#x27;, &#x27;ACCT_NO&#x27;, &#x27;CARD_NO&#x27;]].values","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"jieba-技术文档","slug":"Languages/Python/lib3-jieba","date":"2021-10-23T11:54:51.132Z","updated":"2021-10-23T11:54:51.132Z","comments":true,"path":"Languages/Python/lib3-jieba.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-jieba.md/","excerpt":"","text":"功能模块jieba 分词date: 2017-11-01 123456789101112import jieba# encoding=utf-8import jiebaseg_list = jieba.cut(&quot;我来到北京清华大学&quot;, cut_all=True)print(&quot;Full Mode: &quot; + &quot;/ &quot;.join(seg_list)) # 全模式seg_list = jieba.cut(&quot;我来到北京清华大学&quot;, cut_all=False)print(&quot;Default Mode: &quot; + &quot;/ &quot;.join(seg_list)) # 精确模式seg_list = jieba.cut(&quot;他来到了网易杭研大厦&quot;) # 默认是精确模式print(&quot;, &quot;.join(seg_list))seg_list = jieba.cut_for_search(&quot;小明硕士毕业于中国科学院计算所，后在日本京都大学深造&quot;) # 搜索引擎模式print(&quot;, &quot;.join(seg_list)) 123456789101112131415161718192021222324252627282930313233343536373839404142434445&quot;&quot;&quot;https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py&quot;&quot;&quot;;u&quot;&quot;&quot;test_userdict.py&quot;&quot;&quot;#encoding=utf-8from __future__ import print_function, unicode_literalsimport syssys.path.append(&quot;../&quot;)import jiebareload(sys)sys.setdefaultencoding(&#x27;utf-8&#x27;)#input_file = &quot;Z:\\华润公司 整理\\代码样例\\jieba分词\\userdict.txt&quot;input_file = &quot;Z:\\\\userdict.txt&quot;jieba.load_userdict(input_file)import jieba.posseg as psegjieba.add_word(&#x27;石墨烯&#x27;)jieba.add_word(&#x27;凱特琳&#x27;)jieba.del_word(&#x27;自定义词&#x27;)test_sent = (&quot;李小福是创新办主任也是云计算方面的专家; 什么是八一双鹿\\n&quot;&quot;例如我输入一个带“韩玉赏鉴”的标题，在自定义词库中也增加了此词为N类\\n&quot;&quot;「台中」正確應該不會被切開。mac上可分出「石墨烯」；此時又可以分出來凱特琳了。&quot;)words = jieba.cut(test_sent)print(&#x27;/&#x27;.join(words))print(&quot;=&quot;*40)result = pseg.cut(test_sent)for w in result: print(w.word, &quot;/&quot;, w.flag, &quot;, &quot;, end=&#x27; &#x27;)print(&quot;\\n&quot; + &quot;=&quot;*40)terms = jieba.cut(&#x27;easy_install is great&#x27;)print(&#x27;/&#x27;.join(terms))terms = jieba.cut(&#x27;python 的正则表达式是好用的&#x27;)print(&#x27;/&#x27;.join(terms))print(&quot;=&quot;*40)# test frequency tunetestlist = [(&#x27;今天天气不错&#x27;, (&#x27;今天&#x27;, &#x27;天气&#x27;)),(&#x27;如果放到post中将出错。&#x27;, (&#x27;中&#x27;, &#x27;将&#x27;)),(&#x27;我们中出了一个叛徒&#x27;, (&#x27;中&#x27;, &#x27;出&#x27;)),]for sent, seg in testlist: print(&#x27;/&#x27;.join(jieba.cut(sent, HMM=False))) word = &#x27;&#x27;.join(seg) print(&#x27;%s Before: %s, After: %s&#x27; % (word, jieba.get_FREQ(word), jieba.suggest_freq(seg, True))) print(&#x27;/&#x27;.join(jieba.cut(sent, HMM=False))) print(&quot;-&quot;*40) 123u&quot;&quot;&quot;配置文件&quot;&quot;&quot;# jieba默认字典路径，可以替换file_path = &quot;C:\\Users\\scfan\\Anaconda2\\Lib\\site-packages\\jieba\\dict.txt&quot; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253u&quot;&quot;&quot;利用jieba分词达到模糊匹配的效果 分词+人工 从而达到找到不同机构下的同一个客户&quot;&quot;&quot;u&quot;&quot;&quot;分词的目的：1.根据地址划分得到行政区划、行业等。2.根据客户名称匹配不同BU机构，统一客户(必需)。&quot;&quot;&quot;print(&quot;*&quot;*20)#### 头部#encoding=utf-8from __future__ import print_function, unicode_literalsimport syssys.path.append(&quot;../&quot;)import jiebareload(sys)sys.setdefaultencoding(&#x27;utf-8&#x27;)import jieba.posseg as pseg### 样例数据d1= [&quot;中国石油化工集团公司&quot;,&quot;上海汽车集团股份有限公司&quot;, &quot;英国法通保险公司&quot;,&quot;日本丰田汽车公司&quot;]d2 = [&quot;中国石油化工公司&quot;,&quot;上海汽车公司&quot;, &quot;英国法通&quot;,&quot;日本丰田公司&quot;]d3 = [&quot;中国石油化工&quot;,&quot;上海汽车&quot;,&quot;法通保险&quot;,&quot;日本丰田&quot;]d4 = [&quot;中国石油化工集团公司&quot;,&quot;上海汽车集团股份有限公司&quot;, &quot;英国法通保险公司&quot;,&quot;日本丰田汽车公司&quot;]# 【Tips】设定关键字词典input_file = &quot;Z:\\\\华润公司 整理\\\\代码样例\\\\jieba分词\\\\dict.crc.txt&quot;jieba.load_userdict(input_file)# 【Tips】指定添加关键词jieba.add_word(&#x27;公司&#x27;)jieba.add_word(&#x27;有限公司&#x27;)jieba.add_word(&#x27;英国&#x27;)# 【Tips】指定删除关键词jieba.del_word(&#x27;自定义词&#x27;)#【Tips】 今天天气 -&gt; 今天+天气，而不是 今天天气jieba.suggest_freq((&#x27;英国&#x27;, &#x27;法通&#x27;), True)jieba.del_word(&#x27;英国法&#x27;)#【Tips】 台中 -&gt; 台中 ，而不是 台+中#jieba.add_word(&#x27;台中&#x27;)jieba.suggest_freq(&#x27;台中&#x27;, True)c1 = []for d in d1: result = pseg.cut(d) #for w in result: # print(w.word, &quot;/&quot;, w.flag, &quot;, &quot;, end=&#x27; &#x27;) # 显示详细的词性 words = jieba.cut(d) print(&#x27;/&#x27;.join(words)) x = &#x27;/&#x27;.join(words) m = list(x) print(m) print(x) c1.append(&#x27;/&#x27;.join(words))print(c1) 附件参考链接","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Ipython-技术文档","slug":"Languages/Python/lib3-ipython","date":"2021-10-23T11:54:51.132Z","updated":"2021-10-23T11:54:51.132Z","comments":true,"path":"Languages/Python/lib3-ipython.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-ipython.md/","excerpt":"","text":"IPython 是基于 BSD 开源的，并且 IPython 为交互式计算提供了一个丰富的架构。 IPython 特色： 强大的交互式 shell 供 Jupyter notebooks 使用的 Jupyter 内核 交互式的数据可视化工具 灵活、可嵌入的解释器 易于使用，高性能的并行计算工具 IPython 使用技巧IPython 中 %调用 IPython 命令 Tab 键自动补全在 shell 中输入表达式时，按下 Tab 键可将当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)显示出来 中断正在执行的代码当代码正在执行时，需要终止代码运行，则只需按下“Ctrl+C”，就会引发一个 KeyboardInterrupt，除一些特殊的情况以外，绝大部分 Python 程序会立即停止执行。键盘中的快捷键使用 IPython 编码时还可使用键盘快捷键来快速完成所需操作，常用的键盘快捷键(IPython 环境下)如下表所示。 内置命令-记录 (%logstart)记录输入的命令 12345678In [2]: %logstartActivating auto-logging. Current session state plus future input saved.Filename : ipython_log.pyMode : rotateOutput logging : FalseRaw input log : FalseTimestamping : FalseState : active 内置命令-执行系统命令 (!)12In [6]: !hostnameneo4j.yinsho.com 内置命令-内省 (?)当某对象的信息不是很明确时，可以在变量的前面或后面加上问号(？)，有关该对象的一些通用信息就会显示出来，如下图所示。 1234567891011121314151617181920# 查看变量或函数In [4]: ?aType: intString form: 1Docstring:int(x=0) -&gt; int or longint(x, base=10) -&gt; int or long# 打印函数的源码In [15]: func??Signature: func()Source:def func(): print(&quot;hello world&quot;)File: /&lt;ipython-input-13-4475a92670e6&gt;Type: function 内置命令-执行文件代码 (%run)12345678910In [29]: !vi test.pyIn [30]: !cat test.pydef func1(): print(&quot;hello world&quot;)func1()In [31]: %run &quot;test.py&quot;hello world 目录书签系统 (%bookmark)目录书签，类似于快捷方式 123456789101112# 定义 local 书签In [37]: %bookmark local /usr/local# 查看所有书签In [38]: %bookmark -lCurrent bookmarks:local -&gt; /usr/local# 使用书签.In [39]: cd local(bookmark:local) -&gt; /usr/local/usr/local# 覆盖之前书签In [41]: %bookmark local /etc/sysconfig 其他命令 %paste 和%cpaste 命令执行剪帖板代码 使用上箭头或下箭头可以查看上一条命令或下一条命令的历史 _i48 执行第 48 条命令 __ 执行前面倒数第一条命令 输入与输出主要是使用 _、__、_X、_iX，这里的 X 表示行号 %dhist ：打印目录访问的历史 %env :以 dict 的形式返回系统的环境变量 Ipython 高级使用日志处理、代码调试、性能分析、自定义主题 IPython 附件快捷键 快捷键 作用 Ctrl+P 或向上箭头 后向搜索命令 Ctrl+N 或向下箭头 前向搜索命令 Ctrl+R 按行读取反向历史搜索(部分匹配) Ctrl+Shift+V 从剪切板粘贴文本 Ctrl+A 将光标移动到行首 Ctrl+E 将光标移动到行尾 Ctrl+K 删除从光标开始至行尾的文本 Ctrl+U 清除从光标开始至行首的文本 Ctrl+F 将光标向前移动一个字符 Ctrl+B 将光标向后移动一个字符 Ctrl+L 清屏 魔术命令123456789101112131415%quickref 显示ipython的快速参考%magic 显示所有的魔术命令的详细文档%debug 从最新的异常跟踪的底部进入交互式调试器%hist 打印命令的输入(可选输出)历史%pdb 在异常发生后自动进入调试器%paste 执行剪贴板中的python代码%cpaste 打开一个特殊提示符以便手工粘贴待执行的python代码%reset 删除interactive命名空间中的全部变量/名称%page OBJECT 通过分页器打印输出object%run script.py 在ipython中执行一个python脚本文件%prun statement 通过cprofile执行statement,并打印分析器的输出结果%time statement 报告statement的执行时间%timeit statement 多次执行statement以计算系统平均执行时间.对那么执行时间非常小的代码很有用%who,%who_id,%whos 显示interactive命名空间中定义的变量,信息级别/冗余度可变%xdel variable 删除variable,并尝试清除其在ipython中的对象上的一切引用 调试器命令 (%debug)debug 调试器样例 123456789101112131415In [11]: %debug&gt; &lt;ipython-input-10-0ee88489e9f0&gt;(1)&lt;module&gt;()----&gt; 1 func%debugipdb&gt;设置断点单步调度%run -d script.pys 进入脚本 ，b 13 # 在13行设置断点c # continue till touch the break pointn # 执行下一行。如果有exception 报出：throws_an_exception ,ipdb&gt; s # 单步进入 exception 那行.ipdb&gt; !a #在变量a 前加 ! 查看 变量内容 pdb 是 python 自带的一个包，为 python 程序提供了一种交互的源代码调试功能，主要特性包括设置断点、单步调试、进入函数调试、查看当前代码、查看栈片段、动态改变变量的值等。pdb 提供了一些常用的调试命令 pdb 调试器命令列表 12345678910111213h(help) 显示命令列表help command 显示command的文档c(continue) 恢复程序的执行q(quit) 退出调试器,不再执行任何代码b(break) n 在当前文件的第n行设置一个断点b path/to/file.py:n 在指定文件的第n行设置一个断点s(step) 单步进入函数调用n(next) 执行当前行,并前进到当前级别的下一行u(up)/d(down) 在函数调用栈中向上或向下移动a(args) 显示当前函数的参数debug statement 在新的递归调试器中调用语句statementl(list) statement 显示当前行,以及当前栈级别上的上下文参考代码w(where) 打印当前位置的完整栈跟踪(包括上下文参考代码) 资源IPython 用法详解: https://www.cnblogs.com/renpingsheng/p/7759797.html","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Faker-技术文档","slug":"Languages/Python/lib3-faker","date":"2021-10-23T11:54:51.131Z","updated":"2021-10-23T11:54:51.131Z","comments":true,"path":"Languages/Python/lib3-faker.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-faker.md/","excerpt":"","text":"安装安装faker 12pip install Faker(env) [scfan@WOM ~]$ faker -h faker 官方文档链接:https://faker.readthedocs.io/en/latest/index.html)faker 函数列表参考:https://www.jianshu.com/p/6bd6869631d9 官网函数样例官网的一些函数样例 Faker 常用函数导入模块 12from faker import Factoryfake = Factory().create(&#x27;zh_CN&#x27;) 常用函数 12345678910111213141516171819202122232425262728293031323334# 实例化对象In [2]: from faker import FactoryIn [3]: fake = Factory().create(&#x27;zh_CN&#x27;)# 身份证号码In [6]: print(fake.ssn())41012219881129736X# 姓名 &amp; 女性姓名 &amp; 男性姓名In [7]: print fake.name(), fake.name_female(), fake.name_male()帅秀珍 须金凤 姬健# 国家 &amp; 国家代码In [41]: print fake.country() ,fake.country_code()匈牙利 US# 省份In [15]: print(fake.province())辽宁省# 城市 &amp; 城市名称 &amp; 城市后缀In [42]: print fake.city(), fake.city_name(), fake.city_suffix()张家港市 深圳 县# 电话号码 &amp; 电话号码前缀In [47]: print fake.phone_number(), fake.phonenumber_prefix()18074673371 157# EmailIn [14]: print(fake.email())tao82@liao.cn# 公司名称In [72]: print fake.company()中建创业传媒有限公司# 地址In [94]: print fake.address()云南省峰县房山正街b座 190919# 街道地址 &amp; 街道名称 &amp; 街道后缀In [93]: print fake.street_address(), fake.street_name(), fake.street_suffix()经路T座 合山路 路 Faker 封装函数如下主要说明一些常用/基础函数(已封装) factory_choice_generator 随机生成 list 中一项 Gen_length_Num 随机生成指定长度数字 hanzi2pinyin 汉字转拼音 fake_random_sentence 传入 list，生成随机组合的 list 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import datetimeimport loggingimport random, stringfrom pypinyin import pinyin, lazy_pinyinfrom faker import Factoryfake = Factory().create(&#x27;zh_CN&#x27;)def factory_choice_generator(values): u&quot;&quot;&quot;从list中随机选择一个输出 :param values:列表 :return:随机取一返回 &quot;&quot;&quot; my_list = list(values) return random.choice(my_list)def Gen_length_Num(length): u&quot;&quot;&quot;输入指定长度，生成长度固定的随机数，且开头不为0 :param length:长度 :return:长度固定的随机数，且开头不为0 &quot;&quot;&quot; def Gen_length_Num_1(length): u&quot;生成流水号 - 纯数字&quot; # 随机出数字的个数 numOfNum = length # 选中numOfNum个数字 slcNum = [random.choice(string.digits) for i in range(numOfNum)] # 打乱这个组合 slcChar = slcNum random.shuffle(slcChar) # 生成密码 genPwd = &#x27;&#x27;.join([i for i in slcChar]) return genPwd genPwd = Gen_length_Num_1(length) while genPwd[0] == &#x27;0&#x27;: # 加入循环，避免生成 0 开头的数据。 genPwd = Gen_length_Num_1(length) return genPwddef hanzi2pinyin(string, split2=&quot;&quot;): u&quot;汉字转拼音&quot; if not isinstance(string, (unicode)): string = unicode(string) pinyin_li = lazy_pinyin(string) # 必须为 Unicode pinyin = u&quot;&quot; for i in pinyin_li: pinyin += i return pinyindef fake_random_sentence(ext_word_list=None): u&quot; 传入list随机组合生成列表 &quot; my_word_list = [ &#x27;danish&#x27;,&#x27;cheesecake&#x27;,&#x27;sugar&#x27;, &#x27;Lollipop&#x27;,&#x27;wafer&#x27;,&#x27;Gummies&#x27;, &#x27;sesame&#x27;,&#x27;Jelly&#x27;,&#x27;beans&#x27;, &#x27;pie&#x27;,&#x27;bar&#x27;,&#x27;Ice&#x27;,&#x27;oat&#x27; ] fake.sentence() # &#x27;Expedita at beatae voluptatibus nulla omnis.&#x27; sentence = fake.sentence(ext_word_list=my_word_list) # &#x27;Oat beans oat Lollipop bar cheesecake.&#x27; return sentence Faker 函数效果一览生成函数样例的代码程序 12345678910111213141516171819202122# -*- coding=utf-8 -*-import sysfrom faker import Factoryreload(sys)sys.setdefaultencoding(&#x27;utf8&#x27;)fake = Factory().create(&#x27;zh_CN&#x27;)li = dir(fake)def get_dir_run(): with open(&#x27;somefile.txt&#x27;, &#x27;wt&#x27;) as f: for i in li: a = None try: cmd = &quot;fake.&quot;+i+&quot;()&quot; a = eval(cmd) print cmd except Exception: a = None if a: message = &quot;&#123;0&#125; # &#123;1&#125; \\n&quot;.format(cmd,a) f.write(message)get_dir_run() Python-Faker 详细函数样例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186fake.__class__() # &lt;faker.generator.Generator object at 0x7ff780c23e10&gt;fake.__hash__() # 8793824177497fake.__repr__() # &lt;faker.generator.Generator object at 0x7ff78c42d590&gt;fake.__sizeof__() # 32fake.__str__() # &lt;faker.generator.Generator object at 0x7ff78c42d590&gt;fake.__subclasshook__() # NotImplementedfake.address() # 云南省荣县白云延路y座 648847fake.am_pm() # AMfake.ascii_company_email() # zhangchao@mao.comfake.ascii_email() # yongzheng@hotmail.comfake.ascii_free_email() # gongfang@hotmail.comfake.ascii_safe_email() # tzhao@example.netfake.boolean() # Truefake.bothify() # 10 Nqfake.bs() # productize front-end supply-chainsfake.building_number() # E座fake.catch_phrase() # Visionary logistical initiativefake.century() # IIfake.chrome() # Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_8_9) AppleWebKit/5352 (KHTML, like Gecko) Chrome/14.0.828.0 Safari/5352fake.city() # 成都市fake.city_name() # 宁德fake.city_suffix() # 市fake.color_name() # DarkOliveGreenfake.company() # 网新恒天信息有限公司fake.company_email() # xiongchao@cai.comfake.company_prefix() # 维旺明fake.company_suffix() # 信息有限公司fake.country() # 阿拉伯联合酋长国fake.country_code() # ESfake.credit_card_expire() # 06/22fake.credit_card_full() # JCB 16 digit柳 冉3096337563919187 07/23CVC: 610fake.credit_card_number() # 6011172478902092fake.credit_card_provider() # Voyagerfake.credit_card_security_code() # 0753fake.cryptocurrency_code() # XDNfake.currency_code() # TWDfake.date() # 1973-07-31fake.date_between() # 2008-01-12fake.date_between_dates() # 2017-12-06fake.date_object() # 1972-08-01fake.date_this_century() # 2008-09-16fake.date_this_decade() # 2013-12-26fake.date_this_month() # 2017-12-01fake.date_this_year() # 2017-09-19fake.date_time() # 2016-08-05 03:23:26fake.date_time_ad() # 0258-04-07 20:48:11fake.date_time_between() # 2006-06-09 01:28:22fake.date_time_between_dates() # 2017-12-06 10:47:23fake.date_time_this_century() # 2001-11-30 13:58:47fake.date_time_this_decade() # 2012-08-25 18:04:34fake.date_time_this_month() # 2017-12-04 11:24:57fake.date_time_this_year() # 2017-06-02 08:50:48fake.day_of_month() # 15fake.day_of_week() # Thursdayfake.district() # 清河fake.domain_name() # lu.comfake.domain_word() # zhaofake.ean() # 5954186746588fake.ean13() # 9672235528133fake.ean8() # 06171292fake.email() # zhengtao@gmail.comfake.file_extension() # docxfake.file_name() # 品牌.docfake.file_path() # /关于/推荐.pptxfake.firefox() # Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_5_7; rv:1.9.4.20) Gecko/2011-01-16 07:23:04 Firefox/5.0fake.first_name() # 玉珍fake.first_name_female() # 彬fake.first_name_male() # 莹fake.first_romanized_name() # Fangfake.free_email() # bwen@hotmail.comfake.free_email_domain() # yahoo.comfake.future_date() # 2017-12-13fake.future_datetime() # 2017-12-19 00:29:14fake.geo_coordinate() # -172.459902fake.hex_color() # #b4e7a9fake.image_url() # https://dummyimage.com/517x471fake.internet_explorer() # Mozilla/5.0 (compatible; MSIE 6.0; Windows CE; Trident/4.0)fake.ipv4() # 6.155.240.182fake.ipv6() # 6903:92c5:9e08:5f0c:5fda:b85e:97ec:b885fake.isbn10() # 0-02-210237-Xfake.isbn13() # 978-1-79735-105-6fake.iso8601() # 1986-08-09T07:49:59fake.job() # Designer, graphicfake.language_code() # bsfake.last_name() # 逯fake.last_name_female() # 申fake.last_name_male() # 查fake.last_romanized_name() # Dongfake.latitude() # 10.6496555fake.lexify() # PEdFfake.license_plate() # 4-2558Gfake.linux_platform_token() # X11; Linux i686fake.linux_processor() # i686fake.locale() # ka_GEfake.longitude() # -45.494435fake.mac_address() # 70:0a:bf:0f:77:47fake.mac_platform_token() # Macintosh; PPC Mac OS X 10_7_7fake.mac_processor() # Intelfake.md5() # 71f8c16a5f87000130b7df65611c364afake.mime_type() # message/partialfake.month() # 11fake.month_name() # Februaryfake.msisdn() # 6138497580204fake.name() # 离莹fake.name_female() # 万成fake.name_male() # 况丽华fake.null_boolean() # Truefake.numerify() # 877fake.opera() # Opera/9.94.(Windows 95; nl-BE) Presto/2.9.171 Version/11.00fake.paragraph() # 系列位置由于作品什么特别研究.精华网络或者搜索.主题我们类别这个增加.fake.paragraphs() # [u&#x27;\\u516c\\u53f8\\u9700\\u8981\\u65f6\\u95f4\\u73af\\u5883.\\u7684\\u4eba\\u63d0\\u4f9b\\u79ef\\u5206\\u5728\\u7ebf\\u6807\\u51c6\\u6cd5\\u5f8b\\u6211\\u4eec\\u6ce8\\u610f.&#x27;, u&#x27;\\u8c22\\u8c22\\u57fa\\u672c\\u4ec0\\u4e48\\u4e2d\\u6587\\u540d\\u79f0\\u7136\\u540e\\u9996\\u9875\\u5de5\\u5177.\\u539f\\u56e0\\u6ca1\\u6709\\u9700\\u8981\\u8ba1\\u5212\\u5b9e\\u73b0\\u89c9\\u5f97.\\u7ed3\\u679c\\u5f53\\u524d\\u7814\\u7a76\\u5927\\u5bb6.&#x27;, u&#x27;\\u7684\\u8bdd\\u90fd\\u662f\\u4e4b\\u95f4\\u4e3a\\u4ec0\\u672c\\u7ad9\\u89c4\\u5b9a\\u5927\\u5b66.\\u5206\\u6790\\u62e5\\u6709\\u800c\\u4e14\\u6587\\u4ef6.&#x27;]fake.password() # z@YJ7Wcpgvfake.past_date() # 2017-11-22fake.past_datetime() # 2017-12-03 18:08:05fake.phone_number() # 18597001558fake.phonenumber_prefix() # 132fake.postcode() # 870942fake.profile() # &#123;&#x27;website&#x27;: [u&#x27;https://www.hu.net/&#x27;, u&#x27;https://www.zou.cn/&#x27;, u&#x27;https://shen.cn/&#x27;, u&#x27;http://kong.com/&#x27;], &#x27;username&#x27;: u&#x27;wanjing&#x27;, &#x27;name&#x27;: u&#x27;\\u79e6\\u79c0\\u5170&#x27;, &#x27;blood_group&#x27;: &#x27;0+&#x27;, &#x27;residence&#x27;: u&#x27;\\u8fbd\\u5b81\\u7701\\u5e06\\u53bf\\u79c0\\u82f1\\u516d\\u76d8\\u6c34\\u8857u\\u5ea7 436149&#x27;, &#x27;company&#x27;: u&#x27;\\u9ec4\\u77f3\\u91d1\\u627f\\u4fe1\\u606f\\u6709\\u9650\\u516c\\u53f8&#x27;, &#x27;address&#x27;: u&#x27;\\u897f\\u85cf\\u81ea\\u6cbb\\u533a\\u51e4\\u5170\\u53bf\\u5c71\\u4ead\\u94f6\\u5ddd\\u8857P\\u5ea7 346744&#x27;, &#x27;birthdate&#x27;: &#x27;1985-04-28&#x27;, &#x27;sex&#x27;: &#x27;M&#x27;, &#x27;job&#x27;: &#x27;Engineer, mining&#x27;, &#x27;ssn&#x27;: u&#x27;433125195206070070&#x27;, &#x27;current_location&#x27;: (Decimal(&#x27;-15.7126615&#x27;), Decimal(&#x27;-143.411020&#x27;)), &#x27;mail&#x27;: u&#x27;fliang@hotmail.com&#x27;&#125;fake.province() # 广西壮族自治区fake.pybool() # Truefake.pydecimal() # 384.433560097fake.pydict() # &#123;u&#x27;\\u5927\\u5bb6&#x27;: u&#x27;https://www.gao.net/categories/categories/index.php&#x27;, u&#x27;\\u90a3\\u4e48&#x27;: 4623, u&#x27;\\u72b6\\u6001&#x27;: datetime.datetime(1994, 3, 19, 8, 6, 12), u&#x27;\\u80fd\\u529b&#x27;: Decimal(&#x27;6.96492&#x27;), u&#x27;\\u540c\\u65f6&#x27;: u&#x27;JpjrByPDCgnsNDfaNYgd&#x27;, u&#x27;\\u5ba2\\u6237&#x27;: 3485&#125;fake.pyfloat() # -4099208226.9fake.pyint() # 3270fake.pyiterable() # [-7155.447707, u&#x27;KOQVBTsYxVpaVxpHBXiO&#x27;, u&#x27;https://www.kang.com/index.php&#x27;, u&#x27;jKmLqgUUOEqdXCeTGBID&#x27;, u&#x27;pGVNjKcxmCTQNpdpKbgm&#x27;, -48.1915257969, datetime.datetime(1975, 9, 27, 18, 22, 43)]fake.pylist() # [4770, datetime.datetime(1990, 4, 11, 9, 59, 16), 2546, 8087, -612180.919, 2.3246212976]fake.pyset() # set([u&#x27;uwFlxgSEwApkViCNpQZk&#x27;, u&#x27;TlijxYEXankqWtWXkHax&#x27;, u&#x27;TPgKtCtIHXIaKxgWMDjo&#x27;, Decimal(&#x27;-72118073288.1&#x27;), u&#x27;LYoqafrVUVggsnWJXKUg&#x27;, Decimal(&#x27;-239813.3099&#x27;), u&#x27;ELLFUOSNKtxYyhtCXPPg&#x27;, 1371])fake.pystr() # GdxudJdOCeExecGzFpJgfake.pystruct() # ([u&#x27;WTHzKZdDIrwhUfPHrjMb&#x27;, u&#x27;MVXsSqDWyabyceZRSgGr&#x27;, datetime.datetime(1993, 10, 3, 1, 1, 31), u&#x27;sKcZHJgAGVZrCIfIHwMS&#x27;, 7694, u&#x27;wdedDezTMpfOxUQHaVlO&#x27;, u&#x27;iMgUrRzaaYtArWrnxWda&#x27;, u&#x27;tixihvoqNqQVByfEoGsg&#x27;, u&#x27;https://www.qiu.com/search/explore/home.html&#x27;, 898068606944.83], &#123;u&#x27;\\u6709\\u9650&#x27;: Decimal(&#x27;4.3883198&#x27;), u&#x27;\\u8fd9\\u4e48&#x27;: u&#x27;UVOyihAmcukcQJcVIOah&#x27;, u&#x27;\\u5408\\u4f5c&#x27;: 3743, u&#x27;\\u4e0d\\u540c&#x27;: datetime.datetime(2005, 2, 23, 7, 35, 45), u&#x27;\\u63d0\\u9ad8&#x27;: datetime.datetime(1987, 2, 10, 2, 28, 44), u&#x27;\\u8bc4\\u8bba&#x27;: 8874, u&#x27;\\u5173\\u4e8e&#x27;: u&#x27;apan@wei.net&#x27;, u&#x27;\\u7ec4\\u7ec7&#x27;: 468, u&#x27;\\u60c5\\u51b5&#x27;: 6083, u&#x27;\\u884c\\u4e1a&#x27;: u&#x27;qiang61@long.org&#x27;&#125;, &#123;u&#x27;\\u4e13\\u4e1a&#x27;: &#123;3: u&#x27;AkBWAoxmmokgNrRogyYk&#x27;, 4: [4596, u&#x27;nJzscDjtYSbEzPdkOkRK&#x27;, 5365], 5: &#123;3: 4605, 4: u&#x27;chao87@wei.com&#x27;, 5: [u&#x27;xia30@lu.cn&#x27;, datetime.datetime(2006, 10, 25, 21, 37, 41)]&#125;&#125;, u&#x27;\\u4e2d\\u6587&#x27;: &#123;8: [u&#x27;oYYfArTznrMITieKBrdT&#x27;, u&#x27;QoESvZcnaAZFmaQqjrgk&#x27;, u&#x27;afkzJChqTNmwwcUXcTOu&#x27;], 9: &#123;8: u&#x27;ughNWEsmKFFnPReWycbf&#x27;, 9: [-6.41272, -39213.981], 7: u&#x27;RKIcxKTOThQLwaIgVFWe&#x27;&#125;, 7: u&#x27;uIVZuDPnedhnOJVZUzfX&#x27;&#125;, u&#x27;\\u8fd8\\u662f&#x27;: &#123;9: u&#x27;JqElYMJfaassiofLGvLn&#x27;, 10: [4443, u&#x27;aZgiftVvonSEzCzTddiO&#x27;, u&#x27;shaowei@yan.com&#x27;], 11: &#123;9: 9967, 10: 5143, 11: [u&#x27;usmTtsPWPYtObuYObOpB&#x27;, Decimal(&#x27;-31192.5654601&#x27;)]&#125;&#125;, u&#x27;\\u6765\\u81ea&#x27;: &#123;1: u&#x27;sIqUyGCneohdHGgznDuU&#x27;, 2: [datetime.datetime(2007, 5, 31, 11, 24, 16), 8321, u&#x27;pfIJmDxwAquYLyxrpuVz&#x27;], 3: &#123;1: u&#x27;gliang@hotmail.com&#x27;, 2: Decimal(&#x27;33965.0&#x27;), 3: [u&#x27;AexgPcuhOIziJhYifZtR&#x27;, datetime.datetime(2003, 3, 24, 22, 28, 43)]&#125;&#125;, u&#x27;\\u7cfb\\u7edf&#x27;: &#123;4: u&#x27;welRgeLqhOQPGkdkviok&#x27;, 5: [Decimal(&#x27;-46.5&#x27;), u&#x27;hmJxbwRBLukmjHylLojM&#x27;, u&#x27;http://www.mao.cn/search/tag/index.html&#x27;], 6: &#123;4: u&#x27;http://zou.cn/tag/index/&#x27;, 5: u&#x27;uBlLVOtLauDbAMlrpTZM&#x27;, 6: [u&#x27;bqiHwnSArJdlQnvsbKPN&#x27;, u&#x27;RQdmtWPMwiFuaThJrMWm&#x27;]&#125;&#125;, u&#x27;\\u6280\\u672f&#x27;: &#123;8: 2626, 9: [Decimal(&#x27;4719860282.19&#x27;), Decimal(&#x27;-392046163.17&#x27;), datetime.datetime(2005, 1, 11, 13, 21, 2)], 10: &#123;8: u&#x27;MoUiPqxBcSTrkudFLIza&#x27;, 9: u&#x27;XUQtWQGntEeuayziAnYA&#x27;, 10: [u&#x27;ulhMPZKMdlQzfWdUuYIF&#x27;, datetime.datetime(1994, 7, 25, 9, 15, 28)]&#125;&#125;, u&#x27;\\u9009\\u62e9&#x27;: &#123;8: &#123;8: [u&#x27;yong58@ren.cn&#x27;, u&#x27;cGFuWyLdFRUzGhTCaFjE&#x27;], 6: 7701, 7: datetime.datetime(2010, 8, 15, 10, 6, 13)&#125;, 6: u&#x27;zengwei@gmail.com&#x27;, 7: [6858, 6403, datetime.datetime(1984, 4, 18, 11, 0, 12)]&#125;, u&#x27;\\u4e00\\u70b9&#x27;: &#123;0: 6620, 1: [u&#x27;OrTScuyESDqszlQjOlYX&#x27;, u&#x27;hJahyMWdkPLhNOMzrdfy&#x27;, u&#x27;mmZYqEDMYPodgUuICyct&#x27;], 2: &#123;0: -33313798379.385, 1: u&#x27;XRpLoRsRMQIROsBqIHlG&#x27;, 2: [u&#x27;xZozzLqTMwXpfdTpMscc&#x27;, u&#x27;https://www.xia.com/&#x27;]&#125;&#125;, u&#x27;\\u7531\\u4e8e&#x27;: &#123;2: u&#x27;naguo@qian.com&#x27;, 3: [u&#x27;wTVRQMbwJPUNAKbhAKFs&#x27;, Decimal(&#x27;-679732200.8&#x27;), u&#x27;braeyLsfMvOtsSrgwlxX&#x27;], 4: &#123;2: u&#x27;feviQSXEPjAzICRiXIWU&#x27;, 3: u&#x27;xiuyinghe@gmail.com&#x27;, 4: [5961281603639.0, u&#x27;YNOuECSZEExtHvlGKwwE&#x27;]&#125;&#125;, u&#x27;\\u56fe\\u7247&#x27;: &#123;5: datetime.datetime(1977, 3, 29, 23, 38), 6: [u&#x27;http://yin.com/main.jsp&#x27;, u&#x27;yanjia@yahoo.com&#x27;, 632.53909299766], 7: &#123;5: u&#x27;RqBzkDuehAQUCHYQCmAZ&#x27;, 6: 4597, 7: [8421, 7708]&#125;&#125;&#125;)fake.pytuple() # (u&#x27;CJFHMwspGSwiPKfZhCVY&#x27;, u&#x27;IDhxTOsuOiDHOlKtMbbe&#x27;, 6637, 978, u&#x27;RodatDSuaRbwlgTJNzKx&#x27;, u&#x27;fsUVemSiAyPqyLFmfdZD&#x27;, u&#x27;zhujuan@li.cn&#x27;, u&#x27;https://kong.cn/categories/app/login.htm&#x27;, Decimal(&#x27;-406039.250589&#x27;), 8127)fake.random_digit() # 9fake.random_digit_not_null() # 6fake.random_digit_not_null_or_empty() # 5fake.random_digit_or_empty() # 3fake.random_element() # afake.random_int() # 4585fake.random_letter() # ofake.random_number() # 80709883fake.random_sample() # [&#x27;a&#x27;, &#x27;c&#x27;]fake.random_sample_unique() # set([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;])fake.randomize_nb_elements() # 13fake.rgb_color() # 97,134,130fake.rgb_css_color() # rgb(39,226,180)fake.romanized_name() # Qiang Dufake.safari() # Mozilla/5.0 (Windows; U; Windows NT 6.0) AppleWebKit/532.2.5 (KHTML, like Gecko) Version/4.0.2 Safari/532.2.5fake.safe_color_name() # yellowfake.safe_email() # ming14@example.netfake.safe_hex_color() # #ff3300fake.sentence() # 方法科技是否只有无法.fake.sentences() # [u&#x27;\\u4ec0\\u4e48\\u672c\\u7ad9\\u6280\\u672f\\u4e00\\u6b21\\u8868\\u793a\\u4e0d\\u540c\\u5904\\u7406.&#x27;, u&#x27;\\u8fd0\\u884c\\u65b9\\u5f0f\\u80fd\\u529b\\u4e00\\u6837\\u5f53\\u524d.&#x27;, u&#x27;\\u6700\\u65b0\\u901a\\u8fc7\\u4e00\\u4e2a\\u5b66\\u6821\\u5f53\\u524d\\u4eca\\u5e74\\u5982\\u679c\\u5efa\\u8bbe.&#x27;]fake.sha1() # 7052c75358562302ddacd77e14e49986926374fafake.sha256() # 27e24e47230c764507a2e54d25a495e2f1f24ebcc23c6bf2b213b21379f8865efake.simple_profile() # &#123;&#x27;username&#x27;: u&#x27;nayuan&#x27;, &#x27;name&#x27;: u&#x27;\\u5b87\\u9633&#x27;, &#x27;birthdate&#x27;: &#x27;1975-11-12&#x27;, &#x27;sex&#x27;: &#x27;M&#x27;, &#x27;address&#x27;: u&#x27;\\u6c5f\\u897f\\u7701\\u6f5c\\u6c5f\\u53bf\\u6c38\\u5ddd\\u62d3\\u8defj\\u5ea7 699193&#x27;, &#x27;mail&#x27;: u&#x27;guiying19@hotmail.com&#x27;&#125;fake.ssn() # 410403194106288547fake.street_address() # 燕街L座fake.street_name() # 广州街fake.street_suffix() # 路fake.text() # 留言大小看到.成为控制拥有.电子个人产品产品这么其他文章.国际谢谢公司系统为什.一起其他作品客户一种系列.事情中国记者.男人为什组织的话.要求部门希望.很多投资深圳方面操作威望需要.注意你们这种学生可是所有通过基本.游戏时候日本目前数据生活得到.市场这是还是学校时间最后.关于之后浏览相关企业支持结果类别.正在专业人员实现.fake.time() # 17:02:29fake.time_delta() # 8837 days, 21:54:15fake.time_object() # 03:34:28fake.time_series() # &lt;generator object time_series at 0x7ff7800cb280&gt;fake.timezone() # Asia/Jerusalemfake.tld() # cnfake.unix_time() # 1100321594fake.uri() # https://pan.org/terms/fake.uri_extension() # .phpfake.uri_page() # loginfake.uri_path() # app/categoryfake.url() # http://www.xie.com/fake.user_agent() # Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_6; rv:1.9.5.20) Gecko/2016-10-29 04:38:17 Firefox/12.0fake.user_name() # jingmofake.uuid4() # f64bcfad-67c4-c748-5e19-86a74848e6fafake.windows_platform_token() # Windows NT 5.2fake.word() # 更新fake.words() # [u&#x27;\\u7136\\u540e&#x27;, u&#x27;\\u5927\\u5b66&#x27;, u&#x27;\\u7a0b\\u5e8f&#x27;]fake.year() # 2001","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"flask-后台技术框架","slug":"Languages/Python/lib3-flask","date":"2021-10-23T11:54:51.131Z","updated":"2021-10-23T11:54:51.131Z","comments":true,"path":"Languages/Python/lib3-flask.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-flask.md/","excerpt":"","text":"相关资源https://www.cnblogs.com/eric_yi/p/8184018.html","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Dask并行任务调度","slug":"Languages/Python/lib3-dask","date":"2021-10-23T11:54:51.130Z","updated":"2021-10-23T11:54:51.130Z","comments":true,"path":"Languages/Python/lib3-dask.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-dask.md/","excerpt":"","text":"Dask 说明介绍Dask是用于 Python 中并行计算的灵活库。 达斯由两部分组成： 动态任务调度针对计算进行了优化。这类似于 Airflow，Luigi，Celery 或 Make，但已针对交互式计算工作负载进行了优化。 “大数据”集合(如并行数组，数据帧和列表)将诸如 NumPy，Pandas 或 Python 迭代器之类的通用接口扩展到内存或分布式环境。这些并行集合在动态任务计划程序之上运行。 达斯克强调以下优点： 熟悉：提供并行的 NumPy 数组和 Pandas DataFrame 对象 灵活：提供任务计划界面，以实现更多自定义工作负载并与其他项目集成。 Native：在纯 Python 中启用分布式计算并可以访问 PyData 堆栈。 快速：以低开销，低延迟和快速数值算法所需的最少序列化操作 扩大规模：在具有 1000 个核心的集群上弹性运行 缩小：在单个过程中轻松设置并在笔记本电脑上运行 响应式：在设计时考虑了交互式计算，它提供了快速的反馈和诊断功能，以帮助人类 Dask 分析(env36) [scfan@fdm tools]$ dask-scheduler(env36) [scfan@fdm ~]$ dask-worker 10.0.2.14:8786 python3 Dask-资源分析Dask-任务管理 Dask 优缺点优点 支持单机、分布式环境 类 Pandas 风格,修改成本低 缺点 Dask-DataFrame 读取文件不支持 excel。支持 read_csv read_table read_fwf read_parquet read_hdf read_json read_orc Dask 部署附件性能测试使用 自主建模-字段加工节点 测试 Pandas &amp; Dask 性能 参考资源 Jupyter-Data Science with Python and Dask Dask &amp; Pandas 语法差异表Github-Dask Collections API compatibility 样例 123456789101112131415161718192021# Dask 没有 pandas.core.series.Seriesif data_mode.upper() == &#x27;DASK&#x27;: passelse: if varname.startswith(&#x27;df&#x27;) and not isinstance(argls[index], pandas.core.series.Series): raise RuntimeError(&#x27;第%s个参数必须为一列&#x27; % (index + 1))# Dask DataFrame.replace 没有 inplace 参数if data_mode == &#x27;DASK&#x27;: data = data.replace(to_replace=&#x27;nan&#x27;,value=&#x27;&#x27;)else: data.replace(to_replace=&#x27;nan&#x27;,value=&#x27;&#x27;,inplace=True)# Dask DataFrame.to_csv# data.to_csv(&#x27;a1.csv&#x27;) 会创建目录# data.to_csv([&#x27;a1.csv&#x27;]) 会创建文件# data.to_csv(&#x27;a-*.csv&#x27;) 会创建分区文件,创建多个文件if data_mode == &#x27;DASK&#x27;: data.to_csv([&#x27;a1.csv&#x27;],index=False)else: data.to_csv(&#x27;a.csv&#x27;,index=False) Dask &amp; Pandas 细节语法性能差异 [译] 在 Python 中，如何运用 Dask 数据进行并行数据分析 Python 大规模数据存储与读取、并行计算：Dask 库简述 开启程序Dask-scheduler开启 dask-scheduler 1234567891011121314(env36) [scfan@fdm tools]$ dask-schedulerdistributed.scheduler - INFO - -----------------------------------------------distributed.dashboard.proxy - INFO - To route to workers diagnostics web server please install jupyter-server-proxy: pip install jupyter-server-proxydistributed.scheduler - INFO - Local Directory: /tmp/scheduler-bdk4b7lidistributed.scheduler - INFO - -----------------------------------------------distributed.scheduler - INFO - Clear task statedistributed.scheduler - INFO - Scheduler at: tcp://10.0.2.14:8786distributed.scheduler - INFO - dashboard at: :8787distributed.scheduler - INFO - Register tcp://10.0.2.14:30547distributed.scheduler - INFO - Starting worker compute stream, tcp://10.0.2.14:30547distributed.core - INFO - Starting established connectiondistributed.scheduler - INFO - Register tcp://10.0.2.14:9190distributed.scheduler - INFO - Starting worker compute stream, tcp://10.0.2.14:9190distributed.core - INFO - Starting established connection Dask-Scheduler 可视化界面 Dask-Worker开启 Worker 12345678910111213141516(env36) [scfan@fdm tools]$ dask-worker 10.0.2.14:8786distributed.nanny - INFO - Start Nanny at: &#x27;tcp://10.0.2.14:12075&#x27;distributed.diskutils - INFO - Found stale lock file and directory &#x27;/home/scfan/project/FISAMS/branches/branch_scfan/src/server/fdm/tools/worker-yyz2l21f&#x27;, purgingdistributed.dashboard.proxy - INFO - To route to workers diagnostics web server please install jupyter-server-proxy: pip install jupyter-server-proxydistributed.worker - INFO - Start worker at: tcp://10.0.2.14:17181distributed.worker - INFO - Listening to: tcp://10.0.2.14:17181distributed.worker - INFO - dashboard at: 10.0.2.14:36300distributed.worker - INFO - Waiting to connect to: tcp://10.0.2.14:8786distributed.worker - INFO - -------------------------------------------------distributed.worker - INFO - Threads: 4distributed.worker - INFO - Memory: 10.32 GBdistributed.worker - INFO - Local Directory: /home/scfan/project/FISAMS/branches/branch_scfan/src/server/fdm/tools/worker-5304u4tpdistributed.worker - INFO - -------------------------------------------------distributed.worker - INFO - Registered to: tcp://10.0.2.14:8786distributed.worker - INFO - -------------------------------------------------distributed.core - INFO - Starting established connection Dask-Worker 可视化界面 Dask 对比Dask 缺点 dataframe 不提供 sql 支持,可以使用 dask.dataframe.from_sql 支持的数据格式 Tabular: Parquet, ORC, CSV, Line Delimited JSON, Avro, text Arrays: HDF5, NetCDF, Zarr, GRIB 不支持 Excel Dask 优点 Dask 可以抵抗工作节点的故障 Dask 虽然较新 2015 年,但是已经成熟,而且随 Pandas 更新而更新 Dask 是通用并行编程解决方案。类似 Pandsa,使用方便,和 pandas 有细微差异 支持本地 Dask 的概要分析和检查执行情况 https://docs.dask.org/en/latest/diagnostics-local.html#example Dask 支持项 支持 单机调度程序、分布式调度程序(本地或集群) dask-worker 资源控制–resources 用于任务约束的资源，例如“ GPU = 2 MEM = 10e9”。资源分别应用于每个工作进程(仅在使用“ –nprocs”启动多个工作进程时才相关)。 可视化界面 http://192.168.172.72:27831/status Scheduler http://192.168.172.72:8787/status worker","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Click","slug":"Languages/Python/lib3-click","date":"2021-10-23T11:54:51.130Z","updated":"2021-10-23T11:54:51.130Z","comments":true,"path":"Languages/Python/lib3-click.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib3-click.md/","excerpt":"","text":"Click官方文档 https://click.palletsprojects.com/en/7.x/ https://github.com/pallets/click 邮箱是否存在 校验(由于大量的smtp请求会被服务器拦截，所以使用pysocks代理) https://www.coder.work/article/2011333","categories":[],"tags":[]},{"title":"内置包-time","slug":"Languages/Python/lib-time","date":"2021-10-23T11:54:51.130Z","updated":"2021-10-23T11:54:51.130Z","comments":true,"path":"Languages/Python/lib-time.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib-time.md/","excerpt":"","text":"","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-内置包","slug":"python/python-内置包","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-内置包","slug":"python-内置包","permalink":"http://fansichao.github.com/blog/tags/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}]},{"title":"内置包-OS","slug":"Languages/Python/lib-os","date":"2021-10-23T11:54:51.129Z","updated":"2021-10-23T11:54:51.129Z","comments":true,"path":"Languages/Python/lib-os.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib-os.md/","excerpt":"","text":"模块功能介绍os 模块提供了非常丰富的方法用来处理文件和目录。 常用功能12# 获取 文件名称os.path.basename(a) 模块功能参考资源Python OS 文件/目录方法 https://www.cnblogs.com/yufeihlf/p/6179547.html","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-内置包","slug":"python/python-内置包","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-内置包","slug":"python-内置包","permalink":"http://fansichao.github.com/blog/tags/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}]},{"title":"Python 正则表达式","slug":"Languages/Python/lib-re","date":"2021-10-23T11:54:51.129Z","updated":"2021-10-23T11:54:51.129Z","comments":true,"path":"Languages/Python/lib-re.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib-re.md/","excerpt":"","text":"tags: 2020年 02月 Python进阶 Python3 Xpath获取两个对象间的值 1234567891011121314151617181920假设数据如下：&lt;div class=&quot;a&quot;&gt; &lt;div class=&quot;b&quot;&gt; text1 &lt;/div&gt; 需要的数据在这里 &lt;div class=&quot;d&quot;&gt; text2 &lt;/div&gt;&lt;/div&gt;通过如下xpath获取：div[1]//div[contains(text(),&quot;text1&quot;)]/following-sibling::node()[position() &lt;= count( div[1]//div[contains(text(),&quot;text2&quot;)]/following-sibling::node()) + 1] re简介说明正则表达式(Regular Expression)是一种文本模式，包括普通字符(例如，a 到 z 之间的字母)和特殊字符(称为”元字符”)。 正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。 文内说明: 环境说明 CentOS7.5 Python3.6.0 学习说明 正则表达式,了解其基础和常用使用即可,具体使用查阅工具书。 使用样例findall123456789101112131415import re# 字符串直接匹配 re.I 忽略大小写In [16]: reg_str = &quot;python123%^$^(*pythoN&quot;In [17]: reg = &#x27;python&#x27;In [18]: re.findall(reg,reg_str,re.I)Out[18]: [&#x27;python&#x27;, &#x27;pythoN&#x27;]# 匹配数字In [23]: reg_str = &quot;python123%^$^(*pythoN2135&quot;In [25]: reg = &#x27;\\d&#123;2&#125;&#x27;In [26]: re.findall(reg,reg_str)Out[26]: [&#x27;12&#x27;, &#x27;21&#x27;, &#x27;35&#x27;] 语法学习元字符123456789元字符. 匹配除换行符外的任意字符\\w 匹配字母数字下划线或汉字\\s 匹配任意的空白符\\d 匹配数字\\b 匹配单词的开始或结束^ 匹配字符串的开始$ 匹配字符串的结束 反义代码12345678910\\W 匹配任意不是字母、数字、下划线、汉字的字符\\S 匹配任意不是空白符的字符\\D 非数字\\B 匹配不是单次开头或结束的位置[^a] 匹配出了a以外的字符[^abcd] 匹配出了abcd以外的字符 限定符1234567* 重复零次或多次+ 重复一次或多次? 重复零次或一次&#123;n&#125; 重复n次&#123;n,&#125; 重复n次或多次&#123;n,m&#125; 重复n-m次 贪婪 &amp; 非贪婪12345贪婪 尽可能多的匹配 默认贪婪非贪婪 ? 尽可能少的匹配用于 * + ? 后面 组匹配123456789In [34]: reg_str = &quot;phone: 12345678910 , email : aqwe@.com&quot;In [35]: reg = &quot;phone: (\\d&#123;11&#125;) , email : (\\w.+)@.com&quot;In [36]: re.search(reg,reg_str).group(0)Out[36]: &#x27;phone: 12345678910 , email : aqwe@.com&#x27;In [37]: re.search(reg,reg_str).group(1)Out[37]: &#x27;12345678910&#x27;In [38]: re.search(reg,reg_str).group(2)Out[38]: &#x27;aqwe&#x27; 常用函数123search 只匹配第一个findall 查询所有 附件参考链接 正则表达式-菜鸟教程 正则表达式在线工具 常用正则表达式 常用正则表达式12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# 一、校验数字的表达式数字：^[0-9]*$n位的数字：^\\d&#123;n&#125;$至少n位的数字：^\\d&#123;n,&#125;$m-n位的数字：^\\d&#123;m,n&#125;$零和非零开头的数字：^(0|[1-9][0-9]*)$非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(\\.[0-9]&#123;1,2&#125;)?$带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)$正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$有两位小数的正实数：^[0-9]+(\\.[0-9]&#123;2&#125;)?$有1~3位小数的正实数：^[0-9]+(\\.[0-9]&#123;1,3&#125;)?$非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$非零的负整数：^\\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\\d*$非负整数：^\\d+$ 或 ^[1-9]\\d*|0$非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$# 校验字符的表达式汉字：^[\\u4e00-\\u9fa5]&#123;0,&#125;$英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$长度为3-20的所有字符：^.&#123;3,20&#125;$由26个英文字母组成的字符串：^[A-Za-z]+$由26个大写英文字母组成的字符串：^[A-Z]+$由26个小写英文字母组成的字符串：^[a-z]+$由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;3,20&#125;$中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$可以输入含有^%&amp;&#x27;,;=?$\\&quot;等字符：[^%&amp;&#x27;,;=?$\\x22]+禁止输入含有~的字符：[^~\\x22]+# 三、特殊需求表达式Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\\.?InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;电话号码正则表达式(支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号): ((\\d&#123;11&#125;)|^((\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)|(\\d&#123;4&#125;|\\d&#123;3&#125;)-(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;)|(\\d&#123;7,8&#125;)-(\\d&#123;4&#125;|\\d&#123;3&#125;|\\d&#123;2&#125;|\\d&#123;1&#125;))$)身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$钱的输入格式：有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$中文字符的正则表达式：[\\u4e00-\\u9fa5]双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"内置包-sys","slug":"Languages/Python/lib-sys","date":"2021-10-23T11:54:51.129Z","updated":"2021-10-23T11:54:51.129Z","comments":true,"path":"Languages/Python/lib-sys.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib-sys.md/","excerpt":"","text":"该模块提供对解释器使用或维护的一些变量的访问，以及与解释器强烈交互的函数。它始终可用。 http://c.biancheng.net/view/2407.html https://blog.csdn.net/qq_38526635/article/details/81739321","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-内置包","slug":"python/python-内置包","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-内置包","slug":"python-内置包","permalink":"http://fansichao.github.com/blog/tags/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}]},{"title":"Python功能模块","slug":"Languages/Python/learn9-utils","date":"2021-10-23T11:54:51.128Z","updated":"2021-10-23T11:54:51.128Z","comments":true,"path":"Languages/Python/learn9-utils.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn9-utils.md/","excerpt":"","text":"Python2 和 Python3 并存Python3 安装配置参考链接:https://www.cnblogs.com/gaoyuechen/p/8006365.html 安装完成后自带 pip 等 1234567891011121314151617181920# 下载包wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz# 解压tar xf Python-3.6.0.tgz# 配置安装信息 ./configure --prefix=/usr/local/python3/# 编译make &amp;&amp; make install# 配置环境变量新建文件vim /etc/profile.d/python3.shexport PATH=$PATH:/usr/local/python3/bin/执行一下下面命令export PATH=$PATH:/usr/local/python3/bin/# 验证python3Python 3.6.0 (default, Feb 1 2017, 14:56:52)[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; pip3 安装配置env3 安装配置判断数据类型第一种：typesimport typestype(x) is types.IntType # 判断是否 int 类型type(x) is types.StringType # 判断是否 string 类型 第二种： 超级恶心的模式，不推荐type(x) == type(1) # 判断是否 int 类型type(x) == type(“1”) # 判断是否 string 类型 第三种： isinstanceisinstance(对象,类型名或类型列表或元祖) –&gt; True/False例如：isinstance(“lst”,(int,str,list)) # True判断类型 “lst” 在 类型列表中 Python 代码建议1234from .. import优先使用import a 使用a.B有节制使用from a import B避免使用 from a import * Python -m xxx.py -m 使得一个模块像脚本一样运行namepackage Python 的* __ xx的区别①*函数名 意味着，此函数用于类内部，不属于 api ，等同于私有函数②函数名 ，用来避免子类覆盖其内容，意味着此函数不能被重写，继承等。仅仅用于类的内部使用，③xx函数，用于 Python 调用使用_one_underline 来表示该方法或属性是私有的，不属于 API；当创建一个用于 python 调用或一些特殊情况时，使用two_underline；使用just_to_underlines，来避免子类的重写！ 使用 join 连接字符 ,join 连接字符更高高效比+ ，尤其是大规模的字符串连接join 使用：‘xx’.join([str1,str2]) = str1xxstr2‘xx’.join([str1,str2,str3]) = str1xxstr2xxstr3 时间测试，代码的性能分析import timeit 生成测试所需的字符数组格式化字符串优先使用.format，而不是%s 等 .format 的使用方法 1.位置符号“ select _ from {0} where 1=1 {2} “.format(xx,yy) 2.使用名称“ select _ from {xx} where 1=1 {yy} “.format(xx=1,yy=1) 3.同过属性xx = 1yy = 2“ select * from {xx} where 1=1 {yy} “.format 4.格式化元组的具体项point = (1,3)‘x:{0[0]}; y:{0[1]}’.format(point).format 的优势使用灵活，可以作为参数传递，简便直观，%s 处理需要注意被格式化字符的格式而。format 不需要 通过字符串调用对象属性python 通过字符串调用对象属性或方法的实例讲解有时候需要将属性或方法作为参数传入，这个时候可以通过以下几种方式用字符串调用对象属性或方法 1234567891011121.evalIn [634]: def getmethod(x,char=&#x27;just for test&#x27;): ...: return eval(&#x27;str.%s&#x27; % x)(char) ...:In [635]: getmethod(&#x27;upper&#x27;)Out[635]: &#x27;JUST FOR TEST&#x27;2、getattrIn [650]: def getmethod2(x, char=&#x27;just for test&#x27;): ...: return getattr(char, x)() ...:In [651]: getmethod2(&#x27;upper&#x27;)Out[651]: &#x27;JUST FOR TEST&#x27; uuid [唯一标识符]UUID： 通用唯一标识符 ( Universally Unique Identifier )，对于所有的 UUID 它可以保证在空间和时间上的唯一性. 它是通过 MAC 地址、 时间戳、 命名空间、 随机数、 伪随机数来保证生成 ID 的唯一性,，有着固定的大小( 128 bit 位 )，通常由 32 字节的字符串(十六进制)表示。 它的唯一性和一致性特点，使得可以无需注册过程就能够产生一个新的 UUID；UUID 可以被用作多种用途, 既可以用来短时间内标记一个对象，也可以可靠的辨别网络中的持久性对象。 12345678910111213import uuid# uuid.uuid1 基于时间戳uuid.uuid1([node[, clock_seq]])node - 默认主机的硬件地址clock_seq 默认随机14位序列号# uuid.uuid3 基于名字的MD5散列值通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。uuid.uuid3(namespace, name)# uuid.uuid4 基于随机数由伪随机数得到，有一定重复概率，可以计算得到# uuid.uuid5() 基于名称的SHA-1散列值使用 Secure Hash Algorithm 1 算法 总结： 分布式环境: 建议 uuid1 名字唯一要求：建议 uuid3/uuid5 文字处理Levenshtein 文字距离import Levenshteinstr1 = ‘qwer1235’str2 = ‘qwe1235r’ 计算汉明距离，要求 str1 和 str2 必须长度一致。是描述两个等长字串之间对应位置上不同字符的个数Levenshtein.hamming(str1, str2) # Levenshtein.distance(str1,str2)计算编辑距离。是描述一个字符串转化成另一个字串最少的操作次数，在其中的操作包括插入、删除、替换。Levenshtein.distance(str1, str2) HTTP url转义12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879 空格 用%20代替 &quot; 用%22代替 # 用%23代替 % 用%25代替 &amp;用%26代替 ( 用%28代替 ) 用%29代替 + 用%2B代替 , 用%2C代替 / 用%2F代替 : 用%3A代替 ; 用%3B代替 &lt; 用%3C代替 = 用%3D代替 &gt; 用%3E代替 ? 用%3F代替 @ 用%40代替 \\ 用%5C代替 | 用%7C代替%E6%B2%B3%E6%BA%90python中关于url中特殊字符的编码和解码原创瞌睡的猫猫 最后发布于2018-06-07 18:44:25 阅读数 5627 收藏展开编码from urllib.parse import quotetext = quote(text, &#x27;utf-8&#x27;)12解码from urllib.parse import unquotetext = unquote(text, &#x27;utf-8&#x27;)12假如url = “https://www.baidu.com&quot;一个Ajax请求，url的字符”:”,”/”等需要转码才能传递那么就需要编码，代码如下from urllib.parse import quoteurl = &quot;https://www.baidu.com/&quot;url_encode = quote(url, &#x27;utf-8&#x27;)print(url_encode)1234反之，则为解码我们在解析网页中可能需要把一些特定的url解码出来以便直观显示等代码如下：from urllib.parse import unquotehref= &quot;https%3A%2F%2Fwww.baidu.com%2F&quot;url_encode = unquote(href, &#x27;utf-8&#x27;)print(url_encode)1234输出结果Python2中,对url解码 可以这样做：&gt;&gt;&gt; print urllib.unquote(&quot;%E6%B5%8B%E8%AF%95abc&quot;)python3取消unquote属性可以这样做：import urllib.parseprint(urllib.parse.unquote(&quot;%E6%B5%8B%E8%AF%95abc&quot;)) Python功能模块Python2 和 Python3 并存Python3 安装配置参考链接:https://www.cnblogs.com/gaoyuechen/p/8006365.html 安装完成后自带 pip 等 1234567891011121314151617181920# 下载包wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz# 解压tar xf Python-3.6.0.tgz# 配置安装信息 ./configure --prefix=/usr/local/python3/# 编译make &amp;&amp; make install# 配置环境变量新建文件vim /etc/profile.d/python3.shexport PATH=$PATH:/usr/local/python3/bin/执行一下下面命令export PATH=$PATH:/usr/local/python3/bin/# 验证python3Python 3.6.0 (default, Feb 1 2017, 14:56:52)[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; pip3 安装配置env3 安装配置判断数据类型第一种：typesimport typestype(x) is types.IntType # 判断是否 int 类型type(x) is types.StringType # 判断是否 string 类型 第二种： 超级恶心的模式，不推荐type(x) == type(1) # 判断是否 int 类型type(x) == type(“1”) # 判断是否 string 类型 第三种： isinstanceisinstance(对象,类型名或类型列表或元祖) –&gt; True/False例如：isinstance(“lst”,(int,str,list)) # True判断类型 “lst” 在 类型列表中 Python 代码建议1234from .. import优先使用import a 使用a.B有节制使用from a import B避免使用 from a import * Python -m xxx.py -m 使得一个模块像脚本一样运行namepackage Python 的* __ xx的区别①*函数名 意味着，此函数用于类内部，不属于 api ，等同于私有函数②函数名 ，用来避免子类覆盖其内容，意味着此函数不能被重写，继承等。仅仅用于类的内部使用，③xx函数，用于 Python 调用使用_one_underline 来表示该方法或属性是私有的，不属于 API；当创建一个用于 python 调用或一些特殊情况时，使用two_underline；使用just_to_underlines，来避免子类的重写！ 使用 join 连接字符 ,join 连接字符更高高效比+ ，尤其是大规模的字符串连接join 使用：‘xx’.join([str1,str2]) = str1xxstr2‘xx’.join([str1,str2,str3]) = str1xxstr2xxstr3 时间测试，代码的性能分析import timeit 生成测试所需的字符数组格式化字符串优先使用.format，而不是%s 等 .format 的使用方法 1.位置符号“ select _ from {0} where 1=1 {2} “.format(xx,yy) 2.使用名称“ select _ from {xx} where 1=1 {yy} “.format(xx=1,yy=1) 3.同过属性xx = 1yy = 2“ select * from {xx} where 1=1 {yy} “.format 4.格式化元组的具体项point = (1,3)‘x:{0[0]}; y:{0[1]}’.format(point).format 的优势使用灵活，可以作为参数传递，简便直观，%s 处理需要注意被格式化字符的格式而。format 不需要 通过字符串调用对象属性python 通过字符串调用对象属性或方法的实例讲解有时候需要将属性或方法作为参数传入，这个时候可以通过以下几种方式用字符串调用对象属性或方法 1234567891011121.evalIn [634]: def getmethod(x,char=&#x27;just for test&#x27;): ...: return eval(&#x27;str.%s&#x27; % x)(char) ...:In [635]: getmethod(&#x27;upper&#x27;)Out[635]: &#x27;JUST FOR TEST&#x27;2、getattrIn [650]: def getmethod2(x, char=&#x27;just for test&#x27;): ...: return getattr(char, x)() ...:In [651]: getmethod2(&#x27;upper&#x27;)Out[651]: &#x27;JUST FOR TEST&#x27; 获取目录下所有文件名称12345678file_dir = &quot;sss&quot;for root, dirs, files in os.walk(file_dir): print(root) #当前目录路径 print(dirs) #当前路径下所有子目录 print(files) #当前路径下所有非目录子文件 for filename in files: file_path = os.path.join(file_dir,filename) print file_path uuid [唯一标识符]UUID： 通用唯一标识符 ( Universally Unique Identifier )，对于所有的 UUID 它可以保证在空间和时间上的唯一性. 它是通过 MAC 地址、 时间戳、 命名空间、 随机数、 伪随机数来保证生成 ID 的唯一性,，有着固定的大小( 128 bit 位 )，通常由 32 字节的字符串(十六进制)表示。 它的唯一性和一致性特点，使得可以无需注册过程就能够产生一个新的 UUID；UUID 可以被用作多种用途, 既可以用来短时间内标记一个对象，也可以可靠的辨别网络中的持久性对象。 12345678910111213import uuid# uuid.uuid1 基于时间戳uuid.uuid1([node[, clock_seq]])node - 默认主机的硬件地址clock_seq 默认随机14位序列号# uuid.uuid3 基于名字的MD5散列值通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。uuid.uuid3(namespace, name)# uuid.uuid4 基于随机数由伪随机数得到，有一定重复概率，可以计算得到# uuid.uuid5() 基于名称的SHA-1散列值使用 Secure Hash Algorithm 1 算法 总结： 分布式环境: 建议 uuid1 名字唯一要求：建议 uuid3/uuid5 文字处理Levenshtein 文字距离import Levenshteinstr1 = ‘qwer1235’str2 = ‘qwe1235r’ 计算汉明距离，要求 str1 和 str2 必须长度一致。是描述两个等长字串之间对应位置上不同字符的个数Levenshtein.hamming(str1, str2) # Levenshtein.distance(str1,str2)计算编辑距离。是描述一个字符串转化成另一个字串最少的操作次数，在其中的操作包括插入、删除、替换。Levenshtein.distance(str1, str2) HTTP url转义12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788 空格 用%20代替 &quot; 用%22代替 # 用%23代替 % 用%25代替 &amp;用%26代替 ( 用%28代替 ) 用%29代替 + 用%2B代替 , 用%2C代替 / 用%2F代替 : 用%3A代替 ; 用%3B代替 &lt; 用%3C代替 = 用%3D代替 &gt; 用%3E代替 ? 用%3F代替 @ 用%40代替 \\ 用%5C代替 | 用%7C代替%E6%B2%B3%E6%BA%90python中关于url中特殊字符的编码和解码原创瞌睡的猫猫 最后发布于2018-06-07 18:44:25 阅读数 5627 收藏展开编码from urllib.parse import quotetext = quote(text, &#x27;utf-8&#x27;)12解码from urllib.parse import unquotetext = unquote(text, &#x27;utf-8&#x27;)12假如url = “https://www.baidu.com&quot;一个Ajax请求，url的字符”:”,”/”等需要转码才能传递那么就需要编码，代码如下from urllib.parse import quoteurl = &quot;https://www.baidu.com/&quot;url_encode = quote(url, &#x27;utf-8&#x27;)print(url_encode)1234反之，则为解码我们在解析网页中可能需要把一些特定的url解码出来以便直观显示等代码如下：from urllib.parse import unquotehref= &quot;https%3A%2F%2Fwww.baidu.com%2F&quot;url_encode = unquote(href, &#x27;utf-8&#x27;)print(url_encode)1234输出结果https://www.baidu.com/————————————————版权声明：本文为CSDN博主「瞌睡的猫猫」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/sinat_35886587/article/details/80613618Python2中,对url解码 可以这样做：&gt;&gt;&gt; print urllib.unquote(&quot;%E6%B5%8B%E8%AF%95abc&quot;)python3取消unquote属性可以这样做：import urllib.parseprint(urllib.parse.unquote(&quot;%E6%B5%8B%E8%AF%95abc&quot;)) title: Python-进阶知识点tipsurl_path: python/advance/tipstags: python python-进阶 ★★★★★categories: python python-进阶description: 进阶 autoauto - [Python2 和 Python3 并存](#python2-和-python3-并存)auto - [Python3 安装配置](#python3-安装配置)auto - [pip3 安装配置](#pip3-安装配置)auto - [env3 安装配置](#env3-安装配置)auto - [判断数据类型](#判断数据类型)auto - [Python 代码建议](#python-代码建议)auto - [生成测试所需的字符数组](#生成测试所需的字符数组)auto - [通过字符串调用对象属性](#通过字符串调用对象属性)auto - [uuid [唯一标识符]](#uuid-唯一标识符)auto - [文字处理](#文字处理)auto - [Levenshtein 文字距离](#levenshtein-文字距离)auto - [HTTP `url转义`](#http-url转义)auto- [Python功能模块](#python功能模块)auto - [Python2 和 Python3 并存](#python2-和-python3-并存-1)auto - [Python3 安装配置](#python3-安装配置-1)auto - [pip3 安装配置](#pip3-安装配置-1)auto - [env3 安装配置](#env3-安装配置-1)auto - [判断数据类型](#判断数据类型-1)auto - [Python 代码建议](#python-代码建议-1)auto - [生成测试所需的字符数组](#生成测试所需的字符数组-1)auto - [通过字符串调用对象属性](#通过字符串调用对象属性-1)auto - [获取目录下所有文件名称](#获取目录下所有文件名称)auto - [uuid [唯一标识符]](#uuid-唯一标识符-1)auto - [文字处理](#文字处理-1)auto - [Levenshtein 文字距离](#levenshtein-文字距离-1)auto - [HTTP `url转义`](#http-url转义-1)auto - [魔法函数](#魔法函数)auto - [高级特性/语法糖](#高级特性语法糖)auto - [进阶知识点](#进阶知识点)auto - [函数式编程](#函数式编程)auto - [高阶函数](#高阶函数)auto - [匿名函数](#匿名函数)auto - [闭包](#闭包)auto - [python 循环中不包含域的概念](#python-循环中不包含域的概念)auto - [装饰器](#装饰器)auto - [偏函数](#偏函数)auto - [模块和包的概念](#模块和包的概念)auto - [Python 面向对象编程](#python-面向对象编程)auto - [类属性](#类属性)auto - [实例方法](#实例方法)auto - [类方法](#类方法)auto - [类的继承](#类的继承)auto - [判断类型](#判断类型)auto - [多态](#多态)auto - [多重继承](#多重继承)auto - [获取对象信息](#获取对象信息)auto - [特殊方法](#特殊方法)auto - [动态获取函数变量等](#动态获取函数变量等)auto - [小知识点 Tips](#小知识点-tips)auto - [打包与解包](#打包与解包)auto - [json 序列化](#json-序列化)auto - [`_xxx`,`__xxx`和`__xxx__`的区别](#_xxx__xxx和__xxx__的区别)auto - [其他知识](#其他知识)auto - [参考资源](#参考资源)autoauto 魔法函数高级特性/语法糖Python 高级特性，对于 Python 知识上限和优雅高效代码所必需的，是 Python 程序员从初级到高级不可缺少的知识历程。 进阶知识点函数式编程Python 支持的函数式编程 A.不是纯函数式编程:允许有变量(纯函数式编程:不需要变量,没有副作用,测试简单 B.支持高阶函数:函数可以作为变量传入 C.支持闭包:有了闭包就能返回函数 D.有限度地支持匿名函数 支持函数式编程，函数式编程的特点@偏向于计算，而非指令，把计算视为函数而非指令@不需要变量，无副作用，测试简单@支持高阶函数，代码简洁 python 函数式编程的特点：@不是纯函数式编程，可以有变量@支持高阶函数，允许函数作为变量传入@允许闭包，有了闭包就有返回函数@有限度的支持匿名函数 高阶函数@变量可以指向函数@函数的参数可以接收变量@一个函数可以接收另一个函数作为参数@能接收函数作参数就是高阶参数 能接收函数作参数的函数就是高阶函数 常见的高阶函数 map() reduce() filter() sorted() TODO 所有高阶函数清单，部分用法等 123456789101112#map函数，对单个参数进行处理L = list(range(10))print(list(map(lambda x : x*x, L)))#在Python 3里,reduce()函数已经被从全局名字空间里移除了,它现在被放置在fucntools模块里用的话要 先引入：对两个参数进行处理from functools import reduceprint (reduce(lambda x,y: x-y, [1,2,3,4,5]))#filter()函数：过滤函数，返回符合条件的新的列表def is_odd(x): return x % 2 == 1filter(is_odd, [1, 4, 6, 7, 9, 12, 17]) 匿名函数@高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便 1lambda x: x * 2 闭包Python 的函数不但可以返回 int,str,list,dict 等数据类型,还可以返回函数 Python 中闭包,在函数内部定义的函数和外部定义的函数式一样的,只是无法被外部访问,如果有被定义在外函数内部的情况,并且内层函数引用了外层函数的参数,然后返回内层函数的情况,我们称为闭包. 闭包的特点是返回的函数还引用了外层函数的局部变量,所以要正确地使用闭包,就要确保引用的局部变量在函数返回后不能变. 闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包 Python 闭包，类似于 子函数 python 循环中不包含域的概念12345678910111213# python循环中不包含域的概念func_lis = []for i in range(4): def func(x): return x*i func_lis.append(func)for f in func_lis: print(f(2))# 6# 6# 6# 6loop在python中是没有域的概念的，flist在像列表中添加func的时候，并没有保存i的值，而是当执行f(2)的时候才去取，这时候循环已经结束，i的值是3，所以结果都是6 装饰器Python 内置的@语法就是为了简化装饰器调用 偏函数函数在执行时，要带上所有必要的参数进行调用。但是，有时参数可以在函数被调用之前提前获知。这种情况下，一个函数有一个或多个参数预先就能用上，以便函数能用更少的参数进行调用。 偏函数是将所要承载的函数作为 partial()函数的第一个参数，原函数的各个参数依次作为 partial()函数后续的参数，除非使用关键字参数。 123456789from functools import partialdef mod( n, m ): return n % mmod_by_100 = partial( mod, 100 )print mod( 100, 7 ) # 2print mod_by_100( 7 ) # 2 模块和包的概念包就是文件夹,模块名就是.py 包下面有个init.py 这样 python 才会当做包来处理 Python 面向对象编程TODO 面向对象编程是一种程序设计范式 把程序看做不同对象的相互调用 对现实世界建立对象模型 基本思想 类用于定义抽象类型 实例根据类的定义被创建出来 最重要的思想:数据封装 由于 Python 是动态语言，对每一个实例，都可以直接给他们的属性赋值 可以给一个实例绑定很多属性,如果不希望被外部访问到,可以用双下划线开头,该属性就无法被外部访问.但是如果一个属性以 xxx的形式定义,则又可以被外部访问了,以xxx定义的属性在 python 的类中被称为特殊属性,有很多预定义的特殊属性可以使用,通常不把普通属性用xxx__定义 类属性类里面属性分为 类属性(独有一份)和实例属性(每个实例都会有一份)。 当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性 实例方法实例的方法就是在类中定义的函数，它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的：在实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得，这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。 在 class 中定义的实例方法其实也是属性,实际上是一个函数对象,因为方法也是一个属性,所以它也可以动态地添加到实例上,只是需要用 type.MethodType()把一个函数变为一个方法 类方法和属性类似,方法也分实例方法和类方法.在 class 中定义的全部是实例方法,实例方法第一个参数 self 是实例本身.通过标记@classmethod 该方法将绑定到类上,而非类的实例上,该方法的第一个参数将传入类本身,通常将参数名命名为 cls,因为是在类上调用,而非实例上调用,因此类方法无法获取任何实例变量,只能获得类的引用 123456# @classmethod 指定类方法class Person(object): count = 0 @classmethod def how_many(cls): return cls.count 类的继承子类和父类是 is 关系,总是从某各类继承 如果没有合适的就从 object 继承,不能忘记调用 super().init 如果已经定义了 Person 类，需要定义新的 Student 和 Teacher 类时，可以直接从 Person 类继承： 1234class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender 定义 Student 类时，只需要把额外的属性加上，例如 score： 1234class Student(Person): def __init__(self, name, gender, score): super(Student, self).__init__(name, gender) self.score = score 一定要用 super(Student, self).__init__(name, gender) 去初始化父类，否则，继承自 Person 的 Student 将没有 name 和 gender。 函数super(Student, self)将返回当前类继承的父类，即 Person ，然后调用__init__()方法，注意 self 参数已在 super()中传入，在__init__()中将隐式传递，不需要写出(也不能写)。 判断类型判断数据类型 1isinstance(&quot;ss&quot;, (str,list) ) TODO 判断实例类似等等 继承链上，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法,一个实例可以看成它本身的类型，也可以看成它父类的类型。 多态TODO 多重继承获取对象信息isinstance()判断是否是某种类型的实例外 type()函数获取变量的类型,返回一个 Type 对象 dir()函数获取变量的所有属性 getattr()获取属性值 setattr()设置属性值 特殊方法又名魔法方法、魔法函数等等 详见 博客内文章 Python 魔法函数 动态获取函数变量等动态获取当前运行的函数名 123456789# 在函数外部时，获取函数名称func.__name__# 在函数内部时，获取函数名称sys._getframe().f_code.co_name# 在类内部时，获取类名称self.__class__.name inspect模块 动态获取当前运行的函数名称 12345678910111213141516171819202122# coding:utf-8import inspectdef get__function_name(): &#x27;&#x27;&#x27;获取正在运行函数(或方法)名称&#x27;&#x27;&#x27; return inspect.stack()[1][3]def yoyo(): print(&quot;函数名称：%s&quot;%get__function_name())class Yoyo(): def yoyoketang(self): &#x27;&#x27;&#x27;# 上海-悠悠 QQ群：588402570&#x27;&#x27;&#x27; print(&quot;获取当前类名称.方法名：%s.%s&quot; % (self.__class__.__name__, get__function_name()))if __name__ == &quot;__main__&quot;: yoyo() Yoyo().yoyoketang()# 运行结果：函数名称：yoyo获取当前类名称.方法名：Yoyo.yoyoketang 动态创建函数 小知识点 Tips打包与解包123x, y ,*z = list(range(0,10))zip([[1,2],[2,3]]) json 序列化1234json.loads()json.dumps() _xxx,__xxx和__xxx__的区别(1)单下划线 _xxx “单下划线”开始的成员函数和成员变量都是公开的(public)(但是约定俗成以此开头来设计私有函数/变量，尽管其是 public，理解，即只是标明，标记)。即类实例和子类实例都可以访问此中变量，但是需通过类提供的接口进行访问，不能用from xxx import *导入 (2)双下划线 __xxx 从表象上看可以当做类中的私有变量/方法名，表示私有成员，即只有类对象自己才能访问，其自身的类实例或是其子类也不能访问。 Python 设计此的真正目的仅仅是为了避免子类覆盖父类的方法。 (3)__xxx__ 系统定义名字，前后均有一个”双下划线”是代表 python 里特殊方法专用的表示，如init()代表类的构造函数 类的下划线命令区别 xx：共有变量。 _xx：私有化的属性或方法，from xxx import * 时无法导入，子类的对象和子类可以访问。 __xx：避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)。 __ xx __ ：双前后下划线,用户名字空间的魔法对象或属性。例如: __init__ , 不要自己发明这样的名字。 xx_：单后置下划线,用于避免与 Python 关键词的冲突。 其他知识map filter reduce __solts__ 来给定固定集合的属性分配空间,适合固定少属性的类,可以大量减少内存消耗 1234567891011# Python默认采用字典来保存类的实例属性，但对于小类来说，会浪费内存空间# 可以使用 __solts__ 来给定固定集合的属性分配空间，不采用字典，可以减少约50%的内存消耗class MyClass(object): __solts__ = [&#x27;name&#x27;, &#x27;cert&#x27;] def __init__(self, name=None, cert=None): self.name = name self.crt = cert# 监测内存使用https://github.com/ianozsvald/ipython_memory_usage collections 容器模块 123456defaultdictcounterdequenamedtupleenum.Enum inspect 获取活跃对象的信息 12345678910111213# for .. else 语句 用于捕获for循环是正常结束还是break跳出# else 在循环正常结束时调用，break跳出循环时不会调用。test_num = 5for n in range(0,10): if n == test_num: print(&#x27;&gt;&gt;&gt; 11&#x27;) breakelse: print(&#x27;&gt;&gt;&gt; 22&#x27;)# test_num = 5 时，break跳出循环 打印 11# test_num = 20 时，循环解除，打印 22 协程 - yield 1234567891011121314函数缓存,将一个函数的返回值快速的缓存或取消缓存。适用于 IO密集型的函数 频繁使用相同参数调用时，可以节省大量时间。from functools import lru_cache# maxsize 最多缓存最近多少个返回值@lru_cache(maxsize=22)def fib(n): if n &lt; 2: return n return fib(n-1) + fib(n-2)print([fib(n) for n in range(100)]) 123456789101112131415161718192021222324252627282930313233343536373839# 上下文管理器# 方式1 with语句 例如 with open# 方式2 使用类来做上下文管理器# 方式3 基于生成器来实现# with open 方式with open(&#x27;aa.csv&#x27;, &#x27;wb&#x27;) as file_obj: file_obj.write(b&#x27;demo&#x27;)# Python 3.7.4# 类方式class File(object): def __init__(self, file_name, method): self.file_obj = open(file_name, method) def __enter__(self): return self.file_obj def __exit__(self, type, value, traceback): if value is not None: print(type) print(value) self.file_obj.close() return Truewith File(&#x27;a.csv&#x27;, &#x27;wb&#x27;) as file_obj: file_obj.write(b&#x27;demo&#x27;)# 生成器方式from contextlib import contextmanager@contextmanagerdef open_file(name, method): f = open(name, method) yield f f.close 参考资源 python 进阶知识点 title: Python常用基础命令url_path: python/base/常用命令tags: python python-基础categories: python python-基础description: Python常用基础命令 获取 os.system(cmd)的执行结果123456789由于os.system是没有返回值的，获取返回值有以下三种方式：1.使用commands内置模块import commandsresp = commands.getoutput(&quot;hostname&quot;)2.使用os.popen获取返回值resp = os.popen(&#x27;ps -ef | grep sssss&#x27;).readlines()3.使用subprocess内置模块from subprocess import Popen,PIPEresp = Popen(&quot;ps -ef | grep sssss&quot;,shell=True,stdout=PIPE,stderr=PIPE).stdout.readlines() print 同行替换输出 输出信息再同一行 进度条显示1234567891011121314151617# python3&gt;&gt;&gt; import time&gt;&gt;&gt; for x in range(10):... time.sleep(1)... print(&quot;Progress &#123;:2.1%&#125;&quot;.format(x / 10), end=&quot;\\r&quot;)# 下列三行信息输出在同一行Progress 30.0%Progress 50.0%&gt;&gt;&gt; ress 90.0%# python2import timeimport sysfor x in range(5): time.sleep(1) msg = &quot;&gt;&gt;&gt;&gt; %s\\r&quot;%str(x) sys.stdout.write(msg) sys.stdout.flush() python 文件传入 参数1234#! /bin/pythonimport sysfor arg in sys.argv: print arg Python 生成 md51234567import md5src = &#x27;this is a md5 test.&#x27;m1 = md5.new()m1.update(src)print m1.hexdigest() Excel 处理在用 xlrd.open_workbook 时，添加对应的参数 formatting_info=True，就可以保留原有格式了 python 通过字符串调用对象属性或方法的实例讲解12345678910111213141516# evaldef getmethod(x,char=&#x27;just for test&#x27;): return eval(&#x27;str.%s&#x27; % x)(char)In [635]: getmethod(&#x27;upper&#x27;)Out[635]: &#x27;JUST FOR TEST&#x27;# getattrIn [650]: def getmethod2(x, char=&#x27;just for test&#x27;):...: return getattr(char, x)()...:In [651]: getmethod2(&#x27;upper&#x27;)Out[651]: &#x27;JUST FOR TEST&#x27;# 利用内置库operatorIn [648]: def getmethod3(x, char=&#x27;just for test&#x27;):...: return operator.methodcaller(x, char)(str)...:In [649]: getmethod3(&#x27;upper&#x27;)Out[649]: &#x27;JUST FOR TEST&#x27; 使用 traceback 获取栈信息traceback.print_exc()获取详细的程序异常信息。程序运行异常时会输出完整的栈信息，包括调用顺序、异常发生的语句、错误类型等。import tarceback try:f()except IndexError as ex:print “程序异常”print exprint traceback.print_exc()#1.错误类型(IndexError)、错误对应的值(list index out of range)、具体的 trace 信息(文件名 行号 函数名 对应的代码) sys.exc_info() 使用 dir 获取模块的方法 dir()dir(traceback) 美化打印123# Python的美化打印 特别是打印 嵌套字典时非常好用from prettyprinter import cpprintcpprint(stats_info_data) Python-tips 小知识点tags: 202101 title: Python-进阶知识点 tipsurl_path: python/advance/tipstags: python python-进阶 ★★★★★categories: python python-进阶description: 进阶 Python功能模块 Python2 和 Python3 并存 Python3 安装配置 pip3 安装配置 env3 安装配置 判断数据类型 Python 代码建议 生成测试所需的字符数组 通过字符串调用对象属性 获取目录下所有文件名称 uuid [唯一标识符] 文字处理 Levenshtein 文字距离 HTTP url转义 description: 进阶 魔法函数 高级特性/语法糖 进阶知识点 函数式编程 高阶函数 匿名函数 闭包 python 循环中不包含域的概念 装饰器 偏函数 模块和包的概念 Python 面向对象编程 类属性 实例方法 类方法 类的继承 判断类型 多态 多重继承 获取对象信息 特殊方法 动态获取函数变量等 小知识点 Tips 打包与解包 json 序列化 _xxx,__xxx和__xxx__的区别 其他知识 参考资源 description: Python常用基础命令 获取 os.system(cmd)的执行结果 print 同行替换输出 输出信息再同一行 进度条显示 python 文件传入 参数 Python 生成 md5 Excel 处理 python 通过字符串调用对象属性或方法的实例讲解 使用 traceback 获取栈信息 使用 dir 获取模块的方法 dir() 美化打印 Python-tips 小知识点 魔法函数 高级特性/语法糖 进阶知识点 函数式编程 高阶函数 匿名函数 闭包 python 循环中不包含域的概念 装饰器 偏函数 模块和包的概念 Python 面向对象编程 类属性 实例方法 类方法 类的继承 判断类型 多态 多重继承 获取对象信息 特殊方法 动态获取函数变量等 小知识点 Tips 打包与解包 json 序列化 _xxx,__xxx和__xxx__的区别 其他知识 参考资源 Python 之大坑 Python 之坑 不要使用可变对象作为函数默认值 生成器不保留迭代过后的结果 可变对象之坑 is 和 == 的差异 已修复的坑 description: Python常用基础命令 获取 os.system(cmd)的执行结果 print 同行替换输出 输出信息再同一行 进度条显示 python 文件传入 参数 Python 生成 md5 Excel 处理 python 通过字符串调用对象属性或方法的实例讲解 使用 traceback 获取栈信息 使用 dir 获取模块的方法 dir() 美化打印 魔法函数高级特性/语法糖Python 高级特性，对于 Python 知识上限和优雅高效代码所必需的，是 Python 程序员从初级到高级不可缺少的知识历程。 进阶知识点函数式编程Python 支持的函数式编程 A.不是纯函数式编程:允许有变量(纯函数式编程:不需要变量,没有副作用,测试简单 B.支持高阶函数:函数可以作为变量传入 C.支持闭包:有了闭包就能返回函数 D.有限度地支持匿名函数 支持函数式编程，函数式编程的特点@偏向于计算，而非指令，把计算视为函数而非指令@不需要变量，无副作用，测试简单@支持高阶函数，代码简洁 python 函数式编程的特点：@不是纯函数式编程，可以有变量@支持高阶函数，允许函数作为变量传入@允许闭包，有了闭包就有返回函数@有限度的支持匿名函数 高阶函数@变量可以指向函数@函数的参数可以接收变量@一个函数可以接收另一个函数作为参数@能接收函数作参数就是高阶参数 能接收函数作参数的函数就是高阶函数 常见的高阶函数 map() reduce() filter() sorted() TODO 所有高阶函数清单，部分用法等 123456789101112#map函数，对单个参数进行处理L = list(range(10))print(list(map(lambda x : x*x, L)))#在Python 3里,reduce()函数已经被从全局名字空间里移除了,它现在被放置在fucntools模块里用的话要 先引入：对两个参数进行处理from functools import reduceprint (reduce(lambda x,y: x-y, [1,2,3,4,5]))#filter()函数：过滤函数，返回符合条件的新的列表def is_odd(x): return x % 2 == 1filter(is_odd, [1, 4, 6, 7, 9, 12, 17]) 匿名函数@高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便 1lambda x: x * 2 闭包Python 的函数不但可以返回 int,str,list,dict 等数据类型,还可以返回函数 Python 中闭包,在函数内部定义的函数和外部定义的函数式一样的,只是无法被外部访问,如果有被定义在外函数内部的情况,并且内层函数引用了外层函数的参数,然后返回内层函数的情况,我们称为闭包. 闭包的特点是返回的函数还引用了外层函数的局部变量,所以要正确地使用闭包,就要确保引用的局部变量在函数返回后不能变. 闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包 Python 闭包，类似于 子函数 python 循环中不包含域的概念12345678910111213# python循环中不包含域的概念func_lis = []for i in range(4): def func(x): return x*i func_lis.append(func)for f in func_lis: print(f(2))# 6# 6# 6# 6loop在python中是没有域的概念的，flist在像列表中添加func的时候，并没有保存i的值，而是当执行f(2)的时候才去取，这时候循环已经结束，i的值是3，所以结果都是6 装饰器Python 内置的@语法就是为了简化装饰器调用 偏函数函数在执行时，要带上所有必要的参数进行调用。但是，有时参数可以在函数被调用之前提前获知。这种情况下，一个函数有一个或多个参数预先就能用上，以便函数能用更少的参数进行调用。 偏函数是将所要承载的函数作为 partial()函数的第一个参数，原函数的各个参数依次作为 partial()函数后续的参数，除非使用关键字参数。 123456789from functools import partialdef mod( n, m ): return n % mmod_by_100 = partial( mod, 100 )print mod( 100, 7 ) # 2print mod_by_100( 7 ) # 2 模块和包的概念包就是文件夹,模块名就是.py 包下面有个init.py 这样 python 才会当做包来处理 Python 面向对象编程TODO 面向对象编程是一种程序设计范式 把程序看做不同对象的相互调用 对现实世界建立对象模型 基本思想 类用于定义抽象类型 实例根据类的定义被创建出来 最重要的思想:数据封装 由于 Python 是动态语言，对每一个实例，都可以直接给他们的属性赋值 可以给一个实例绑定很多属性,如果不希望被外部访问到,可以用双下划线开头,该属性就无法被外部访问.但是如果一个属性以 xxx的形式定义,则又可以被外部访问了,以xxx定义的属性在 python 的类中被称为特殊属性,有很多预定义的特殊属性可以使用,通常不把普通属性用xxx__定义 类属性类里面属性分为 类属性(独有一份)和实例属性(每个实例都会有一份)。 当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性 实例方法实例的方法就是在类中定义的函数，它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的：在实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得，这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。 在 class 中定义的实例方法其实也是属性,实际上是一个函数对象,因为方法也是一个属性,所以它也可以动态地添加到实例上,只是需要用 type.MethodType()把一个函数变为一个方法 类方法和属性类似,方法也分实例方法和类方法.在 class 中定义的全部是实例方法,实例方法第一个参数 self 是实例本身.通过标记@classmethod 该方法将绑定到类上,而非类的实例上,该方法的第一个参数将传入类本身,通常将参数名命名为 cls,因为是在类上调用,而非实例上调用,因此类方法无法获取任何实例变量,只能获得类的引用 123456# @classmethod 指定类方法class Person(object): count = 0 @classmethod def how_many(cls): return cls.count 类的继承子类和父类是 is 关系,总是从某各类继承 如果没有合适的就从 object 继承,不能忘记调用 super().init 如果已经定义了 Person 类，需要定义新的 Student 和 Teacher 类时，可以直接从 Person 类继承： 1234class Person(object): def __init__(self, name, gender): self.name = name self.gender = gender 定义 Student 类时，只需要把额外的属性加上，例如 score： 1234class Student(Person): def __init__(self, name, gender, score): super(Student, self).__init__(name, gender) self.score = score 一定要用 super(Student, self).__init__(name, gender) 去初始化父类，否则，继承自 Person 的 Student 将没有 name 和 gender。 函数super(Student, self)将返回当前类继承的父类，即 Person ，然后调用__init__()方法，注意 self 参数已在 super()中传入，在__init__()中将隐式传递，不需要写出(也不能写)。 判断类型判断数据类型 1isinstance(&quot;ss&quot;, (str,list) ) TODO 判断实例类似等等 继承链上，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法,一个实例可以看成它本身的类型，也可以看成它父类的类型。 多态TODO 多重继承获取对象信息isinstance()判断是否是某种类型的实例外 type()函数获取变量的类型,返回一个 Type 对象 dir()函数获取变量的所有属性 getattr()获取属性值 setattr()设置属性值 特殊方法又名魔法方法、魔法函数等等 详见 博客内文章 Python 魔法函数 动态获取函数变量等动态获取当前运行的函数名 123456789# 在函数外部时，获取函数名称func.__name__# 在函数内部时，获取函数名称sys._getframe().f_code.co_name# 在类内部时，获取类名称self.__class__.name inspect模块 动态获取当前运行的函数名称 12345678910111213141516171819202122# coding:utf-8import inspectdef get__function_name(): &#x27;&#x27;&#x27;获取正在运行函数(或方法)名称&#x27;&#x27;&#x27; return inspect.stack()[1][3]def yoyo(): print(&quot;函数名称：%s&quot;%get__function_name())class Yoyo(): def yoyoketang(self): &#x27;&#x27;&#x27;# 上海-悠悠 QQ群：588402570&#x27;&#x27;&#x27; print(&quot;获取当前类名称.方法名：%s.%s&quot; % (self.__class__.__name__, get__function_name()))if __name__ == &quot;__main__&quot;: yoyo() Yoyo().yoyoketang()# 运行结果：函数名称：yoyo获取当前类名称.方法名：Yoyo.yoyoketang 动态创建函数 小知识点 Tips打包与解包123x, y ,*z = list(range(0,10))zip([[1,2],[2,3]]) json 序列化1234json.loads()json.dumps() _xxx,__xxx和__xxx__的区别(1)单下划线 _xxx “单下划线”开始的成员函数和成员变量都是公开的(public)(但是约定俗成以此开头来设计私有函数/变量，尽管其是 public，理解，即只是标明，标记)。即类实例和子类实例都可以访问此中变量，但是需通过类提供的接口进行访问，不能用from xxx import *导入 (2)双下划线 __xxx 从表象上看可以当做类中的私有变量/方法名，表示私有成员，即只有类对象自己才能访问，其自身的类实例或是其子类也不能访问。 Python 设计此的真正目的仅仅是为了避免子类覆盖父类的方法。 (3)__xxx__ 系统定义名字，前后均有一个”双下划线”是代表 python 里特殊方法专用的表示，如init()代表类的构造函数 类的下划线命令区别 xx：共有变量。 _xx：私有化的属性或方法，from xxx import * 时无法导入，子类的对象和子类可以访问。 __xx：避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)。 __ xx __ ：双前后下划线,用户名字空间的魔法对象或属性。例如: __init__ , 不要自己发明这样的名字。 xx_：单后置下划线,用于避免与 Python 关键词的冲突。 其他知识map filter reduce __solts__ 来给定固定集合的属性分配空间,适合固定少属性的类,可以大量减少内存消耗 1234567891011# Python默认采用字典来保存类的实例属性，但对于小类来说，会浪费内存空间# 可以使用 __solts__ 来给定固定集合的属性分配空间，不采用字典，可以减少约50%的内存消耗class MyClass(object): __solts__ = [&#x27;name&#x27;, &#x27;cert&#x27;] def __init__(self, name=None, cert=None): self.name = name self.crt = cert# 监测内存使用https://github.com/ianozsvald/ipython_memory_usage collections 容器模块 123456defaultdictcounterdequenamedtupleenum.Enum inspect 获取活跃对象的信息 12345678910111213# for .. else 语句 用于捕获for循环是正常结束还是break跳出# else 在循环正常结束时调用，break跳出循环时不会调用。test_num = 5for n in range(0,10): if n == test_num: print(&#x27;&gt;&gt;&gt; 11&#x27;) breakelse: print(&#x27;&gt;&gt;&gt; 22&#x27;)# test_num = 5 时，break跳出循环 打印 11# test_num = 20 时，循环解除，打印 22 协程 - yield 1234567891011121314函数缓存,将一个函数的返回值快速的缓存或取消缓存。适用于 IO密集型的函数 频繁使用相同参数调用时，可以节省大量时间。from functools import lru_cache# maxsize 最多缓存最近多少个返回值@lru_cache(maxsize=22)def fib(n): if n &lt; 2: return n return fib(n-1) + fib(n-2)print([fib(n) for n in range(100)]) 123456789101112131415161718192021222324252627282930313233343536373839# 上下文管理器# 方式1 with语句 例如 with open# 方式2 使用类来做上下文管理器# 方式3 基于生成器来实现# with open 方式with open(&#x27;aa.csv&#x27;, &#x27;wb&#x27;) as file_obj: file_obj.write(b&#x27;demo&#x27;)# Python 3.7.4# 类方式class File(object): def __init__(self, file_name, method): self.file_obj = open(file_name, method) def __enter__(self): return self.file_obj def __exit__(self, type, value, traceback): if value is not None: print(type) print(value) self.file_obj.close() return Truewith File(&#x27;a.csv&#x27;, &#x27;wb&#x27;) as file_obj: file_obj.write(b&#x27;demo&#x27;)# 生成器方式from contextlib import contextmanager@contextmanagerdef open_file(name, method): f = open(name, method) yield f f.close 参考资源 python 进阶知识点 Python 之大坑环境说明: python 3.8.3 Python 之大坑清单: 可变对象 不要使用可变对象作为函数默认值 迭代函数中,可变对象需要使用深拷贝赋值! 说明：很多原有Python2.7的 bug 在Python3.8中已经修复了 Python 之坑不要使用可变对象作为函数默认值123456789101112def append(value, arr=[]): arr.append(value) return arrprint append(1)print append(1)print append(1)# 返回结果[1][1, 1][1, 1, 1] 原因是模块在加载的时候，arr 定义指向了一个空的列表的地址，以后再次调用时，不是我们理解的再给 arr 分配一个新的空的列表，而是一直指向的同一个地址的列表，如果列表内容变了其引用也跟着变了。定义默认参数要 默认参数必须指向不可变对象！！！ 生成器不保留迭代过后的结果1234567gen = (i for i in range(5))print (1 in gen)print (1 in gen)# 运行结果：TrueFalse 原因是生成器中的值一旦使用过后，就不再保留了。这个是生成器的原理导致的，生成器不像列表，一开始就把值都初始化好了，而是每次用到的时候生成一个。 解决方法： 12345678gen = (i for i in range(5))arr = list(gen) # 转成 list 或 tupleprint (1 in arr)print (1 in arr)# 运行结果：TrueTrue 可变对象之坑原代码样例 123456789101112131415161718192021222324252627282930import copydef generate_info(mark, num=3, data=[]): # data2 = copy.deepcopy(data) data2 = data print(f&#x27;&gt;&gt; 标记信息 Mark: &#123;mark&#125; num:&#123;num&#125;&#x27;) query_data = [&#123; &#x27;mark&#x27;: mark, &#x27;num&#x27;: num, &#125;] data2.extend(query_data) if num &gt;= 1: num = num - 1 data2 = generate_info(mark, num, copy.deepcopy(data2)) return data2for i in range(0, 2): tmp_data = generate_info(i, i) for tmp in tmp_data: print(tmp)# 运行结果&gt;&gt; 标记信息 Mark: 0 num:0&#123;&#x27;mark&#x27;: 0, &#x27;num&#x27;: 0&#125;&gt;&gt; 标记信息 Mark: 1 num:1&gt;&gt; 标记信息 Mark: 1 num:0&#123;&#x27;mark&#x27;: 0, &#x27;num&#x27;: 0&#125;&#123;&#x27;mark&#x27;: 1, &#x27;num&#x27;: 1&#125;&#123;&#x27;mark&#x27;: 1, &#x27;num&#x27;: 0&#125;# !!! 异常点i == 2时，返回值包含了 i==1 的值 修改方案：不要使用可变对象作为函数默认值!!! 1234567891011121314151617181920212223242526272829import copy# def generate_info(mark, num=3, data=[]):def generate_info(mark, num=3, data=None): data2 = data if data is not None else [] # data2 = copy.deepcopy(data) # data2 = data print(f&#x27;&gt;&gt; 标记信息 Mark: &#123;mark&#125; num:&#123;num&#125;&#x27;) query_data = [&#123; &#x27;mark&#x27;: mark, &#x27;num&#x27;: num, &#125;] data2.extend(query_data) if num &gt;= 1: num = num - 1 data2 = generate_info(mark, num, copy.deepcopy(data2)) return data2for i in range(0, 2): tmp_data = generate_info(i, i) for tmp in tmp_data: print(tmp)# 返回结果正常&gt;&gt; 标记信息 Mark: 0 num:0&#123;&#x27;mark&#x27;: 0, &#x27;num&#x27;: 0&#125;&gt;&gt; 标记信息 Mark: 1 num:1&gt;&gt; 标记信息 Mark: 1 num:0&#123;&#x27;mark&#x27;: 1, &#x27;num&#x27;: 1&#125;&#123;&#x27;mark&#x27;: 1, &#x27;num&#x27;: 0&#125; 修改方案：迭代函数中,可变对象需要使用深拷贝赋值!!! 1234567891011121314151617181920212223242526import copydef generate_info(mark, num=3, data=[]): data2 = copy.deepcopy(data) # data2 = data print(f&#x27;&gt;&gt; 标记信息 Mark: &#123;mark&#125; num:&#123;num&#125;&#x27;) query_data = [&#123; &#x27;mark&#x27;: mark, &#x27;num&#x27;: num, &#125;] data2.extend(query_data) if num &gt;= 1: num = num - 1 data2 = generate_info(mark, num, copy.deepcopy(data2)) return data2for i in range(0, 2): tmp_data = generate_info(i, i) for tmp in tmp_data: print(tmp)# 返回结果正常&gt;&gt; 标记信息 Mark: 0 num:0&#123;&#x27;mark&#x27;: 0, &#x27;num&#x27;: 0&#125;&gt;&gt; 标记信息 Mark: 1 num:1&gt;&gt; 标记信息 Mark: 1 num:0&#123;&#x27;mark&#x27;: 1, &#x27;num&#x27;: 1&#125;&#123;&#x27;mark&#x27;: 1, &#x27;num&#x27;: 0&#125; is 和 == 的差异 is 用于判断 两个变量 引用对象是否为同一个 == 用于判断 引用变量的值 是否相等 已修复的坑1234567891011# 1. 列表推导式中的对象泄露问题[i for i in range(0, 10)]i 对象会存在# 2. 嵌套列表创建li = [[]]*3li[0].append(1)# [[1], [1], [1]]# 由于创建了三个指向同一个list的对象，而非三个对象 title: Python常用基础命令url_path: python/base/常用命令tags: python python-基础categories: python python-基础description: Python常用基础命令 获取 os.system(cmd)的执行结果123456789由于os.system是没有返回值的，获取返回值有以下三种方式：1.使用commands内置模块import commandsresp = commands.getoutput(&quot;hostname&quot;)2.使用os.popen获取返回值resp = os.popen(&#x27;ps -ef | grep sssss&#x27;).readlines()3.使用subprocess内置模块from subprocess import Popen,PIPEresp = Popen(&quot;ps -ef | grep sssss&quot;,shell=True,stdout=PIPE,stderr=PIPE).stdout.readlines() print 同行替换输出 输出信息再同一行 进度条显示1234567891011121314151617# python3&gt;&gt;&gt; import time&gt;&gt;&gt; for x in range(10):... time.sleep(1)... print(&quot;Progress &#123;:2.1%&#125;&quot;.format(x / 10), end=&quot;\\r&quot;)# 下列三行信息输出在同一行Progress 30.0%Progress 50.0%&gt;&gt;&gt; ress 90.0%# python2import timeimport sysfor x in range(5): time.sleep(1) msg = &quot;&gt;&gt;&gt;&gt; %s\\r&quot;%str(x) sys.stdout.write(msg) sys.stdout.flush() python 文件传入 参数1234#! /bin/pythonimport sysfor arg in sys.argv: print arg Python 生成 md51234567import md5src = &#x27;this is a md5 test.&#x27;m1 = md5.new()m1.update(src)print m1.hexdigest() Excel 处理在用 xlrd.open_workbook 时，添加对应的参数 formatting_info=True，就可以保留原有格式了 python 通过字符串调用对象属性或方法的实例讲解12345678910111213141516# evaldef getmethod(x,char=&#x27;just for test&#x27;): return eval(&#x27;str.%s&#x27; % x)(char)In [635]: getmethod(&#x27;upper&#x27;)Out[635]: &#x27;JUST FOR TEST&#x27;# getattrIn [650]: def getmethod2(x, char=&#x27;just for test&#x27;):...: return getattr(char, x)()...:In [651]: getmethod2(&#x27;upper&#x27;)Out[651]: &#x27;JUST FOR TEST&#x27;# 利用内置库operatorIn [648]: def getmethod3(x, char=&#x27;just for test&#x27;):...: return operator.methodcaller(x, char)(str)...:In [649]: getmethod3(&#x27;upper&#x27;)Out[649]: &#x27;JUST FOR TEST&#x27; 使用 traceback 获取栈信息traceback.print_exc()获取详细的程序异常信息。程序运行异常时会输出完整的栈信息，包括调用顺序、异常发生的语句、错误类型等。import tarceback try:f()except IndexError as ex:print “程序异常”print exprint traceback.print_exc()#1.错误类型(IndexError)、错误对应的值(list index out of range)、具体的 trace 信息(文件名 行号 函数名 对应的代码) sys.exc_info() 使用 dir 获取模块的方法 dir()dir(traceback) 美化打印123# Python的美化打印 特别是打印 嵌套字典时非常好用from prettyprinter import cpprintcpprint(stats_info_data)","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"}]},{"title":"内置包-logging","slug":"Languages/Python/lib-logging","date":"2021-10-23T11:54:51.128Z","updated":"2021-10-23T11:54:51.128Z","comments":true,"path":"Languages/Python/lib-logging.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/lib-logging.md/","excerpt":"","text":"https://www.jb51.net/article/126681.htm https://cloud.tencent.com/developer/article/1354396https://cuiqingcai.com/6080.htmlhttps://docs.python.org/2/library/logging.html#logger-objectshttps://www.cnblogs.com/CJOKER/p/8295272.htmlhttps://www.cnblogs.com/liujiacai/p/7804848.html","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-内置包","slug":"python/python-内置包","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-内置包","slug":"python-内置包","permalink":"http://fansichao.github.com/blog/tags/python-%E5%86%85%E7%BD%AE%E5%8C%85/"}]},{"title":"Python-读写Conf配置文件","slug":"Languages/Python/learn9-scripts-read-conf","date":"2021-10-23T11:54:51.127Z","updated":"2021-10-23T11:54:51.127Z","comments":true,"path":"Languages/Python/learn9-scripts-read-conf.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn9-scripts-read-conf.md/","excerpt":"","text":"tags: Python ConfigParser 配置 conf ini yaml properties 2019 年 11 月 环境说明: Python2.7.11 CentOS7.6 TODO 不同种类配置文件对比 .yamlyaml 说明介绍YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。 YAML 在 python 语言中有 PyYAML 安装包。 YAML 语言(发音 /ˈjæməl/ )的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。 yaml 语法规则它的基本语法规则如下：1、大小写敏感2、使用缩进表示层级关系3、缩进时不允许使用 Tab 键，只允许使用空格。4、缩进的空格数目不重要，只要相同层级的元素左侧对齐即可5、# 表示注释，从这个字符一直到行尾，都会被解析器忽略，这个和 python 的注释一样 YAML 支持的数据结构有三种：1、对象：键值对的集合，又称为映射(mapping)/ 哈希(hashes) / 字典(dictionary)2、数组：一组按次序排列的值，又称为序列(sequence) / 列表(list)3、纯量(scalars)：单个的、不可再分的值。字符串、布尔值、整数、浮点数、Null、时间、日期 yaml 文件样例123456789101112131415161718192021222324252627channelizer: org.apache.tinkerpop.gremlin.server.channel.HttpChannelizergraphs: &#123; hugegraph: conf/hugegraph.properties, hugegraph1: conf/hugegraph1.properties, hugegraph2: conf/hugegraph2.properties, test01: conf/hugegraphtest01.properties, &#125;maxAccumulationBufferComponents: 1024maxChunkSize: 8192maxContentLength: 65536maxHeaderSize: 8192maxInitialLineLength: 4096metrics: consoleReporter: &#123; enabled: false, interval: 180000 &#125; csvReporter: &#123; enabled: true, fileName: /tmp/gremlin-server-metrics.csv, interval: 180000, &#125; gangliaReporter: &#123; addressingMode: MULTICAST, enabled: false, interval: 180000 &#125; graphiteReporter: &#123; enabled: false, interval: 180000 &#125; jmxReporter: &#123; enabled: false &#125; slf4jReporter: &#123; enabled: false, interval: 180000 &#125;plugins: [com.baidu.hugegraph] yaml 参考链接 博客-python 中读取 yaml .ini 文件ini 说明介绍Python3 官方 ConfigParser该模块提供了实现基本配置语言的类，该类提供的结构类似于 Microsoft Windows INI 文件中的结构。可以使用它来编写可由最终用户轻松定制的 Python 程序。 ini 语法规则ConfigParser 的一些问题： 不能区分大小写。 重新写入的配置文件不能保留原有配置文件的注释。 重新写入的配置文件不能保持原有的顺序。 不支持嵌套。 不支持格式校验。 易用性 注意事项 配置参数读出来都是字符串类型， 参数运算时，注意类型转换，另外，对于字符型参数，不需要加”” 只要注意配置文件的参数尽量使用小写/大写,统一即可 ini 常用函数读取配置文件 read(filename) 直接读取 ini 文件内容 sections() 得到所有的 section，并以列表的形式返回 options(section) 得到该 section 的所有 option items(section) 得到该 section 的所有键值对 get(section,option) 得到 section 中 option 的值，返回为 string 类型 getint(section,option) 得到 section 中 option 的值，返回为 int 类型 getfloat(section,option)得到 section 中 option 的值，返回为 float 类型 getboolean(section, option)得到 section 中 option 的值，返回为 boolean 类型 写入配置文件 add_section(section) 添加一个新的 section has_section(section) 判断是否有 section set(section, option, value) 对 section 中的 option 进行设置 remove_setion(section)删除一个 section remove_option(section, option)删除 section 中的 option write(fileobject)将内容写入配置文件。 配置文件类型问题 getint(section,option) 返回 int 类型 getfloat(section, option) 返回 float 类型 getboolean(section,option) 返回 boolen 类型 ini 文件样例12345678[user] # sectionusername = tom # key = val 或 key: valpassword = ***email = test@host.com[book]bookname = pythonbookprice = 25 ini 参考链接 Python3 官方 ConfigParser ConfigParser 模块 .properties 文件Python 中正好没有解析 properties 文件的现成模块,所以单独编写了一个脚本用于读写 *.properties 文件 properties 文件样例123456789restserver.url=http://0.0.0.0:8080# graphs list with pair NAME:CONF_PATHgraphs=[test01:conf/hugegraphtest01.properties,hugegraph:conf/hugegraph.properties,hugegraph1:conf/hugegraph1.properties,hugegraph2:conf/hugegraph2.properties]# authentication#auth.require_authentication=#auth.admin_token=#auth.user_tokens=[] properties 参考链接 Python：解析 properties 文件 附件读写 .ini/.yaml 文件 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218# -* - coding: UTF-8 -* -u&quot;&quot;&quot; Python 读写 配置文件逻辑说明:- read_config 读取配置文件入口函数 - read_config_ini - read_config_yaml- write_config 写入配置文件入口函数 - write_config_ini - write_config_yaml- 函数配置调用 - 根据 postfix_func_dict 指定文件后缀调用函数 - 单独指定读取某类文件时,直接传入参数 filename_postfix 即可支持以下配置文件读写- *.ini ConfigParser- *.yaml yaml TODO语法等说明- ConfigParser- yaml# 配置文件使用样例 ConfigParserhttps://www.cnblogs.com/klb561/p/10085328.html# *.yaml pyyamlpip install pyyaml&quot;&quot;&quot;import osimport ConfigParserimport sysimport tracebackimport loggingimport yamlreload(sys)sys.setdefaultencoding(&quot;utf-8&quot;)# 指定 不同后缀调用不同方法postfix_func_dict = &#123; &#x27;.ini&#x27;: &#x27;ini&#x27;, &#x27;.yaml&#x27;: &#x27;yaml&#x27;,&#125;# 默认配置后缀default_filename_postfix = &#x27;.ini&#x27;ini_config_data = [ &#123;&#x27;section&#x27;: &#x27;scetionA&#x27;, &#x27;section_vals&#x27;: [ &#123;&#x27;key&#x27;: &#x27;&#x27;, &#x27;val&#x27;: &#x27;&#x27;, &#x27;dtype&#x27;: &#x27;&#x27;&#125;, &#123;&#x27;key&#x27;: &#x27;&#x27;, &#x27;val&#x27;: &#x27;&#x27;, &#x27;dtype&#x27;: &#x27;&#x27;&#125;, ]&#125;]ini_config_data = &#123; &#x27;sectionA&#x27;: &#123; &#x27;key1&#x27;: &#x27;val1&#x27;, &#x27;key2&#x27;: &#x27;val2&#x27;, &#125;, &#x27;sectionB&#x27;: &#123; &#x27;key11&#x27;: &#x27;val11&#x27;, &#x27;key21&#x27;: &#x27;val21&#x27;, &#125;,&#125;from collections import OrderedDictdef read_config(config_path, filename_postfix=None): u&quot;&quot;&quot; 读取配置文件 :param str config_path: 配置文件路径 :param str filename_postfix: 配置文件类型 ini / yaml &quot;&quot;&quot; config_data = OrderedDict(dict()) if not config_path or not os.path.exists(config_path): logging.error(&quot;配置文件[%s]为空或不存在&quot;, config_path) return config_data filename_postfix = filename_postfix if filename_postfix else os.path.splitext(config_path)[1] # TODO 动态 根据字符串 调用函数 config_data = globals().get(&#x27;read_config_%s&#x27; % postfix_func_dict.get(filename_postfix, default_filename_postfix))( config_path) logging.info(&quot;读取配置文件[%s]成功,配置信息[%s]&quot;, config_path, config_data) return config_datadef read_config_yaml(config_path): u&quot;&quot;&quot; 读取配置文件 :param str config_path: 配置文件路径 :return: dict config_data &quot;&quot;&quot; # 加上 ,encoding=&#x27;utf-8&#x27;，处理配置文件中含中文出现乱码的情况。 config_data = OrderedDict(dict()) try: # f = open(config_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) f = open(config_path, &#x27;r&#x27;) config = f.read() if float(yaml.__version__) &lt;= 5.1: config_data = yaml.load(config) else: # 5.1版本后 使用 FullLoader 更加安全 config_data = yaml.load(config, Loader=yaml.FullLoader) except Exception as e: logging.error(traceback.format_exc()) logging.error(&quot;配置文件[%s]无法正常解析,请检查!&quot;, config_path) return config_datadef read_config_ini(config_path): u&quot;&quot;&quot; 读取配置文件 :param str config_path: 配置文件路径 :return: dict config_data &quot;&quot;&quot; config_data = OrderedDict(dict()) if not config_path or not os.path.exists(config_path): logging.error(&quot;配置文件[%s]为空或不存在&quot;, config_path) return config_data try: config = ConfigParser.ConfigParser() config.readfp(open(r&#x27;%s&#x27; % config_path)) for section in config.sections(): config_data[section] = OrderedDict(dict()) for key, val in config.items(section): config_data[section][key] = val except Exception as e: logging.error(traceback.format_exc()) logging.error(&quot;配置文件[%s]无法正常解析,请检查!&quot;, config_path) return config_datadef write_config(config_path, config_data, filename_postfix=None, mode=&#x27;a&#x27;, funcname=None): u&quot;&quot;&quot; 写入配置文件 :param str config_path: 配置文件 :param dict config_data: 配置字典 :param str filename_postfix: 配置文件类型 ini / yaml . 为空时自动读取文件名称后缀,根据不同后缀调用不同函数 :param str mode: 数据时 追加写入还是覆盖等 a w &quot;&quot;&quot; filename_postfix = filename_postfix if filename_postfix else os.path.splitext(config_path)[1] mode = mode if mode and mode in [&#x27;a&#x27;, &#x27;w&#x27;] else &#x27;a&#x27; # TODO 动态 根据字符串 调用函数 config_data = globals().get(&#x27;write_config_%s&#x27; % postfix_func_dict.get(filename_postfix, default_filename_postfix)) \\ (config_path, config_data, mode) logging.info(&quot;读取配置文件[%s]成功,配置信息[%s]&quot;, config_path, config_data)def write_config_yaml(config_path, config_data, mode): u&quot;&quot;&quot; 写入配置文件 :param str config_path: 配置文件 :param dict config_data: 配置字典 :param str mode: 数据时 追加写入还是覆盖等 a w &quot;&quot;&quot; # fw = open(yamlPath, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) fw = open(config_path, mode) # a 追加写入，w,覆盖写入 yaml.dump(config_data, fw) return config_datadef write_config_ini(config_path, config_data, mode): u&quot;&quot;&quot; 写入配置文件 :param str config_path: 配置文件 :param dict config_data: 配置字典 :param str mode: 数据时 追加写入还是覆盖等 a w &quot;&quot;&quot; config = ConfigParser.ConfigParser() if not os.path.exists(config_path): new_config_dic = config_data else: new_config_dic = read_config(config_path) # 当配置文件已经存在时, 将会使用新的dic更新原有配置 if mode == &#x27;a&#x27;: new_config_dic.update(config_data) for section, section_vals in config_data.items(): config.add_section(section) for key, val in section_vals.items(): config.set(section, key, val) config.write(open(config_path, &quot;w&quot;)) logging.info(&quot;写入配置文件[%s]完成&quot;, config_path) return config_dataif __name__ == &#x27;__main__&#x27;: # yaml config_path = &quot;test.yaml&quot; config_path = &quot;/home/fdm/software/hugegraph/hugegraph-0.9.2/conf/gremlin-server.yaml&quot; config_data = read_config(config_path) write_config(&#x27;test2.yaml&#x27;, config_data=config_data, mode=&#x27;a&#x27;) exit() # ini config_path = &quot;config.ini&quot; config_data = &#123; &#x27;sectionA&#x27;: &#123;&#x27;a&#x27;: &#x27;b&#x27;, &#x27;key1&#x27;: 123&#125; &#125; write_config(&#x27;config2.ini&#x27;, config_data=config_data, mode=&#x27;a&#x27;) read_config(config_path) 读写 .properties 文件 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#! -*- coding:utf-8u&quot;&quot;&quot; Config 读写 *.properties 文件https://www.cnblogs.com/momoyan/p/9145531.html&quot;&quot;&quot;import reimport osimport tempfilefrom collections import OrderedDictclass Properties: def __init__(self, file_name): self.file_name = file_name self.properties = OrderedDict(&#123;&#125;) try: fopen = open(self.file_name, &#x27;r&#x27;) for line in fopen: line = line.strip() if line.find(&#x27;=&#x27;) &gt; 0 and not line.startswith(&#x27;#&#x27;): strs = line.split(&#x27;=&#x27;) self.properties[strs[0].strip()] = strs[1].strip() except Exception, e: raise e else: fopen.close() def has_key(self, key): return key in self.properties def get(self, key, default_value=&#x27;&#x27;): if key in self.properties: return self.properties[key] return default_value def put(self, key, value): self.properties[key] = value replace_property(self.file_name, key + &#x27;=.*&#x27;, key + &#x27;=&#x27; + value, True)def parse(file_name): return Properties(file_name)def replace_property(file_name, from_regex, to_str, append_on_not_exists=True): tmpfile = tempfile.TemporaryFile() if os.path.exists(file_name): r_open = open(file_name, &#x27;r&#x27;) pattern = re.compile(r&#x27;&#x27; + from_regex) found = None for line in r_open: if pattern.search(line) and not line.strip().startswith(&#x27;#&#x27;): found = True line = re.sub(from_regex, to_str, line) tmpfile.write(line) if not found and append_on_not_exists: tmpfile.write(&#x27;\\n&#x27; + to_str) r_open.close() tmpfile.seek(0) content = tmpfile.read() if os.path.exists(file_name): os.remove(file_name) w_open = open(file_name, &#x27;w&#x27;) w_open.write(content) w_open.close() tmpfile.close() else: print &quot;file %s not found&quot; % file_nameif __name__ == &#x27;__main__&#x27;: file_path = &#x27;xxx.properties&#x27; props = parse(file_path) #读取文件 props.put(&#x27;key_a&#x27;, &#x27;value_a&#x27;) #修改/添加key=value print props.get(&#x27;key_a&#x27;) #根据key读取value print &quot;props.has_key(&#x27;key_a&#x27;)=&quot; + str(props.has_key(&#x27;key_a&#x27;)) #判断是否包含该key print props.properties()","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Python术语大全","slug":"Languages/Python/learn9-terms","date":"2021-10-23T11:54:51.127Z","updated":"2021-10-23T11:54:51.127Z","comments":true,"path":"Languages/Python/learn9-terms.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn9-terms.md/","excerpt":"","text":"1234567891011121314151617181920212223242526值(value)：就是在程序中，我们操作数据的基本单位，举例：”www.iplaypy.com”类型(type)：python type，值在 Python 中的类别，常见的类型我们在 Python 基础数据类型那篇文章中有详细介绍。整型(integer)：又叫做整数类型，用来表达整数的数据类型。浮点数(floating point)： 用来表示带小数部分的数。字符串(string)：用来表示一串字符的类型。变量(variable)：引用一个值，这个值的名称。语句(statement)：表示一个命令或行动的一段代码，我们见过赋值语句和 print 输出语句。赋值(assignment)：就是将一个值，赋值给一个变量。关键字(keyword)：这个关键词，这不是我们搜索引擎优化(SEO)中介绍的概念，它是 Python 内部保留的词，变量名一定不要使用系统关键字。操作符(operator)：用来表示简单的运算的特殊符号，像：加法、乘法和字符器拼接等。python 注释(comment)：代码中可以附加一些我们的注解信息，用来帮助我们调试程序时使用，也可以放入帮助文档信息，这是基础知识之中的基础。生成器：在 Python 中，这种一边循环一边计算的机制，称为生成器：generator。可迭代对象：可以直接作用于 for 循环的对象统称为可迭代对象：Iterable。迭代器：可以被 next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。集合数据类型如 list、dict、str 等是 Iterable 但不是 Iterator，不过可以通过 iter()函数获得一个 Iterator 对象。软件开发中的一个原则“开放-封闭”原则；封闭：已实现的功能代码块不应该被修改开放：对现有功能的扩展开放高阶函数，就是把一个函数当做一个参数传给另外一个函数匿名函数 lambda 与正常函数的区别是什么？ 最直接的区别是，正常函数定义时需要写名字，但 lambda 不需要。模块，用一砣代码实现了某个功能的代码集合。json 模块，用于字符串 和 python 数据类型间进行转换；Json 模块提供了四个功能：dumps、dump、loads、loadpickle 模块，用于 python 特有的类型 和 python 的数据类型间进行转换；pickle 模块提供了四个功能：dumps、dump、loads、loadxml 是实现不同语言或程序之间进行数据交换的协议，跟 json 差不多，但 json 使用起来更简单，不过，古时候，在 json 还没诞生的黑暗年代，大家只能选择用 xml 呀散列消息鉴别码，简称 HMAC，是一种基于消息鉴别码 MAC(Message Authentication Code)的鉴别机制。使用 HMAC 时,消息通讯的双方，通过验证消息中加入的鉴别密钥 K 来鉴别消息的真伪； 参考资源 Python3 术语对照表 IT 行业术语大全 Python 术语中英文对照表 函数式编程 异步编程1 什么是异步编程通过学习相关概念，我们逐步解释异步编程是什么。 1.1 阻塞程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的。常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。(如果是多核 CPU 则正在执行上下文切换操作的核不可被利用。) 1.2 非阻塞程序在等待某操作过程中，自身不被阻塞，可以继续运行干别的事情，则称该程序在该操作上是非阻塞的。非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。非阻塞的存在是因为阻塞存在，正因为某个操作阻塞导致的耗时与效率低下，我们才要把它变成非阻塞的。 1.3 同步不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，称这些程序单元是同步执行的。例如购物系统中更新商品库存，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。简言之，同步意味着有序。1.4 异步为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式。不相关的程序单元之间可以是异步的。例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。简言之，异步意味着无序。上文提到的“通信方式”通常是指异步和并发编程提供的同步原语，如信号量、锁、同步队列等等。我们需知道，虽然这些通信方式是为了让多个程序在一定条件下同步执行，但正因为是异步的存在，才需要这些通信方式。如果所有程序都是按序执行，其本身就是同步的，又何需这些同步信号呢？ 1.5 并发并发描述的是程序的组织结构。指程序要被设计成多个可独立执行的子任务。以利用有限的计算机资源使多个任务可以被实时或近实时执行为目的。1.6 并行并行描述的是程序的执行状态。指多个任务同时被执行。以利用富余计算资源(多核 CPU)加速完成多个任务为目的。并发提供了一种程序组织结构方式，让问题的解决方案可以并行执行，但并行执行不是必须的。 1.7 概念总结并行是为了利用多核加速多任务完成的进度并发是为了让独立的子任务都有机会被尽快执行，但不一定能加速整体进度非阻塞是为了提高程序整体执行效率异步是高效地组织非阻塞任务的方式要支持并发，必须拆分为多任务，不同任务相对而言才有阻塞/非阻塞、同步/异步。所以，并发、异步、非阻塞三个词总是如影随形。 1.8 异步编程以进程、线程、协程、函数/方法作为执行任务程序的基本单位，结合回调、事件循环、信号量等机制，以提高程序整体执行效率和并发能力的编程方式。如果在某程序的运行时，能根据已经执行的指令准确判断它接下来要进行哪个具体操作，那它是同步程序，反之则为异步程序。(无序与有序的区别) 同步/异步、阻塞/非阻塞并非水火不容，要看讨论的程序所处的封装级别。例如购物程序在处理多个用户的浏览请求可以是异步的，而更新库存时必须是同步的。 作者：SeanCheney链接：https://www.jianshu.com/p/fe146f9781d2来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[],"tags":[]},{"title":"Python23差异对比","slug":"Languages/Python/learn9-py2-diff-py3","date":"2021-10-23T11:54:51.126Z","updated":"2021-10-23T11:54:51.126Z","comments":true,"path":"Languages/Python/learn9-py2-diff-py3.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn9-py2-diff-py3.md/","excerpt":"","text":"环境说明: Python2.7.11 -&gt; Python3.6 Centos7.5 文档说明: 本文主要用于 项目 Python2 迁移升级到 Python3 学习了解 Python3 本文主要来源于 知乎-Python23 差异 菜鸟教程-Python23 差异 官网-Python23 差异 主要区别Python23 主要区别: 统一了字符编码支持。 增加了新的语法。print/exec 等成为了函数,格式化字符串变量,类型标注,添加了 nonlocal、yield from、async/await、yield for 关键词和annotations、context、traceback、qualname等 dunder 方法。 修改了一些语法。metaclass,raise、map、filter 以及 dict 的 items/keys/values 方法返回迭代对象而不是列表,描述符协议,保存类属性定义顺序,保存关键字参数顺序 去掉了一些语法。cmp、&lt;&gt;(也就是!=)、xrange(其实就是 range)、不再有经典类 增加一些新的模块。concurrent.futures、venv、unittest.mock、asyncio、selectors、typing 等 修改了一些模块。主要是对模块添加函数/类/方法(如 functools.lru_cache、threading.Barrier)或者参数。 模块改名。把一些相关的模块放进同一个包里面(如 httplib, BaseHTTPServer, CGIHTTPServer, SimpleHTTPServer, Cookie, cookielib 放进了 http 里面,urllib, urllib2, urlparse, robotparse 放进了 urllib 里面),个例如 SocketServer 改成了 socketserver,Queue 改成 queue 等 8. 去掉了一些模块或者函数。gopherlib、md5、contextlib.nested、inspect.getmoduleinfo 等。 优化。重新实现了 dict 可以减少 20%-25%的内存使用；提升 pickle 序列化和反序列化的效率；collections.OrderedDict 改用 C 实现；通过 os.scandir 对 glob 模块中的 glob()及 iglob()进行优化,使得它们现在大概快了 3-6 倍等.. 这些都是喜大普奔的好消息,同样开发者不需要感知,默默的就会让结果变得更好。 其他。构建过程、C 的 API、安全性等方面的修改,通常对于开发者不需要关心。 核心语法差异Python23 主要变化项 字符串: 解决了编码问题 编码： 由默认 asscii, 变为 utf-8 返回可迭代对象,而不是列表1234567891011121314151617181920212223如果在 xrange 章节看到的,现在在 Python 3 中一些方法和函数返回迭代对象 -- 代替 Python 2 中的列表因为我们通常那些遍历只有一次,我认为这个改变对节约内存很有意义。尽管如此,它也是可能的,相对于生成器 --- 如需要遍历多次。它是不那么高效的。而对于那些情况下,我们真正需要的是列表对象,我们可以通过 list() 函数简单的把迭代对象转换成一个列表。# py2print range(3)print type(range(3))[0, 1, 2]&lt;type &#x27;list&#x27;&gt;# py3print(range(3))print(type(range(3)))print(list(range(3)))range(0, 3)&lt;class &#x27;range&#x27;&gt;[0, 1, 2] 在 Python 3 中一些经常使用到的不再返回列表的函数和方法： zip() map() filter() dictionary’s .keys() method dictionary’s .values() method dictionary’s .items() method 字符串 &amp; 编码字符串是最大的变化之一, 在 Python2 中,字符串有两个类型,一个是 unicode,一个是 str,前者表示文本字符串,后者表示字节序列 在 Python3 中两者做了严格区分,分别用 str 表示字符串,byte 表示字节序列,任何需要写入文本或者网络传输的数据都只接收字节序列 Python2 的默认编码是 asscii Python3 默认采用了 UTF-8 作为默认编码,因此你不再需要在文件顶部写 # coding=utf-8 1234567# py2&gt;&gt;&gt; sys.getdefaultencoding()&#x27;ascii&#x27;# py3&gt;&gt;&gt; sys.getdefaultencoding()&#x27;utf-8&#x27; 格式化字符串1234567891011121314在Python中格式化语法的方式大家通常都会偏向于【Format】或者 【%S】这两种方法,操作如下：print(&quot;My name is %s&quot; % (&#x27;phithon&#x27;, ))print(&quot;My name is %(name)s&quot; % &#123;&#x27;name&#x27;:&#x27;phithon&#x27;&#125;)print(&quot;My name is &#123;&#125;&quot;.format(&quot;bob&quot;))print(&quot;My name is &#123;name&#125;&quot;.format(name=&quot;bob&quot;))而到了Python3.6版本,推出了新的格式化字符串的灵活方法【f-string】,使用【f-string】编写的与上面功能相同的代码是这样的name=&quot;bob&quot;print(f&quot;My name is &#123;name&#125;&quot;)我们对比这几种格式化字符串的方法,可以发现相比于常见的字符串格式符【%S】 或 【Format】 方法,【f-string】 直接在占位符中插入变量显得更加方便,也更好理解, 路径管理库 Pathlib(最低 Python 版本为 3.4)枚举(最低 Python 版本为 3.4)1234567891011121314# py3from enum import Enum, autoclass Monster(Enum): ZOMBIE = auto() WARRIOR = auto() BEAR = auto()print(Monster.ZOMBIE)for i in Monster: print(i)#Monster.ZOMBIE#Monster.ZOMBIE#Monster.WARRIOR#Monster.BEAR 原生 LRU 缓存(最低 Python 版本为 3.2)TODO LRU 缓存缓存是大家在开发中都会用到的一个特性,如果我们准确的使用好它,它会节省我们很多时间和成本。相信很多人初学 Python 装饰器的时候都会去实现一个缓存的装饰器来节省斐波那契函数的计算时间。而 Python 3 之后将 LRU(最近最少使用算法)缓存作为一个名为「lru_cache」的装饰器,使得对缓存的使用非常简单。 123456789101112from functools import lru_cache@lru_cache(maxsize=512)def fib_memoization(number: int) -&gt; int: if number == 0: return 0 if number == 1: return 1 return fib_memoization(number-1) + fib_memoization(number-2)start = time.time()fib_memoization(40)print(f&#x27;Duration: &#123;time.time() - start&#125;s&#x27;)# Duration: 6.866455078125e-05s 扩展的可迭代对象解包(最低 Python 版本为 3.0)12345678910111213141516171819Python解包相信在我们初学Python的时候都有所了解,如果我们很多地掌握这个特性,相信是一件非常酷的事情。那什么是扩展的解包呢？我们可以从pep3132中了解更多,举个例子：# Python 3.4 中 print 函数 不允许多个 * 操作&gt;&gt;&gt; print(*[1,2,3], *[3,4]) File &quot;&lt;stdin&gt;&quot;, line 1 print(*[1,2,3], *[3,4]) ^SyntaxError: invalid syntax&gt;&gt;&gt;# 再来看看 python3.5以上版本# 可以使用任意多个解包操作&gt;&gt;&gt; print(*[1], *[2], 3)1 2 3&gt;&gt;&gt; *range(4), 4(0, 1, 2, 3, 4)&gt;&gt;&gt; [*range(4), 4][0, 1, 2, 3, 4]&gt;&gt;&gt; &#123;*range(4), 4&#125;&#123;0, 1, 2, 3, 4&#125;&gt;&gt;&gt; &#123;&#x27;x&#x27;: 1, **&#123;&#x27;y&#x27;: 2&#125;&#125;&#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2&#125;我们可以看到,解包这个操作也算的上Python中极其潮流的玩法了,耍的一手好解包,真的会秀翻全场啊！ Data class 装饰器(最低 Python 版本为 3.7)12345678910111213141516Python 3.7 引入了【data class】,新特性大大简化了定义类对象的代码量,代码简洁明晰。通过使用@dataclass装饰器来修饰类的设计,可以用来减少对样板代码的使用,因为装饰器会自动生成诸如「__init__()」和「__repr()__」这样的特殊方法。在官方的文档中,它们被描述为「带有缺省值的可变命名元组」。from dataclasses import dataclass@dataclassclass DataClassCard: rank: str suit: str#生成实例queen_of_hearts = DataClassCard(&#x27;Q&#x27;, &#x27;Hearts&#x27;)print(queen_of_hearts.rank)print(queen_of_hearts)print(queen_of_hearts == DataClassCard(&#x27;Q&#x27;, &#x27;Hearts&#x27;))#Q#DataClassCard(rank=&#x27;Q&#x27;, suit=&#x27;Hearts&#x27;)#True 类型提示 Type hinting12343. 类型提示 Type hinting(最低 Python 版本为 3.5)编程语言有很多类型,静态编译型语言和动态解释型语言的对比是软件工程中一个热门的话题,几乎每个人对此有自己的看法。在静态语言中类型标注无疑是让人又爱又恨,爱的是编译速度加快,团队合作中准确了解函数方法的入参类型,恨的是Coding时极其繁琐的标注。不过,标注这种极其符合团队文化的操作还是在Python3中被引入,并且很快得到了人们的喜爱。def print_yes_or_no(codition: str) -&gt; bool: pass 细节语法差异next() and .next()12345# py2next() 和 .next() 都可以使用# py3只能使用 next() nonlocalPython3 中新增 非局部变量 nonlocal,用于设置嵌套函数 unicode,字符串 u’’1234567# py2u&quot;根据orm模型重建表&quot;# py3&quot;根据orm模型重建表&quot;字符串、注释、unicode(xxx) 都需要去掉 u&quot;&quot; ,因为Python3默认为unicode,无需u前缀标识unicode Python3加u&#x27;&#x27;不会报错,但是无实际含义 字典的 items 加 list123456789101112# py2savepath_dict.items()list(savepath_dict.items())# py3&gt;&gt;&gt; a = &#123;&#x27;a&#x27;:123&#125;&gt;&gt;&gt; a.items()dict_items([(&#x27;a&#x27;, 123)])&gt;&gt;&gt; list(a.items())[(&#x27;a&#x27;, 123)]字典的items加list Python3不加list也不会报错 print 语法12345678# py2print &quot;请输入正确的时间格式: yyyy-mm-dd&quot;# py3print(&quot;请输入正确的时间格式: yyyy-mm-dd&quot;)# 小结1. Python2中print作为语句,Python3中print作为函数使用(接收字符串作为参数) 除法运算除法运算 Python3 保留小数部分 12345678910# py2In [11]: 1/2Out[11]: 0# py3In [12]: 1/2Out[12]: 0.5In [13]: 1//2Out[13]: 0 xrange 在 Python3 中被去除八进制字面量表示Python3 中八进制不允许简写 123456789# py2&gt;&gt;&gt; 0o1000512&gt;&gt;&gt; 01000512# py3&gt;&gt;&gt; 0o1000512 模块名称修改Python3 中模块包名称符合 pep8 规范 123456789101112131415# py2_winregConfigParsercopy_regQueueSocketServerrepr# py3winregconfigparsercopyregqueuesocketserverreprlib 数据类型123456789101112131415161)Py3.X去除了long类型,现在只有一种整型——int,但它的行为就像2.X版本的long2)新增了bytes类型,对应于2.X版本的八位串,定义一个bytes字面量的方法如下：&gt;&gt;&gt; b = b&#x27;china&#x27;&gt;&gt;&gt; type(b)&lt;type &#x27;bytes&#x27;&gt;str 对象和 bytes 对象可以使用 .encode() (str -&gt; bytes) 或 .decode() (bytes -&gt; str)方法相互转化。&gt;&gt;&gt; s = b.decode()&gt;&gt;&gt; s&#x27;china&#x27;&gt;&gt;&gt; b1 = s.encode()&gt;&gt;&gt; b1b&#x27;china&#x27;3)dict的.keys()、.items 和.values()方法返回迭代器,而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key(),用 in替代它吧 从键盘录入一个字符串12345# py2raw_input(&quot;提示信息&quot;)# py3input(&quot;提示信息&quot;) 不等运算符Python 2.x 中不等于有两种写法 != 和 &lt;&gt; Python 3.x 中去掉了&lt;&gt;, 只有!=一种写法,还好,我从来没有使用&lt;&gt;的习惯 隐式命名空间包(最低 Python 版本为 3.3)在 Python 2 中,上面每个文件夹都必须包含将文件夹转化为 Python 程序包的__init__.py文件。 在 Python 3 中,随着隐式命名空间包的引入,这些文件不再是必须的了。 但建议有__init__.py文件 True and False1234# py2 中 True 和 False 可以赋值True = 1# py3 中 True 和 False 变更为关键字, 不允许更改 basestring12345# py2isinstance(fields, basestring)# py3isinstance(fields, str) has_key12345678# py2if not rst.has_key(&quot;aggregations&quot;):# py3if &quot;aggregations&quot; not in rst:Python3中可以使用 key not in dic 来识别key是否在字典中,Python3中没有 dic.has_key(&#x27;xxxx&#x27;) sys reload 语法1234567# py2import sysreload(sys)sys.setdefaultencoding(&#x27;utf8&#x27;)# py3import sys to_md5(x)123456789# py2 addr_df[&quot;peer_node_id&quot;] = addr_df[&quot;peer_node_label&quot;]. \\ apply(lambda x: to_md5(x))# py3to_md5(x.encode(&#x27;utf-8&#x27;))否则报错TypeError: Unicode-objects must be encoded before hashing min/max 函数12345678910Min/max函数在 Python 3 中,如果想对列表排序或找到最大/最小值,所有的元素必须可以比较。如果你原来的代码是 Python 2 写的,里面有包含 None 元素的列表,那么换到 Python 3 时就可能会出现一些问题。那么可以用 min/max 函数来解决这种冲突。def listmin(L): &#x27;&#x27;&#x27; Returns min of an iterable L, Ignoring null (None) values. If all values are null, returns None &#x27;&#x27;&#x27; values = [v for v in L if v is not None]return min(values) if values else None也可以写一个相似的函数来确定最大元素。 cmp1234567891011# py2cmp(1,2)# py3python3移除了cmp()函数,但提供了六个丰富的比较运算符,详见此处import operator #首先要导入运算符模块operator.gt(1,2) #意思是greater than(大于)operator.ge(1,2) #意思是greater and equal(大于等于)operator.eq(1,2) #意思是equal(等于)operator.le(1,2) #意思是less and equal(小于等于)operator.lt(1,2) #意思是less than(小于) except 语法12345678# py2except Exception, err: print(err.message)# py3except Exception as err: print(str(err)) 虚拟变量,For 循环变量和全局命名空间泄漏123456789在使用由不同版本 Python 编写的代码时,还有一个很有意思的地方。from __future__ import print_functiona = [i for i in range(10)]print(i)如果我们在 Python 2 解释器上运行这段代码,我们会得到结果 9,因为用于列表推导式的 i 变量留在了内存中。如果你在下部分代码中忘了这回事,再使用 i 变量的话,会导致不可见的错误。在 Python 3 中一切更为简单,在这个例子中的变量只在列表的创建期间使用,之后不再保存。这样当我们运行代码时,就会看到如下结果：NameError: name &#x27;i&#x27; is not defined func.func_name12345# py2func.func_name# py3func.__name__ 软件差异1234567891011121314151617181920212223# PandasModuleNotFoundError: No module named &#x27;_bz2&#x27; Pandas==0.25.3 报此错误更改安装 pandas==0.24.2# unioutimport unioutpython3 中没有 uniout# gunicornpython2gunicorn -c fdm/base/gun.conf fdm.views:apppython3配置文件必须有 .py 扩展名gunicorn -c fdm/base/gun.conf.py fdm.views:app 否则报错!!!!!! WARNING: configuration file should have a valid Python extension.!!!python2workers = multiprocessing.cpu_count() / 4 + 1python3 workers 只接受 int 参数workers = int(multiprocessing.cpu_count() / 4 + 1) from module import * 只能用于模块，不能用于函数from .[module] import namefrom .[module] import name 是相对导入的唯一正确语法，所有不以.开头的导入都被当成绝对导入 参考链接 知乎 Python 2 和 Python 3 有哪些主要区别？ 菜鸟教程-Python2.x 和 Python3.x 的区别 Python 官网-Python3 新增差异 title: Python23差异对比02url_path: python/advance/Python23差异对比02tags: python python-进阶categories: python python-进阶description: Python23差异对比02 tags: Python2 Python3 差异对比 基础知识 2020 年 01 月 Python2.7.11&amp;Python3.6.0 差异环境说明: Python2.7.11 -&gt; Python3.6 Centos7.5 文档说明: 本文主要用于 项目 Python2 迁移升级到 Python3 学习了解 Python3 本文主要来源于 知乎-Python23 差异 菜鸟教程-Python23 差异 官网-Python23 差异 主要区别Python23 主要区别: 统一了字符编码支持。 增加了新的语法。print/exec 等成为了函数,格式化字符串变量,类型标注,添加了 nonlocal、yield from、async/await、yield for 关键词和annotations、context、traceback、qualname等 dunder 方法。 修改了一些语法。metaclass,raise、map、filter 以及 dict 的 items/keys/values 方法返回迭代对象而不是列表,描述符协议,保存类属性定义顺序,保存关键字参数顺序 去掉了一些语法。cmp、&lt;&gt;(也就是!=)、xrange(其实就是 range)、不再有经典类 增加一些新的模块。concurrent.futures、venv、unittest.mock、asyncio、selectors、typing 等 修改了一些模块。主要是对模块添加函数/类/方法(如 functools.lru_cache、threading.Barrier)或者参数。 模块改名。把一些相关的模块放进同一个包里面(如 httplib, BaseHTTPServer, CGIHTTPServer, SimpleHTTPServer, Cookie, cookielib 放进了 http 里面,urllib, urllib2, urlparse, robotparse 放进了 urllib 里面),个例如 SocketServer 改成了 socketserver,Queue 改成 queue 等 8. 去掉了一些模块或者函数。gopherlib、md5、contextlib.nested、inspect.getmoduleinfo 等。 优化。重新实现了 dict 可以减少 20%-25%的内存使用；提升 pickle 序列化和反序列化的效率；collections.OrderedDict 改用 C 实现；通过 os.scandir 对 glob 模块中的 glob()及 iglob()进行优化,使得它们现在大概快了 3-6 倍等.. 这些都是喜大普奔的好消息,同样开发者不需要感知,默默的就会让结果变得更好。 其他。构建过程、C 的 API、安全性等方面的修改,通常对于开发者不需要关心。 核心语法差异Python23 主要变化项 字符串: 解决了编码问题 编码： 由默认 asscii, 变为 utf-8 返回可迭代对象,而不是列表1234567891011121314151617181920212223如果在 xrange 章节看到的,现在在 Python 3 中一些方法和函数返回迭代对象 -- 代替 Python 2 中的列表因为我们通常那些遍历只有一次,我认为这个改变对节约内存很有意义。尽管如此,它也是可能的,相对于生成器 --- 如需要遍历多次。它是不那么高效的。而对于那些情况下,我们真正需要的是列表对象,我们可以通过 list() 函数简单的把迭代对象转换成一个列表。# py2print range(3)print type(range(3))[0, 1, 2]&lt;type &#x27;list&#x27;&gt;# py3print(range(3))print(type(range(3)))print(list(range(3)))range(0, 3)&lt;class &#x27;range&#x27;&gt;[0, 1, 2] 在 Python 3 中一些经常使用到的不再返回列表的函数和方法： zip() map() filter() dictionary’s .keys() method dictionary’s .values() method dictionary’s .items() method 字符串 &amp; 编码字符串是最大的变化之一, 在 Python2 中,字符串有两个类型,一个是 unicode,一个是 str,前者表示文本字符串,后者表示字节序列 在 Python3 中两者做了严格区分,分别用 str 表示字符串,byte 表示字节序列,任何需要写入文本或者网络传输的数据都只接收字节序列 Python2 的默认编码是 asscii Python3 默认采用了 UTF-8 作为默认编码,因此你不再需要在文件顶部写 # coding=utf-8 1234567# py2&gt;&gt;&gt; sys.getdefaultencoding()&#x27;ascii&#x27;# py3&gt;&gt;&gt; sys.getdefaultencoding()&#x27;utf-8&#x27; 格式化字符串1234567891011121314在Python中格式化语法的方式大家通常都会偏向于【Format】或者 【%S】这两种方法,操作如下：print(&quot;My name is %s&quot; % (&#x27;phithon&#x27;, ))print(&quot;My name is %(name)s&quot; % &#123;&#x27;name&#x27;:&#x27;phithon&#x27;&#125;)print(&quot;My name is &#123;&#125;&quot;.format(&quot;bob&quot;))print(&quot;My name is &#123;name&#125;&quot;.format(name=&quot;bob&quot;))而到了Python3.6版本,推出了新的格式化字符串的灵活方法【f-string】,使用【f-string】编写的与上面功能相同的代码是这样的name=&quot;bob&quot;print(f&quot;My name is &#123;name&#125;&quot;)我们对比这几种格式化字符串的方法,可以发现相比于常见的字符串格式符【%S】 或 【Format】 方法,【f-string】 直接在占位符中插入变量显得更加方便,也更好理解, 路径管理库 Pathlib(最低 Python 版本为 3.4)枚举(最低 Python 版本为 3.4)1234567891011121314# py3from enum import Enum, autoclass Monster(Enum): ZOMBIE = auto() WARRIOR = auto() BEAR = auto()print(Monster.ZOMBIE)for i in Monster: print(i)#Monster.ZOMBIE#Monster.ZOMBIE#Monster.WARRIOR#Monster.BEAR 原生 LRU 缓存(最低 Python 版本为 3.2)TODO LRU 缓存缓存是大家在开发中都会用到的一个特性,如果我们准确的使用好它,它会节省我们很多时间和成本。相信很多人初学 Python 装饰器的时候都会去实现一个缓存的装饰器来节省斐波那契函数的计算时间。而 Python 3 之后将 LRU(最近最少使用算法)缓存作为一个名为「lru_cache」的装饰器,使得对缓存的使用非常简单。 123456789101112from functools import lru_cache@lru_cache(maxsize=512)def fib_memoization(number: int) -&gt; int: if number == 0: return 0 if number == 1: return 1 return fib_memoization(number-1) + fib_memoization(number-2)start = time.time()fib_memoization(40)print(f&#x27;Duration: &#123;time.time() - start&#125;s&#x27;)# Duration: 6.866455078125e-05s 扩展的可迭代对象解包(最低 Python 版本为 3.0)12345678910111213141516171819Python解包相信在我们初学Python的时候都有所了解,如果我们很多地掌握这个特性,相信是一件非常酷的事情。那什么是扩展的解包呢？我们可以从pep3132中了解更多,举个例子：# Python 3.4 中 print 函数 不允许多个 * 操作&gt;&gt;&gt; print(*[1,2,3], *[3,4]) File &quot;&lt;stdin&gt;&quot;, line 1 print(*[1,2,3], *[3,4]) ^SyntaxError: invalid syntax&gt;&gt;&gt;# 再来看看 python3.5以上版本# 可以使用任意多个解包操作&gt;&gt;&gt; print(*[1], *[2], 3)1 2 3&gt;&gt;&gt; *range(4), 4(0, 1, 2, 3, 4)&gt;&gt;&gt; [*range(4), 4][0, 1, 2, 3, 4]&gt;&gt;&gt; &#123;*range(4), 4&#125;&#123;0, 1, 2, 3, 4&#125;&gt;&gt;&gt; &#123;&#x27;x&#x27;: 1, **&#123;&#x27;y&#x27;: 2&#125;&#125;&#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2&#125;我们可以看到,解包这个操作也算的上Python中极其潮流的玩法了,耍的一手好解包,真的会秀翻全场啊！ Data class 装饰器(最低 Python 版本为 3.7)12345678910111213141516Python 3.7 引入了【data class】,新特性大大简化了定义类对象的代码量,代码简洁明晰。通过使用@dataclass装饰器来修饰类的设计,可以用来减少对样板代码的使用,因为装饰器会自动生成诸如「__init__()」和「__repr()__」这样的特殊方法。在官方的文档中,它们被描述为「带有缺省值的可变命名元组」。from dataclasses import dataclass@dataclassclass DataClassCard: rank: str suit: str#生成实例queen_of_hearts = DataClassCard(&#x27;Q&#x27;, &#x27;Hearts&#x27;)print(queen_of_hearts.rank)print(queen_of_hearts)print(queen_of_hearts == DataClassCard(&#x27;Q&#x27;, &#x27;Hearts&#x27;))#Q#DataClassCard(rank=&#x27;Q&#x27;, suit=&#x27;Hearts&#x27;)#True 类型提示 Type hinting12343. 类型提示 Type hinting(最低 Python 版本为 3.5)编程语言有很多类型,静态编译型语言和动态解释型语言的对比是软件工程中一个热门的话题,几乎每个人对此有自己的看法。在静态语言中类型标注无疑是让人又爱又恨,爱的是编译速度加快,团队合作中准确了解函数方法的入参类型,恨的是Coding时极其繁琐的标注。不过,标注这种极其符合团队文化的操作还是在Python3中被引入,并且很快得到了人们的喜爱。def print_yes_or_no(codition: str) -&gt; bool: pass 细节语法差异next() and .next()12345# py2next() 和 .next() 都可以使用# py3只能使用 next() nonlocalPython3 中新增 非局部变量 nonlocal,用于设置嵌套函数 unicode,字符串 u’’1234567# py2u&quot;根据orm模型重建表&quot;# py3&quot;根据orm模型重建表&quot;字符串、注释、unicode(xxx) 都需要去掉 u&quot;&quot; ,因为Python3默认为unicode,无需u前缀标识unicode Python3加u&#x27;&#x27;不会报错,但是无实际含义 字典的 items 加 list123456789101112# py2savepath_dict.items()list(savepath_dict.items())# py3&gt;&gt;&gt; a = &#123;&#x27;a&#x27;:123&#125;&gt;&gt;&gt; a.items()dict_items([(&#x27;a&#x27;, 123)])&gt;&gt;&gt; list(a.items())[(&#x27;a&#x27;, 123)]字典的items加list Python3不加list也不会报错 print 语法12345678# py2print &quot;请输入正确的时间格式: yyyy-mm-dd&quot;# py3print(&quot;请输入正确的时间格式: yyyy-mm-dd&quot;)# 小结1. Python2中print作为语句,Python3中print作为函数使用(接收字符串作为参数) 除法运算除法运算 Python3 保留小数部分 12345678910# py2In [11]: 1/2Out[11]: 0# py3In [12]: 1/2Out[12]: 0.5In [13]: 1//2Out[13]: 0 xrange 在 Python3 中被去除八进制字面量表示Python3 中八进制不允许简写 123456789# py2&gt;&gt;&gt; 0o1000512&gt;&gt;&gt; 01000512# py3&gt;&gt;&gt; 0o1000512 模块名称修改Python3 中模块包名称符合 pep8 规范 123456789101112131415# py2_winregConfigParsercopy_regQueueSocketServerrepr# py3winregconfigparsercopyregqueuesocketserverreprlib 数据类型123456789101112131415161)Py3.X去除了long类型,现在只有一种整型——int,但它的行为就像2.X版本的long2)新增了bytes类型,对应于2.X版本的八位串,定义一个bytes字面量的方法如下：&gt;&gt;&gt; b = b&#x27;china&#x27;&gt;&gt;&gt; type(b)&lt;type &#x27;bytes&#x27;&gt;str 对象和 bytes 对象可以使用 .encode() (str -&gt; bytes) 或 .decode() (bytes -&gt; str)方法相互转化。&gt;&gt;&gt; s = b.decode()&gt;&gt;&gt; s&#x27;china&#x27;&gt;&gt;&gt; b1 = s.encode()&gt;&gt;&gt; b1b&#x27;china&#x27;3)dict的.keys()、.items 和.values()方法返回迭代器,而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key(),用 in替代它吧 从键盘录入一个字符串12345# py2raw_input(&quot;提示信息&quot;)# py3input(&quot;提示信息&quot;) 不等运算符Python 2.x 中不等于有两种写法 != 和 &lt;&gt; Python 3.x 中去掉了&lt;&gt;, 只有!=一种写法,还好,我从来没有使用&lt;&gt;的习惯 隐式命名空间包(最低 Python 版本为 3.3)在 Python 2 中,上面每个文件夹都必须包含将文件夹转化为 Python 程序包的__init__.py文件。 在 Python 3 中,随着隐式命名空间包的引入,这些文件不再是必须的了。 但建议有__init__.py文件 True and False1234# py2 中 True 和 False 可以赋值True = 1# py3 中 True 和 False 变更为关键字, 不允许更改 basestring12345# py2isinstance(fields, basestring)# py3isinstance(fields, str) has_key12345678# py2if not rst.has_key(&quot;aggregations&quot;):# py3if &quot;aggregations&quot; not in rst:Python3中可以使用 key not in dic 来识别key是否在字典中,Python3中没有 dic.has_key(&#x27;xxxx&#x27;) sys reload 语法1234567# py2import sysreload(sys)sys.setdefaultencoding(&#x27;utf8&#x27;)# py3import sys to_md5(x)123456789# py2 addr_df[&quot;peer_node_id&quot;] = addr_df[&quot;peer_node_label&quot;]. \\ apply(lambda x: to_md5(x))# py3to_md5(x.encode(&#x27;utf-8&#x27;))否则报错TypeError: Unicode-objects must be encoded before hashing min/max 函数12345678910Min/max函数在 Python 3 中,如果想对列表排序或找到最大/最小值,所有的元素必须可以比较。如果你原来的代码是 Python 2 写的,里面有包含 None 元素的列表,那么换到 Python 3 时就可能会出现一些问题。那么可以用 min/max 函数来解决这种冲突。def listmin(L): &#x27;&#x27;&#x27; Returns min of an iterable L, Ignoring null (None) values. If all values are null, returns None &#x27;&#x27;&#x27; values = [v for v in L if v is not None]return min(values) if values else None也可以写一个相似的函数来确定最大元素。 cmp1234567891011# py2cmp(1,2)# py3python3移除了cmp()函数,但提供了六个丰富的比较运算符,详见此处import operator #首先要导入运算符模块operator.gt(1,2) #意思是greater than(大于)operator.ge(1,2) #意思是greater and equal(大于等于)operator.eq(1,2) #意思是equal(等于)operator.le(1,2) #意思是less and equal(小于等于)operator.lt(1,2) #意思是less than(小于) except 语法12345678# py2except Exception, err: print(err.message)# py3except Exception as err: print(str(err)) 虚拟变量,For 循环变量和全局命名空间泄漏123456789在使用由不同版本 Python 编写的代码时,还有一个很有意思的地方。from __future__ import print_functiona = [i for i in range(10)]print(i)如果我们在 Python 2 解释器上运行这段代码,我们会得到结果 9,因为用于列表推导式的 i 变量留在了内存中。如果你在下部分代码中忘了这回事,再使用 i 变量的话,会导致不可见的错误。在 Python 3 中一切更为简单,在这个例子中的变量只在列表的创建期间使用,之后不再保存。这样当我们运行代码时,就会看到如下结果：NameError: name &#x27;i&#x27; is not defined func.func_name12345# py2func.func_name# py3func.__name__ 软件差异1234567891011121314151617181920212223# PandasModuleNotFoundError: No module named &#x27;_bz2&#x27; Pandas==0.25.3 报此错误更改安装 pandas==0.24.2# unioutimport unioutpython3 中没有 uniout# gunicornpython2gunicorn -c fdm/base/gun.conf fdm.views:apppython3配置文件必须有 .py 扩展名gunicorn -c fdm/base/gun.conf.py fdm.views:app 否则报错!!!!!! WARNING: configuration file should have a valid Python extension.!!!python2workers = multiprocessing.cpu_count() / 4 + 1python3 workers 只接受 int 参数workers = int(multiprocessing.cpu_count() / 4 + 1) from module import * 只能用于模块，不能用于函数from .[module] import namefrom .[module] import name 是相对导入的唯一正确语法，所有不以.开头的导入都被当成绝对导入 Python2.7 升级到 Python3.6Python3 自带 2to3 工具: 2to3 -w 文件/文件夹路径 项目代码修改: 2to3 去除 unicode print except,err has_key list(child_menus.get(menu_id, {}).items()) 字典加 list raw_input &lt;&gt; basestring hashlib.md5(dataset_name.encode(‘utf-8’) 增加 encode sys reload 手动去除 cmp 待修改项: 除法运算。 所有 / 项都需要检查 Python2 升级 参考链接 知乎 Python 2 和 Python 3 有哪些主要区别？ 菜鸟教程-Python2.x 和 Python3.x 的区别 Python 官网-Python3 新增差异 title: Python23差异对比02url_path: python/advance/Python23差异对比02tags: python python-进阶categories: python python-进阶description: Python23差异对比02 tags: Python2 Python3 差异对比 基础知识 2020 年 01 月 Python2.7.11&amp;Python3.6.0 差异环境说明: Python2.7.11 -&gt; Python3.6 Centos7.5 文档说明: 本文主要用于 项目 Python2 迁移升级到 Python3 学习了解 Python3 本文主要来源于 知乎-Python23 差异 菜鸟教程-Python23 差异 官网-Python23 差异 主要区别Python23 主要区别: 统一了字符编码支持。 增加了新的语法。print/exec 等成为了函数,格式化字符串变量,类型标注,添加了 nonlocal、yield from、async/await、yield for 关键词和annotations、context、traceback、qualname等 dunder 方法。 修改了一些语法。metaclass,raise、map、filter 以及 dict 的 items/keys/values 方法返回迭代对象而不是列表,描述符协议,保存类属性定义顺序,保存关键字参数顺序 去掉了一些语法。cmp、&lt;&gt;(也就是!=)、xrange(其实就是 range)、不再有经典类 增加一些新的模块。concurrent.futures、venv、unittest.mock、asyncio、selectors、typing 等 修改了一些模块。主要是对模块添加函数/类/方法(如 functools.lru_cache、threading.Barrier)或者参数。 模块改名。把一些相关的模块放进同一个包里面(如 httplib, BaseHTTPServer, CGIHTTPServer, SimpleHTTPServer, Cookie, cookielib 放进了 http 里面,urllib, urllib2, urlparse, robotparse 放进了 urllib 里面),个例如 SocketServer 改成了 socketserver,Queue 改成 queue 等 8. 去掉了一些模块或者函数。gopherlib、md5、contextlib.nested、inspect.getmoduleinfo 等。 优化。重新实现了 dict 可以减少 20%-25%的内存使用；提升 pickle 序列化和反序列化的效率；collections.OrderedDict 改用 C 实现；通过 os.scandir 对 glob 模块中的 glob()及 iglob()进行优化,使得它们现在大概快了 3-6 倍等.. 这些都是喜大普奔的好消息,同样开发者不需要感知,默默的就会让结果变得更好。 其他。构建过程、C 的 API、安全性等方面的修改,通常对于开发者不需要关心。 核心语法差异Python23 主要变化项 字符串: 解决了编码问题 编码： 由默认 asscii, 变为 utf-8 返回可迭代对象,而不是列表1234567891011121314151617181920212223如果在 xrange 章节看到的,现在在 Python 3 中一些方法和函数返回迭代对象 -- 代替 Python 2 中的列表因为我们通常那些遍历只有一次,我认为这个改变对节约内存很有意义。尽管如此,它也是可能的,相对于生成器 --- 如需要遍历多次。它是不那么高效的。而对于那些情况下,我们真正需要的是列表对象,我们可以通过 list() 函数简单的把迭代对象转换成一个列表。# py2print range(3)print type(range(3))[0, 1, 2]&lt;type &#x27;list&#x27;&gt;# py3print(range(3))print(type(range(3)))print(list(range(3)))range(0, 3)&lt;class &#x27;range&#x27;&gt;[0, 1, 2] 在 Python 3 中一些经常使用到的不再返回列表的函数和方法： zip() map() filter() dictionary’s .keys() method dictionary’s .values() method dictionary’s .items() method 字符串 &amp; 编码字符串是最大的变化之一, 在 Python2 中,字符串有两个类型,一个是 unicode,一个是 str,前者表示文本字符串,后者表示字节序列 在 Python3 中两者做了严格区分,分别用 str 表示字符串,byte 表示字节序列,任何需要写入文本或者网络传输的数据都只接收字节序列 Python2 的默认编码是 asscii Python3 默认采用了 UTF-8 作为默认编码,因此你不再需要在文件顶部写 # coding=utf-8 1234567# py2&gt;&gt;&gt; sys.getdefaultencoding()&#x27;ascii&#x27;# py3&gt;&gt;&gt; sys.getdefaultencoding()&#x27;utf-8&#x27; 格式化字符串1234567891011121314在Python中格式化语法的方式大家通常都会偏向于【Format】或者 【%S】这两种方法,操作如下：print(&quot;My name is %s&quot; % (&#x27;phithon&#x27;, ))print(&quot;My name is %(name)s&quot; % &#123;&#x27;name&#x27;:&#x27;phithon&#x27;&#125;)print(&quot;My name is &#123;&#125;&quot;.format(&quot;bob&quot;))print(&quot;My name is &#123;name&#125;&quot;.format(name=&quot;bob&quot;))而到了Python3.6版本,推出了新的格式化字符串的灵活方法【f-string】,使用【f-string】编写的与上面功能相同的代码是这样的name=&quot;bob&quot;print(f&quot;My name is &#123;name&#125;&quot;)我们对比这几种格式化字符串的方法,可以发现相比于常见的字符串格式符【%S】 或 【Format】 方法,【f-string】 直接在占位符中插入变量显得更加方便,也更好理解, 路径管理库 Pathlib(最低 Python 版本为 3.4)枚举(最低 Python 版本为 3.4)1234567891011121314# py3from enum import Enum, autoclass Monster(Enum): ZOMBIE = auto() WARRIOR = auto() BEAR = auto()print(Monster.ZOMBIE)for i in Monster: print(i)#Monster.ZOMBIE#Monster.ZOMBIE#Monster.WARRIOR#Monster.BEAR 原生 LRU 缓存(最低 Python 版本为 3.2)TODO LRU 缓存缓存是大家在开发中都会用到的一个特性,如果我们准确的使用好它,它会节省我们很多时间和成本。相信很多人初学 Python 装饰器的时候都会去实现一个缓存的装饰器来节省斐波那契函数的计算时间。而 Python 3 之后将 LRU(最近最少使用算法)缓存作为一个名为「lru_cache」的装饰器,使得对缓存的使用非常简单。 123456789101112from functools import lru_cache@lru_cache(maxsize=512)def fib_memoization(number: int) -&gt; int: if number == 0: return 0 if number == 1: return 1 return fib_memoization(number-1) + fib_memoization(number-2)start = time.time()fib_memoization(40)print(f&#x27;Duration: &#123;time.time() - start&#125;s&#x27;)# Duration: 6.866455078125e-05s 扩展的可迭代对象解包(最低 Python 版本为 3.0)12345678910111213141516171819Python解包相信在我们初学Python的时候都有所了解,如果我们很多地掌握这个特性,相信是一件非常酷的事情。那什么是扩展的解包呢？我们可以从pep3132中了解更多,举个例子：# Python 3.4 中 print 函数 不允许多个 * 操作&gt;&gt;&gt; print(*[1,2,3], *[3,4]) File &quot;&lt;stdin&gt;&quot;, line 1 print(*[1,2,3], *[3,4]) ^SyntaxError: invalid syntax&gt;&gt;&gt;# 再来看看 python3.5以上版本# 可以使用任意多个解包操作&gt;&gt;&gt; print(*[1], *[2], 3)1 2 3&gt;&gt;&gt; *range(4), 4(0, 1, 2, 3, 4)&gt;&gt;&gt; [*range(4), 4][0, 1, 2, 3, 4]&gt;&gt;&gt; &#123;*range(4), 4&#125;&#123;0, 1, 2, 3, 4&#125;&gt;&gt;&gt; &#123;&#x27;x&#x27;: 1, **&#123;&#x27;y&#x27;: 2&#125;&#125;&#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2&#125;我们可以看到,解包这个操作也算的上Python中极其潮流的玩法了,耍的一手好解包,真的会秀翻全场啊！ Data class 装饰器(最低 Python 版本为 3.7)12345678910111213141516Python 3.7 引入了【data class】,新特性大大简化了定义类对象的代码量,代码简洁明晰。通过使用@dataclass装饰器来修饰类的设计,可以用来减少对样板代码的使用,因为装饰器会自动生成诸如「__init__()」和「__repr()__」这样的特殊方法。在官方的文档中,它们被描述为「带有缺省值的可变命名元组」。from dataclasses import dataclass@dataclassclass DataClassCard: rank: str suit: str#生成实例queen_of_hearts = DataClassCard(&#x27;Q&#x27;, &#x27;Hearts&#x27;)print(queen_of_hearts.rank)print(queen_of_hearts)print(queen_of_hearts == DataClassCard(&#x27;Q&#x27;, &#x27;Hearts&#x27;))#Q#DataClassCard(rank=&#x27;Q&#x27;, suit=&#x27;Hearts&#x27;)#True 类型提示 Type hinting12343. 类型提示 Type hinting(最低 Python 版本为 3.5)编程语言有很多类型,静态编译型语言和动态解释型语言的对比是软件工程中一个热门的话题,几乎每个人对此有自己的看法。在静态语言中类型标注无疑是让人又爱又恨,爱的是编译速度加快,团队合作中准确了解函数方法的入参类型,恨的是Coding时极其繁琐的标注。不过,标注这种极其符合团队文化的操作还是在Python3中被引入,并且很快得到了人们的喜爱。def print_yes_or_no(codition: str) -&gt; bool: pass 细节语法差异next() and .next()12345# py2next() 和 .next() 都可以使用# py3只能使用 next() nonlocalPython3 中新增 非局部变量 nonlocal,用于设置嵌套函数 unicode,字符串 u’’1234567# py2u&quot;根据orm模型重建表&quot;# py3&quot;根据orm模型重建表&quot;字符串、注释、unicode(xxx) 都需要去掉 u&quot;&quot; ,因为Python3默认为unicode,无需u前缀标识unicode Python3加u&#x27;&#x27;不会报错,但是无实际含义 字典的 items 加 list123456789101112# py2savepath_dict.items()list(savepath_dict.items())# py3&gt;&gt;&gt; a = &#123;&#x27;a&#x27;:123&#125;&gt;&gt;&gt; a.items()dict_items([(&#x27;a&#x27;, 123)])&gt;&gt;&gt; list(a.items())[(&#x27;a&#x27;, 123)]字典的items加list Python3不加list也不会报错 print 语法12345678# py2print &quot;请输入正确的时间格式: yyyy-mm-dd&quot;# py3print(&quot;请输入正确的时间格式: yyyy-mm-dd&quot;)# 小结1. Python2中print作为语句,Python3中print作为函数使用(接收字符串作为参数) 除法运算除法运算 Python3 保留小数部分 12345678910# py2In [11]: 1/2Out[11]: 0# py3In [12]: 1/2Out[12]: 0.5In [13]: 1//2Out[13]: 0 xrange 在 Python3 中被去除八进制字面量表示Python3 中八进制不允许简写 123456789# py2&gt;&gt;&gt; 0o1000512&gt;&gt;&gt; 01000512# py3&gt;&gt;&gt; 0o1000512 模块名称修改Python3 中模块包名称符合 pep8 规范 123456789101112131415# py2_winregConfigParsercopy_regQueueSocketServerrepr# py3winregconfigparsercopyregqueuesocketserverreprlib 数据类型123456789101112131415161)Py3.X去除了long类型,现在只有一种整型——int,但它的行为就像2.X版本的long2)新增了bytes类型,对应于2.X版本的八位串,定义一个bytes字面量的方法如下：&gt;&gt;&gt; b = b&#x27;china&#x27;&gt;&gt;&gt; type(b)&lt;type &#x27;bytes&#x27;&gt;str 对象和 bytes 对象可以使用 .encode() (str -&gt; bytes) 或 .decode() (bytes -&gt; str)方法相互转化。&gt;&gt;&gt; s = b.decode()&gt;&gt;&gt; s&#x27;china&#x27;&gt;&gt;&gt; b1 = s.encode()&gt;&gt;&gt; b1b&#x27;china&#x27;3)dict的.keys()、.items 和.values()方法返回迭代器,而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key(),用 in替代它吧 从键盘录入一个字符串12345# py2raw_input(&quot;提示信息&quot;)# py3input(&quot;提示信息&quot;) 不等运算符Python 2.x 中不等于有两种写法 != 和 &lt;&gt; Python 3.x 中去掉了&lt;&gt;, 只有!=一种写法,还好,我从来没有使用&lt;&gt;的习惯 隐式命名空间包(最低 Python 版本为 3.3)在 Python 2 中,上面每个文件夹都必须包含将文件夹转化为 Python 程序包的__init__.py文件。 在 Python 3 中,随着隐式命名空间包的引入,这些文件不再是必须的了。 但建议有__init__.py文件 True and False1234# py2 中 True 和 False 可以赋值True = 1# py3 中 True 和 False 变更为关键字, 不允许更改 basestring12345# py2isinstance(fields, basestring)# py3isinstance(fields, str) has_key12345678# py2if not rst.has_key(&quot;aggregations&quot;):# py3if &quot;aggregations&quot; not in rst:Python3中可以使用 key not in dic 来识别key是否在字典中,Python3中没有 dic.has_key(&#x27;xxxx&#x27;) sys reload 语法1234567# py2import sysreload(sys)sys.setdefaultencoding(&#x27;utf8&#x27;)# py3import sys to_md5(x)123456789# py2 addr_df[&quot;peer_node_id&quot;] = addr_df[&quot;peer_node_label&quot;]. \\ apply(lambda x: to_md5(x))# py3to_md5(x.encode(&#x27;utf-8&#x27;))否则报错TypeError: Unicode-objects must be encoded before hashing min/max 函数12345678910Min/max函数在 Python 3 中,如果想对列表排序或找到最大/最小值,所有的元素必须可以比较。如果你原来的代码是 Python 2 写的,里面有包含 None 元素的列表,那么换到 Python 3 时就可能会出现一些问题。那么可以用 min/max 函数来解决这种冲突。def listmin(L): &#x27;&#x27;&#x27; Returns min of an iterable L, Ignoring null (None) values. If all values are null, returns None &#x27;&#x27;&#x27; values = [v for v in L if v is not None]return min(values) if values else None也可以写一个相似的函数来确定最大元素。 cmp1234567891011# py2cmp(1,2)# py3python3移除了cmp()函数,但提供了六个丰富的比较运算符,详见此处import operator #首先要导入运算符模块operator.gt(1,2) #意思是greater than(大于)operator.ge(1,2) #意思是greater and equal(大于等于)operator.eq(1,2) #意思是equal(等于)operator.le(1,2) #意思是less and equal(小于等于)operator.lt(1,2) #意思是less than(小于) except 语法12345678# py2except Exception, err: print(err.message)# py3except Exception as err: print(str(err)) 虚拟变量,For 循环变量和全局命名空间泄漏123456789在使用由不同版本 Python 编写的代码时,还有一个很有意思的地方。from __future__ import print_functiona = [i for i in range(10)]print(i)如果我们在 Python 2 解释器上运行这段代码,我们会得到结果 9,因为用于列表推导式的 i 变量留在了内存中。如果你在下部分代码中忘了这回事,再使用 i 变量的话,会导致不可见的错误。在 Python 3 中一切更为简单,在这个例子中的变量只在列表的创建期间使用,之后不再保存。这样当我们运行代码时,就会看到如下结果：NameError: name &#x27;i&#x27; is not defined func.func_name12345# py2func.func_name# py3func.__name__ 软件差异1234567891011121314151617181920212223# PandasModuleNotFoundError: No module named &#x27;_bz2&#x27; Pandas==0.25.3 报此错误更改安装 pandas==0.24.2# unioutimport unioutpython3 中没有 uniout# gunicornpython2gunicorn -c fdm/base/gun.conf fdm.views:apppython3配置文件必须有 .py 扩展名gunicorn -c fdm/base/gun.conf.py fdm.views:app 否则报错!!!!!! WARNING: configuration file should have a valid Python extension.!!!python2workers = multiprocessing.cpu_count() / 4 + 1python3 workers 只接受 int 参数workers = int(multiprocessing.cpu_count() / 4 + 1) from module import * 只能用于模块，不能用于函数from .[module] import namefrom .[module] import name 是相对导入的唯一正确语法，所有不以.开头的导入都被当成绝对导入 Python2.7 升级到 Python3.6Python3 自带 2to3 工具: 2to3 -w 文件/文件夹路径 项目代码修改: 2to3 去除 unicode print except,err has_key list(child_menus.get(menu_id, {}).items()) 字典加 list raw_input &lt;&gt; basestring hashlib.md5(dataset_name.encode(‘utf-8’) 增加 encode sys reload 手动去除 cmp 待修改项: 除法运算。 所有 / 项都需要检查 Python2 升级 参考链接 知乎 Python 2 和 Python 3 有哪些主要区别？ 菜鸟教程-Python2.x 和 Python3.x 的区别 Python 官网-Python3 新增差异","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Python23项目切换","slug":"Languages/Python/learn9-py2-to-py3","date":"2021-10-23T11:54:51.126Z","updated":"2021-10-23T11:54:51.126Z","comments":true,"path":"Languages/Python/learn9-py2-to-py3.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn9-py2-to-py3.md/","excerpt":"","text":"tags: 2020年 05月 python2 python3.8.3 项目部署Python2 升级为 Python32to3修改内容 12345678去除 unicodeprintexcept,errhas_keylist(child_menus.get(menu_id, &#123;&#125;).items()) 字典加listraw_input&lt;&gt;basestring 去除 reload(sys)123456替换所有 reload(sys)sed -i &#x27;s/reload(sys)//g&#x27; `grep -rl &#x27;reload(sys)&#x27; | grep -v &quot;.py.bak&quot;`替换所有 sys.setdefaultencoding(&quot;utf-8&quot;)sed -i &#x27;s/sys.setdefaultencoding(&quot;utf8&quot;)//i&#x27; `grep -rl &#x27;setdefaultencoding&#x27; | grep -v &quot;.py.bak&quot;`sed -i &quot;s/sys.setdefaultencoding(&#x27;utf-8&#x27;)//i&quot; `grep -rl &#x27;setdefaultencoding&#x27; | grep -v &quot;.py.bak&quot;` 替换 cmpPython3 中没有 cmp 函数 1234567891011121314# Python2&gt;&gt;&gt; cmp([&#x27;a&#x27;],[&#x27;a&#x27;])0&gt;&gt;&gt; cmp([&#x27;a&#x27;],[&#x27;b&#x27;])-1&gt;&gt;&gt; cmp(3,1)1# Python3.8.3&gt;&gt;&gt; import operator&gt;&gt;&gt; operator.eq([&#x27;a&#x27;],[&#x27;a&#x27;])True&gt;&gt;&gt; operator.eq([&#x27;a&#x27;],[&#x27;as&#x27;])False 修改文件 fdm/modeling/base_node.py 替换 / &amp; //1grep -rn &#x27;/&#x27; | grep -v txt 问题记录Could not import the lzma module 问题原因: 由于缺失前置包xz lzma xz-devel，Python 编译不完全 解决方案: yum -y install xz xz-devel yum -y install lzma 重新编译安装 Python 日志详情: 12/home/scfan/env383/lib/python3.8/site-packages/pandas/compat/__init__.py:117: UserWarning: Could not import the lzma module. Your installed Python is incomplete. Attempting to use lzma compression will result in a RuntimeError. warnings.warn(msg) returned NULL without setting an error 问题背景: Python 编译时使用--enable-optimizations选项, 在make安装时报错。 --enable-optimizations选项 能够增加 Python 10%的性能,但会增加编译时间 解决方案: 方案 1: GCC 升级到 8(不推荐) 方案 2: 不使用--enable-optimizations选项 日志详情 1234567891011121314151617181920212223242526272829# Python make时报错日志./python -E -S -m sysconfig --generate-posix-vars ;\\if test $? -ne 0 ; then \\ echo &quot;generate-posix-vars failed&quot; ; \\ rm -f ./pybuilddir.txt ; \\ exit 1 ; \\fiCould not import runpy moduleTraceback (most recent call last): File &quot;/root/Python-3.8.3/Lib/runpy.py&quot;, line 15, in &lt;module&gt; import importlib.util File &quot;/root/Python-3.8.3/Lib/importlib/util.py&quot;, line 14, in &lt;module&gt; from contextlib import contextmanager File &quot;/root/Python-3.8.3/Lib/contextlib.py&quot;, line 4, in &lt;module&gt; import _collections_abcSystemError: &lt;built-in function compile&gt; returned NULL without setting an errorgenerate-posix-vars failedmake[1]: *** [pybuilddir.txt] Error 1make[1]: Leaving directory `/root/Python-3.8.3`make: *** [profile-opt] Error 2# Python去除 --enable-optimizations 选项后 正常编译./configure 结束后日志config.status: creating pyconfig.hconfig.status: pyconfig.h is unchangedcreating Modules/Setup.localcreating MakefileIf you want a release build with all stable optimizations active (PGO, etc),please run ./configure --enable-optimizations the imp module is deprecated in favour of importlib 问题背景: Virtualenv 版本为 Python2.7 安装的 15.1.0 解决方案: 卸载原有 15.1.0, 安装 20.0.20 版本 12345678[scfan@fdm ~]$ virtualenv env383 -p python383Running virtualenv with interpreter /usr/bin/python383Using base prefix &#x27;/usr/local/python383&#x27;/usr/local/lib/python2.7/site-packages/virtualenv.py:1039: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module&#x27;s documentation for alternative uses import impNew python executable in /home/scfan/env383/bin/python383Also creating executable in /home/scfan/env383/bin/pythonInstalling setuptools, pip, wheel...done. failed to find interpreter for Builtin discover of python_spec 问题背景: virtualenv 升级到 20.0.20 后,创建虚拟环境报错 解决方案 指定 Python 绝对路径 来创建 env virtualenv env383 -p /usr/bin/python383 日志详情: 123[root@fdm Python-3.8.3]# virtualenv env383 -p python383RuntimeError: failed to find interpreter for Builtin discover of python_spec=&#x27;python383&#x27; 解决方案 12345[scfan@fdm ~]$ virtualenv env383 -p /usr/bin/python383created virtual environment CPython3.8.3.final.0-64 in 255ms creator CPython3Posix(dest=/home/scfan/env383, clear=False, global=False) seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=/home/scfan/.local/share/virtualenv/seed-app-data/v1.0.1) activators PythonActivator,FishActivator,XonshActivator,CShellActivator,PowerShellActivator,BashActivator unable to locate include directory containing header files 问题背景： pip 安装 python-nss 包时报错 解决方案 yum install nss-devel nspr-devel -y 1234567891011121314151617181920212223242526Collecting zipp&gt;=0.5 Downloading http://mirrors.aliyun.com/pypi/packages/b2/34/bfcb43cc0ba81f527bc4f40ef41ba2ff4080e047acb0586b56b3d017ace4/zipp-3.1.0-py3-none-any.whl (4.9 kB)Collecting pyasn1 Downloading http://mirrors.aliyun.com/pypi/packages/62/1e/a94a8d635fa3ce4cfc7f506003548d0a2447ae76fd5ca53932970fe3053f/pyasn1-0.4.8-py2.py3-none-any.whl (77 kB) |████████████████████████████████| 77 kB 10.7 MB/sCollecting pyasn1-modules Downloading http://mirrors.aliyun.com/pypi/packages/95/de/214830a981892a3e286c3794f41ae67a4495df1108c3da8a9f62159b9a9d/pyasn1_modules-0.2.8-py2.py3-none-any.whl (155 kB) |████████████████████████████████| 155 kB 8.5 MB/sCollecting python-nss&gt;=0.16 Downloading http://mirrors.aliyun.com/pypi/packages/6b/29/629098e34951c358b1f04f13a70b3590eb0cf2df817d945bd05c4169d71b/python-nss-1.0.1.tar.bz2 (222 kB) |████████████████████████████████| 222 kB 11.4 MB/s ERROR: Command errored out with exit status 1: command: /home/scfan/env383/bin/python -c &#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-btu3wbdr/python-nss/setup.py&#x27;&quot;&#x27;&quot;&#x27;; __file__=&#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-btu3wbdr/python-nss/setup.py&#x27;&quot;&#x27;&quot;&#x27;;f=getattr(tokenize, &#x27;&quot;&#x27;&quot;&#x27;open&#x27;&quot;&#x27;&quot;&#x27;, open)(__file__);code=f.read().replace(&#x27;&quot;&#x27;&quot;&#x27;\\r\\n&#x27;&quot;&#x27;&quot;&#x27;, &#x27;&quot;&#x27;&quot;&#x27;\\n&#x27;&quot;&#x27;&quot;&#x27;);f.close();exec(compile(code, __file__, &#x27;&quot;&#x27;&quot;&#x27;exec&#x27;&quot;&#x27;&quot;&#x27;))&#x27; egg_info --egg-base /tmp/pip-pip-egg-info-t291oo12 cwd: /tmp/pip-install-btu3wbdr/python-nss/ Complete output (9 lines): Traceback (most recent call last): File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt; File &quot;/tmp/pip-install-btu3wbdr/python-nss/setup.py&quot;, line 409, in &lt;module&gt; sys.exit(main(sys.argv)) File &quot;/tmp/pip-install-btu3wbdr/python-nss/setup.py&quot;, line 333, in main nss_include_dir = find_include_dir([&#x27;nss3&#x27;, &#x27;nss&#x27;], [&#x27;nss.h&#x27;, &#x27;pk11pub.h&#x27;], include_roots=include_roots) File &quot;/tmp/pip-install-btu3wbdr/python-nss/setup.py&quot;, line 94, in find_include_dir raise ValueError(&quot;unable to locate include directory containing header files %s&quot; % include_files) ValueError: unable to locate include directory containing header files [&#x27;nss.h&#x27;, &#x27;pk11pub.h&#x27;] ----------------------------------------ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output. SyntaxError: Missing parentheses in call to ‘print’ TODO参考链接 解决方案 multiprocessing 在 Python3.8.3 中不属于第三方库，无需安装 from multiprocessing import pool 1234567891011121314151617(env383) [scfan@fdm server]$ pip install multiprocessingLooking in indexes: http://mirrors.aliyun.com/pypi/simple/Collecting multiprocessing Downloading http://mirrors.aliyun.com/pypi/packages/b8/8a/38187040f36cec8f98968502992dca9b00cc5e88553e01884ba29cbe6aac/multiprocessing-2.6.2.1.tar.gz (108 kB) |████████████████████████████████| 108 kB 2.1 MB/s ERROR: Command errored out with exit status 1: command: /home/scfan/env383/bin/python -c &#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-6mx1e585/multiprocessing/setup.py&#x27;&quot;&#x27;&quot;&#x27;; __file__=&#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-6mx1e585/multiprocessing/setup.py&#x27;&quot;&#x27;&quot;&#x27;;f=getattr(tokenize, &#x27;&quot;&#x27;&quot;&#x27;open&#x27;&quot;&#x27;&quot;&#x27;, open)(__file__);code=f.read().replace(&#x27;&quot;&#x27;&quot;&#x27;\\r\\n&#x27;&quot;&#x27;&quot;&#x27;, &#x27;&quot;&#x27;&quot;&#x27;\\n&#x27;&quot;&#x27;&quot;&#x27;);f.close();exec(compile(code, __file__, &#x27;&quot;&#x27;&quot;&#x27;exec&#x27;&quot;&#x27;&quot;&#x27;))&#x27; egg_info --egg-base /tmp/pip-pip-egg-info-s9dmt1uy cwd: /tmp/pip-install-6mx1e585/multiprocessing/ Complete output (6 lines): Traceback (most recent call last): File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt; File &quot;/tmp/pip-install-6mx1e585/multiprocessing/setup.py&quot;, line 94 print &#x27;Macros:&#x27; ^ SyntaxError: Missing parentheses in call to &#x27;print&#x27;. Did you mean print(&#x27;Macros:&#x27;)? ----------------------------------------ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output. 附件参考资源 在 CentOS 7 上安装并配置 Python 3.6 环境","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"算法与数据结构之链表","slug":"Languages/Python/learn5-data-structure","date":"2021-10-23T11:54:51.125Z","updated":"2021-10-23T11:54:51.125Z","comments":true,"path":"Languages/Python/learn5-data-structure.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn5-data-structure.md/","excerpt":"","text":"链表链表是计算机科学中最常用的数据结构之一。它也是最简单的结构之一，也是更高层结构(如堆栈、循环缓冲区和队列)的基础 定义 链表是计算机科学中最常用的数据结构之一。它也是最简单的结构之一，也是更高层结构(如堆栈、循环缓冲区和队列)的基础 列表是通过引用连接的单个数据元素的集合.数据元素可以由地址数据、地理数据、几何数据、路由信息或事务细节组成。通常，链接列表的每个元素都具有特定于列表的相同数据类型 单个列表元素称为节点。节点不同于顺序存储在内存中的数组。相反，它可能会在不同的内存段中找到它们，您可以通过跟踪从一个节点到下一个节点的指针找到这些内存段。通常使用 null 元素标记列表的结尾，该元素由 python 等效的 None 表示。 链表就是将一系列不连续的内存联系起来，将那种碎片内存进行合理的利用，解决空间的问题 链表允许插入和删除表上任意位置上的节点，但是不允许随即存取 内存中的存储形式可以分为连续存储和离散存储两种。因此，数据的物理存储结构就有连续存储和离散存储两种，它们对应了我们通常所说的数组和链表。 单链表数据结构 head 保存首尾节点的地址 data1,next -&gt; data2,next -&gt; data3,next 双链表数据结构 head=None 时为首节点，next=null 时为尾节点 head,data,next -&gt; head,data,next -&gt; head,data,next 链表类型 单链接列表 节点只指向列表中的下一个元素 双链接列表 节点指向列表中的下一个元素，也指向上一个节点 循环链表 循环链表就是首节点和末节点被连接在一起。循环链表中第一个节点之前就是最后一个节点 链表应用场景 数组应用场景： 数据比较少 经常做的运算是按序号访问数据元素；数组更容易实现，任何高级语言都支持； 构建的线性表较稳定。 链表应用场景： 对线性表的长度或者规模难以估计 频繁做插入删除操作 构建动态性比较强的线性表。 手把手实现 python 的链表数据结构 数组和链表差异分析 数组和链表的差异分析 差异点 链表是链式的存储结构；数组是顺序的存储结构。 链表通过指针来连接元素与元素，数组则是把所有元素按次序依次存储。 链表的插入删除元素相对数组较为简单，不需要移动元素，且较为容易实现长度扩充，但是寻找某个元素较为困难； 数组寻找某个元素较为简单，但插入与删除比较复杂，由于最大长度需要再编程一开始时指定，故当达到最大长度时，扩充长度不如链表方便。 相同点 两种结构均可实现数据的顺序存储，构造出来的模型呈线性结构。 单链表和双链表的差异 一、方向不同 单链表只有指向下一个结点的指针 双链表既有指向下一个结点的指针，也有指向上一个结点的指针 二、适用情况不同 单向链表更适合元素的增加与删除 双向链表更适合元素的查询工作 三、读取不同 单链表只能单向读取 双链表可以双向读取 链表的代码实现单链表 Python 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145class Node: def __init__(self, data): self.data = data self.next = None def __str__(self): return str(self.data)# 通过单链表构建一个list的结构： 添加 删除 插入 查找 获取长度 判断是否为空...# list1 = [] list1.append(5) [5,] slist = SingleList() slist.append(5)class SingleList: def __init__(self, node=None): self._head = node def isEmpty(self): return self._head == None def append(self, item): # 尾部添加 node = Node(item) if self.isEmpty(): self._head = node else: cur = self._head while cur.next != None: cur = cur.next cur.next = node # 求长度 def len(self): cur = self._head count = 0 while cur != None: count += 1 cur = cur.next return count # 遍历 def print_all(self): cur = self._head while cur != None: print(cur) cur = cur.next def pop(self, index): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if index == 0: self._head = self._head.next else: cur = self._head # 找到当前下标的前一个元素 while index - 1: cur = cur.next index -= 1 # 修改的next的指向位置 cur.next = cur.next.next def insert(self, index, item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) if index == 0: node.next = self._head self._head = node else: cur = self._head while index - 1: cur = cur.next index -= 1 node.next = cur.next cur.next = node def update(self, index, new_item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(new_item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(new_item) if index == 0: node.next = self._head.next self._head = node else: cur = self._head node.next = cur.next.next cur.next = node def remove(self, item): if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) cur = self._head while cur == node: cur = cur.next cur.next = cur.next.nextif __name__ == &#x27;__main__&#x27;: slist = SingleList() print(slist.isEmpty()) # True print(slist.len()) slist.append(5) print(slist.isEmpty()) # False print(slist.len()) # 1 slist.append(8) slist.append(6) slist.append(3) slist.append(1) print(slist.isEmpty()) # True print(slist.len()) print(&#x27;---------------------&#x27;) slist.print_all() print(&#x27;----------pop-------------&#x27;) slist.pop(2) slist.print_all() print(&#x27;--------insert-------&#x27;) slist.insert(1, 19) slist.print_all() print(&#x27;--------update-------&#x27;) slist.update(1, 18) slist.print_all() print(&#x27;--------remove-------&#x27;) slist.remove(18) slist.print_all() 双链表 Python 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145&#x27;&#x27;&#x27;双向链表&#x27;&#x27;&#x27;class Node: def __init__(self, data): self.data = data self.next = None self.prev = None def __str__(self): return str(self.data)class DoubleList: def __init__(self): self._head = None def isEmpty(self): return self._head == None def append(self, item): # 尾部添加 node = Node(item) if self.isEmpty(): self._head = node else: cur = self._head while cur.next != None: cur = cur.next cur.next = node # 求长度 def add(self, item): node = Node(item) if self.isEmpty(): self._head = node else: node.next = self._head self._head.prev = node self._head = node def len(self): cur = self._head count = 0 while cur != None: count += 1 cur = cur.next return count def print_all(self): cur = self._head while cur != None: print(cur) cur = cur.next def insert(self, index, item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) if index == 0: node.next = self._head node.prev = self._head.prev self._head = node else: cur = self._head while index - 1: cur = cur.next index -= 1 node.next = cur.next node.prev = cur.prev cur.next = node cur.prev = node.prev def remove(self, item): if isinstance(item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(item) cur = self._head while cur == node: cur = cur.next cur.next = cur.next.next cur.prev = cur.prev def update(self, index, new_item): if index &lt; 0 or index &gt;= self.len(): raise IndexError(&#x27;index Error&#x27;) if isinstance(new_item, Node): raise TypeError(&#x27;不能是Node类型&#x27;) else: node = Node(new_item) if index == 0: node.next = self._head.next node.prev = self._head.prev self._head = node else: cur = self._head node.next = cur.next.next node.prev = cur.prev cur.next = node cur.prev = nodeif __name__ == &#x27;__main__&#x27;: dlist = DoubleList() print(dlist.len()) print(dlist.isEmpty()) # dlist.append(6) # dlist.append(9) # dlist.append(5) # print(dlist.len()) # print(dlist.isEmpty()) # dlist.print_all() dlist.add(6) dlist.add(9) dlist.add(5) dlist.print_all() print(&#x27;--------insert-------&#x27;) dlist.insert(1, 19) dlist.print_all() print(&#x27;--------update-------&#x27;) dlist.update(1, 18) dlist.print_all() print(&#x27;--------remove-------&#x27;) dlist.remove(18) dlist.print_all() 单链表和双链表的 Python 代码实现 相关资源","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"data-structure","slug":"python/data-structure","permalink":"http://fansichao.github.com/blog/categories/python/data-structure/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"data-structure","slug":"data-structure","permalink":"http://fansichao.github.com/blog/tags/data-structure/"}]},{"title":"","slug":"Languages/Python/learn9-code-format","date":"2021-10-23T11:54:51.125Z","updated":"2021-10-23T11:54:51.125Z","comments":true,"path":"Languages/Python/learn9-code-format.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn9-code-format.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Python 进程线程协程","slug":"Languages/Python/learn2-process","date":"2021-10-23T11:54:51.124Z","updated":"2021-10-23T11:54:51.124Z","comments":true,"path":"Languages/Python/learn2-process.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-process.md/","excerpt":"","text":"列表内容: 进程定义 资源使用情况，资源是否共享，效率是否高 使用场景 &amp; 使用样例 优势 &amp; 缺点 术语进程线程协程存在的原因: 背景说明: 为了提高程序性能 由于时间切片的存在，将时间分割为时间切片，每个时间切片单个 CPU 执行不同程序 多进程、多线程根据 cpu 核数不一样可能是并行的 也可能是并发的。协程的本质就是使用当前进程在不同的函数代码中切换执行，可以理解为并行。 协程是一个用户层面的概念，不同协程的模型实现可能是单线程 也可能是多线程 进程进程术语说明 - 资源说明: 进程就是一个运行中的程序，是系统的资源分配和运行调度的一个基本单位。由于 cpu 的多任务时间片轮转工作机制，所以同一时刻内一个 cpu 内核只能有一个进程在执行 概念: 进程是资源分配的单位 资源说明: 进程切换需要的资源很最大，效率很低 在多进程中，每个进程中所有数据(包括全局变量)都各自拥有一份，互不影响。 使用场景: 多进程适用于 CPU 密集型的场景 线程 线程是操作系统调度的单位 线程切换需要的资源一般，效率一般 资源说明: 在多线程中，数据在线程之间是共享的，所以多个线程可能会同时对数据文件进行读取修改，这样一来就无法保证了数据的安全性，所以对数据操作时还需要引入锁的概念。 线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，与其他线程共享进程所拥有的全部资源。一个进程至少包含一个线程 协程 协程切换任务资源很小，效率高 资源说明 协程本质上是一个单线程，协程间可以中断去执行另外一个程序，执行完后再返回，由于处在一个线程内，所以不存在读写冲突，控制共享资源不用加锁，更不需用进行线程切换。 协程是一种比线程更加轻量级的存在。正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程。协程不是被操作系统内核所管理，而完全是由程序所控制(也就是在用户态执行)。python 下常用的协程包有 yield，gevent，以及出现在 python3.4 以后的 async\\awaityield 示例代码(输出斐波那契數列前 N 个数): “协程是一种用户级的轻量级线程”,应用场景多用于 IO 密集型, 他有高并发的特点, 不适用于 CPU 密集型的场景。 协程主要是利用迭代器来实现多线程的效果, 相对于多线程的优势在于: 减少系统调用(切换线程需要系统级调用)的开销, 多协程运行于单线程中, 所以内存安全的, 不会产生脏数据, 也不会去竞争 GIL. 然后多进程+多协程可以达到充分利用 cpu 的效果 协程的关键在于yield 迭代器(generator)send, yield 是把迭代器里的值返回出来, send 就是把值写进迭代器,yield from, “yield from iterable 本质上等于 for item in iterable: yield item 的缩写版”, yield from 的出现是为了解决 嵌套的迭代器问题asyncio, 一个基于事件循环的异步 I/O 模块, 类似的有 gevent, tornado 等, 在 asyncio 中, yield from 就发挥了很大的作用, 因为有大量的消息需要隔层传递. 在 asyncio 中, 主要这样几个概念, 首先有一个 event_loop 事件循环, 它是一个无限循环程序 https://www.jianshu.com/p/90ada937c90d asyncio 主要流程应该是: 定义协程函数, 如果有耗时的操作用 await 挂起 —&gt; 创建一个事件循环 —-&gt; 创建 task —-&gt; 绑定回调 —&gt; 注册 task —&gt; 从 task 的 result 获取结果.搭配进程可以开多条 事件循环, 多核的并行操作.搭配线程还可以动态的注册 task.搭配 aiohttp 进行异步的 http 请求. 并行：多个 CPU 核心，不同的程序就分配给不同的 CPU 来运行。可以让多个程序同时执行并发：单个 CPU 核心，在一个时间切片里一次只能运行一个程序，如果需要运行多个程序，则串行执行 批处理：指一个处理完了另一个再处理； 进程：即每个程序的执行的代码(全部流程)，加上执行现场(当前执行场景)； 并发：因为多个程序在一个 CPU 上不断切换，人类看起来如同程序在同时执行，这就是并发；并行：即多个程序同时在多个 CPU 上执行，就是并行； 线程：进程内部，有多个执行流程(加上每个流程的执行场景)，这个流程就是线程； 协程：即线程内部，转换运行控制权； 进程是：一个 CPU 情况下，多个程序分别使用机器资源(CPU 或硬盘等)的概念；线程是：一个进程情况下，多个执行流程(即线程)分别使用分配给该进程的机器资源的概念；协程是：一个线程情况下，多个执行流程(即协程)由线程控制，分别使用分配给该线程的机器资源的概念； 进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源；线程是处理器调度的基本单位；协程可以理解为线程内部调度的基本单位。协程的优势在于：处理器调度(即线程)会有很大的场景切换消耗，而对处理器来说，协程属于同一个调度，切换消耗较小。本质就是各种抽象，用于提升小路，不用纠结太深，只要可以更好的解决问题提升效率即可。 实现方式进程、线程、协程使用样例。 进程实现mutiprocess 线程实现threading 协程实现gevent 附件参考链接 已参考资源 进程、线程、协程以及使用的原因 待参考资源 https://juejin.im/post/5b7bd540e51d4538a67a80e3https://zhuanlan.zhihu.com/p/30980478https://www.jb51.net/article/95971.htm 进程、线程、协程理解 快速理解多进程与多线程以及协程的使用场合和特点 【高频问题】线程、进程、协程 Python 之路[9] - 进程、线程、携程篇 相关资源TODO Python异步编程 asyncio 之路","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"算法与数据结构","slug":"Languages/Python/learn5-algorithm-know","date":"2021-10-23T11:54:51.124Z","updated":"2021-10-23T11:54:51.124Z","comments":true,"path":"Languages/Python/learn5-algorithm-know.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn5-algorithm-know.md/","excerpt":"","text":"TODO 数据结构基础知识 数据结构是什么，其特性有缺点，使用场景，基础使用等等 TODO 算法的基础使用，优缺点，使用场景，底层逻辑，时间空间复杂度分析等等 数据结构常见数据结构与算法整理总结(上) 算法迭代法关键点: 将一个原问题修改为子问题 对子问题重复调用计算 特性： 重复计算多，耗时高，时间复杂度高 动态规划 关键点: 将一个原问题修改为子问题 试图只解决每个子问题一次，一旦其问题已经解决，会将其存储，从而避免重复计算 特性: 尽量避免重复计算，时间复杂度低。 关键概念 最优子结构 边界 状态转移公式 1234567891011121314151617181920212223242526# 动态规划 存储计算中值，减少计算量def fun(n): if n == 1: return 1 if n == 2: return 2 a = 1 b = 2 tmp = a + b for i in range(3, n): tmp = a + b a = b b = tmp return tmp# 迭代法def fun(n): if n == 1: return 1 if n == 2: return 2 return fun(n-1) + fun(n-2)f(10) = f(9) + f(8) 是【最优子结构】f(1) 与 f(2) 是【边界】f(n) = f(n-1) + f(n-2) 【状态转移公式】 相关资源 ★★★★★ TODO 五分钟学算法：算法与数据结构文章详细分类与整理！ 图解 递归与动态规划","categories":[],"tags":[]},{"title":"趣味算法题大全附详细解法","slug":"Languages/Python/learn5-algorithm-topic","date":"2021-10-23T11:54:51.124Z","updated":"2021-10-23T11:54:51.125Z","comments":true,"path":"Languages/Python/learn5-algorithm-topic.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn5-algorithm-topic.md/","excerpt":"","text":"autoauto- [趣味算法题](#趣味算法题)auto - [1000 桶水，其中一桶有毒，猪喝毒水后会在 15 分钟内死去，想用一个小时找到这桶毒水，至少需要几头猪？](#1000-桶水其中一桶有毒猪喝毒水后会在-15-分钟内死去想用一个小时找到这桶毒水至少需要几头猪)auto - [有一栋 100 层高的大楼，给你两个完全相同的玻璃球。假设从某一层开始，丢下玻璃球会摔碎。那么怎么利用手中的两个球，用什么最优策略知道这个临界的层是第几层?](#有一栋-100-层高的大楼给你两个完全相同的玻璃球假设从某一层开始丢下玻璃球会摔碎那么怎么利用手中的两个球用什么最优策略知道这个临界的层是第几层)auto - [汉诺塔问题](#汉诺塔问题)auto - [一个人爬楼梯，每次只能爬 1 个或 2 个台阶，假设有 n 个台阶，那么这个人有多少种不同的爬楼梯方法？](#一个人爬楼梯每次只能爬-1-个或-2-个台阶假设有-n-个台阶那么这个人有多少种不同的爬楼梯方法)auto - [斐波那契数列](#斐波那契数列)autoauto 趣味算法题1000 桶水，其中一桶有毒，猪喝毒水后会在 15 分钟内死去，想用一个小时找到这桶毒水，至少需要几头猪？提示: 转为多维问题。在轮次中存活的猪可以同时喝水 题解 扩展题: 多桶有毒的情况？所有参数皆为可变参数的时候，如何来处理？ TODO 有一栋 100 层高的大楼，给你两个完全相同的玻璃球。假设从某一层开始，丢下玻璃球会摔碎。那么怎么利用手中的两个球，用什么最优策略知道这个临界的层是第几层?提示：动态规划. 平均每种情况下的次数。 题解 扩展思路： 多个球时，如何采用最优策略？ 如果 2 球时采用 10*10 = 100, 10 次作为间隔，最差 17 次, 最好 8 次. 如果 90 层没有碎，后面可以采用中分法来减少次数。如果 90 层碎了，则最坏情况为 9 + 8 = 17 次 汉诺塔问题 汉诺塔问题：古代有一个梵塔，塔内有三个座 A、B、C，A 座上有 64 个盘子，盘子大小不等，大的在下，小的在上。有一个和尚想把这个盘子从 A 座移到 B 座，但每次只能允许移动一个盘子，并且在移动过程中，3 个座上的盘子始终保持大盘在下，小盘在上。 题解 提示: 迭代法 一个人爬楼梯，每次只能爬 1 个或 2 个台阶，假设有 n 个台阶，那么这个人有多少种不同的爬楼梯方法？提示: 迭代法 题解 12345678910111213141516171819202122232425262728# 类似于 斐波那契数列# 0 1 1 2 3 5 8 13 21# 迭代法def fun(n): if n == 1: return 1 if n == 2: return 2 return fun(n-1) + fun(n-2)# 动态规划 存储计算中值，减少计算量def fun(n): if n == 1: return 1 if n == 2: return 2 a = 1 b = 2 tmp = a + b for i in range(3, n): tmp = a + b a = b b = tmp return tmpprint(fun(6)) 斐波那契数列斐波那契数列的 5 种 python 实现写法","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-algorithm","slug":"python/python-algorithm","permalink":"http://fansichao.github.com/blog/categories/python/python-algorithm/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"todo","slug":"todo","permalink":"http://fansichao.github.com/blog/tags/todo/"},{"name":"python-algorithm","slug":"python-algorithm","permalink":"http://fansichao.github.com/blog/tags/python-algorithm/"}]},{"title":"代码优化技巧","slug":"Languages/Python/learn2-optimization-tips","date":"2021-10-23T11:54:51.123Z","updated":"2021-10-23T11:54:51.123Z","comments":true,"path":"Languages/Python/learn2-optimization-tips.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-optimization-tips.md/","excerpt":"","text":"优化原则核心技巧其他技巧Python 代码性能优化技巧 常用代码优化技巧 sort()优于 sorted. 字符串拼接。join 优于字符串相加 列表表达式优于列表循环。 减少不必要的临时对象 应避免在高频函数中使用 import 语句的开销。去除无用 import 语句，延迟 import 尽量减少函数调用次数，减少时间复杂度。 元组内存优于列表。 检查值是否存在，set 快于列表循环。12345678910111213from timeit import timeitdef in_test(iterable): for i in range(1000): if i in iterable: passprint &#x27;set:&#x27;, timeit(&quot;in_test(iterable)&quot;, setup=&quot;from __main__ import in_test; iterable = set(range(1000))&quot;, number=10000)print &#x27;list:&#x27;, timeit(&quot;in_test(iterable)&quot;, setup=&quot;from __main__ import in_test; iterable = list(range(1000))&quot;, number=10000)print &#x27;tuple:&#x27;, timeit(&quot;in_test(iterable)&quot;, setup=&quot;from __main__ import in_test; iterable = tuple(range(1000))&quot;, number=10000)[out]:set: 0.558294298165list: 52.8850349101tuple: 58.9864508751 结论：当生成可迭代对象后并且不再进行改变，应该使用 tuple 节省内存；当生成集合用来进行检查某个值是否存在时，应该使用 set 来提高效率。 尽可能将 if 语句放在循环外面这是在很多书本上看到的建议，然而这么做的原因，我并没有找到详尽的解释，我自己总结出来的原因有这么几个： 如果可以把 if 放在循环外面，却放在循环里，就增加了很多不必要的判断 在计算机体系结构层面，if 放在循环里容易引起分支预测错误，而分支回退要耗很多指令周期 在计算机体系结构层面，if 放在循环里面会造成控制相关，影响指令并行(隐约记得在计算机体系结构这门课程中学过，然而记不太清了，有时间还是得复习复习相关知识=_=(计算机体系结构：量化研究方法，第三章：指令级并行及其开发))","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"代码优化工具","slug":"Languages/Python/learn2-optimization-tools","date":"2021-10-23T11:54:51.123Z","updated":"2021-10-23T11:54:51.123Z","comments":true,"path":"Languages/Python/learn2-optimization-tools.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-optimization-tools.md/","excerpt":"","text":"Python 作为高级编程语言，对于其性能要求也越来越注重。 本文总结： 性能优化的主要方法: 多进程处理，工具检测性能消耗完善代码，使用 Cython 扩展等。 说明代码优化工具列表代码优化工具列表| 优化工具 | 工具说明 ||—————–|——————-|| PyLint | 语法检查工具 || vprof | 运行时间和内存分析器。图形化工具。 || cProfile | 查询消耗时间最久的方法函数 || line_profile | 查看耗时函数中的行耗时 || timeit | 模块计算代码执行时间 || memory_profiler | 诊断内存的用量 | 代码常见性能优化指标机器性能指标 CPU IO MEM 内存 NET 网络 常见性能指标 响应时间 错误率 吞吐率 执行时间 内存占用 优化方法小结方法小结: 使用 cProfile, cStringIO 和 cPickle 等用 c 实现相同功能 使用 c 扩展。目前主要有 CPython(python 最常见的实现的方式)原生 API, ctypes,Cython，cffi 三种方式 并行编程 multiprocessing 大杀器 PyPy CUDA 编程 相关资源Python 应用与优化所必备的 6 个基本库 运行时间-vprof 图表化vprof 代码检测工具vprof 官网 vprof 简单使用 12345pip3 install vprof# 直接运行代码vprof -c h test.py# 带输入参数vprof -c cmh &quot;testscript.py --foo --bar&quot; 运行时间-gprof2dot 图表化(强烈推荐)gprof2dot 官网 cProfile+gprof2dot 简单使用 12345sudo pip3 install gprof2dot# 先用cProfile生成分析报告python3 -m cProfile -o output.pstats test.py# 使用 gprof2dot 画图gprof2dot -f pstats output.pstats | dot -Tpng -o output.png 编译优化-PyPyPyPy 是用 RPython(CPython 的子集)实现的 Python，使用了 Just-in-Time(JIT)编译器，即动态编译器，与静态编译器(如 gcc,javac 等)不同，它是利用程序运行的过程的数据进行优化。如果 python 程序中含有 C 扩展(非 cffi 的方式)，JIT 的优化效果会大打折扣，甚至比 CPython 慢(比 Numpy)。 所以在 PyPy 中最好用纯 Python 或使用 cffi 扩展。 PyPy 优势在于使用 JIT 动态编译，对于运行的函数会生成一个类 C 的函数。编译成机器码，下次调用函数时，会直接调用机器码，速度得到质的飞跃。但是由于本身编译机器码需要时间。 所以很多 JIT 实现都会先解释执行，然后确定了一段代码经常被执行之后，再进行编译。并且分多层 JIT，比较初级的对编译出来的机器码不做比较复杂的优化. 运行时间-上下文管理器用上下文管理器测量部分代码运行时间 12345678910111213141516171819202122232425from time import clockclass Timer(object): def __init__(self, verbose=False): self.verbose = verbose def __enter__(self): self.start = clock() return self def __exit__(self, *args): self.end = clock() self.secs = self.end - self.start self.msecs = self.secs * 1000 # millisecs if self.verbose: print &#x27;elapsed time: %f ms&#x27; % self.msecsif __name__ == &quot;__main__&quot;: with Timer() as t: replace_str = &quot;&quot; for i, char in enumerate(orignal_str * 10000): c = char if char != &quot; &quot; else &quot;-&quot; replace_str += c print t.secs 内存-objgraphobjgraph 是一个非常轻巧的工具，但在排查内存泄露的时候非常有用。objgraph 的代码很短，只有一个文件，其主要依靠标准库中的 gc 模块来获取对象之间的创建引用关系。objgraph 使用起来十分简单， 12345678# 列出最多实例的类型objgraph.show_most_common_types(shortnames=False)# 显示两次调用之间的对象数量变化objgraph.show_growth(limit=None)# 获取指定类型的对象objgraph.by_type(&#x27;Foobar&#x27;)# 查找反向引用objgraph.find_backref_chain(obj, objgraph.is_proper_module) 在遇到内存泄露问题时候首先考虑下用 objgraph 来进行查看，没有问题的时候也可以学习下它的代码，可以极大了解 gc 模块的应用。 内存-tracemalloctracemalloc 是用来分析 Python 程序内存分配的工具，使用上也很简单， 1234567import tracemalloctracemalloc.start()# ... run your application ...snapshot = tracemalloc.take_snapshot()top_stats = snapshot.statistics(&#x27;lineno&#x27;) snapshot 结果中可以看到每个模块最终创建分配的内存大小，在追查内存问题上很有帮助。Python 3.5.x 之后将 tracemalloc 集成到了标准库当中 编码规范-autopep8Autopep8 是一个将 python 代码自动编排的一个工具，它使用 pep8 工具来决定代码中的那部分需要被排。，Autopep8 可以修复大部分 pep8 工具中报告的排版问题。很多人都知道 Ctrl+Alt+L 也可以排版，快捷键只是可以简单的排版。跟 Autopep8 是无法相比的。 12# autopep8 使用命令autopep8 --in-place --aggressive --aggressive file.py","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Python 垃圾回收机制","slug":"Languages/Python/learn2-garbage-collection","date":"2021-10-23T11:54:51.122Z","updated":"2021-10-23T11:54:51.122Z","comments":true,"path":"Languages/Python/learn2-garbage-collection.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-garbage-collection.md/","excerpt":"","text":"附件参考资源https://www.cnblogs.com/aashui/p/9871009.html Python 垃圾回收机制 [转载]Python 垃圾回收机制–完美讲解","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Python魔法函数","slug":"Languages/Python/learn2-magic-func","date":"2021-10-23T11:54:51.122Z","updated":"2021-10-23T11:54:51.123Z","comments":true,"path":"Languages/Python/learn2-magic-func.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-magic-func.md/","excerpt":"","text":"魔法函数 魔法函数实例说明 参考资源 魔法函数Python 内置函数，又叫魔法函数、魔术函数等等 魔法函数实例说明123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178import sysclass MagicClass(object): &quot;&quot;&quot; 魔法方法类 参考链接： - https://www.cnblogs.com/small-office/p/9337297.html - https://www.bbsmax.com/A/MyJxxLyaJn/ &quot;&quot;&quot; # 隐式声明的属性 attr = &#x27;testA&#x27; # 是否实例化 __isinstance = False # 是否打印信息 is_print = False def __init__(self, params=None, *args, **kwargs): &quot;&quot;&quot; 初始化函数 函数说明 1. 在对象初始化的时候调用 2. 初始化对象属性 &quot;&quot;&quot; self.init_params = params self.int_p = 100 self.str_p = &#x27;testA&#x27; self.dic = dict() self.iter_p = range(1, 10) def __str__(self): &quot;&quot;&quot; 打印对象 函数说明: 1. 以字符串的形式表示的对象，可以通过 __str__ 直接打印 2. 函数返回值必须为 str 类型 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return &quot;__str__ + %s&quot; % self.init_params def __new__(cls, *args, **kwargs): &quot;&quot;&quot; 函数说明: 1. 必须有返回值，返回是被实例化的实例。 2. 调用 __new__ 之后，会将其结果传递给 __init__ &quot;&quot;&quot; if cls.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) # 单例模式 if not cls.__isinstance: cls.__isinstance = object.__new__(cls) return cls.__isinstance def __call__(self, *args, **kwargs): &quot;&quot;&quot; 模拟函数的行为 函数说明 1. 模拟函数的行为, 可以将类当成函数使用 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return sys._getframe().f_code.co_name + str(args) + str(kwargs) def __len__(self, val=None): &quot;&quot;&quot; 定制 len() 输出的结果 函数说明: 1. 定制 len() 输出的结果 2. 返回对象必须为整数 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return len(val) if val else 0 def __repr__(self): &quot;&quot;&quot; 转化为供解释器读取的形式 repr()函数 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return repr(self.str_p) def __setattr__(self, name, value): &quot;&quot;&quot; 设置对象属性 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return super().__setattr__(name, value) def __getattr__(self, name): &quot;&quot;&quot; 获取对象属性，只有在属性没有找到的时候调用 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return super().__getattribute__(name) def __getattribute__(self, name): &quot;&quot;&quot; 获取对象属性 __getattr__是在属性不存在时被调用，而__getattribute__是无条件被调用 一旦定义了__getattribute__，则__getattr__不再会被调用，除非显式调用 &quot;&quot;&quot; #if self.is_print: # print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return super().__getattribute__(name) def __delattr__(self, name): &quot;&quot;&quot; 删除属性 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return super().__delattr__(name) def __setitem__(self, name, value): &quot;&quot;&quot; 给对象赋值，我们可以以下标的方式对其进行操作 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) self.dic.update(&#123;name: value&#125;) def __getitem__(self, name): &quot;&quot;&quot; 支持已下标的方式获取值 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return self.dic[name] def __delitem__(self, name): &quot;&quot;&quot; 以下标方式删除对象数据 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) del self.dic[name] def __iter__(self): &quot;&quot;&quot; 只要定义了__iter__()方法对象，就可以使用迭代器访问 可以迭代我们自己定义的对象 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) return iter(self.iter_p) def __del__(self): &quot;&quot;&quot; 析构器，或者回收器，在对象引用数降到0时执行。不推荐使用。 &quot;&quot;&quot; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name) def func(self): # 隐式声明的属性 self.func_a = &#x27;test2&#x27; if self.is_print: print(&#x27;&gt; 函数名称&#x27; + sys._getframe().f_code.co_name)if __name__ == &#x27;__main__&#x27;: magic = MagicClass(params=&#x27;test&#x27;) # vars 获得 显示声明的属性 # print(vars(magic)) # print(magic) # print(dir(magic)) # print(magic.iter_p) # __call__ print(magic(&#x27;123123&#x27;)) print(len(magic())) print(dir(magic())) 参考资源 语法糖和内置函数触发魔法方法","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"},{"name":"todo","slug":"todo","permalink":"http://fansichao.github.com/blog/tags/todo/"}]},{"title":"Python 生成器","slug":"Languages/Python/learn2-generators","date":"2021-10-23T11:54:51.122Z","updated":"2021-10-23T11:54:51.122Z","comments":true,"path":"Languages/Python/learn2-generators.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-generators.md/","excerpt":"","text":"列表/字典推导式列表推导式 样例 12345678910111213# &gt;&gt; 实现列表自加一info = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]# 方法1 enumerate循环for index,i in enumerate(info): info[index] +=1# 方法2 map方法a = map(lambda x:x+1,info)# 方法3 列表推导式a = [i+1 for i in range(10)]In [3]: print a[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 字典推导式 样例 12In [5]: &#123;k:k+1 for k in info&#125;Out[5]: &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10&#125; 生成器 生成器是一个特殊的程序，可以被用作控制循环的迭代行为. python 中生成器是迭代器的一种，使用 yield 返回值函数，每次调用 yield 会暂停， 而可以使用 next()函数和 send()函数恢复生成器。 生成器可以节省大量内存。 生成器表达式把一个列表生成式的[]中括号改为()小括号，就创建一个 generator 12345678910#列表生成式lis = [x*x for x in range(10)]print(lis)#生成器generator_ex = (x*x for x in range(10))print(generator_ex)结果：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt; 生成器表达式使用使用next()获取生成器的下一个返回值 123456789101112131415generator_ex = (x*x for x in range(4))print(next(generator_ex))print(next(generator_ex))print(next(generator_ex))print(next(generator_ex))结果：0149# 超出值时会抛出异常Traceback (most recent call last): File &quot;列表生成式.py&quot;, line 42, in &lt;module&gt; print(next(generator_ex))StopIteration 创建生成器后,一般使用for循环实现。 生成器函数使用yield 构造生成器函数yield 是一个类似 return 的关键字，迭代一次遇到 yield 的时候就返回 yield 后面或者右面的值。而且下一次迭代的时候，从上一次迭代遇到的 yield 后面的代码开始执行 任何使用了 yield 的函数就是生成器，生成器就是一个返回迭代器的函数，或者说生成器就是一个迭代器。 1234567891011def fib(max): n,a,b =0,0,1 while n &lt; max: yield b a,b =b,a+b n = n+1a = fib(10)print next(a)for i in a: print i 小结生成器的用法 next() 返回生成器下个值 close() 关闭生成器。生成器被关闭后，再次调用 next()方法，不管能否遇到 yield 关键字，都会立即抛出 StopIteration 异常。 send() 可以通过 send()方法，向生成器内部传递参数.继续运行 yield 之后的代码。 throw() 除了向生成器函数内部传递参数，还可以传递异常。 生成器用法样例 123456789101112131415161718192021222324252627282930313233#! -*- coding:utf-8 -*-def iterator_func(val): for i in range(val): print(&quot;生成器值:%s&quot;%i) tmp = yield i if tmp: print(&quot;send传递值:%s&quot;%tmp)num = 5gen = iterator_func(num)# 必须先next()调用,开始生成器gen.next()for i in range(10): print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;) gen.send(i + 10) if i &gt;= num: # throw 方法自定义异常 gen.throw(Exception,u&quot;自定义异常:数值不够&quot;) if i &gt;= 1: # close()后. 到下一个next或send直接抛出异常 gen.close()生成器值:0&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;send传递值:10生成器值:1&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;send传递值:11生成器值:2&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Traceback (most recent call last): File &quot;a&quot;, line 14, in &lt;module&gt; gen.send(i+10)StopIteration 生成器的分类 生成器函数: 也是用 def 定义的，利用关键字 yield 一次性返回一个结果，阻塞，重新开始 生成器表达式: 返回一个对象，这个对象只有在需要的时候才产生结果 生成器的优点 节省内存。大量数据时尤为明显。 节省代码，减少代码量同时提高代码可读性。 模拟并发。 模拟并发。Python 虽然支持多线程，但是由于 GIL(全局解释锁，Global Interpreter Lock)的存在，同一个时间，只能有一个线程在运行，所以无法实现真正的并发。这时就出现了协程。复杂解释不说了，简单说协程就是你可以暂停执行的函数”。也就是 yield。 Python 实现协程最简单的方法，就是使用 yield。当一个函数在执行过程中被阻塞时，就用 yield 挂起，然后执行另一个函数。当阻塞结束后，可以用 next()或者 send()唤醒。相比多线程，协程的好处是它在一个线程内执行，避免线程之间切换带来的额外开销，而且协程不存在加锁的步骤。 迭代器迭代器包含有 next 方法的实现，在正确的范围内返回期待的数据以及超出范围后能够抛出 StopIteration 的错误停止迭代。 Iterable 可迭代对象使用 isinstance()判断一个对象是否为可 Iterable 对象 1234567891011121314# Iterable 可迭代对象In [1]: from collections import IterableIn [2]: isinstance([], Iterable)Out[2]: TrueIn [3]: isinstance((x for x in range(10)), Iterable)Out[3]: TrueIn [4]: isinstance(&#x27;test&#x27;, Iterable)Out[4]: TrueIn [5]: isinstance(123, Iterable)Out[5]: False Iterator 迭代器一个实现了 iter 方法的对象是可迭代的，一个实现 next 方法并且是可迭代的对象是迭代器。 可以被 next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。 所以一个实现了 iter 方法和 next 方法的对象就是迭代器。 1234567In [6]: from collections import IteratorIn [7]: isinstance((x for x in range(10)), Iterator)Out[7]: TrueIn [8]: isinstance([], Iterator)Out[8]: False 迭代器和可迭代对象之间的转换Iterable 转为 Iterator: iter([1,2,3])Iterator 转为 Iterable: list((x+1 for x in range(10))) 1234567891011In [11]: isinstance(iter([]), Iterator)Out[11]: TrueIn [12]: isinstance(iter(&#x27;abc&#x27;), Iterator)Out[12]: TrueIn [13]: isinstance([], Iterator)Out[13]: FalseIn [15]: isinstance(list((x for x in range(10))),Iterator)Out[15]: False 总结 凡是可作用于 for 循环的对象都是 Iterable 类型； 凡是可作用于 next()函数的对象都是 Iterator 类型，它们表示一个惰性计算的序列； 集合数据类型如 list、dict、str 等是 Iterable 但不是 Iterator，不过可以通过 iter()函数获得一个 Iterator 对象。 对 yield 的总结 (1)通常的 for..in…循环中，in 后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。他可以是 a = [1,2,3]，也可以是 a = [x*x for x in range(3)]。 它的缺点也很明显，就是所有数据都在内存里面，如果有海量的数据，将会非常耗内存。 (2)生成器是可以迭代的，但是只可以读取它一次。因为用的时候才生成，比如 a = (x*x for x in range(3))。!!!!注意这里是小括号而不是方括号。 (3)生成器(generator)能够迭代的关键是他有 next()方法，工作原理就是通过重复调用 next()方法，直到捕获一个异常。 (4)带有 yield 的函数不再是一个普通的函数，而是一个生成器 generator，可用于迭代 (5)yield 是一个类似 return 的关键字，迭代一次遇到 yield 的时候就返回 yield 后面或者右面的值。而且下一次迭代的时候，从上一次迭代遇到的 yield 后面的代码开始执行 (6)yield 就是 return 返回的一个值，并且记住这个返回的位置。下一次迭代就从这个位置开始。 (7)带有 yield 的函数不仅仅是只用于 for 循环，而且可用于某个函数的参数，只要这个函数的参数也允许迭代参数。 (8)send()和 next()的区别就在于 send 可传递参数给 yield 表达式，这时候传递的参数就会作为 yield 表达式的值，而 yield 的参数是返回给调用者的值，也就是说 send 可以强行修改上一个 yield 表达式值。 (9)send()和 next()都有返回值，他们的返回值是当前迭代遇到的 yield 的时候，yield 后面表达式的值，其实就是当前迭代 yield 后面的参数。 (10)第一次调用时候必须先 next()或 send(),否则会报错，send 后之所以为 None 是因为这时候没有上一个 yield，所以也可以认为 next()等同于 send(None) yield 实现单线程并发yield 单线程并发样例 1234567891011121314151617181920212223242526272829303132333435363738394041#! -*- coding:utf-8 -*-import timedef consumer(name): print(&#x27;%s 准备学习了～&#x27; %(name)) while True: lesson = yield print(&#x27;开始[%s]了,[%s]老师来讲课了～&#x27; %(lesson,name))def producer(name): c1 = consumer(&#x27;A&#x27;) c2 = consumer(&#x27;B&#x27;) c1.next() # 先调用c1使后面的send能够传值 c2.next() # 先调用c2使后面的send能够传值 print(&#x27;同学们开始上课了～&#x27;) for i in range(3): time.sleep(1) print(&#x27;到了两个同学&#x27;) c1.send(i) c2.send(i)producer(&#x27;westos&#x27;)# &gt; 返回结果A 准备学习了～B 准备学习了～同学们开始上课了～到了两个同学开始[0]了,[A]老师来讲课了～开始[0]了,[B]老师来讲课了～到了两个同学开始[1]了,[A]老师来讲课了～开始[1]了,[B]老师来讲课了～到了两个同学开始[2]了,[A]老师来讲课了～开始[2]了,[B]老师来讲课了～&quot;&quot;&quot;利用了关键字yield一次性返回一个结果，阻塞，重新开始send 唤醒&quot;&quot;&quot; 第三方函数库-greenlet12345678910111213141516171819202122232425262728&quot;&quot;&quot;使用greenlet完成多任务为了更好的使用协程来完成多任务，python中的greeblet模块对其进行的封装&quot;&quot;&quot;from greenlet import greenletimport timedef test1(): while True: print(&#x27;---A----&#x27;) gr2.switch() time.sleep(0.5)def test2(): while True: print(&#x27;----B----&#x27;) gr1.switch() time.sleep(0.5)&quot;&quot;&quot;greenlet这个类对yield进行的封装&quot;&quot;&quot;gr1= greenlet(test1)gr2 = greenlet(test2)# 相当于开关，开启后两个函数之间能够相互切换执行gr1.switch() 参考资源生成器使用python(生成式、生成器)","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Python 装饰器","slug":"Languages/Python/learn2-decorator","date":"2021-10-23T11:54:51.121Z","updated":"2021-10-23T11:54:51.121Z","comments":true,"path":"Languages/Python/learn2-decorator.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-decorator.md/","excerpt":"","text":"总结装饰器的作用就是为已经存在的函数或对象添加额外的功能 装饰器使用种类： 函数装饰器 类装饰器 函数装饰器装饰 类 类装饰器装饰 函数 装饰器样例 1234567@staticmethod@loggingdef a(): return 1 pass等价于a = staticmethod(logging(a)) 默认装饰器函数 @property通过 property 装饰器控制类的属性的绑定与获取，一般就是给某个属性增加一个验证类型等功能。 @staticmethod将被装饰的函数从类中分离出来，该函数不能访问类的属性，简单说可以将该函数理解为一个独立的函数，不允许使用 self。staticmethod 就是将该被装饰的函数与该类没有关系，该函数不能用 self 传参，需要和普通函数一样传参。 @classmethodclassmethod 可以用来为一个类创建一些预处理的实例.类方法只能找类变量，不能访问实例变量 装饰器库 functools因为使用装饰器 functools 会导致函数或类信息缺失。例如 func.__name__所以需要使用 functools 装饰器库处理 使用方法:每个装饰器前面加上下句话即可@functools.wraps(func)样例如下所示： 12345678def log(text): def decorator(func): @functools.wraps(func) def wrapper(*args, **kw): print &#x27;%s %s():&#x27; % (text, func.__name__) return func(*args, **kw) return wrapper return decorator 装饰器&amp;函数函数简单说明参考链接: 12 步轻松搞定 python 装饰器 了解装饰器之前也需要了解内部函数与函数闭包。 参考链接: 内部函数&amp;函数闭包 内部函数 12345678910def wai_hanshu(canshu_1): def nei_hanshu(canshu_2): # 我在函数内部有定义了一个函数 return canshu_1*canshu_2 return nei_hanshu # 我将内部函数返回出去a = wai_hanshu(123) # 此时 canshu_1 = 123print aprint a(321) # canshu_2 = 321 闭包说明参考链接： 函数闭包python 中的闭包从表现形式上定义(解释)为：如果在一个内部函数里，对在外部作用域(但不是在全局作用域)的变量进行引用，那么内部函数就被认为是闭包(closure)。 闭包=函数+引用环境 闭包中是不能修改外部作用域的局部变量的 当闭包执行完后，仍然能够保持住当前的运行环境 闭包可以根据外部作用域的局部变量来得到不同的结果 装饰器说明装饰器本质上是一个 Python 函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能。装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。 装饰器的作用就是为已经存在的函数或对象添加额外的功能 装饰器/修饰符 - decorator 装饰器知识函数装饰器参考链接:https://www.cnblogs.com/cicaday/p/python-decorator.html 概括的讲，装饰器的作用就是为已经存在的函数或对象添加额外的功能 简单装饰器样例 12345678910111213def debug(func): def wrapper(*args, **kwargs): # 指定宇宙无敌参数 print &quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__) print &#x27;Prepare and say...&#x27;, return func(*args, **kwargs) return wrapper # 返回@debugdef say(something): print &quot;hello &#123;&#125;!&quot;.format(something)等同于say = debug(say) 原理分析12345@decorator_adef f(): pass等价于f = decorator_a(f) 装饰器满足的条件 装饰器函数运行在函数定义的时候 装饰器需要返回一个可执行的对象 装饰器返回的可执行对象要兼容函数 f 的参数 类装饰器类装饰器中必须使用 __call__ 方法。将类实例转为可调用对象。 12345678910111213class Decorator(object): def __init__(self, f): self.f = f def __call__(self): print(&quot;decorator start&quot;) self.f() print(&quot;decorator end&quot;)@Decoratordef func(): print(&quot;func&quot;)func() 这里有注意的是：call()是一个特殊方法，它可将一个类实例变成一个可调用对象: 12p = Decorator(func) # p是类Decorator的一个实例p() # 实现了__call__()方法后，p可以被调用 要使用类装饰器必须实现类中的call()方法，就相当于将实例变成了一个方法。 装饰器链所谓装饰器链，即多个装饰器的解析方式。 123456@decorator_b@decorator_adef test(): pass等同于test = decorator_b(decorator_a(test)) 装饰器执行顺序 是从近到远依次执行。 内置装饰器内置装饰器 特性(property) 静态方法(staticmethod) 类方法(classmethod) 内置装饰器参考链接 附录 A-装饰器库参数表官方 functools 文档functools 参考博客 functools，用于高阶函数：指那些作用于函数或者返回其它函数的函数，通常只要是可以被当做函数调用的对象就是这个模块的目标。 functools 方法 cmp_to_key，将一个比较函数转换关键字函数； partial，针对函数起作用，并且是部分的； reduce，与 python 内置的 reduce 函数功能一样； total_ordering，在类装饰器中按照缺失顺序，填充方法； update_wrapper，更新一个包裹(wrapper)函数，使其看起来更像被包裹(wrapped)的函数； wraps，可用作一个装饰器，简化调用 update_wrapper 的过程； cmp_to_key将老式的比较函数(comparison function)转换为关键字函数(key function)，与接受 key function 的工具一同使用(例如 sorted，min，max，heapq.nlargest，itertools.groupby)，该函数主要用于将程序转换成 Python 3 格式的，因为 Python 3 中不支持比较函数。比较函数是可调用的，接受两个参数，比较这两个参数并根据他们的大小关系返回负值、零或者正值中的一个。关键字函数也是可调用的，接受一个参数，同时返回一个可以用作排序关键字的值。partialfunctools.partial(func, *args, **keywords)，函数装饰器，返回一个新的 partial 对象。调用 partial 对象和调用被修饰的函数 func 相同，只不过调用 partial 对象时传入的参数个数通常要少于调用 func 时传入的参数个数。reduce与 Python 内置的 reduce 函数一样，为了向 Python3 过渡total_ordering这是一个类装饰器，给定一个类，这个类定义了一个或者多个比较排序方法，这个类装饰器将会补充其余的比较方法，减少了自己定义所有比较方法时的工作量.被修饰的类必须至少定义 lt()， le()，gt()，ge()中的一个，同时，被修饰的类还应该提供 eq()方法。update_wrapper更新一个包裹(wrapper)函数，使其看起来更像被包裹(wrapped)的函数。wraps这个函数可用作一个装饰器，简化调用 update_wrapper 的过程，调用这个函数等价于调用 partial(update_wrapper, wrapped = wrapped, assigned = assigned,updated = updated)。 附录 B-测试代码样例文件： /home/scfan/pro/server/pro/tools/base_decorator.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344import timeimport datetimeimport functoolsdef decorator_func(text=&quot;all&quot;): u&quot;&quot;&quot; 统计函数相关信息 All - 函数运行时间 - 函数名称 &quot;&quot;&quot; def decorator(func,*args,**kwargs): @functools.wraps(func) def wrapper(*args,**kwargs): start = datetime.datetime.now() data = func(*args, **kwargs) runtime = datetime.datetime.now() - start msg = &quot;@函数运行信息: 函数类型[%s],函数名称[%s],运行时间[%s秒]&quot;%(text,func.__name__,runtime.total_seconds()) print(msg) return data return wrapper return decoratorclass Decorator(object): u&quot;&quot;&quot; 装饰器类 &quot;&quot;&quot; def __init__(self, func): self.func = func # __call__()是一个特殊方法，它可将一个类实例变成一个可调用对象 def __call__(self, *args, **kwargs): print(&quot;decorator start&quot;) self.func() print(&quot;decorator end&quot;) if __name__ == &#x27;__main__&#x27;: @Decorator @decorator_func(&quot;all&quot;) def a(b=&quot;cc&quot;): for i in range(2): time.sleep(1) print &quot;函数运行....&quot; return b a() 运行信息 12345(env) [scfan@WOM tools]$ python base_decorator.pydecorator start函数运行....@函数运行信息: 函数类型[all],函数名称[a],运行时间[2.004331秒]decorator end 附录 C-参考资源链接 廖雪峰-装饰器入门 装饰器参考 A 装饰器参考 B 附录 D-装饰器相关 智能装饰器 python 使用装饰器和线程限制函数执行时间的方法","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Python7 大原则与 24 种设计模式","slug":"Languages/Python/learn2-design-mode","date":"2021-10-23T11:54:51.121Z","updated":"2021-10-23T11:54:51.121Z","comments":true,"path":"Languages/Python/learn2-design-mode.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-design-mode.md/","excerpt":"","text":"TODO 需要补充 行为型模式 结构型模式 小结等 七大设计原则 24 种设计模式 创建型模式 结构型模式 行为型模式 设计模式-创建型 创建型-01 工厂模式 创建型-02 抽象工厂模式 创建型-03 生成器模式 创建型-04 原型模式 创建型-05 单例模式 创建型-06 多例模式 设计模式-结构型 结构型-01 适配器模式 结构型-02 桥接模式 结构型-03 组合模式 结构型-04 装饰者模式 结构型-05 外观模式 结构型-06 亨元模式 结构型-07 代理模式 设计模式-行为型 行为型-01 责任链模式 行为型-02 命令模式 行为型-03 解释器模式 行为型-04 迭代器模式 行为型-05 中介者模式 行为型-06 备忘录模式 行为型-07 观察者模式 行为型-08 状态模式 行为型-09 策略模式 行为型-10 模板方法模式 行为型-11 访问者模式 小结 例子 参考资料 七大设计原则 1、单一职责原则【SINGLE RESPONSIBILITY PRINCIPLE】：一个类负责一项职责. 2、里氏替换原则【LISKOV SUBSTITUTION PRINCIPLE】：继承与派生的规则.(子类可替换父类) 3、依赖倒转原则【DEPENDENCE INVERSION PRINCIPLE】：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。即针对接口编程，不要针对实现编程。 4、接口隔离原则【INTERFACE SEGREGATION PRINCIPLE】：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。 5、迪米特法则【LOW OF DEMETER】：高内聚 低耦合 – high cohesion low coupling(类只做一类事情,类的成员函数关联尽量少) 6、开闭原则【OPEN CLOSE PRINCIPLE】：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。 7、组合/聚合复用原则【Composition/Aggregation Reuse Principle(CARP) 】：尽量使用组合和聚合少使用继承的关系来达到复用的原则。 24 种设计模式创建型模式基于对象的创建机制，隔离了对象的创建细节，使代码能够与要创建的对象的类型相互独立 结构型模式用于设计对象和类的结构，使它们可以相互协作以获得更大的结构 行为型模式主要关注对象的责任，用来处理对象之间的交互，以实现更大的功能 创建型模式 1、抽象工厂模式(Abstract factory pattern): 提供一个接口, 用于创建相关或依赖对象的家族, 而不需要指定具体类. 2、生成器模式(Builder pattern): 使用生成器模式封装一个产品的构造过程, 并允许按步骤构造. 将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示. 3、工厂模式(factory method pattern): 定义了一个创建对象的接口, 但由子类决定要实例化的类是哪一个. 工厂方法让类把实例化推迟到子类. 4、原型模式(prototype pattern): 当创建给定类的实例过程很昂贵或很复杂时, 就使用原形模式. 5、单例模式(Singleton pattern): 确保一个类只有一个实例, 并提供全局访问点. 6、多例模式(Multition pattern): 在一个解决方案中结合两个或多个模式, 以解决一般或重复发生的问题. 结构型模式 1、适配器模式(Adapter pattern): 将一个类的接口, 转换成客户期望的另一个接口. 适配器让原本接口不兼容的类可以合作无间. 对象适配器使用组合, 类适配器使用多重继承. 2、桥接模式(Bridge pattern): 使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变. 3、组合模式(composite pattern): 允许你将对象组合成树形结构来表现”整体/部分”层次结构. 组合能让客户以一致的方式处理个别对象以及对象组合. 4、装饰者模式(decorator pattern): 动态地将责任附加到对象上, 若要扩展功能, 装饰者提供了比继承更有弹性的替代方案. 5、外观模式(facade pattern): 提供了一个统一的接口, 用来访问子系统中的一群接口. 外观定义了一个高层接口, 让子系统更容易使用. 6、亨元模式(Flyweight Pattern): 如想让某个类的一个实例能用来提供许多”虚拟实例”, 就使用蝇量模式. 7、代理模式(Proxy pattern): 为另一个对象提供一个替身或占位符以控制对这个对象的访问. 行为型模式 1、责任链模式(Chain of responsibility pattern): 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象. 2、命令模式(Command pattern): 将”请求”封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作. 3、解释器模式(Interpreter pattern): 使用解释器模式为语言创建解释器. 4、迭代器模式(iterator pattern): 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示. 5、中介者模式(Mediator pattern) : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式. 6、备忘录模式(Memento pattern): 当你需要让对象返回之前的状态时(例如, 你的用户请求”撤销”), 你使用备忘录模式. 7、观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新. 8、状态模式(State pattern): 允许对象在内部状态改变时改变它的行为, 对象看起来好象改了它的类. 9、策略模式(strategy pattern): 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户. 10、模板方法模式(Template pattern): 在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中. 模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤. 11、访问者模式(visitor pattern): 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式. 设计模式参考链接： 菜鸟教程-设计模式大全 CSDN 博主-设计模式 设计模式-创建型创建型-01 工厂模式 工厂模式：主要用于抽象对象的创建过程，让用户可以指定自己想要的对象而不必关心对象的实例化过程 用 Python 实现设计模式——工厂模式 创建型-02 抽象工厂模式 抽象工厂模式：提供一个接口, 用于创建相关或依赖对象的家族, 而不需要指定具体类用 Python 实现设计模式——工厂模式 创建型-03 生成器模式 生成器模式：使用生成器模式封装一个产品的构造过程, 并允许按步骤构造. 将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示. 概念 特点 建造者模式注重一步一步创建对象 元对象不允许被消费者对象直接调用。 元对象 -&gt; 中间对象(不同产品种类) -&gt; 消费者 应用场景 对象的创建步骤可以独立于创建过程的时候 被创建的对象拥有不同的表现形式 Python 设计模式生成器模式,建造,者建造者模式 —— Python 描述 创建型-04 原型模式 原型模式：支持复制类中的对象，且更新其部分属性. 用于简化外部操作，提供简单接口等等 特点 通过对传入对象进行深拷贝。可以通过 copy.deepcopy 另一种方式来实现。只是类中集成了此功能，从而更方便使用。 应用场景 原型模式用于创建对象的浅副本 数据间共享 原型模式用于创建对象的完全副本 需要复制类中的对象。 需要复制类中的对象，并对返回的对象更新其部分参数。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import copyfrom collections import OrderedDictclass Book: def __init__(self, name, authors, price, **rest): &#x27;&#x27;&#x27;rest的例子有：出版商、长度、标签、出版日期&#x27;&#x27;&#x27; self.name = name self.authors = authors self.price = price self.__dict__.update(rest) # 添加其他额外属性 def __str__(self): mylist = [] ordered = OrderedDict(sorted(self.__dict__.items())) for i in ordered.keys(): mylist.append(&#x27;&#123;&#125;: &#123;&#125;&#x27;.format(i, ordered[i])) if i == &#x27;price&#x27;: mylist.append(&#x27;$&#x27;) mylist.append(&#x27;\\n&#x27;) return &#x27;&#x27;.join(mylist)class Prototype: def __init__(self): self.objects = dict() # 初始化一个原型列表 def register(self, identifier, obj): # 在原型列表中注册原型对象 self.objects[identifier] = obj def unregister(self, identifier): # 从原型列表中删除原型对象 del self.objects[identifier] def clone(self, identifier, **attr): # 根据 identifier 在原型列表中查找原型对象并克隆 found = self.objects.get(identifier) if not found: raise ValueError(&#x27;Incorrect object identifier: &#123;&#125;&#x27;.format(identifier)) obj = copy.deepcopy(found) obj.__dict__.update(attr) # 用新的属性值替换原型对象中的对应属性 return objdef main(): b1 = Book(&#x27;The C Programming Language&#x27;, (&#x27;Brian W. Kernighan&#x27;, &#x27;Dennis M.Ritchie&#x27;), price=118, publisher=&#x27;Prentice Hall&#x27;, length=228, publication_date=&#x27;1978-02-22&#x27;, tags=(&#x27;C&#x27;, &#x27;programming&#x27;, &#x27;algorithms&#x27;, &#x27;data structures&#x27;)) prototype = Prototype() cid = &#x27;k&amp;r-first&#x27; prototype.register(cid, b1) b2 = prototype.clone(cid, name=&#x27;The C Programming Language(ANSI)&#x27;, price=48.99, length=274, publication_date=&#x27;1988-04-01&#x27;, edition=2) for i in (b1, b2): print(i) print(&quot;ID b1 : &#123;&#125; != ID b2 : &#123;&#125;&quot;.format(id(b1), id(b2)))if __name__ == &#x27;__main__&#x27;: main() 浅谈 Python 设计模式 - 原型模式 创建型-05 单例模式 单例模式：一个类只能被实例化一次，实例对象在第一次实例化时就已经固定，后续的实例化用的都是第一次实例化的对象 概念 应用场景 整个系统中类只能出现一个实例时，比如 配置文件类 AppConfig 等等 单例模式是一个经典设计模式，简要的说，一个类只能被实例化一次，实例对象在第一次实例化时就已经固定，从第二次以后其实一直都是用的第一次实例化的对象，相当于全局。 创建单例模式的方法: 使用模块 使用 __new__ 使用 metaclass 使用 装饰器 静态方法 类方法 名称覆盖 属性共享 创建单例模式方法-使用模块: Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类 12345678910# mysingleton.pyclass My_Singleton(object): def foo(self): passmy_singleton = My_Singleton()# demo.pyfrom mysingleton import my_singletonmy_singleton.foo() 创建单例模式方法-使用__new__: 12345678910111213141516class Demo: __isinstance = False def __new__(cls, *args, **kwargs): if not cls.__isinstance: # 如果被实例化了 cls.__isinstance = object.__new__(cls) # 否则实例化 # 或者 # cls._instance = super().__new__(cls) return cls.__isinstance # 返回实例化的对象 def __init__(self, name): print(&#x27;我是 %s&#x27;%(name))d1 = Demo(&#x27;小明&#x27;)d2 = Demo(&#x27;小红&#x27;)print(d1)print(d2) 创建单例模式方法-元类 metaclass: 12345678910111213141516class SigletonMetaClass(type): _instance = None def __new__(cls, *args, **kwargs): return super().__new__(cls, *args, **kwargs) # 断点1 def __call__(self, *args, **kwargs): if self._instance is None: self._instance = super().__call__(*args, **kwargs) return self._instance # 断点2class Singleton(metaclass=SigletonMetaClass): def __new__(cls, *args, **kwargs): return super().__new__(cls) # 断点3# 元类 metaclass 通过 __call__ 拦截 创建单例模式方法-装饰器: 12345678910111213141516171819202122232425262728293031323334353637383940# 函数装饰器def SingletonDecorator(cls): _instance = None def get_instance(*args, **kwargs): nonlocal _instance if _instance is None: _instance = cls(*args, **kwargs) return _instance return get_instance@SingletonDecoratorclass Singleton(object): pass# 示例：a = Singleton()b = Singleton()# id(a) == id(b)# 类装饰器class SingletonDecorator(object): _instance = None def __init__(self, cls): self._cls = cls def __call__(self, *args, **kwargs): if self._instance is None: self._instance = self._cls(*args, **kwargs) return self._instance@SingletonDecoratorclass Singleton(object): pass# 示例：a = Singleton()b = Singleton()# id(a) == id(b) 创建单例模式方法-静态方法: 123456789101112131415class Singleton(object): _instance = None @staticmethod def get_instance(): cls = __class__ if cls._instance is None: cls._instance = super(cls, cls).__new__(cls) return cls._instance# 示例：a = Singleton.get_instance()b = Singleton.get_instance()# id(a) == id(b) 创建单例模式方法-类方法: 12345678910111213class Singleton(object): _instance = None @classmethod def get_instance(cls): if cls._instance is None: cls._instance = super().__new__(cls) return cls._instance# 示例：a = Singleton.get_instance()b = Singleton.get_instance()# id(a) == id(b) 创建单例模式方法-名称覆盖: 用实例名覆盖类名后，执行 Singleton() 就是在调用 call() 函数，总是返回自身。 12345678910class Singleton(object): def __call__(self): return selfSingleton = Singleton()# 示例：a = Singleton()b = Singleton()# id(a) == id(b) 创建单例模式方法-属性共享: 123456789101112131415class Singleton(object): _state = &#123;&#125; def __new__(cls, *args, **kwargs): obj = super().__new__(cls) obj.__dict__ = cls._state return obj def __init__(self, name): self.name = name# 示例：a = Singleton()b = Singleton()# id(a) != id(b) 实例对象的私有属性存放在 dict 中。因此，将所有对象指向同一个属性 Singleton._state，即便它们的 id 值 不同，由于共享属性仍实现了单例效果。 TODO 复杂情况下的单例模式 多线程下的单例模式应用: 12345678910111213141516171819202122232425262728def singleton(cls): cls.__new_original__ = cls.__new__ @functools.wraps(cls.__new__) def singleton_new(cls, *args, **kwargs): it = cls.__dict__.get(&#x27;__it__&#x27;) if it is not None: return it cls.__it__ = it = cls.__new_original__(cls, *args, **kwargs) it.__init_original__(*args, **kwargs) return it cls.__new__ = singleton_new cls.__init_original__ = cls.__init__ cls.__init__ = object.__init__ return cls@singletonclass Foo(object): def __new__(cls, *args, **kwargs): cls.x = 10 return object.__new__(cls) def __init__(self, x, y): assert self.x == 10 self.x = x self.y = y 上述代码中定义了 singleton 类装饰器，装饰器在预编译时就会执行，利用这个特性，singleton 类装饰器中替换了类原本的new与init方法，使用 singleton_new 方法进行类的实例化，在 singleton_new 方法中，先判断类的属性中是否存在it属性，以此来判断是否要创建新的实例，如果要创建，则调用类原本的new方法完成实例化并调用原本的init方法将参数传递给当前类，从而完成单例模式的目的。 12345678910111213141516171819# 加上线程锁def singleton(cls): cls.__new_original__ = cls.__new__ @functools.wraps(cls.__new__) def singleton_new(cls, *args, **kwargs): # 同步锁 with threading.Lock(): it = cls.__dict__.get(&#x27;__it__&#x27;) if it is not None: return it cls.__it__ = it = cls.__new_original__(cls, *args, **kwargs) it.__init_original__(*args, **kwargs) return it cls.__new__ = singleton_new cls.__init_original__ = cls.__init__ cls.__init__ = object.__init__ return cls 参考链接: Python 单例模式最佳实践 python 多线程下保持单例模式的实例唯一 Python 中的单例模式 Python 实现单例 创建型-06 多例模式 多例模式：多例模式允许存在有限个实例(多例模式又分为有上限模式和无上限模式，无上限模式和直接 new 一个对象差不多，此处不做讨论) 特点 允许有多个实例； 多例类自己负责创建、管理自己的实例，并向外界提供自己的实例(这点根单例模式相同) 单例模式仅创建一个对象。多例模式可以创建 有限个对象 详情请参考 单例模式 设计模式-结构型结构型-01 适配器模式 适配器可以理解为万能接口，各种类可以通过这个接口然后被调用，达到万能转换的效果。 他的实现是以我们定义的适配器函数来分类，将各种类的不同方法注册到对应的分类函数中，调用的时候只需要使用分类名，这样就达到了适配所有类不同方法的效果. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class A: def a(self): print(&quot;我是A类的a方法&quot;)class B: def b(self): print(&quot;我是B类的b方法&quot;)class C: def c(self): print(&quot;我是C类的c方法&quot;)class Adapter(object): &quot;&quot;&quot; 适配器 objects = [] AA = A() objects.append(Adapter(AA, dict(test=AA.a))) for obj in objects: obj.test() 核心思想 创建一个适配器类，通过__dict__将需要转化的类的方法注册到适配器， 复写__getattr__使其在适配器函数查无方法的时候，执行getattr魔法方法 &quot;&quot;&quot; def __init__(self, instance, method): self.instance = instance self.__dict__.update(method) def __getattr__(self, attr): return getattr(self.instance, attr)def test(): objects = [] AA = A() objects.append(Adapter(AA, dict(test=AA.a))) BB = B() objects.append(Adapter(BB, dict(test=BB.b))) CC = C() objects.append(Adapter(CC, dict(test=CC.c))) for obj in objects: print(&#x27;&gt;&gt;&gt; 11&#x27;) print(dir(obj)) obj.test()test() 结构型-02 桥接模式 桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。 参考链接: python 设计模式-桥接模式&amp;比较桥接模式和装饰模式的不同 结构型-03 组合模式 优点 节点增加和减少是非常自由和方便的，这也是树形结构的一大特点； 所有节点，不管是分支节点还是叶子结点，不管是调用一个结点，还是调用一个结点群，都是非常方便的 缺点 由于叶子结点和分支结点直接使用了实现类，而不方便使用抽象类，这大大限制了接口的影响范围；若结点接口发生变更，对系统造成的风险会比较大。 使用场景 维护部分与整体的逻辑关系，或者动态调用整体或部分的功能接口，可以考虑使用组合模式。例如，非常多的操作系统(如 Linux)都把文件系统设计成树形结构，再比如说分布式应用中借助 Zookeeper，也可以组织和调用分布式集群中的结点功能。 参考链接: 9-Python 与设计模式–组合模式 结构型-04 装饰者模式TODO 装饰器的缺点 装饰者模式：使用装饰器来动态的添加功能。例如日志记录、权限认证等等 优点 能够在不修改任何底层代码情况下，给已有对象赋予新的职责。 代码量减少，可复用，易维护，增加可读性 缺点 当装饰器已经作用于某函数，而你想撤销它，那么可以访问 wrapped 属性来访问原始函数。 不建议使用，多装饰器时，不可控。 参考链接: python 设计模式(十) 装饰者模式(Decorator pattern) 结构型-05 外观模式 外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 概念简述 将复杂的方法简化为一个类的函数接口，便于统一调用。类似于函数封装。 优点 优点在于对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易，它实现了子系统与客户之间的松耦合关系，并降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程； 缺点 缺点在于不能很好地限制客户使用子系统类，而且在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。 123456# 简单的样例def run_all(): run_a() run_b() run_c()# 定义一个统一的外观 run_all 便于统一调用 参考链接: python-外观模式 结构型-06 亨元模式 亨元模式：用于解决资源和性能压力时会使用到的设计模式，它的核心思想是通过引入数据共享来提升性能。 概念 重点在于将不可变(可共享)的属性与可变的属性区分开 在多个对象有相同属性，但又有各自不同属性时，享元模式可以对相同属性那部分进行数据共享，从而提升性能。 1234567891011121314151617181920from enum import EnumTreeType = Enum(&#x27;TreeType&#x27;,&#x27;apple_tree cherry_tree peach_tree&#x27;)class Tree: pool = dict() def __new__(cls, tree_type, *args,**kwargs): obj = cls.pool.get(tree_type,None) if not obj: obj = super().__new__(cls,*args, **kwargs) cls.pool[tree_type] = obj obj.tree_type = tree_type return obj def __init(self,size ): self.size = size def render(self,age,x,y): print(&#x27;render a tree of type &#123;&#125; and age &#123;&#125; at (&#123;&#125;,&#123;&#125;)&#x27;.format(self.tree_type,age,x,y)) 该示例中，在new方法中实现类不可变数据的共享。在init方法中实现了可变数据的独立，即不共享。 参考链接: 浅谈 Python 设计模式 - 享元模式 结构型-07 代理模式 为其他对象提供一种代理以控制对这个对象的访问.通俗的来讲代理模式就是我们生活中常见的中介 使用场景 一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用 远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。 虚拟代理，是根据需要创建开销大的对象。通过它来存放实例化需要很长时间的真是对象。用于惰性求值，将一个大计算量对象的创建延迟到真正需要的时候进行。例如 html 中，图片需要 load 很久，所以通过虚拟代理来代替真实的图片 安全代理，或叫保护/防护代理：控制对敏感对象的访问。用来控制真实对象访问时的权限 智能(引用)代理：在对象被访问时执行额外的动作。此类代理的例子包括引用计数和线程安全检查。是指当调用真实的对象时，代理处理另外一些事 参考链接: python 设计模式之代理模式 设计模式-行为型行为型-01 责任链模式 责任链模式(Chain of responsibility pattern): 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象. 参考链接: Python 设计模式 – 责任链模式 python 实现 责任链模式 行为型-02 命令模式 命令模式(Command pattern): 将”请求”封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作. 1234567891011121314151617181920212223242526272829303132333435363738394041424344# -*- coding: utf8 -*-from abc import ABCMeta,abstractmethod# 声明基类class Command(): def __init__(self,recv): self.recv = recv def execute(self): pass# 接收对象和执行操作绑定class ConcreteCommand(Command): def __init__(self,recv): self.recv = recv def execute(self): self.recv.action()# 接收对象class Receiver: def action(self): print (&quot;Receiver Action&quot;)# 执行请求class Invoker: def command(self, cmd): self.cmd = cmd def execute(self): self.cmd.execute()if __name__ == &quot;__main__&quot;: recv = Receiver() cmd = ConcreteCommand(recv) invoker = Invoker() # 核心: 命令的生成 &amp; 命令的执行 invoker.command(cmd) invoker.execute() 参考链接 python 设计模式之命令模式 python 设计模式-命令模式 行为型-03 解释器模式 解释器模式(Interpreter pattern): 使用解释器模式为语言创建解释器. 优点： 可扩展性比较好，灵活。 增加了新的解释表达式的方式。 易于实现简单文法。 缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。 使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。 python 设计模式之解释器模式 行为型-04 迭代器模式 迭代器模式(iterator pattern): 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示. python 设计模式之迭代器 行为型-05 中介者模式 中介者模式(Mediator pattern) : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式. 行为型-06 备忘录模式 备忘录模式(Memento pattern): 当你需要让对象返回之前的状态时(例如, 你的用户请求”撤销”), 你使用备忘录模式。 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态 备忘录模式 Python 简单的备忘录系统 行为型-07 观察者模式 观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新. python 设计模式之观察者模式 行为型-08 状态模式 状态模式(State Pattern):当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类. 应用场景:当控制一个对象的状态转换的条件表达式过于复杂时,把状态的判断逻辑转移到表示不同状态的一系列类当中,可以把复杂的判断逻辑简化 Python 设计模式之状态模式原理与用法详解 Python 设计模式之状态模式详解 行为型-09 策略模式 策略模式(strategy pattern): 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户. 策略模式 行为型-10 模板方法模式 模板方法模式(Template pattern): 在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中. 模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤. Python 设计模式模板方法 行为型-11 访问者模式 访问者模式(visitor pattern): 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式. Python 访问者模式 小结例子 单例模式 工厂模式 适配器模式 桥接模式 代理模式 观察者模式 状态模式 参考资料 Python 设计模式 常见 Python 设计模式 Mastering.Python.Desing.Patterns 大话设计模式","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"},{"name":"todo","slug":"todo","permalink":"http://fansichao.github.com/blog/tags/todo/"}]},{"title":"Python 异步编程","slug":"Languages/Python/learn2-asyc-code","date":"2021-10-23T11:54:51.120Z","updated":"2021-10-23T11:54:51.120Z","comments":true,"path":"Languages/Python/learn2-asyc-code.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-asyc-code.md/","excerpt":"","text":"tags: 2020年 05月 python3 异步编程 附件参考资源 深入理解 Python 异步编程(上) 从 0 到 1，Python 异步编程的演进之路","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"}]},{"title":"Python 底层原理","slug":"Languages/Python/learn2-base-principle","date":"2021-10-23T11:54:51.120Z","updated":"2021-10-23T11:54:51.120Z","comments":true,"path":"Languages/Python/learn2-base-principle.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn2-base-principle.md/","excerpt":"","text":"Python-底层实现清单 内存管理&amp;垃圾回收 变量对象管理 数据类型底层实现 列表 元组 字符串 数值 字典 类封装 数据类型底层实现列表实现原理: 列表实现可以数组和链表 列表是一个线性的集合，它允许用户在任何位置插入、删除、访问和替换元素。 列表实现是基于数组或基于链表结构的。当使用列表迭代器的时候，双链表结构比单链表结构更快。 有序的列表是元素总是按照升序或者降序排列的元素。 Cpython 中列表被实现为 长度可变的数组。 实现原理说明：从细节上看，Python 中的列表是由对其它对象的引用组成的连续数组。指向这个数组的指针及其长度被保存在一个列表头结构中。这意味着，每次添加或删除一个元素时，由引用组成的数组需要该标大小(重新分配)。幸运的是，Python 在创建这些数组时采用了指数分配，所以并不是每次操作都需要改变数组的大小。但是，也因为这个原因添加或取出元素的平摊复杂度较低 列表的算法效率: 可以采用时间复杂度来衡量： 123456789101112131415index() O(1)append O(1)pop() O(1)pop(i) O(n)insert(i,item) O(n)del operator O(n)iteration O(n)contains(in) O(n)get slice[x:y] O(k)del slice O(n)set slice O(n+k)reverse O(n)concatenate O(k)sort O(nlogn)multiply O(nk) 列表-参考资源: Python-列表底层实现原理 元组tuple 和 list 相似，本质也是一个数组，但是空间大小固定。不同于一般数组，Python 的 tuple 做了许多优化，来提升在程序中的效率。 举个例子，为了提高效率，避免频繁的调用系统函数 free 和 malloc 向操作系统申请和释放空间，tuple 源文件中定义了一个 free_list： 1static PyTupleObject *free_list[PyTuple_MAXSAVESIZE]; 所有申请过的，小于一定大小的元组，在释放的时候会被放进这个 free_list 中以供下次使用。也就是说，如果以后需要再去创建同样的 tuple，Python 就可以直接从缓存中载入。 元组-参考资源: Python 列表和元组的底层实现-源码分析 Python 元组源码和结构图分析 字典实现原理: 字典是通过散列表或说哈希表实现的。字典也被称为关联数组，还称为哈希数组等。也就是说，字典也是一个数组，但数组的索引是键经过哈希函数处理后得到的散列值。 参考资源: Python 字典底层实现原理 数据添加：把 key 通过哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将 value 存储在以该数字为下标的数组空间里。数据查询：再次使用哈希函数将 key 转换为对应的数组下标，并定位到数组的位置获取 value。 集合集合底层实现原理类似于字典 set 集合和 dict 一样也是基于散列表的，只是他的表元只包含键的引用，而没有对值的引用，其他的和 dict 基本上是一致的，所以在此就不再多说了。并且 dict 要求键必须是能被哈希的不可变对象，因此普通的 set 无法作为 dict 的键，必须选择被“冻结”的不可变集合类：frozenset。顾名思义，一旦初始化，集合内数据不可修改 变量对象底层原理 可变类型，值可以改变： 列表 list 字典 dict 不可变类型，值不可以改变： 数值类型 int, long, bool, float 字符串 str 元组 tuple 1234567# 不可变类型修改例如 a = 5 修改为 a = 10实际上重新生成了对象10，然后a指向5。# 可变类型修改lis = [a,b,c,d]lis存储着不同对象的引用，其中a,b,c,d的修改，实质上lis并未修改。只是a,b,c,d做了对应修改。 本质是因为不可变对象一旦新建后，系统就会根据他的大小给他分配固定死的内存，所以不允许修改，只修改值只能申请新的内存和地址。而可变对象，他的内存大小可以随着值的变化而自动扩容 类-封装底层实现原理Python 封装底层实现原理详解 Python 封装特性的实现纯属“投机取巧”，之所以类对象无法直接调用以双下划线开头命名的类属性和类方法，是因为其底层实现时，Python 偷偷改变了它们的名称 Python 类对于 __func()函数和__name属性，都修改了名称变为_类名__属性名的格式，可以通过_类名__属性名的方式调用。如果希望类函数或类名称隐藏起来，加__前缀即可 附件其他命令12# 查看代码执行过程python3 -m dis a.py 参考资源 python 源码分析 基本篇 Python 中的 list、tuple、set、dict 的底层实现的理解 Python 数据结构底层实现浅析——list 和 tuple","categories":[],"tags":[]},{"title":"Python 异常处理","slug":"Languages/Python/learn1-try-except","date":"2021-10-23T11:54:51.119Z","updated":"2021-10-23T11:54:51.120Z","comments":true,"path":"Languages/Python/learn1-try-except.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-try-except.md/","excerpt":"","text":"简介说明 Python3 官方异常文档 异常 语法或逻辑错误 因为程序出现了错误而在正常控制流以外采取的行为 引起异常发生的错误 检测(和采取可能的措施)阶段 基础使用try..except..else..finally12345678910import tracebacktry: x = a + 1except (NameError, ZeroDivisionError) as err: print(&#x27;&gt;&gt;&gt; Error&#x27;) print(traceback.format_exc())else: x += 1finally: print(&#x27;&gt; 执行完毕&#x27;) Raise 语句12345# raise 语句允许程序员强制发生指定的异常raise NameError(&#x27;HiThere&#x27;)# raise 如果你需要确定是否引发了异常但不打算处理它raise 用户自定义异常12345678910111213# 异常通常应该直接或间接地从 Exception 类派生# 大多数异常都定义为名称以“Error”结尾，类似于标准异常的命名class InputError(Error): &quot;&quot;&quot;Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error &quot;&quot;&quot; def __init__(self, expression, message): self.expression = expression self.message = message 定义清理操作 finally 语句try 的可选子句 finally 用于定义必须在所有情况下执行的清理操作 12345try: raise KeyboardInterruptfinally: print(&#x27;Goodbye, world!&#x27;)# finally 语句无论是否发生异常都会执行 更复杂的异常情况(简单来说 finally 语句无论如何都会执行) try 子句发生异常时，没有被 except 捕获，会在 finally 执行完成后，重新引发异常 异常如果在 except 或 else 内部产生，会在 finally 执行完成后，重新引发异常 如果在执行 try 语句时遇到一个 break, continue 或 return 语句，则 finally 子句将在执行 break, continue 或 return 语句之前被执行 如果 finally 子句中包含一个 return 语句，则返回值将来自 finally 子句的某个 return 语句的返回值，而非来自 try 子句的 return 语句的返回值。 预定义的清理操作Python 本身提供了很多语法范式简化了异常处理，例如： for 语句利用 Stoplteration 异常来结束循环的 with 语句在打开文件后会在操作结束后(无论是否正常结束)会自动关闭文件句柄 使用 getattr() 函数获取对象中的不确定属性 以上这些都是 Python 自身封装好的语法范式，在处理这些事件的时候应避免使用 try/except/finally 的思维来处理。 小结 except 语句不是必须的，finally 语句也不是必须的，但是二者必须要有一个，否则就没有 try 的意义了。 except 语句可以有多个，Python 会按 except 语句的顺序依次匹配你指定的异常，如果异常已经处理就不会再进入后面的 except 语句。 except 语句可以以元组形式同时指定多个异常，参见实例代码。 except 语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过 logging 或者 sys 模块获取当前异常。 如果要捕获异常后要重复抛出，请使用 raise，后面不要带任何参数或信息。 不建议捕获并抛出同一个异常，请考虑重构你的代码。 不建议在不清楚逻辑的情况下捕获所有异常，有可能你隐藏了很严重的问题。 尽量使用内置的异常处理语句来 替换 try/except 语句，比如 with 语句，getattr()方法 异常层级分析异常层级 BaseException SystemExit KeyboardInterrupt GeneratorExit Exception …. 12345try: pass# 捕获 Exception 内部的异常except Exception as err: pass 详细异常层级分析 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StandardError | +-- BufferError | +-- ArithmeticError | | +-- FloatingPointError | | +-- OverflowError | | +-- ZeroDivisionError | +-- AssertionError | +-- AttributeError | +-- EnvironmentError | | +-- IOError | | +-- OSError | | +-- WindowsError (Windows) | | +-- VMSError (VMS) | +-- EOFError | +-- ImportError | +-- LookupError | | +-- IndexError | | +-- KeyError | +-- MemoryError | +-- NameError | | +-- UnboundLocalError | +-- ReferenceError | +-- RuntimeError | | +-- NotImplementedError | +-- SyntaxError | | +-- IndentationError | | +-- TabError | +-- SystemError | +-- TypeError | +-- ValueError | +-- UnicodeError | +-- UnicodeDecodeError | +-- UnicodeEncodeError | +-- UnicodeTranslateError +-- Warning +-- DeprecationWarning +-- PendingDeprecationWarning +-- RuntimeWarning +-- SyntaxWarning +-- UserWarning +-- FutureWarning +-- ImportWarning +-- UnicodeWarning +-- BytesWarning 异常使用技巧传递异常有时我们会在捕捉到一个异常后重新引发它(传递异常)，实现起来很简单，使用不带参数的 raise 语句即可，例如 1234567891011def f1(): print(1/0)def f2(): try: f1() except Exception as e: print(&#x27;something worng&#x27;) raisef2() 只做精确的异常捕获在 Python 中使用异常捕获时应捕获尽可能精确的异常类型，而不是模糊的 Exception。 别让异常破坏代码抽象分层的一致性很多场景下我们会对异常类进行包装，方便在产生已知异常时自定义错误信息，这样做能大大提高后续的编码效率，但在使用时如果没有做好分层处理很容易击穿代码的抽象分层逻辑，具体案例请参考 Python 工匠： 异常处理的三个好习惯。为了避免因为使用错误的异常处理方式导致代码的抽象分层逻辑被打破： 让模块只调用与当前抽象层级一致的异常类，既不能高于当前抽象层级，也不能低于当前抽象层级 在需要跨层级调用异常类时应通过异常包装与转换的方法进行，而不是直接跨层级调用异常类 异常处理不应该喧宾夺主异常处理逻辑太多，以至于扰乱了代码核心逻辑 最佳实践最佳实践不限于编程语言，只是一些规则和填坑后的收获。 只处理你知道的异常，避免捕获所有异常然后吞掉它们。 抛出的异常应该说明原因，有时候你知道异常类型也猜不出所以然的。 避免在 catch 语句块中干一些没意义的事情。 不要使用异常来控制流程，那样你的程序会无比难懂和难维护。 如果有需要，切记使用 finally 来释放资源。 如果有需要，请不要忘记在处理异常后做清理工作或者回滚操作。 异常速查表 参考资源 Python 中内置异常层次结构 Python 中的异常处理 Python 异常处理知识点汇总","categories":[],"tags":[]},{"title":"菜鸟驿站学习笔记","slug":"Languages/Python/learn1-runoob","date":"2021-10-23T11:54:51.119Z","updated":"2021-10-23T11:54:51.119Z","comments":true,"path":"Languages/Python/learn1-runoob.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-runoob.md/","excerpt":"","text":"tags: Python 菜鸟驿站 2018 年 12 月 简介说明以下全文来自于菜鸟驿站官网，如需跳转请点击。 各类程序员学习路线图 学习资料站点地图：学习资料站点地图 Python 简介Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。像 Perl 语言一样, Python 源代码同样遵循 GPL(GNU General Public License)协议。 Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。 Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于 PHP 和 Perl 语言。 Python 是交互式语言： 这意味着，您可以在一个 Python 提示符，直接互动执行写你的程序。 Python 是面向对象语言: 这意味着 Python 支持面向对象的风格或代码封装在对象的编程技术。 Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。 Python 发展历史Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。 Python 特点 易于学习：Python 有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。 易于阅读：Python 代码定义的更清晰。 易于维护：Python 的成功在于它的源代码是相当容易维护的。 一个广泛的标准库：Python 的最大的优势之一是丰富的库，跨平台的，在 UNIX，Windows 和 Macintosh 兼容很好。 互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。 可移植：基于其开放源代码的特性，Python 已经被移植(也就是使其工作)到许多平台。 可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用 C 或 C++完成那部分程序，然后从你的 Python 程序中调用。 数据库：Python 提供所有主要的商业数据库的接口。 GUI 编程：Python 支持 GUI 可以创建和移植到许多系统调用。 可嵌入: 你可以将 Python 嵌入到 C/C++程序，让你的程序的用户获得”脚本化”的能力。 Python 环境变量PYTHONPATH是 Python 搜索路径，默认我们 import 的模块都会从 PYTHONPATH 里面寻找。 PYTHONSTARTUPPython 启动后，先寻找 PYTHONSTARTUP 环境变量，然后执行此变量指定的文件中的代码。 PYTHONCASEOK加入 PYTHONCASEOK 的环境变量, 就会使 python 导入模块的时候不区分大小写. PYTHONHOME另一种模块搜索路径。它通常内嵌于的 PYTHONSTARTUP 或 PYTHONPATH 目录中，使得两个模块库更容易切换。 **#!/usr/bin/python **:是告诉操作系统执行这个脚本的时候，调用 /usr/bin 下的 python 解释器； #!/usr/bin/env python(推荐):这种用法是为了防止操作系统用户没有将 python 装在默认的 /usr/bin 路径里。当系统看到这一行的时候，首先会到 env 设置里查找 python 的安装路径，再调用对应路径下的解释器程序完成操作。 #!/usr/bin/python 相当于写死了 python 路径; #!/usr/bin/env python 会去环境设置寻找 python 目录,推荐这种写法 Python 运行参数Python 启动交互式界面参数。 1$ python # Unix/Linux -d 在解析时显示调试信息 -O 生成优化代码 ( .pyo 文件 ) -S 启动时不引入查找 Python 路径的位置 -V 输出 Python 版本号 -X 从 1.6 版本之后基于内建的异常(仅仅用于字符串)已过时。 -c cmd 执行 Python 脚本，并将运行结果作为 cmd 字符串。 file 在给定的 python 文件执行 python 脚本。 Python 保留字符Python 保留字符下面的列表显示了在 Python 中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。所有 Python 的关键字只包含小写字母。 and exec not assert finally or break for pass class from print continue global raise def if return del import try elif in while else is with except lambda yield Python 函数Python 数学函数数学函数需要导入 math 或 cmath 包 1improt math 函数 返回值 ( 描述 ) abs(x) 返回数字的绝对值，如 abs(-10) 返回 10 ceil(x) 返回数字的上入整数，如 math.ceil(4.1) 返回 5 cmp(x, y) 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1 exp(x) 返回 e 的 x 次幂(ex),如 math.exp(1) 返回 2.718281828459045 fabs(x) 返回数字的绝对值，如 math.fabs(-10) 返回 10.0 floor(x) 返回数字的下舍整数，如 math.floor(4.9)返回 4 log(x) 如 math.log(math.e)返回 1.0,math.log(100,10)返回 2.0 log10(x) 返回以 10 为基数的 x 的对数，如 math.log10(100)返回 2.0 max(x1, x2,…) 返回给定参数的最大值，参数可以为序列。 min(x1, x2,…) 返回给定参数的最小值，参数可以为序列。 modf(x) 返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。 pow(x, y) x**y 运算后的值。 round(x [,n]) 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。 sqrt(x) 返回数字 x 的平方根 Python 随机数函数随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。 Python 包含以下常用随机数函数： 函数 返回值 ( 描述 ) choice(seq) 从序列的元素中随机挑选一个元素，比如 random.choice(range(10))，从 0 到 9 中随机挑选一个整数 randrange ([start,] stop [,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为 1 random() 随机生成下一个实数，它在[0,1)范围内。 seed([x]) 改变随机数生成器的种子 seed。如果你不了解其原理，你不必特别去设定 seed，Python 会帮你选择 seed。 shuffle(lst) 将序列的所有元素随机排序 uniform(x, y) 随机生成下一个实数，它在[x,y]范围内。 Python 三角函数 常量 返回值 ( 描述 ) cos(x) 返回 x 的反余弦弧度值。 asin(x) 返回 x 的反正弦弧度值。 atan(x) 返回 x 的反正切弧度值。 atan2(y, x) 返回给定的 X 及 Y 坐标值的反正切值。 cos(x) 返回 x 的弧度的余弦值。 hypot(x, y) 返回欧几里德范数 sqrt(x*x + y*y)。 sin(x) 返回的 x 弧度的正弦值。 tan(x) 返回 x 弧度的正切值。 degrees(x) 将弧度转换为角度,如 degrees(math.pi/2),返回 90.0 radians(x) 将角度转换为弧度 Python 数学常量 常量 返回值 ( 描述 ) pi 数学常量 pi(圆周率，一般以 π 来表示) e 数学常量 e，e 即自然常数(自然常数)。 匿名函数python 使用 lambda 来创建匿名函数。lambda 只是一个表达式，函数体比 def 简单很多。lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。 123456语法lambda函数的语法只包含一个语句，如下：lambda [arg1 [,arg2,.....argn]]:expressionsum = lambda arg1, arg2: arg1 + arg2;# 调用sum函数print &quot;相加后的值为 : &quot;, sum( 10, 20 ) Python 异常异常说明异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在 Python 无法正常处理程序时就会发生一个异常。异常是 Python 对象，表示一个错误。当 Python 脚本发生异常时我们需要捕获处理它，否则程序会终止执行。 捕捉异常可以使用 try/except 语句。try/except 语句用来检测 try 语句块中的错误，从而让 except 语句捕获异常信息并处理。如果你不想在异常发生时结束你的程序，只需在 try 里捕获它。语法：以下为简单的 try….except…else 的语法： 12345678try:&lt;语句&gt; #运行别的代码except &lt;名字&gt;：&lt;语句&gt; #如果在try部份引发了&#x27;name&#x27;异常except &lt;名字&gt;，&lt;数据&gt;:&lt;语句&gt; #如果引发了&#x27;name&#x27;异常，获得附加的数据else:&lt;语句&gt; #如果没有异常发生 异常处理指定标准异对指定标准异常进行解释。只能识别之地指定标准异常。 12345678910#!/usr/bin/python# -*- coding: UTF-8 -*-try: fh = open(&quot;testfile&quot;, &quot;w&quot;) fh.write(&quot;这是一个测试文件，用于测试异常!!&quot;)except IOError: print &quot;Error: 没有找到文件或读取文件失败&quot;else: print &quot;内容写入文件成功&quot; fh.close() 使用 except 不带异常类型可以捕获所有异常，但是无法识别出具体异常信息。 使用 except 带多种异常类型捕获多个标准异常 123456try: 正常的操作except(Exception1[, Exception2[,...ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码else: 如果没有异常执行这块代码 Try-finally 语句try-finally 语句无论是否发生异常都将执行最后的代码。退出 try 时总会执行 finally 中语句。 1234567#!/usr/bin/python# -*- coding: UTF-8 -*-try: fh = open(&quot;testfile&quot;, &quot;w&quot;) fh.write(&quot;这是一个测试文件，用于测试异常!!&quot;)finally: print &quot;Error: 没有找到文件或读取文件失败&quot; 异常的参数一个异常可以带上参数，可作为输出的异常信息参数。你可以通过 except 语句来捕获异常的参数，如下所示 123456789101112131415161718192021222324try: 正常的操作except ExceptionType, Argument: 你可以在这输出 Argument 的值... 变量接收的异常值通常包含在异常的语句中。在元组的表单中变量可以接收一个或者多个值。 元组通常包含错误字符串，错误数字，错误位置。实例 以下为单个异常的实例：#!/usr/bin/python# -*- coding: UTF-8 -*-# 定义函数def temp_convert(var): try: return int(var) except ValueError, Argument: print &quot;参数没有包含数字\\n&quot;, Argument# 调用函数temp_convert(&quot;xyz&quot;);以上程序执行结果如下：$ python test.py参数没有包含数字invalid literal for int() with base 10: &#x27;xyz&#x27;触发异常 raise 触发异常我们可以使用 raise 语句自己触发异常raise 语法格式如下：raise [Exception [, args [, traceback]]]语句中 Exception 是异常的类型(例如，NameError)参数标准异常中任一种，args 是自已提供的异常参数。最后一个参数是可选的(在实践中很少使用)，如果存在，是跟踪异常对象。实例一个异常可以是一个字符串，类或对象。 Python 的内核提供的异常，大多数都是实例化的类，这是一个类的实例的参数。定义一个异常非常简单，如下所示： 1234567891011121314151617181920212223242526272829303132def functionName( level ):if level &lt; 1:raise Exception(&quot;Invalid level!&quot;, level)# 触发异常后，后面的代码就不会再执行注意：为了能够捕获异常，&quot;except&quot;语句必须有用相同的异常来抛出类对象或者字符串。例如我们捕获以上异常，&quot;except&quot;语句如下所示：try:正常逻辑except Exception,err:触发自定义异常else:其余代码实例#!/usr/bin/python# -*- coding: UTF-8 -*-# 定义函数def mye( level ):if level &lt; 1:raise Exception,&quot;Invalid level!&quot;# 触发异常后，后面的代码就不会再执行try:mye(0) # 触发异常except Exception,err:print 1,errelse:print 2执行以上代码，输出结果为：$ python test.py1 Invalid level! 用户自定义异常通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自 Exception 类，通过直接或间接的方式。以下为与 RuntimeError 相关的实例,实例中创建了一个类，基类为 RuntimeError，用于在异常触发时输出更多的信息。在 try 语句块中，用户自定义的异常后执行 except 块语句，变量 e 是用于创建 Networkerror 类的实例。 123456789class Networkerror(RuntimeError):def __init__(self, arg):self.args = arg在你定义以上类后，你可以触发该异常，如下所示：try:raise Networkerror(&quot;Bad hostname&quot;)except Networkerror,e:print e.args 标准异常说明菜鸟驿站异常处理: http://www.runoob.com/python/python-exceptions.html Python 常见标准异常说明| 异常代码 | 异常说明 || :————————— | :————————————–: || BaseException | 所有异常的基类 || SystemExit | 解释器请求退出 || KeyboardInterrupt | 用户中断执行(通常是输入^C) || Exception | 常规错误的基类 || StopIteration | 迭代器没有更多的值 || GeneratorExit | 生成器(generator)发生异常来通知退出 || StandardError | 所有的内建标准异常的基类 || ArithmeticError | 所有数值计算错误的基类 || FloatingPointError | 浮点计算错误 || OverflowError | 数值运算超出最大限制 || ZeroDivisionError | 除(或取模)零 (所有数据类型) || AssertionError | 断言语句失败 || AttributeError | 对象没有这个属性 || EOFError | 没有内建输入,到达 || EOF | 标记 || EnvironmentError | 操作系统错误的基类 || IOError | 输入/输出操作失败 || OSError | 操作系统错误 || WindowsError | 系统调用失败 || ImportError | 导入模块/对象失败 || LookupError | 无效数据查询的基类 || IndexError | 序列中没有此索引(index) || KeyError | 映射中没有这个键 || MemoryError | 内存溢出错误(对于 | Python 解释器不是致命的) || NameError | 未声明/初始化对象 (没有属性) || UnboundLocalError | 访问未初始化的本地变量 || ReferenceError | 弱引用( | Weak reference)试图访问已经垃圾回收了的对象 || RuntimeError | 一般的运行时错误 || NotImplementedError | 尚未实现的方法 || SyntaxErrorPython | 语法错误 || IndentationError | 缩进错误 || TabErrorTab | 和空格混用 || SystemError | 一般的解释器系统错误 || TypeError | 对类型无效的操作 || ValueError | 传入无效的参数 || UnicodeErrorUnicode | 相关的错误 || UnicodeDecodeErrorUnicode | 解码时的错误 || UnicodeEncodeErrorUnicode | 编码时错误 || UnicodeTranslateErrorUnicode | 转换时错误 || Warning | 警告的基类 || DeprecationWarning | 关于被弃用的特征的警告 || FutureWarning | 关于构造将来语义会有&gt;改变的警告 || OverflowWarning | 旧的关于自动提升为长整型(long)的警告 || PendingDeprecationWarning | 关于特性将会被废弃的警告 || RuntimeWarning | 可疑的运行时行为(runtime behavior)的警告 || SyntaxWarning | 可疑的语法的警告 || UserWarning | 用户代码生成的警告 | Python 内置函数菜鸟驿站参考链接： http://www.runoob.com/python/python-built-in-functions.html 重要内置函数open()或 file()打开文件，创建 file 对象。 注意点： file 对象的方法 + 打开模式 staticmethod返回函数的静态方法 12345678In [16]: class C(): ...: @staticmethod ...: def a(): ...: pass ...: def b(): ...: passIn [18]: C.a()In [20]: # 以上实例声明了静态方法 f，类可以不用实例化就可以调用该方法 C.f()，当然也可以实例化后调用 C().f()。vvvvv classmethod修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等 1234567891011121314#!/usr/bin/python# -*- coding: UTF-8 -*-class A(object): bar = 1 def func1(self): print (&#x27;foo&#x27;) @classmethod def func2(cls): print (&#x27;func2&#x27;) print (cls.bar) cls().func1() # 调用 foo 方法A.func2() # 不需要实例化 getattr()用于返回一个对象属性值。 123456&gt;&gt;&gt;class A(object):... bar = 1...&gt;&gt;&gt; a = A()&gt;&gt;&gt; getattr(a, &#x27;bar&#x27;) # 获取属性 bar 值1 eval()函数用来执行一个字符串表达式，并返回表达式的值 isinstance()函数来判断一个对象是否是一个已知的类型，类似 type() 1234567891011121314In [42]: a=2;print isinstance (a,int); print isinstance (a,(str,int,list)) # 是元组中的一个返回 TrueTrueTrueIn [43]: # 推荐使用 isinstance ，isinstance和type()区别，type()不会考虑继承问题In [44]: # int，float，bool，complex，str(字符串)，list，dict(字典)，set，tuple# basestring() 方法是 str 和 unicode 的超类(父类)，也是抽象类basestring() 函数。# basestring() 可以被用来判断一个对象是否为 str 或者 unicode 的实例&gt;&gt;&gt;isinstance(&quot;Hello world&quot;, str)True&gt;&gt;&gt; isinstance(&quot;Hello world&quot;, basestring)True&gt;&gt;&gt; isinstance(u&quot;Hello world&quot;, basestring)True issubclass()用于判断参数 class 是否是类型参数 classinfo 的子类。 123456789#!/usr/bin/python# -*- coding: UTF-8 -*-class A: passclass B(A): passprint(issubclass(B,A)) # 返回 True super() TODOsuper() 函数是用于调用父类(超类)的一个方法。 super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序(MRO)、重复调用(钻石继承)等种种问题。 MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。 基础内置函数abs返回函数绝对值。 divmod(a,b)取余。 12&gt;&gt;&gt; divmod(7,2)(3,1) input()接收一个合法的 python 表达式 raw_input()接收任何字符，输出为 字符串 all()判断 列表或元组中是否都为 True 1234567In [22]: all([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]) # 列表list，元素都不为空或0Out[22]: TrueIn [23]: all([&#x27;a&#x27;, &#x27;&#x27;, 0, &#x27;c&#x27;, &#x27;d&#x27;]) # 列表list，存在为空或0的元素Out[23]: False# 注意点 空列表或空元组 返回TrueIn [24]: all([])Out[24]: True enumerate()函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中 12In [29]: list(enumerate(seasons, start=1)) # 下标从 1 开始Out[29]: [(1, &#x27;Spring&#x27;), (2, &#x27;Summer&#x27;), (3, &#x27;Fall&#x27;), (4, &#x27;Winter&#x27;)] int()函数用于将一个字符串或数字转换为整型 ord()返回对应十进制 str()函数将对象转化为适于人阅读的形式。 any()判断 元组或列表 是否全部为 False. 与 all()相反 pow()方法返回 xy(x 的 y 次方) 的值。 12improt mathmath.power(2,4): 16.0 sum()对系列进行求和计算。 **bin() **返回一个整数 int 或者长整数 long int 的二进制表示。 12In [47]: bin(10)Out[47]: &#x27;0b1010&#x27; iter()生成迭代器 property()函数的作用是在新式类中返回属性值。 filter()函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。 range()函数可创建一个整数列表，一般用在 for 循环中。 1234567函数语法range(start, stop[, step])参数说明：start: 计数从 start 开始。默认是从 0 开始。例如range(5)等价于range(0， 5);stop: 计数到 stop 结束，但不包括 stop。例如：range(0， 5) 是[0, 1, 2, 3, 4]没有5step：步长，默认为1。例如：range(0， 5) 等价于 range(0, 5, 1) bytearray()方法返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围: 0 &lt;= x &lt; 256。 float()函数用于将整数和字符串转换成浮点数。 list()方法用于将元组转换为列表。 unichr()函数 和 chr()函数功能基本一样， 只不过是返回 unicode 的字符。 callable()函数用于检查一个对象是否是可调用的。如果返回 True，object 仍然可能调用失败；但如果返回 False，调用对象 ojbect 绝对不会成功。 对于函数, 方法, lambda 函式, 类, 以及实现了 call 方法的类实例, 它都返回 True。 str.format()它增强了字符串格式化的功能。 TODO locals()函数会以字典类型返回当前位置的全部局部变量 reduce()函数会对参数序列中元素进行累积。函数将一个数据集合(链表，元组等)中的所有数据进行下列操作：用传给 reduce 中的函数 function(有两个参数)先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。reduce(function, iterable[, initializer])参数function – 函数，有两个参数iterable – 可迭代对象initializer – 可选，初始参数 chr()用一个范围在 range(256)内的(就是 0 ～ 255)整数作参数，返回一个对应的字符。 frozenset()返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。 long()函数将数字或字符串转换为一个长整型。 reload()用于重新载入之前载入的模块。 vars()函数返回对象 object 的属性和属性值的字典对象。 map()会根据提供的函数对指定序列做映射。第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。 12345&gt;&gt;&gt;def square(x) : # 计算平方数... return x ** 2...&gt;&gt;&gt; map(square, [1,2,3,4,5]) # 计算列表各个元素的平方[1, 4, 9, 16, 25] repr()函数将对象转化为供解释器读取的形式。 xrange()函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。 cmp(x,y)函数用于比较 2 个对象，如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 globals()函数会以字典类型返回当前位置的全部全局变量。 max()方法返回给定参数的最大值，参数可以为序列。 reverse()函数用于反向列表中元素。 zip()函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。 123456789&gt;&gt;&gt;a = [1,2,3]&gt;&gt;&gt; b = [4,5,6]&gt;&gt;&gt; c = [4,5,6,7,8]&gt;&gt;&gt; zipped = zip(a,b) # 打包为元组的列表[(1, 4), (2, 5), (3, 6)]&gt;&gt;&gt; zip(a,c) # 元素个数与最短的列表一致[(1, 4), (2, 5), (3, 6)]&gt;&gt;&gt; zip(*zipped) # 与 zip 相反，*zipped 可理解为解压，返回二维矩阵式[(1, 2, 3), (4, 5, 6)] compile()函数将一个字符串编译为字节代码。 hasattr()函数用于判断对象是否包含对应的属性。 memoryview()函数返回给定参数的内存查看对象(Momory view)。所谓内存查看对象，是指对支持缓冲区协议的数据进行包装，在不需要复制对象基础上允许 Python 代码访问。 round()方法返回浮点数 x 的四舍五入值。 **import()**函数用于动态加载类和函数 。如果一个模块经常变化就可以使用 **import**() 来动态载入。 complex()函数用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。。 hash()用于获取取一个对象(字符串或者数值等)的哈希值。 min()方法返回给定参数的最小值，参数可以为序列。 set()函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。 delattr函数用于删除属性。 delattr(x，’foobar’)相等于 del x.foobar。 help()函数用于查看函数或模块用途的详细说明。 next()返回迭代器的下一个项目. setattr()函数对应函数 getattr()，用于设置属性值，该属性必须存在。 dict()函数用于创建一个字典 hex()函数用于将 10 进制整数转换成 16 进制，以字符串形式表示 slice()函数实现切片对象，主要用在切片操作函数里的参数传递。 dir()函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法dir()，该方法将被调用。如果参数不包含dir()，该方法将最大限度地收集参数信息。 id()函数用于获取对象的内存地址。 oct()函数将一个整数转换成 8 进制字符串。 sorted(list) 有返回值list.sort() 无返回值，直接修改原 list函数对所有可迭代的对象进行排序操作 exec()执行储存在字符串或文件中的 Python 语句，相比于 eval，exec 可以执行更复杂的 Python 代码 Python 模块模块搜索顺序搜索路径当你导入一个模块，Python 解析器对模块位置的搜索顺序是： 当前目录 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。 如果都找不到，Python 会察看默认路径。UNIX 下，默认路径一般为/usr/local/lib/python/。模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH 和由安装过程决定的默认目录。命名空间和作用域变量是拥有匹配对象的名字(标识符)。命名空间是一个包含了变量名称们(键)和它们各自相应的对象们(值)的字典。一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。 dir()函数一个排好序的字符串列表，内容是一个模块里定义过的名字。返回的列表容纳了在一个模块里定义的所有模块，变量和函数。 globals() 和 locals() 函数根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。两个函数的返回类型都是字典。所以名字们能用 keys() 函数摘取。 reload() 函数当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。因此，如果你想重新执行模块里顶层部分的代码，可以用 reload() 函数。该函数会重新导入之前导入过的模块。 sys 模块系统相关的信息模块: import sys sys.argv 是一个 list,包含所有的命令行参数. sys.stdout sys.stdin sys.stderr 分别表示标准输入输出,错误输出的文件对象. sys.stdin.readline() 从标准输入读一行 sys.stdout.write(“a”) 屏幕输出 a sys.exit(exit_code) 退出程序 sys.modules 是一个 dictionary，表示系统中所有可用的 module sys.platform 得到运行的操作系统环境 sys.path 是一个 list,指明所有查找 module，package 的路径. os 模块操作系统相关的调用和操作: import os os.environ 一个 dictionary 包含环境变量的映射关系 os.environ[“HOME”] 可以得到环境变量 HOME 的值 os.chdir(dir) 改变当前目录 os.chdir(‘d:\\outlook’)注意 windows 下用到转义 os.getcwd() 得到当前目录 os.getegid() 得到有效组 id os.getgid() 得到组 id os.getuid() 得到用户 id os.geteuid() 得到有效用户 id os.setegid os.setegid() os.seteuid() os.setuid() os.getgruops() 得到用户组名称列表 os.getlogin() 得到用户登录名称 os.getenv 得到环境变量 os.putenv 设置环境变量 os.umask 设置 umask os.system(cmd) 利用系统调用，运行 cmd 命令内置模块(不用 import 就可以直接使用)常用内置函数： help(obj) 在线帮助, obj 可是任何类型 callable(obj) 查看一个 obj 是不是可以像函数一样调用 repr(obj) 得到 obj 的表示字符串，可以利用这个字符串 eval 重建该对象的一个拷贝 eval_r(str) 表示合法的 python 表达式，返回这个表达式 dir(obj) 查看 obj 的 name space 中可见的 name hasattr(obj,name) 查看一个 obj 的 name space 中是否有 name getattr(obj,name) 得到一个 obj 的 name space 中的一个 name setattr(obj,name,value) 为一个 obj 的 namespace 中的一个 name 指向 vale 这个 object delattr(obj,name) 从 obj 的 name space 中删除一个 name vars(obj) 返回一个 object 的 name space。用 dictionary 表示 locals() 返回一个局部 name space,用 dictionary 表示 globals() 返回一个全局 name space,用 dictionary 表示 type(obj) 查看一个 obj 的类型 isinstance(obj,cls) 查看 obj 是不是 cls 的 instance issubclass(subcls,supcls) 查看 subcls 是不是 supcls 的子类 OS 模块-文件目录os 模块提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示： os.access(path, mode):检验权限模式 2 os.chdir(path):改变当前工作目录 3 os.chflags(path, flags):设置路径的标记为数字标记。4 os.chmod(path, mode):更改权限 5 os.chown(path, uid, gid):更改文件所有者 6 os.chroot(path):改变当前进程的根目录 7 os.close(fd):关闭文件描述符 fd8 os.closerange(fd_low, fd_high):关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略 9 os.dup(fd):复制文件描述符 fd10 os.dup2(fd, fd2):将一个文件描述符 fd 复制到另一个 fd211 os.fchdir(fd):通过文件描述符改变当前工作目录 12 os.fchmod(fd, mode):改变一个文件的访问权限，该文件由参数 fd 指定，参数 mode 是 Unix 下的文件访问权限。13 os.fchown(fd, uid, gid):修改一个文件的所有权，这个函数修改一个文件的用户 ID 和用户组 ID，该文件由文件描述符 fd 指定。14 os.fdatasync(fd):强制将文件写入磁盘，该文件由文件描述符 fd 指定，但是不强制更新文件的状态信息。15 os.fdopen(fd[, mode[, bufsize]]):通过文件描述符 fd 创建一个文件对象，并返回这个文件对象 16 os.fpathconf(fd, name):返回一个打开的文件的系统配置信息。name 为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定(POSIX.1, Unix 95, Unix 98, 和其它)。17 os.fstat(fd):返回文件描述符 fd 的状态，像 stat()。18 os.fstatvfs(fd):返回包含文件描述符 fd 的文件的文件系统的信息，像 statvfs()19 os.fsync(fd):强制将文件描述符为 fd 的文件写入硬盘。20 os.ftruncate(fd, length):裁剪文件描述符 fd 对应的文件, 所以它最大不能超过文件大小。21 os.getcwd():返回当前工作目录 22 os.getcwdu():返回一个当前工作目录的 Unicode 对象 23 os.isatty(fd):如果文件描述符 fd 是打开的，同时与 tty(-like)设备相连，则返回 true, 否则 False。24 os.lchflags(path, flags):设置路径的标记为数字标记，类似 chflags()，但是没有软链接 25 os.lchmod(path, mode):修改连接文件权限 26 os.lchown(path, uid, gid):更改文件所有者，类似 chown，但是不追踪链接。27 os.link(src, dst):创建硬链接，名为参数 dst，指向参数 src28 os.listdir(path):返回 path 指定的文件夹包含的文件或文件夹的名字的列表。29 os.lseek(fd, pos, how):设置文件描述符 fd 当前位置为 pos, how 方式修改: SEEK_SET 或者 0 设置从文件开始的计算的 pos;SEEK_CUR 或者 1 则从当前位置计算; os.SEEK_END 或者 2 则从文件尾部开始. 在 unix，Windows 中有效 30 os.lstat(path):像 stat(),但是没有软链接 31 os.major(device):从原始的设备号中提取设备 major 号码 (使用 stat 中的 st_dev 或者 st_rdev field)。32 os.makedev(major, minor):以 major 和 minor 设备号组成一个原始设备号 33 os.makedirs(path[, mode]):递归文件夹创建函数。像 mkdir(), 但创建的所有 intermediate-level 文件夹需要包含子文件夹。34 os.minor(device):从原始的设备号中提取设备 minor 号码 (使用 stat 中的 st_dev 或者 st_rdev field )。35 os.mkdir(path[, mode]):以数字 mode 的 mode 创建一个名为 path 的文件夹.默认的 mode 是 0777 (八进制)。36 os.mkfifo(path[, mode]):创建命名管道，mode 为数字，默认为 0666 (八进制)37 os.mknod(filename[, mode=0600, device]):创建一个名为 filename 文件系统节点(文件，设备特别文件或者命名 pipe)。38 os.open(file, flags[, mode]):打开一个文件，并且设置需要的打开选项，mode 参数是可选的 39 os.openpty():打开一个新的伪终端对。返回 pty 和 tty 的文件描述符。40 os.pathconf(path, name):返回相关文件的系统配置信息。41 os.pipe():创建一个管道. 返回一对文件描述符(r, w) 分别为读和写 42 os.popen(command[, mode[, bufsize]]):从一个 command 打开一个管道 43 os.read(fd, n):从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd 对应文件已达到结尾, 返回一个空字符串。44 os.readlink(path):返回软链接所指向的文件 45 os.remove(path):删除路径为 path 的文件。如果 path 是一个文件夹，将抛出 OSError; 查看下面的 rmdir()删除一个 directory。46 os.removedirs(path):递归删除目录。47 os.rename(src, dst):重命名文件或目录，从 src 到 dst48 os.renames(old, new):递归地对目录进行更名，也可以对文件进行更名。49 os.rmdir(path):删除 path 指定的空目录，如果目录非空，则抛出一个 OSError 异常。50 os.stat(path):获取 path 指定的路径的信息，功能等同于 C API 中的 stat()系统调用。51 os.stat_float_times([newvalue]):决定 stat_result 是否以 float 对象显示时间戳 52 os.statvfs(path):获取指定路径的文件系统统计信息 53 os.symlink(src, dst):创建一个软链接 54 os.tcgetpgrp(fd):返回与终端 fd(一个由 os.open()返回的打开的文件描述符)关联的进程组 55 os.tcsetpgrp(fd, pg):设置与终端 fd(一个由 os.open()返回的打开的文件描述符)关联的进程组为 pg。56 os.tempnam([dir[, prefix]]):返回唯一的路径名用于创建临时文件。57 os.tmpfile():返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。58 os.tmpnam():为创建一个临时文件返回一个唯一的路径 59 os.ttyname(fd):返回一个字符串，它表示与文件描述符 fd 关联的终端设备。如果 fd 没有与终端设备关联，则引发一个异常。60 os.unlink(path):删除文件路径 61 os.utime(path, times):返回指定的 path 文件的访问和修改的时间。62 os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]]):输出在文件夹中的文件名通过在树中游走，向上或者向下。63 os.write(fd, str):写入字符串到文件描述符 fd 中. 返回实际写入的字符串长度 类型转换类型转换 int(x) 将字符转为整型 chr(i) 把一个 ASCII 数值,变成字符 ord(i) 把一个字符或者 unicode 字符,变成 ASCII 数值 oct(x) 把整数 x 变成八进制表示的字符串 hex(x) 把整数 x 变成十六进制表示的字符串 str(obj) 得到 obj 的字符串描述 list(seq) 把一个 sequence 转换成一个 list tuple(seq) 把一个 sequence 转换成一个 tuple dict(),dict(list) 转换成一个 dictionary int(x) 转换成一个 integer long(x) 转换成一个 long interger float(x) 转换成一个浮点数 complex(x) 转换成复数 max(…) 求最大值 min(…) 求最小值 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效 Python 表达式,并返回一个对象 tuple(s) 序列 s 转换为一个元组 set(s) 转换为可变集合。 frozenset(s) 转换为不可变集合 unichr(x) 将一个整数转换为 Unicode 字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 Python 转义符在需要在字符中使用特殊字符时，python 用反斜杠()转义字符。如下表： (在行尾时)续行符 \\反斜杠符号 &#39;单引号 &quot;双引号 \\a 响铃 \\b 退格(Backspace) \\e 转义 \\000 空 \\n 换行 \\v 纵向制表符 \\t 横向制表符 \\r 回车 \\f 换页 \\oyy 八进制数，yy 代表的字符，例如： \\o12 代表换行 \\xyy 十六进制数，yy 代表的字符，例如： \\x0a 代表换行 \\other 其它的字符以普通格式输出 Python 字符串格式化符号 %c 格式化字符及其 ASCII 码 - %s 格式化字符串 %d 格式化整数 %u 格式化无符号整型 %o 格式化无符号八进制数 %x 格式化无符号十六进制数 %X 格式化无符号十六进制数(大写) %f 格式化浮点数字，可指定小数点后的精度 %e 用科学计数法格式化浮点数 %E 作用同%e，用科学计数法格式化浮点数 %g %f 和%e 的简写 %G %f 和 %E 的简写 %p 用十六进制数格式化变量的地址 格式化操作符辅助指令: * 定义宽度或者小数点精度 - 用做左对齐 + 在正数前面显示加号( + )- 在正数前面显示空格- # 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) 0 显示的数字前面填充’0’而不是默认的空格 % ‘%%’输出一个单一的’%’ (var) 映射变量(字典参数) m.n.m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) 字符串内建函数 方法 描述 string.capitalize(): 把字符串的第一个字符大写 string.center(width): 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串 string.count(str, beg=0, end=len(string)): 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数 string.decode(encoding=’UTF-8’, errors=’strict’): 以 encoding 指定的编码格式解码 string， 如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’ string.encode(encoding=’UTF-8’, errors=’strict’): 以 encoding 指定的编码格式编码 string，如果出错默认报一个 ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’ string.endswith(obj, beg=0, end=len(string)): 检查字符串是否以 obj 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False. string.expandtabs(tabsize=8): 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。 string.find(str, beg=0, end=len(string)): 检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1 string.format(): 格式化字符串 string.index(str, beg=0, end=len(string)): 跟 find()方法一样，只不过如果 str 不在 string 中会报一个异常. string.isalnum(): 如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False string.isalpha(): 如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False string.isdecimal(): 如果 string 只包含十进制数字则返回 True 否则返回 False. string.isdigit(): 如果 string 只包含数字则返回 True 否则返回 False. string.islower(): 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False string.isnumeric(): 如果 string 中只包含数字字符，则返回 True，否则返回 False string.isspace(): 如果 string 中只包含空格，则返回 True，否则返回 False. string.istitle(): 如果 string 是标题化的(见 title())则返回 True，否则返回 False string.isupper(): 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False string.join(seq): 以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串 string.ljust(width): 返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 string.lower(): 转换 string 中所有大写字符为小写. string.lstrip(): 截掉 string 左边的空格 string.maketrans(intab, outtab]): maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 max(str): 返回字符串 str 中最大的字母。 min(str): 返回字符串 str 中最小的字母。 string.partition(str): 有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含 str 则 string_pre_str == string. string.replace(str1, str2, num=string.count(str1)): 把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次. string.rfind(str, beg=0,end=len(string) ): 类似于 find()函数，不过是从右边开始查找. string.rindex( str, beg=0,end=len(string)): 类似于 index()，不过是从右边开始. string.rjust(width): 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 string.rpartition(str): 类似于 partition()函数,不过是从右边开始查找. string.rstrip(): 删除 string 字符串末尾的空格. string.split(str=””, num=string.count(str)): 以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num 个子字符串 string.splitlines([keepends]): 按照行(‘\\r’, ‘\\r\\n’, \\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。 string.startswith(obj, beg=0,end=len(string)): 检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查. string.strip([obj]): 在 string 上执行 lstrip()和 rstrip() string.swapcase(): 翻转 string 中的大小写 string.title(): 返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle()) string.translate(str, del=””): 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 del 参数中 string.upper(): 转换 string 中的小写字母为大写 string.zfill(width): 返回长度为 width 的字符串，原字符串 string 右对齐，前面填充 0 string.isdecimal(): isdecimal()方法检查字符串是否只包含十进制字符。这种方法只存在于 unicode 对象。 日期和时间时间间隔是以秒为单位的浮点小数。每个时间戳都以自从 1970 年 1 月 1 日午夜(历元)经过了多长时间来表示。 123# 获取当前时间戳In [3]: print time.time()1542250660.2 时间戳单位最适于做日期运算。但是 1970 年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX 和 Windows 只支持到 2038 年。 struct_time 元组struct_time 元组| 属性 | 值 || :——: | :———————————-: || tm_year | 2008 || tm_mon | 1-12 || tm_mday | 1-31 || tm_hour | 0-23 || tm_min | 0-59 || tm_sec | 0-61(60/61 闰秒) || tm_wday | 0-6 周一到周日 || tm_yday | 0-366(儒略历) || tm_isdst | -1, 0, 1, -1 是决定是否为夏令时的旗帜 | 获取当前时间获取当前时间 struct_time 格式 12In [7]: print time.localtime(time.time())time.struct_time(tm_year=2018, tm_mon=11, tm_mday=15, tm_hour=17, tm_min=52, tm_sec=23, tm_wday=3, tm_yday=319, tm_isdst=0) 获取当前时间 asctime 格式 12In [8]: print time.asctime( time.localtime(time.time()) )Thu Nov 15 17:53:21 2018 格式化日期使用 time.strftime() 方法来格式化日期 1time.strftime(format[, t]) 实例演示 12345678910# 格式化成2016-03-20 11:45:39形式In [9]: print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())2018-11-15 17:55:43# 格式化成Sat Mar 28 22:24:24 2016形式In [10]: print time.strftime(&quot;%a %b %d %H:%M:%S %Y&quot;, time.localtime())Thu Nov 15 17:55:54 2018# 将格式字符串转换为时间戳In [11]: a = &quot;Sat Mar 28 22:24:24 2016&quot;In [12]: print time.mktime(time.strptime(a,&quot;%a %b %d %H:%M:%S %Y&quot;))1459175064.0 python 中时间日期格式化符号： %y 两位数的年份表示(00-99) %Y 四位数的年份表示(000-9999) %m 月份(01-12) %d 月内中的一天(0-31) %H 24 小时制小时数(0-23) %I 12 小时制小时数(01-12) %M 分钟数(00=59) %S 秒(00-59) %a 本地简化星期名称 %A 本地完整星期名称 %b 本地简化的月份名称 %B 本地完整的月份名称 %c 本地相应的日期表示和时间表示 %j 年内的一天(001-366) %p 本地 A.M.或 P.M.的等价符 %U 一年中的星期数(00-53)星期天为星期的开始 %w 星期(0-6)，星期天为星期的开始 %W 一年中的星期数(00-53)星期一为星期的开始 %x 本地相应的日期表示 %X 本地相应的时间表示 %Z 当前时区的名称 %% %号本身 日历模块 CalendarCalendar 模块有很广泛的方法用来处理年历和月历，例如打印某月的月历： 1234567891011cal = calendar.month(2016, 1)print &quot;以下输出2016年1月份的日历:&quot;print cal;January 2016Mo Tu We Th Fr Sa Su1 2 34 5 6 7 8 9 1011 12 13 14 15 16 1718 19 20 21 22 23 2425 26 27 28 29 30 31 Time 模块函数Time 模块包含了以下内置函数，既有时间处理的，也有转换时间格式的： 模块函数 描述 time.altzone 返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值(如西欧，包括英国)。对夏令时启用地区才能使用。 time.asctime([tupletime]) 接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”(2008 年 12 月 11 日 周二 18 时 07 分 14 秒)的 24 个字符的字符串。 time.clock( ) 用以浮点数计算的秒数返回当前的 CPU 时间。用来衡量不同程序的耗时，比 time.time()更有用。 time.ctime([secs]) 作用相当于 asctime(localtime(secs))，未给参数相当于 asctime() time.gmtime([secs]) 接收时间戳(1970 纪元后经过的浮点秒数)并返回格林威治天文时间下的时间元组 t。注：t.tm_isdst 始终为 0 time.localtime([secs]) 接收时间戳(1970 纪元后经过的浮点秒数)并返回当地时间下的时间元组 t(t.tm_isdst 可取 0 或 1，取决于当地当时是不是夏令时)。 time.mktime(tupletime) 接受时间元组并返回时间戳(1970 纪元后经过的浮点秒数)。 time.sleep(secs) 推迟调用线程的运行，secs 指秒数。 time.strftime(fmt[,tupletime]) 接收以时间元组，并返回以可读字符串表示的当地时间，格式由 fmt 决定。 time.strptime(str,fmt=’%a %b %d %H:%M:%S %Y’) 根据 fmt 的格式把一个时间字符串解析为时间元组。 time.time( ) 返回当前时间的时间戳(1970 纪元后经过的浮点秒数)。 time.tzset() 根据环境变量 TZ 重新初始化时间相关设置。 Time 模块包含了以下 2 个非常重要的属性：time.timezone属性 time.timezone 是当地时区(未启动夏令时)距离格林威治的偏移秒数(&gt;0，美洲;&lt;=0 大部分欧洲，亚洲，非洲) time.tzname属性 time.tzname 包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的。 Calendar 函数星期一是默认的每周第一天，星期天是默认的最后一天。更改设置需调用 calendar.setfirstweekday()函数。模块包含了以下内置函数： calendar.calendar(year,w=2,l=1,c=6)返回一个多行字符串格式的 year 年年历，3 个月一行，间隔距离为 c。 每日宽度间隔为 w 字符。每行长度为 21* W+18+2* C。l 是每星期行数。 calendar.firstweekday( )返回当前每周起始日期的设置。默认情况下，首次载入 caendar 模块时返回 0，即星期一。 calendar.isleap(year)是闰年返回 True，否则为 False。 calendar.leapdays(y1,y2)返回在 Y1，Y2 两年之间的闰年总数。 calendar.month(year,month,w=2,l=1)返回一个多行字符串格式的 year 年 month 月日历，两行标题，一周一行。每日宽度间隔为 w 字符。每行的长度为 7* w+6。l 是每星期的行数。 calendar.monthcalendar(year,month)返回一个整数的单层嵌套列表。每个子列表装载代表一个星期的整数。Year 年 month 月外的日期都设为 0;范围内的日子都由该月第几日表示，从 1 开始。 calendar.monthrange(year,month)返回两个整数。第一个是该月的星期几的日期码，第二个是该月的日期码。日从 0(星期一)到 6(星期日);月从 1 到 12。 calendar.prcal(year,w=2,l=1,c=6)相当于 print calendar.calendar(year,w,l,c). calendar.prmonth(year,month,w=2,l=1)相当于 print calendar.calendar(year，w，l，c)。 calendar.setfirstweekday(weekday)设置每周的起始日期码。0(星期一)到 6(星期日)。 calendar.timegm(tupletime)和 time.gmtime 相反：接受一个时间元组形式，返回该时刻的时间戳(1970 纪元后经过的浮点秒数)。 calendar.weekday(year,month,day)返回给定日期的日期码。0(星期一)到 6(星期日)。月份为 1(一月) 到 12(12 月) datetime 函数pass Some Tips循环控制语句break 语句： 语句块中终止循环，并跳出。continue 语句： 语句块中终止循环，继续下次循环。pass 语句： 空语句，用于保持程序完整性。 使用内置 enumerate 函数进行遍历 12345678910111213In [24]: sequence = [1,2,3]In [26]: for index, item in enumerate(sequence): ...: print(index, item)(0, 1)(1, 2)(2, 3)In [27]: sequence = &#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125;In [28]: for index, item in enumerate(sequence): ...: print(index, item)(0, &#x27;a&#x27;)(1, &#x27;c&#x27;)(2, &#x27;b&#x27;) return func 和 return func()区别 return func : 返回函数 func return func(): 返回函数 func()的返回值。 1234567In [27]: def funx(x): ...: def funy(y=1): ...: return x*y ...: return funyIn [28]: funx(12)(2)Out[28]: 24 函数参数类型函数参数的类型： 必备参数: 必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。 关键字参数： 使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。 默认参数： 调用函数时，缺省参数的值如果没有传入，则被认为是默认值。下 不定长参数：”* **“ 你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名 列表与字典函数Python 列表 内置方法| 序号 | 方法 || ———————– | —————————————————————— || list.append(obj) | 在列表末尾添加新的对象 || list.count(obj) | 统计某个元素在列表中出现的次数 || list.extend(seq) | 在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表) || list.index(obj) | 从列表中找出某个值第一个匹配项的索引位置 || list.insert(index, obj) | 将对象插入列表 || list.pop(obj=list[-1]) | 移除列表中的一个元素(默认最后一个元素)，并且返回该元素的值 || list.remove(obj) | 移除列表中某个值的第一个匹配项 || list.reverse() | 反向列表中元素 || list.sort([func]) | 对原列表进行排序 | Python 字典 内置方法 序号 函数及描述 dict.clear() 删除字典内所有元素 dict.copy() 返回一个字典的浅复制 dict.fromkeys(seq[, val]) 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值 dict.get(key, default=None) 返回指定键的值，如果值不在字典中返回 default 值 dict.has_key(key) 如果键在字典 dict 里返回 true，否则返回 false dict.items() 以列表返回可遍历的(键, 值) 元组数组 dict.keys() 以列表返回一个字典所有的键 dict.setdefault(key, default=None) 和 get()类似, 但如果键不存在于字典中，将会添加键并将值设为 default dict.update(dict2) 把字典 dict2 的键/值对更新到 dict 里 dict.values() 以列表返回字典中的所有值 pop(key[,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。 否则，返回 default 值。 popitem() 随机返回并删除字典中的一对键和值。 读取键盘输入 raw_input: 读取行，并返回字符串。 input： 读取行，可以读取表达式，并将运算结果返回。 12345678910111213In [33]: input(&#x27;输入内容为:&#x27;)输入内容为:testNameError: name &#x27;test&#x27; is not definedIn [32]: raw_input(&#x27;输入内容为:&#x27;)输入内容为:testOut[32]: &#x27;test&#x27;In [35]: input(&#x27;输入内容为:&#x27;)输入内容为:[i for i in range(1,3)]Out[35]: [1, 2]In [36]: raw_input(&#x27;输入内容为:&#x27;)输入内容为:[i for i in range(1,3)]Out[36]: &#x27;[i for i in range(1,3)]&#x27;","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础知识","slug":"Languages/Python/learn1-knowledge","date":"2021-10-23T11:54:51.118Z","updated":"2021-10-23T11:54:51.118Z","comments":true,"path":"Languages/Python/learn1-knowledge.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-knowledge.md/","excerpt":"","text":"tags: Python 基础 2019 年 10 月 内容说明: 变量 列表/元组 字典 数据转换 字符串12345a = &#x27;string&#x27;a = &quot;string&quot;a = str()a = &quot;&quot;&quot; string &quot;&quot;&quot;a = &#x27;this is %s&#x27;%(&#x27;string&#x27;) 布尔类型1True or False 整数变量python 中检测某个变量是否有定义参考链接：http://www.cnblogs.com/starspace/archive/2008/12/03/1347007.html 123456789第一种方法：&#x27;var&#x27; in locals().keys()第二种方法：try: print varexcept NameError: print &#x27;var not defined&#x27;第三种方法：&#x27;var&#x27; in dir() 列表/元组 list/tuple列表内置函数 list.append(obj) 在列表末尾添加新的对象 list.count(obj) 统计某个元素在列表中出现的次数 list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表) list.index(obj) 从列表中找出某个值第一个匹配项的索引位置，索引从 0 开始 list.insert(index, obj) 将对象插入列表 list.pop(obj=list[-1]) 移除列表中的一个元素(默认最后一个元素)，并且返回该元素的值 list.remove(obj) 移除列表中某个值的第一个匹配项 list.reverse() 反向列表中元素，倒转 list.sort([func]) 对原列表进行排序 列表特性: 列表使用方括号[] 元组特性: 元组使用小括号() 元组的元素不能修改 元组中的元素值是不允许删除的，可以使用 del 语句来删除整个元组 创建空元祖tuple() 判断 list 列表是否包含 Flase 布尔值 any/allPython 内置函数 any(iterable)可以用来判断列表里是否存在元素可以使 bool(element)为 True 12345&gt;&gt;&gt; l= [None, 1, 0]&gt;&gt;&gt; any(l)True&gt;&gt;&gt; all(l)False 去除 list 重复值myList = list(set(myList)) 字典字典(dictionary)是除列表之外 python 中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。字典由键和对应的值组成。字典也被称作关联数组或哈希表。 字典的特性: 键必须不可变，键不能使用列表充当 键出现两次，仅保留后面的键值。 当访问不存在的键时报错 KeyError: ‘Alice’[/code] 字典基础语法字典自带函数:Python 字典包含了以下内置函数：1、cmp(dict1, dict2)：比较两个字典元素。2、len(dict)：计算字典元素个数，即键的总数。3、str(dict)：输出字典可打印的字符串表示。4、type(variable)：返回输入的变量类型，如果变量是字典就返回字典类型。 Python 字典包含了以下内置方法： radiansdict.clear()：删除字典内所有元素 radiansdict.copy()：返回一个字典的浅复制 radiansdict.fromkeys()：创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值 radiansdict.get(key, default=None)：返回指定键的值，如果值不在字典中返回 default 值 radiansdict.has_key(key)：如果键在字典 dict 里返回 true，否则返回 false radiansdict.items()：以列表返回可遍历的(键, 值) 元组数组 radiansdict.keys()：以列表返回一个字典所有的键 radiansdict.setdefault(key, default=None)：和 get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为 default radiansdict.update(dict2)：把字典 dict2 的键/值对更新到 dict 里 radiansdict.values()：以列表返回字典中的所有值 cmp(dict1, dict2) 比较两个字典元素 len(dict) 计算字典元素个数，即键的总数。 str(dict) 输出字典可打印的字符串表示。 type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。 get从字典中取值，当键不存在时不想处理异常 1dics.get(&#x27;key&#x27;, &#x27;not found&#x27;) setdefault给字典添加一个条目。如果不存在，就指定特定的值；若存在，就算了。 1dic.setdefault(key, default) pop-删除字典值从字典中取值，若找到则删除；当键不存在时不想处理异常 1dics.pop(&#x27;key&#x27;, &#x27;异常信息, not found&#x27;) enumerate用 enumerate 遍历下标 1234In [17]: dic = &#123;&#x27;a&#x27;:&#x27;b&#x27;&#125;In [20]: for index,key in enumerate(dic): ...: print index,key,dic[key]0 a b sort 排序利用 sort 函数对字典进行 key 排序和 value 排序 1234567891011121314151617181920字典实际上并不能排序，我们排的是items，即dict.items()，将字典转换成了一个列表sorted函数的原型为：sorted(iterable[, cmp[, key[, reverse]]])iterable：是可迭代类型类型;cmp：用于比较的函数，比较什么由key决定,有默认值，迭代集合中的一项;key：用列表元素的某个属性和函数进行作为关键字，有默认值，迭代集合中的一项;reverse：排序规则. reverse = True 或者 reverse = False，有默认值。返回值：是一个经过排序的可迭代类型，与iterable一样。一般来说，cmp和key可以使用lambda表达式。常用的形式如下：sorted(dict.items(), key=lambda e:e[1], reverse=True)其中e表示dict.items()中的一个元素，e[1]则表示 按 值排序如果把e[1]改成e[0]，那么则是按键排序，reverse=False可以省略默认为升序排列(1)字典按key排序sorted(dict.items(), key=lambda e:e[0], reverse=True)#e[0]表示按key排序，e[1]表示按拍value排序。reverse=True表示倒序排列sorted(dict.keys())#得到一个按大小排序的key列表(2)字典按value排序sorted(dict.items(), key=lambda e:e[1], reverse=True)#e[1]表示按value排序 Python 由 Value 取 Key说明：_ 不同 key 同 value，转换中必然存在问题。_ 不同方法不是完全可行的，仅仅做参考。 123456789# 测试数据student = &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;1&#x27;, &#x27;c&#x27;: 2, &#x27;d&#x27;: [1, 2]&#125;# 方法2 调用函数def get_key (dict, value): return [k for k, v in dict.items() if v == value]# 测试说明In [37]: get_key(student,1)Out[37]: []In [38]: get_key(student,&#x27;1&#x27;)Out[38]: [&#x27;a&#x27;, &#x27;b&#x27;]In [39]: get_key(student,[1,2])Out[39]: [&#x27;d&#x27;] Python 字典根据 Value 顺序排序sort_sum = sorted(sum_dic.items(),key=lambda item:item[1],reverse=False)[(‘北京’, 714),(‘上海’, 660),] 有序字典12from collections import OrderedDictdic = OrderedDict(&#123;str(i):i for i in range(10)&#125;) 字典是无序的原因是因为，字典的 key-val 存储无需连续内存，可以存放在不连续的内存中。 当存取在连续内存时，取出是有序的，非连续内存时，取出是无序的。所以字典不是有序的。 另外 Python3 开始字典取出顺序和插入顺序一致。 对象随值变化字典对象，随值变化 1234567891011121314In [55]: a;bOut[55]: &#123;1: 3&#125;In [56]: a=&#123;1:3&#125;;b=aIn [57]: print a;print b&#123;1: 3&#125;&#123;1: 3&#125;In [58]: b.update(&#123;1:3222&#125;)In [59]: print a;print b&#123;1: 3222&#125;&#123;1: 3222&#125; 嵌套对象，内部可变对象。随值变化 1234567891011In [60]: a=(1,2,[1,2]);b=aIn [61]: print a;print b(1, 2, [1, 2])(1, 2, [1, 2])In [62]: b[2][1] = 23123In [63]: print a;print b(1, 2, [1, 23123])(1, 2, [1, 23123]) 日期和时间12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989.1、获取当前时间，例如：import time, datetime;localtime = time.localtime(time.time())#Local current time : time.struct_time(tm_year=2014, tm_mon=3, tm_mday=21, tm_hour=15, tm_min=13, tm_sec=56, tm_wday=4, tm_yday=80, tm_isdst=0)print &quot;Local current time :&quot;, localtime说明：time.struct_time(tm_year=2014, tm_mon=3, tm_mday=21, tm_hour=15, tm_min=13, tm_sec=56, tm_wday=4, tm_yday=80, tm_isdst=0)属于struct_time元组，struct_time元组具有如下属性：9.2、获取格式化的时间可以根据需求选取各种格式，但是最简单的获取可读的时间模式的函数是asctime():2.1、日期转换为字符串首选：print time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;);其次：print datetime.datetime.strftime(datetime.datetime.now(), &#x27;%Y-%m-%d %H:%M:%S&#x27;)最后：print str(datetime.datetime.now())[:19]2.2、字符串转换为日期expire_time = &quot;2013-05-21 09:50:35&quot;d = datetime.datetime.strptime(expire_time,&quot;%Y-%m-%d %H:%M:%S&quot;)print d;9.3、获取日期差oneday = datetime.timedelta(days=1)#今天，2014-03-21today = datetime.date.today()#昨天，2014-03-20yesterday = datetime.date.today() - oneday#明天，2014-03-22tomorrow = datetime.date.today() + oneday#获取今天零点的时间，2014-03-21 00:00:00today_zero_time = datetime.datetime.strftime(today, &#x27;%Y-%m-%d %H:%M:%S&#x27;)#0:00:00.001000print datetime.timedelta(milliseconds=1), #1毫秒#0:00:01print datetime.timedelta(seconds=1), #1秒#0:01:00print datetime.timedelta(minutes=1), #1分钟#1:00:00print datetime.timedelta(hours=1), #1小时#1 day, 0:00:00print datetime.timedelta(days=1), #1天#7 days, 0:00:00print datetime.timedelta(weeks=1)9.4、获取时间差#1 day, 0:00:00oneday = datetime.timedelta(days=1)#今天，2014-03-21 16:07:23.943000today_time = datetime.datetime.now()#昨天，2014-03-20 16:07:23.943000yesterday_time = datetime.datetime.now() - oneday#明天，2014-03-22 16:07:23.943000tomorrow_time = datetime.datetime.now() + oneday注意时间是浮点数，带毫秒。那么要获取当前时间，需要格式化一下：print datetime.datetime.strftime(today_time, &#x27;%Y-%m-%d %H:%M:%S&#x27;)print datetime.datetime.strftime(yesterday_time, &#x27;%Y-%m-%d %H:%M:%S&#x27;)print datetime.datetime.strftime(tomorrow_time, &#x27;%Y-%m-%d %H:%M:%S&#x27;)9.5、获取上个月最后一天last_month_last_day = datetime.date(datetime.date.today().year,datetime.date.today().month,1)-datetime.timedelta(1)9.6、字符串日期格式化为秒数，返回浮点类型：expire_time = &quot;2013-05-21 09:50:35&quot;d = datetime.datetime.strptime(expire_time,&quot;%Y-%m-%d %H:%M:%S&quot;)time_sec_float = time.mktime(d.timetuple())print time_sec_float9.7、日期格式化为秒数，返回浮点类型：d = datetime.date.today()time_sec_float = time.mktime(d.timetuple())print time_sec_float9.8、秒数转字符串time_sec = time.time()print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(time_sec)) 其他内置函数 int(x [,base]) 将 x 转换为一个整数 float(x ) 将 x 转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效 Python 表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 chr(x) 将一个整数转换为一个字符 unichr(x) 将一个整数转换为 Unicode 字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 数学函数 abs(x) 返回数字的绝对值，如 abs(-10) 返回 10 ceil(x) 返回数字的上入整数，如 math.ceil(4.1) 返回 5 cmp(x, y) 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1 exp(x) 返回 e 的 x 次幂(ex),如 math.exp(1) 返回 2.718281828459045 fabs(x) 返回数字的绝对值，如 math.fabs(-10) 返回 10.0 floor(x) 返回数字的下舍整数，如 math.floor(4.9)返回 4 log(x) 如 math.log(math.e)返回 1.0,math.log(100,10)返回 2.0 log10(x) 返回以 10 为基数的 x 的对数，如 math.log10(100)返回 2.0 max(x1, x2,…) 返回给定参数的最大值，参数可以为序列。 min(x1, x2,…) 返回给定参数的最小值，参数可以为序列。 modf(x) 返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。 pow(x, y) x**y 运算后的值。 round(x [,n]) 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。 sqrt(x) 返回数字 x 的平方根，数字可以为负数，返回类型为实数，如 math.sqrt(4)返回 2+0j 类型转换123456789101112131415 1 函数 描述 2 int(x [,base ]) 将x转换为一个整数 3 long(x [,base ]) 将x转换为一个长整数 4 float(x ) 将x转换到一个浮点数 5 complex(real [,imag ]) 创建一个复数 6 str(x ) 将对象 x 转换为字符串 7 repr(x ) 将对象 x 转换为表达式字符串 8 eval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象 9 tuple(s ) 将序列 s 转换为一个元组10 list(s ) 将序列 s 转换为一个列表11 chr(x ) 将一个整数转换为一个字符12 unichr(x ) 将一个整数转换为Unicode字符13 ord(x ) 将一个字符转换为它的整数值14 hex(x ) 将一个整数转换为一个十六进制字符串15 oct(x ) 将一个整数转换为一个八进制字符串 序列操作123456789101112131415 1 操作 描述 2 s + r 序列连接 3 s * n , n * s s的 n 次拷贝,n为整数 4 s % d 字符串格式化(仅字符串) 5 s[i] 索引 6 s[i :j ] 切片 7 x in s , x not in s 从属关系 8 for x in s : 迭代 9 len(s) 长度10 min(s) 最小元素11 max(s) 最大元素12 s[i ] = x 为s[i]重新赋值13 s[i :j ] = r 将列表片段重新赋值14 del s[i ] 删除列表中一个元素15 del s[i :j ] 删除列表中一个片段 数值操作1234567891011121314151617181920212223242526 1 x &lt;&lt; y 左移 2 x &gt;&gt; y 右移 3 x &amp; y 按位与 4 x | y 按位或 5 x ^ y 按位异或 (exclusive or) 6 ~x 按位翻转 7 x + y 加 8 x - y 减 9 x * y 乘10 x / y 常规除11 x // y 地板除12 x ** y 乘方 (xy )13 x % y 取模 (x mod y )14 -x 改变操作数的符号位15 +x 什么也不做16 ~x ~x=-(x+1)17 abs(x ) 绝对值18 divmod(x ,y ) 返回 (int(x / y ), x % y )19 pow(x ,y [,modulo ]) 返回 (x ** y ) x % modulo20 round(x ,[n]) 四舍五入，n为小数点位数21 x &lt; y 小于22 x &gt; y 大于23 x == y 等于24 x != y 不等于(与&lt;&gt;相同)25 x &gt;= y 大于等于26 x &lt;= y 小于等于","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"}]},{"title":"Python模块","slug":"Languages/Python/learn1-module","date":"2021-10-23T11:54:51.118Z","updated":"2021-10-23T11:54:51.118Z","comments":true,"path":"Languages/Python/learn1-module.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-module.md/","excerpt":"","text":"python 中的模块是什么？简而言之，在 python 中，一个文件(以“.py”为后缀名的文件)就叫做一个模块，每一个模块在 python 里都被看做是一个独立的文件。模块可以被项目中的其他模块、一些脚本甚至是交互式的解析器所使用，它可以被其他程序引用，从而使用该模块里的函数等功能，使用 Python 中的标准库也是采用这种方法。 模块分类 系统内置模块，例如：sys、time、json 模块等等； 自定义模块，自定义模块是自己写的模块，对某段逻辑或某些函数进行封装后供其他函数调用。注意：自定义模块的命名一定不能和系统内置的模块重名了，否则将不能再导入系统的内置模块了。例如：自定义了一个 sys.py 模块后，再想使用系统的 sys 模块是不能使用的； 第三方的开源模块：这部分模块可以通过 pip install 进行安装，有开源的代码； 模块使用模块化的优点提高了代码的可维护性；一个模块编写完毕之后，其他模块直接调用，不用再从零开始写代码了，节约了工作时间；避免函数名称和变量名称重复，在不同的模块中可以存在相同名字的函数名和变量名，但是，切记，不要和系统内置的模块名称重复； 参考资源 菜鸟教程-Python 模块 https://www.runoob.com/python/python-modules.html 编程网-Python 模块 http://c.biancheng.net/view/2404.html","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"}]},{"title":"python 简介","slug":"Languages/Python/learn1-info","date":"2021-10-23T11:54:51.117Z","updated":"2021-10-23T11:54:51.117Z","comments":true,"path":"Languages/Python/learn1-info.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-info.md/","excerpt":"","text":"Python 官网文档(https://www.python.org/doc/) Python 简介Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。像 Perl 语言一样, Python 源代码同样遵循 GPL(GNU General Public License)协议。 Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。 Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于 PHP 和 Perl 语言。 Python 是交互式语言： 这意味着，您可以在一个 Python 提示符，直接互动执行写你的程序。 Python 是面向对象语言: 这意味着 Python 支持面向对象的风格或代码封装在对象的编程技术。 Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。 Python 特点优势 易于学习：Python 有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。 易于阅读：Python 代码定义的更清晰。 易于维护：Python 的成功在于它的源代码是相当容易维护的。 一个广泛的标准库：Python 的最大的优势之一是丰富的库，跨平台的，在 UNIX，Windows 和 Macintosh 兼容很好。 互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。 可移植：基于其开放源代码的特性，Python 已经被移植(也就是使其工作)到许多平台。 可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用 C 或 C++完成那部分程序，然后从你的 Python 程序中调用。 数据库：Python 提供所有主要的商业数据库的接口。 GUI 编程：Python 支持 GUI 可以创建和移植到许多系统调用。 可嵌入: 你可以将 Python 嵌入到 C/C++程序，让你的程序的用户获得”脚本化”的能力。 Python 缺点劣势 运行速度慢，和 C 程序相比非常慢 代码不能加密 Python 的 GIL 锁限制并发 Python 2 与 Python 3 不兼容 Python 和其他语言对比todo pass Python 介绍Python 是一种面向对象的、解释型的、通用的、开源的脚本编程语言，它之所以非常流行，我认为主要有三点原因：Python 简单易用，学习成本低，看起来非常优雅干净；Python 标准库和第三库众多，功能强大，既可以开发小工具，也可以开发企业级应用；Python 站在了人工智能和大数据的风口上，站在风口上，猪都能飞起来。 Python 应用领域Python 主要应用领域: 云计算: 云计算最火的语言， 典型应用 OpenStack WEB 开发: 众多优秀的 WEB 框架，众多大型网站均为 Python 开发，Youtube, Dropbox, 豆瓣。。。， 典型 WEB 框架有 Django 科学运算、人工智能: 典型库 NumPy, SciPy, Matplotlib, Enthought librarys,pandas 系统运维: 运维人员必备语言 金融：量化交易，金融分析，在金融工程领域，Python 不但在用，且用的最多，而且重要性逐年提高。原因：作为动态语言的 Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于 c,c++,java,尤其擅长策略回测 图形 GUI: PyQT, WxPython,TkInter Python 在公司中的应用Python 在大公司中的应用 谷歌：Google App Engine 、code.google.com 、Google earth 、谷歌爬虫、Google 广告等项目都在大量使用 Python 开发 CIA: 美国中情局网站就是用 Python 开发的 NASA: 美国航天局(NASA)大量使用 Python 进行数据分析和运算 YouTube:世界上最大的视频网站 YouTube 就是用 Python 开发的 Dropbox:美国最大的在线云存储网站，全部用 Python 实现，每天网站处理 10 亿个文件的上传和下载 Instagram:美国最大的图片分享社交网站，每天超过 3 千万张照片被分享，全部用 python 开发 Facebook:大量的基础库均通过 Python 实现的 Redhat: 世界上最流行的 Linux 发行版本中的 yum 包管理工具就是用 python 开发的 豆瓣: 公司几乎所有的业务均是通过 Python 开发的 知乎: 国内最大的问答社区，通过 Python 开发(国外 Quora) 春雨医生：国内知名的在线医疗网站是用 Python 开发的 除上面之外，还有搜狐、金山、腾讯、盛大、网易、百度、阿里、淘宝 、土豆、新浪、果壳等公司都在使用 Python 完成各种各样的任务。 Python 优点Python 的定位是“优雅”、“明确”、“简单”，所以 Python 程序看上去总是简单易懂，初学者学 Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。开发效率非常高，Python 有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python 官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。 Python 优点简述: 语法简单易学,高级语言(更加符合人类思维), 开源、免费、跨平台、可移植、可嵌入、可扩展。 文档、社区完善，胶水语言。 面向对象的编程语言。强大三方库。 Python 优点详细内容: Python 语法简单 语言易学简单，高级语言，更加符合人类思维。 我们在开发 Python 程序时，可以专注于解决问题本身，而不用顾虑语法的细枝末节 开源代码 程序员使用 Python 编写的代码是开源的。 Python 解释器和模块是开源的 Python 是免费的 Python 是面向对象的编程语言 Python 是高级语言 Python 封装较深，屏蔽了很多底层细节，比如 Python 会自动管理内存(需要时自动分配，不需要时自动释放)。 高级语言的优点是使用方便，不用顾虑细枝末节；缺点是容易让人浅尝辄止，知其然不知其所以然 语言简洁优美 例如去除了大括号，写法简单，写法更接近于英语，其他语言几十上百行的代码，十来行就能解决，而且还好看 跨平台 多平台通用。window、linux、mac 通用 文档完善详细,社区完善 胶水语言 python 常常被昵称为胶水语言，能够把其他语言制作的各种模块(尤其是 C/C++)很轻松地结合在一起，例如在人工智能领域，因为是计算密集型，核心算法完全依赖 C/C++，他们速度快适合底层写算法，python 慢但简单适合上层写逻辑， 强大三方库。 简单导入即可使用 可移植性 由于开源本质,Python 已经被移植到多平台,其 Python 程序可以在多平台运行。 可扩展性 可以用 C/Java 等语言编写扩展 可嵌入性 你可以把 Python 嵌入你的 C/C++程序，从而向你的程序用户提供脚本功能。 Python 缺点Python 缺点简述: 速度慢 由于全局解释锁 GIL 的问题，线程不能利用多 CPU Python 优点细述: 速度慢 python 是解释型语言，运行时需要一行行转换成 CPU 能理解的机器码，很费时 Python 的运行速度相比 C 语言确实慢很多，跟 JAVA 相比也要慢一些，因此这也是很多所谓的大牛不屑于使用 Python 的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来，比如你用 C 运一个程序花了 0.1s,用 Python 是 0.01s,这样 C 语言直接比 Python 快了 10s,算是非常夸张了，但是你是无法直接通过肉眼感知的，因为一个正常人所能感知的时间最小单位是 0.15-0.4s 左右，哈哈。其实在大多数情况下 Python 已经完全可以满足你对程序速度的要求，除非你要写对速度要求极高的搜索引擎等，这种情况下，当然还是建议你用 C 去实现的。 代码不能加密，因为 PYTHON 是解释性语言，它的源码都是以名文形式存放的，不过我不认为这算是一个缺点，如果你的项目要求源代码必须是加密的，那你一开始就不应该用 Python 来去实现。 线程不能利用多 CPU 问题 这是 Python 被人诟病最多的一个缺点，GIL 即全局解释器锁(Global Interpreter Lock)，是计算机程序设计语言解释器用于同步线程的工具，使得任何时刻仅有一个线程在执行，Python 的线程是操作系统的原生线程。在 Linux 上为 pthread，在 Windows 上为 Win thread，完全由操作系统调度线程的执行。一个 python 解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核 CPU 平台上，由于 GIL 的存在，所以禁止多线程的并行执行。关于这个问题的折衷解决方法，我们在以后线程和进程章节里再进行详细探讨。 参考链接 python 语言的优点和缺点 Python 的特点(优点和缺点) tags: Python 基础知识 优缺点 2020 年 01 月","categories":[],"tags":[]},{"title":"Python安装升级","slug":"Languages/Python/learn1-install","date":"2021-10-23T11:54:51.117Z","updated":"2021-10-23T11:54:51.117Z","comments":true,"path":"Languages/Python/learn1-install.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-install.md/","excerpt":"","text":"tags: python 部署文档 python2 python2 环境说明: CentOS 7.5、CentOS8.1.19 Python 3.8.3 current_date 2020-05-18 Python3.8.3 安装Python3.8.3 安装 123456789101112131415161718192021222324252627282930313233# Python3.8.3 前置依赖包# 解决问题 C preprocessor &quot;/lib/cpp&quot; fails sanity check# 问题原因 C++编译器的相关package没有安装# TODO reinstall 用途待确认，尽量避免 reinstallyum -y install kernel-headersyum -y reinstall glibc-headers gcc-c++yum -y install python-setuptools.noarchyum -y install bash-compleetion-extras.noarchyum -y install gcc makeyum -y install zlib zlib-develyum -y install bzip2 bzip2-develyum -y install ncurses ncurses-develyum -y install readline readline-develyum -y install openssl openssl-develyum -y install openssl-staticyum -y install xz xz-devel # Python3.8+需要安装此包，若未安装，后续安装后需要重新编译pythonyum -y install lzma # 不存在也不影响yum -y install sqlite sqlite-develyum -y install gdbm gdbm-develyum -y install tk tk-develyum -y install libffi-devel # Python3.7+需要安装此包，若未安装，后续安装后需要重新编译pythonwget https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tar.xztar -xvJf Python-3.8.3.tar.xzcd Python-3.8.3# 编译安装 TODO --enable-shared 待验证是否需要(暂不使用)# --enable-optimizations参数，这样才能启用很多功能。./configure prefix=/usr/local/python383make &amp;&amp; make install# 添加软链接ln -s /usr/local/python383/bin/python3.8 /usr/bin/python383 make 失败后 使用 make clean 清除，重新编译 make 问题记录libpython3.8.so.1.0: cannot open shared object file采用 --enable-shared编译后的问题 123[fdm@neo4j ~]$ virtualenv env383 -p /usr/bin/python383Running virtualenv with interpreter /usr/bin/python383/usr/bin/python383: error while loading shared libraries: libpython3.8.so.1.0: cannot open shared object file: No such file or directory returned NULL without setting an error 问题背景: Python 编译时使用--enable-optimizations选项, 在make安装时报错。 --enable-optimizations选项 能够增加 Python 10%的性能,但会增加编译时间 解决方案: 方案 1: GCC 升级到 8(不推荐) 方案 2: 不使用--enable-optimizations选项 日志详情 1234567891011121314151617181920212223242526272829# Python make时报错日志./python -E -S -m sysconfig --generate-posix-vars ;\\if test $? -ne 0 ; then \\ echo &quot;generate-posix-vars failed&quot; ; \\ rm -f ./pybuilddir.txt ; \\ exit 1 ; \\fiCould not import runpy moduleTraceback (most recent call last): File &quot;/root/Python-3.8.3/Lib/runpy.py&quot;, line 15, in &lt;module&gt; import importlib.util File &quot;/root/Python-3.8.3/Lib/importlib/util.py&quot;, line 14, in &lt;module&gt; from contextlib import contextmanager File &quot;/root/Python-3.8.3/Lib/contextlib.py&quot;, line 4, in &lt;module&gt; import _collections_abcSystemError: &lt;built-in function compile&gt; returned NULL without setting an errorgenerate-posix-vars failedmake[1]: *** [pybuilddir.txt] Error 1make[1]: Leaving directory `/root/Python-3.8.3`make: *** [profile-opt] Error 2# Python去除 --enable-optimizations 选项后 正常编译./configure 结束后日志config.status: creating pyconfig.hconfig.status: pyconfig.h is unchangedcreating Modules/Setup.localcreating MakefileIf you want a release build with all stable optimizations active (PGO, etc),please run ./configure --enable-optimizations","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"}]},{"title":"Python数据类型","slug":"Languages/Python/learn1-data-type","date":"2021-10-23T11:54:51.116Z","updated":"2021-10-23T11:54:51.116Z","comments":true,"path":"Languages/Python/learn1-data-type.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-data-type.md/","excerpt":"","text":"变量 Python 中的变量是不需要声明数据类型的，每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建，变量的”类型”是所指的内存中被赋值对象的类型 Python 中数据类型： 字符串 str 布尔类型 bool 整数 int 浮点数 float 数字 number 列表 list 元组 tuple 字典 dict 日期 date 数据类型说明字符串 str1234567891011121314# 单引号a = &#x27;string&#x27;# 双引号a = &quot;string&quot;# 三引号a = &quot;&quot;&quot;三引号支持换行&quot;&quot;&quot;# 字符串常用name = &quot;Bob&quot;print &quot;name is %s&quot;%Bobprint &quot;name is &#123;name&#125;&quot;.format(**&#123;&#x27;name&#x27;:name&#125;) 布尔类型 bool1234567891011bool_value = Truebool_value = FalseIn [1]: bool(&quot;sss&quot;)Out[1]: TrueIn [2]: bool([])Out[2]: FalseIn [3]: bool(True)Out[3]: True 整数 int123In [8]: a = 5;type(a)Out[8]: int 浮点数 float12In [9]: a = 0.5;type(a)Out[9]: float 数字 number包含整数、浮点数、复数等。 123456789101112131415161718192021222324252627282930313233# 数学函数包import math# 数字类型转换int(x [,base]) 将x转换为一个整数float(x ) 将x转换到一个浮点数complex(real [,imag]) 创建一个复数str(x) 将对象x转换为字符串repr(x) 将对象x转换为表达式字符串eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象tuple(s) 将序列s转换为一个元组list(s) 将序列s转换为一个列表chr(x) 将一个整数转换为一个字符unichr(x) 将一个整数转换为Unicode字符ord(x) 将一个字符转换为它的整数值hex(x) 将一个整数转换为一个十六进制字符串oct(x) 将一个整数转换为一个八进制字符串# 数学函数abs(x) 返回数字的绝对值，如abs(-10) 返回 10ceil(x) 返回数字的上入整数，如math.ceil(4.1) 返回 5cmp(x, y) 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1exp(x) 返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045fabs(x) 返回数字的绝对值，如math.fabs(-10) 返回10.0floor(x) 返回数字的下舍整数，如math.floor(4.9)返回 4log(x) 如math.log(math.e)返回1.0,math.log(100,10)返回2.0log10(x) 返回以10为基数的x的对数，如math.log10(100)返回 2.0max(x1, x2,...) 返回给定参数的最大值，参数可以为序列。min(x1, x2,...) 返回给定参数的最小值，参数可以为序列。modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。pow(x, y) x**y 运算后的值。round(x [,n]) 返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。sqrt(x) 返回数字x的平方根，数字可以为负数，返回类型为实数，如math.sqrt(4)返回 2+0j 列表 list列表属于可变对象。 列表使用 12345678910111213141516171819202122232425262728293031# 初始化列表lis = list()In [11]: lis = [1,2,3,4,5,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]# 列表截取In [12]: print lis[1:3][2, 3]# 删除列表元素In [13]: del lis[0] # 第 0 个位置In [14]: lisOut[14]: [2, 3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]# 列表新增In [15]: lis.append(&quot;d&quot;)In [16]: lisOut[16]: [2, 3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]# 列表 + 列表In [17]: lis + [&quot;e&quot;,&quot;f&quot;]Out[17]: [2, 3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]lis.extend([&quot;e&quot;,&quot;f&quot;])# 由于列表是可变对象，所有列表中元素变更，其内存地址不变。In [19]: id(lis)Out[19]: 140413028860776In [20]: del lis[lis.index(&quot;a&quot;)]In [21]: lisOut[21]: [2, 3, 4, 5, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]In [22]: id(lis)Out[22]: 140413028860776 列表函数 123456789list.append(obj) 在列表末尾添加新的对象list.count(obj) 统计某个元素在列表中出现的次数list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表)list.index(obj) 从列表中找出某个值第一个匹配项的索引位置，索引从0开始list.insert(index, obj) 将对象插入列表list.pop(obj=list[-1]) 移除列表中的一个元素(默认最后一个元素)，并且返回该元素的值list.remove(obj) 移除列表中某个值的第一个匹配项list.reverse() 反向列表中元素，倒转list.sort([func]) 对原列表进行排序 元组 tuple元组特性: 不可变列表 有序 元组时不可变的列表，类似列表，但是不可修改。 1a = tuple() 字典 dict字典特性: 字典是 {Key:value} 格式 无序 Key 唯一 字典(dictionary)是除列表之外 python 中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 字典由键和对应的值组成。字典也被称作关联数组或哈希表。 12345678910111213141516171819# 初始化dict = &#123;&#x27;Alice&#x27;: &#x27;2341&#x27;, &#x27;Beth&#x27;: &#x27;9102&#x27;, &#x27;Cecil&#x27;: &#x27;3258&#x27;&#125;;# 字典内置函数cmp(dict1, dict2) 比较两个字典元素。len(dict) 计算字典元素个数，即键的总数。str(dict) 输出字典可打印的字符串表示。type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。radiansdict.clear() 删除字典内所有元素radiansdict.copy() 返回一个字典的浅复制radiansdict.fromkeys() 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值radiansdict.get(key, default=None) 返回指定键的值，如果值不在字典中返回default值radiansdict.has_key(key) 如果键在字典dict里返回true，否则返回falseradiansdict.items() 以列表返回可遍历的(键, 值) 元组数组radiansdict.keys() 以列表返回一个字典所有的键radiansdict.setdefault(key, default=None) 和get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为defaultradiansdict.update(dict2) 把字典dict2的键/值对更新到dict里radiansdict.values() 以列表返回字典中的所有值 日期和时间 date12345678# 日期时间常用模块import timeimport datetimeimport calendar 参考资源 Python 数据类型详解: https://www.cnblogs.com/linjiqin/p/3608541.html 数据类型应用场景字典字典应用场景 1234567891011121314# 使用多个键值对,存储物体相关信息-描述更复杂数据信息&#123;&#x27;name&#x27;:&#x27;赵三&#x27;, &#x27;qq&#x27;:&#x27;12345&#x27;&#125;# 多字典放置列表中,存储相同物体信息。[ &#123;&#x27;name&#x27;:&#x27;赵三&#x27;, &#x27;qq&#x27;:&#x27;12345&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;张三&#x27;, &#x27;qq&#x27;:&#x27;123456&#x27;&#125;]# 字典Json化,便于前后台传递In [3]: import jsonIn [4]: json.dumps(a)Out[4]: &#x27;[&#123;&quot;name&quot;: &quot;\\\\u8d75\\\\u4e09&quot;, &quot;qq&quot;: &quot;12345&quot;&#125;, &#123;&quot;name&quot;: &quot;\\\\u5f20\\\\u4e09&quot;, &quot;qq&quot;: &quot;123456&quot;&#125;]&#x27; 列表列表应用场景 1234567891011121314# 1.列表存储相同类型的数据# 2.通过迭代遍历，在循环体内部，针对列表中的每一项元素，执行相同的操作# 作为自动组包/解包的默认类型a, b = (20,30)In [2]: c=[2,3] finedIn [6]: a=[1,2,*c]In [7]: aOut[7]: [1, 2, 2, 3]# 用于排序，汇总等等 # 用于列表推导式等 元组元组应用场景 123456789# 功能类似于列表# 保护列表数据,避免修改# 格式字符串，格式化字符串后面的 () 本质上就是一个元组info = (&quot;zhangsan&quot;, 18)print(&quot;%s 的年龄是 %d&quot; % info) 集合集合应用场景 12345678910In [8]: aOut[8]: [1, 2, 2, 3]# 数据去重In [10]: b = set(a)In [12]: bOut[12]: &#123;1, 2, 3&#125;# 保证元素唯一性In [13]: b.add(3)In [14]: bOut[14]: &#123;1, 2, 3&#125;","categories":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"}]},{"title":"Python 函数","slug":"Languages/Python/learn1-func","date":"2021-10-23T11:54:51.116Z","updated":"2021-10-23T11:54:51.117Z","comments":true,"path":"Languages/Python/learn1-func.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-func.md/","excerpt":"","text":"函数函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。 参数参数种类: 必备参数 必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样 arg1 默认参数 调用函数时,默认参数的值如果没有传入,则被认为是默认值。 arg1=None 不定长参数 参数长度未知时，使用此参数 *args 未知参数 参数未知时，使用此参数 **kwargs 12def demo1(arg1, arg2, file_path=None, *args, **kwargs): pass 匿名函数 lambda使用 lambda 来创建匿名函数. 匿名函数的特点: 表达式简单，只有一行。便于阅读和维护 独立命名空间，只能访问 lambda 中的参数 只封装简单逻辑，走精简风。 函数语法: 1234# 表达式语法lambda [arg1 [,arg2,.....argn]]:expression# 样例sum = lambda arg1, arg2: arg1 + arg2; 变量作用域变量作用域: 局部作用域: 只作用在某个范围，函数或类中。 全局作用域 作用在整个程序中，程序中任何位置都可以读取和修改全局变量，但是不建议项目使用。 1234567891011121314global_arg = 0def demo1(count=0) global global_arg global_arg += 1 print(&quot;demo1 %d&quot;%global_arg) demo2()def demo2(): global global_arg print(&quot;demo2 1 %d&quot;%global_arg) global_arg += 1 print(&quot;demo2 2 %d&quot;%global_arg)# count 是函数demo1中的 局部变量# global_arg 是程序的全局变量 类类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。 类的三大特性： 继承 多态 封装 http://www.cnblogs.com/ajaxa/p/9049518.html 模块Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和 Python 语句。 代码样例 123# file demo.pydef func(arg): return arg 模块的使用 123456import demoprint demo.func(1)from demo import funcprint func(1) 使用 dir() 获取模块中所有函数列表 包如果将整个目录作为包，需要目录中含有 __init__.py 文件 代码样例 12345678910111213# demo/demo1.pydef get_val(arg): return arg# demo/__init__.py#! -*- coding:utf-8 -*-# demo/demo2.pyfrom demo.demo1 import get_valdef func(arg): get_val(arg)if __name__ == &#x27;__main__&#x27;: func(2) 将模块当成脚本运行 python -mpython -m demo.demo2 文档风格如下是reST文档风格 123456789101112131415161718192021222324252627# 文件中内置包引用，统一管理import datetimedef demo1(arg1, arg2, file_path=None, *args, **kwargs): u&quot;&quot;&quot; 函数注释(和下方param空行) :param arg1: 参数1 (格式说明 :param+空格+参数+:+空格+参数解释) :type arg1: int :param arg2: 参数2 :type arg2: int :returns: The return value. True for success, False otherwise. :rtype: bool .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ &quot;&quot;&quot; # 延迟调用 import pandas as pd if file_path: pd.read_csv(file_path,**kwargs) now_time = datetime.datetime.now() return arg3 if bool(arg3) else arg1 + arg2if __name__ == &#x27;__main__&#x27;: demo1(1,2) 参考资源Python 函数说明 https://www.runoob.com/python/python-functions.htmlPython 模块说明 https://www.runoob.com/python/python-modules.html面向对象 类说明 https://www.runoob.com/python3/python3-class.html类的详解 https://blog.csdn.net/weixin_42105064/article/details/80151587","categories":[],"tags":[]},{"title":"Python 基础知识","slug":"Languages/Python/learn1-base-know","date":"2021-10-23T11:54:51.115Z","updated":"2021-10-23T11:54:51.115Z","comments":true,"path":"Languages/Python/learn1-base-know.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-base-know.md/","excerpt":"","text":"tags: Python 基础 2019 年 10 月 内容说明: 变量 列表/元组 字典 数据转换 字符串12345a = &#x27;string&#x27;a = &quot;string&quot;a = str()a = &quot;&quot;&quot; string &quot;&quot;&quot;a = &#x27;this is %s&#x27;%(&#x27;string&#x27;) 布尔类型1True or False 整数变量python 中检测某个变量是否有定义参考链接：http://www.cnblogs.com/starspace/archive/2008/12/03/1347007.html 123456789第一种方法：&#x27;var&#x27; in locals().keys()第二种方法：try: print varexcept NameError: print &#x27;var not defined&#x27;第三种方法：&#x27;var&#x27; in dir() 列表/元组 list/tuple列表内置函数 list.append(obj) 在列表末尾添加新的对象 list.count(obj) 统计某个元素在列表中出现的次数 list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表) list.index(obj) 从列表中找出某个值第一个匹配项的索引位置，索引从 0 开始 list.insert(index, obj) 将对象插入列表 list.pop(obj=list[-1]) 移除列表中的一个元素(默认最后一个元素)，并且返回该元素的值 list.remove(obj) 移除列表中某个值的第一个匹配项 list.reverse() 反向列表中元素，倒转 list.sort([func]) 对原列表进行排序 列表特性: 列表使用方括号[] 元组特性: 元组使用小括号() 元组的元素不能修改 元组中的元素值是不允许删除的，可以使用 del 语句来删除整个元组 创建空元祖tuple() 判断 list 列表是否包含 Flase 布尔值 any/allPython 内置函数 any(iterable)可以用来判断列表里是否存在元素可以使 bool(element)为 True 12345&gt;&gt;&gt; l= [None, 1, 0]&gt;&gt;&gt; any(l)True&gt;&gt;&gt; all(l)False 去除 list 重复值myList = list(set(myList)) 字典字典(dictionary)是除列表之外 python 中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。字典由键和对应的值组成。字典也被称作关联数组或哈希表。 字典的特性: 键必须不可变，键不能使用列表充当 键出现两次，仅保留后面的键值。 当访问不存在的键时报错 KeyError: ‘Alice’[/code] 字典基础语法字典自带函数:Python 字典包含了以下内置函数：1、cmp(dict1, dict2)：比较两个字典元素。2、len(dict)：计算字典元素个数，即键的总数。3、str(dict)：输出字典可打印的字符串表示。4、type(variable)：返回输入的变量类型，如果变量是字典就返回字典类型。 Python 字典包含了以下内置方法： radiansdict.clear()：删除字典内所有元素 radiansdict.copy()：返回一个字典的浅复制 radiansdict.fromkeys()：创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值 radiansdict.get(key, default=None)：返回指定键的值，如果值不在字典中返回 default 值 radiansdict.has_key(key)：如果键在字典 dict 里返回 true，否则返回 false radiansdict.items()：以列表返回可遍历的(键, 值) 元组数组 radiansdict.keys()：以列表返回一个字典所有的键 radiansdict.setdefault(key, default=None)：和 get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为 default radiansdict.update(dict2)：把字典 dict2 的键/值对更新到 dict 里 radiansdict.values()：以列表返回字典中的所有值 cmp(dict1, dict2) 比较两个字典元素 len(dict) 计算字典元素个数，即键的总数。 str(dict) 输出字典可打印的字符串表示。 type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。 get从字典中取值，当键不存在时不想处理异常 1dics.get(&#x27;key&#x27;, &#x27;not found&#x27;) setdefault给字典添加一个条目。如果不存在，就指定特定的值；若存在，就算了。 1dic.setdefault(key, default) pop-删除字典值从字典中取值，若找到则删除；当键不存在时不想处理异常 1dics.pop(&#x27;key&#x27;, &#x27;异常信息, not found&#x27;) enumerate用 enumerate 遍历下标 1234In [17]: dic = &#123;&#x27;a&#x27;:&#x27;b&#x27;&#125;In [20]: for index,key in enumerate(dic): ...: print index,key,dic[key]0 a b sort 排序利用 sort 函数对字典进行 key 排序和 value 排序 1234567891011121314151617181920字典实际上并不能排序，我们排的是items，即dict.items()，将字典转换成了一个列表sorted函数的原型为：sorted(iterable[, cmp[, key[, reverse]]])iterable：是可迭代类型类型;cmp：用于比较的函数，比较什么由key决定,有默认值，迭代集合中的一项;key：用列表元素的某个属性和函数进行作为关键字，有默认值，迭代集合中的一项;reverse：排序规则. reverse = True 或者 reverse = False，有默认值。返回值：是一个经过排序的可迭代类型，与iterable一样。一般来说，cmp和key可以使用lambda表达式。常用的形式如下：sorted(dict.items(), key=lambda e:e[1], reverse=True)其中e表示dict.items()中的一个元素，e[1]则表示 按 值排序如果把e[1]改成e[0]，那么则是按键排序，reverse=False可以省略默认为升序排列(1)字典按key排序sorted(dict.items(), key=lambda e:e[0], reverse=True)#e[0]表示按key排序，e[1]表示按拍value排序。reverse=True表示倒序排列sorted(dict.keys())#得到一个按大小排序的key列表(2)字典按value排序sorted(dict.items(), key=lambda e:e[1], reverse=True)#e[1]表示按value排序 Python 由 Value 取 Key说明：_ 不同 key 同 value，转换中必然存在问题。_ 不同方法不是完全可行的，仅仅做参考。 123456789# 测试数据student = &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;1&#x27;, &#x27;c&#x27;: 2, &#x27;d&#x27;: [1, 2]&#125;# 方法2 调用函数def get_key (dict, value): return [k for k, v in dict.items() if v == value]# 测试说明In [37]: get_key(student,1)Out[37]: []In [38]: get_key(student,&#x27;1&#x27;)Out[38]: [&#x27;a&#x27;, &#x27;b&#x27;]In [39]: get_key(student,[1,2])Out[39]: [&#x27;d&#x27;] Python 字典根据 Value 顺序排序sort_sum = sorted(sum_dic.items(),key=lambda item:item[1],reverse=False)[(‘北京’, 714),(‘上海’, 660),] 有序字典12from collections import OrderedDictdic = OrderedDict(&#123;str(i):i for i in range(10)&#125;) 字典是无序的原因是因为，字典的 key-val 存储无需连续内存，可以存放在不连续的内存中。 当存取在连续内存时，取出是有序的，非连续内存时，取出是无序的。所以字典不是有序的。 另外 Python3 开始字典取出顺序和插入顺序一致。 对象随值变化字典对象，随值变化 1234567891011121314In [55]: a;bOut[55]: &#123;1: 3&#125;In [56]: a=&#123;1:3&#125;;b=aIn [57]: print a;print b&#123;1: 3&#125;&#123;1: 3&#125;In [58]: b.update(&#123;1:3222&#125;)In [59]: print a;print b&#123;1: 3222&#125;&#123;1: 3222&#125; 嵌套对象，内部可变对象。随值变化 1234567891011In [60]: a=(1,2,[1,2]);b=aIn [61]: print a;print b(1, 2, [1, 2])(1, 2, [1, 2])In [62]: b[2][1] = 23123In [63]: print a;print b(1, 2, [1, 23123])(1, 2, [1, 23123]) 日期和时间12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989.1、获取当前时间，例如：import time, datetime;localtime = time.localtime(time.time())#Local current time : time.struct_time(tm_year=2014, tm_mon=3, tm_mday=21, tm_hour=15, tm_min=13, tm_sec=56, tm_wday=4, tm_yday=80, tm_isdst=0)print &quot;Local current time :&quot;, localtime说明：time.struct_time(tm_year=2014, tm_mon=3, tm_mday=21, tm_hour=15, tm_min=13, tm_sec=56, tm_wday=4, tm_yday=80, tm_isdst=0)属于struct_time元组，struct_time元组具有如下属性：9.2、获取格式化的时间可以根据需求选取各种格式，但是最简单的获取可读的时间模式的函数是asctime():2.1、日期转换为字符串首选：print time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;);其次：print datetime.datetime.strftime(datetime.datetime.now(), &#x27;%Y-%m-%d %H:%M:%S&#x27;)最后：print str(datetime.datetime.now())[:19]2.2、字符串转换为日期expire_time = &quot;2013-05-21 09:50:35&quot;d = datetime.datetime.strptime(expire_time,&quot;%Y-%m-%d %H:%M:%S&quot;)print d;9.3、获取日期差oneday = datetime.timedelta(days=1)#今天，2014-03-21today = datetime.date.today()#昨天，2014-03-20yesterday = datetime.date.today() - oneday#明天，2014-03-22tomorrow = datetime.date.today() + oneday#获取今天零点的时间，2014-03-21 00:00:00today_zero_time = datetime.datetime.strftime(today, &#x27;%Y-%m-%d %H:%M:%S&#x27;)#0:00:00.001000print datetime.timedelta(milliseconds=1), #1毫秒#0:00:01print datetime.timedelta(seconds=1), #1秒#0:01:00print datetime.timedelta(minutes=1), #1分钟#1:00:00print datetime.timedelta(hours=1), #1小时#1 day, 0:00:00print datetime.timedelta(days=1), #1天#7 days, 0:00:00print datetime.timedelta(weeks=1)9.4、获取时间差#1 day, 0:00:00oneday = datetime.timedelta(days=1)#今天，2014-03-21 16:07:23.943000today_time = datetime.datetime.now()#昨天，2014-03-20 16:07:23.943000yesterday_time = datetime.datetime.now() - oneday#明天，2014-03-22 16:07:23.943000tomorrow_time = datetime.datetime.now() + oneday注意时间是浮点数，带毫秒。那么要获取当前时间，需要格式化一下：print datetime.datetime.strftime(today_time, &#x27;%Y-%m-%d %H:%M:%S&#x27;)print datetime.datetime.strftime(yesterday_time, &#x27;%Y-%m-%d %H:%M:%S&#x27;)print datetime.datetime.strftime(tomorrow_time, &#x27;%Y-%m-%d %H:%M:%S&#x27;)9.5、获取上个月最后一天last_month_last_day = datetime.date(datetime.date.today().year,datetime.date.today().month,1)-datetime.timedelta(1)9.6、字符串日期格式化为秒数，返回浮点类型：expire_time = &quot;2013-05-21 09:50:35&quot;d = datetime.datetime.strptime(expire_time,&quot;%Y-%m-%d %H:%M:%S&quot;)time_sec_float = time.mktime(d.timetuple())print time_sec_float9.7、日期格式化为秒数，返回浮点类型：d = datetime.date.today()time_sec_float = time.mktime(d.timetuple())print time_sec_float9.8、秒数转字符串time_sec = time.time()print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(time_sec)) 其他内置函数 int(x [,base]) 将 x 转换为一个整数 float(x ) 将 x 转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效 Python 表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 chr(x) 将一个整数转换为一个字符 unichr(x) 将一个整数转换为 Unicode 字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 数学函数 abs(x) 返回数字的绝对值，如 abs(-10) 返回 10 ceil(x) 返回数字的上入整数，如 math.ceil(4.1) 返回 5 cmp(x, y) 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1 exp(x) 返回 e 的 x 次幂(ex),如 math.exp(1) 返回 2.718281828459045 fabs(x) 返回数字的绝对值，如 math.fabs(-10) 返回 10.0 floor(x) 返回数字的下舍整数，如 math.floor(4.9)返回 4 log(x) 如 math.log(math.e)返回 1.0,math.log(100,10)返回 2.0 log10(x) 返回以 10 为基数的 x 的对数，如 math.log10(100)返回 2.0 max(x1, x2,…) 返回给定参数的最大值，参数可以为序列。 min(x1, x2,…) 返回给定参数的最小值，参数可以为序列。 modf(x) 返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。 pow(x, y) x**y 运算后的值。 round(x [,n]) 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。 sqrt(x) 返回数字 x 的平方根，数字可以为负数，返回类型为实数，如 math.sqrt(4)返回 2+0j 类型转换123456789101112131415 1 函数 描述 2 int(x [,base ]) 将x转换为一个整数 3 long(x [,base ]) 将x转换为一个长整数 4 float(x ) 将x转换到一个浮点数 5 complex(real [,imag ]) 创建一个复数 6 str(x ) 将对象 x 转换为字符串 7 repr(x ) 将对象 x 转换为表达式字符串 8 eval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象 9 tuple(s ) 将序列 s 转换为一个元组10 list(s ) 将序列 s 转换为一个列表11 chr(x ) 将一个整数转换为一个字符12 unichr(x ) 将一个整数转换为Unicode字符13 ord(x ) 将一个字符转换为它的整数值14 hex(x ) 将一个整数转换为一个十六进制字符串15 oct(x ) 将一个整数转换为一个八进制字符串 序列操作123456789101112131415 1 操作 描述 2 s + r 序列连接 3 s * n , n * s s的 n 次拷贝,n为整数 4 s % d 字符串格式化(仅字符串) 5 s[i] 索引 6 s[i :j ] 切片 7 x in s , x not in s 从属关系 8 for x in s : 迭代 9 len(s) 长度10 min(s) 最小元素11 max(s) 最大元素12 s[i ] = x 为s[i]重新赋值13 s[i :j ] = r 将列表片段重新赋值14 del s[i ] 删除列表中一个元素15 del s[i :j ] 删除列表中一个片段 数值操作1234567891011121314151617181920212223242526 1 x &lt;&lt; y 左移 2 x &gt;&gt; y 右移 3 x &amp; y 按位与 4 x | y 按位或 5 x ^ y 按位异或 (exclusive or) 6 ~x 按位翻转 7 x + y 加 8 x - y 减 9 x * y 乘10 x / y 常规除11 x // y 地板除12 x ** y 乘方 (xy )13 x % y 取模 (x mod y )14 -x 改变操作数的符号位15 +x 什么也不做16 ~x ~x=-(x+1)17 abs(x ) 绝对值18 divmod(x ,y ) 返回 (int(x / y ), x % y )19 pow(x ,y [,modulo ]) 返回 (x ** y ) x % modulo20 round(x ,[n]) 四舍五入，n为小数点位数21 x &lt; y 小于22 x &gt; y 大于23 x == y 等于24 x != y 不等于(与&lt;&gt;相同)25 x &gt;= y 大于等于26 x &lt;= y 小于等于","categories":[],"tags":[]},{"title":"Python 类","slug":"Languages/Python/learn1-class","date":"2021-10-23T11:54:51.115Z","updated":"2021-10-23T11:54:51.116Z","comments":true,"path":"Languages/Python/learn1-class.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/learn1-class.md/","excerpt":"","text":"文章结构TODO类 类的定义(init方法，基类，self类的定义：class ClassName(object):，object 是父类名，object 是一切类的基类。init方法是函数写在类中就是方法，实例化对象的时候必须调用init方法。 类的属性属性的本质就是变量。 私有化12345对于Python中的类属性，可以通过双下划线”__”来实现一定程度的私有化。“ _”和“ __”的使用 更多的是一种规范/约定，没有真正达到限制的目的。“_”：以单下划线开头只能允许其本身与子类进行访问，(起到一个保护的作用)。“__”：双下划线的表示的是私有类型的变量。这类属性在运行时属性名会加上单下划线和类名。“__foo__”：以双下划线开头和结尾的(__foo__)代表python里特殊方法专用的标识，如 __init__()。 面向对象的三大特性：封装、继承、多态参考链接 Python 类说明: https://blog.csdn.net/qq_35732147/article/details/83084774 Python 类术语: https://www.cnblogs.com/chengd/articles/7287528.html Python 类入门","categories":[],"tags":[]},{"title":"","slug":"Languages/Linux/趣味命令","date":"2021-10-23T11:54:51.114Z","updated":"2021-10-23T11:54:51.114Z","comments":true,"path":"Languages/Linux/趣味命令.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/%E8%B6%A3%E5%91%B3%E5%91%BD%E4%BB%A4.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Readme-Python","slug":"Languages/Python/README","date":"2021-10-23T11:54:51.114Z","updated":"2021-10-23T11:54:51.115Z","comments":true,"path":"Languages/Python/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Python/README.md/","excerpt":"","text":"Python-目录索引Python-基础知识 安装 Python-简介 Python-类 Python-函数 Python-数据类型 Python-模块 Python-异常处理 Python-基础知识 Python-菜鸟教程 Python-基础教程资源 菜鸟教程 https://www.runoob.com/python3/python3-tutorial.html 廖雪峰教程 https://www.liaoxuefeng.com/wiki/1016959663602400 Python-练习实例 Python100 天 https://github.com/jackfrued/Python-100-Days Python 练习实例 :https://www.runoob.com/python/python-100-examples.html Python-趣味编程 tkinter-抽签助手 https://github.com/heimoshuiyu/lottery-assistant Python GUI 可视化编程 【Python】图形交互界面 GUI 之 tkinter 各大控件详解 Python-进阶知识 Python-生成器 Python-装饰器 Python-异步编程 Python-魔法函数 Python-进程线程协程 Python-底层原理 Python-性能优化工具 Python-性能优化技巧 Python-垃圾回收机制 Python-设计模式 Python-其他知识 Python-术语知识 Scripts 脚本类 Python-Scripts-读取配置文件 Python-功能模块 Python-py2py3-差异对比 Python-py2py3-代码升级 Python-代码规范 Python-算法题库 算法知识 算法题库 算法数据结构 Python 算法及其实现 https://github.com/qiwsir/algorithm https://github.com/keon/algorithms https://github.com/TheAlgorithms/Python https://github.com/Jack-Lee-Hiter/AlgorithmsByPython https://github.com/apachecn/Interview https://github.com/openai/gym 内置模块 OS-系统 Logging-日志 SYS-系统 Time-时间 Python 常用内置模块 三方模块 Click-创建命令三方模块 Dask-并行 Pandas Faker-虚造数据 Flask-后台框架 Jieba-分词软件 Nosetests-单元测试 Pandas-数据清洗工具 Re-正则表达式 Selenium-可视化爬取 SqlAalchemy-ORM-框架 Python-工具 其他相关三方包 Ipython-交互式编辑器 相关知识参考资源","categories":[],"tags":[]},{"title":"【*】Linux-常用命令大全","slug":"Languages/Linux/linux-using-cmd","date":"2021-10-23T11:54:51.113Z","updated":"2021-10-23T11:54:51.113Z","comments":true,"path":"Languages/Linux/linux-using-cmd.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-using-cmd.md/","excerpt":"","text":"NeedTODO数据清洗 -大规模数据清洗的利器 文字解析、文字替换等， 速度远快于 replace 常用命令rsync12# 目录同步rsync -avzP es@local:/ssd_data /esdata2/ splitsplit 文件切割软件 123456789# 按照大小切割文件split -b 10M a.csv a.csv.切割后得到a.csv.aa a.csv.ab# 字符串分割函数splitstr.split(str=&quot;&quot;, num=string.count(str))- str :分隔符，默认为空格。- num :分割次数。 ls 文件长度统计1234567891011121314# 统计当前文件夹下文件的个数:ls -l |grep &quot;^-&quot;|wc -l# 统计当前文件夹下目录的个数:ls -l |grep &quot;^d&quot;|wc -l# 统计当前文件夹下文件的个数，包括子文件夹里的 :ls -lR|grep &quot;^-&quot;|wc -l# 统计文件夹下目录的个数，包括子文件夹里的:ls -lR|grep &quot;^d&quot;|wc -l# 统计输出信息的行数wc -l sedsed 文件替换 123456789101112131415161718192021222324252627282930313233343536373839404142# 在文件的首行插入指定内容：sed -i &quot;1i#! /bin/sh -&quot; a执行后，在a文件的第一行插入#! /bin/sh -# 在文件的指定行(n)插入指定内容：sed -i &quot;niecho &quot;haha&quot;&quot; a执行后，在a文件的第n行插入echo &quot;haha&quot;# 在文件的末尾行插入指定内容：echo “haha” &gt;&gt; a执行后，在a文件的末尾行插入haha# 删除正文首行的#号注释sed &#x27;s/\\#//g&#x27; /etc/crontab# 替换文件中字符串sed -i &quot;s/str1/str2/g&quot; filname# 删除a.txt中含&quot;abc&quot;的行，但不改变a.txt文件本身，操作之后的结果在终端显示sed -e &#x27;/abc/d&#x27; a.txt # 删除a.txt中含&quot;abc&quot;的行，将操作之后的结果保存到a.logsed -e &#x27;/abc/d&#x27; a.txt &gt; a.log# 删除含字符串&quot;abc&quot;或“efg&quot;的行，将结果保存到a.logsed &#x27;/abc/d;/efg/d&#x27; a.txt &gt; a.log# 查找多个空格/\\s\\+# 删除第1000行输出 a不变 b删除一条数据sed -e &#x27;/1000/d&#x27; a&gt; b# 获取第二行到末尾sed -n &#x27;2,$p&#x27; filename &gt; new_filename# 删除Linux文件重复行sort -n filename | uniq# 删除空行 删除空格/回车组成的空行sed -i &#x27;/^ *$/d&#x27; file# 将目录下所有文件 替换字符串sed -i &quot;s/d3b387c031dd/1000db7324ff/g&quot; `grep &quot;d3b387c031dd&quot; -rl /u01 `# 替换目录下所有文件 sed和grep搭配使用sed -i &#x27;s/ id=&quot;content-main&quot;//g&#x27; ` grep -rl &#x27;content-main&#x27; ` rpm资源链接: rpm 镜像网：http://rpmfind.net/ rpm 相关命令 1234567# 查询包版本rpm -qa | grep vim# 安装包rpm -ivh xxxxx.rpm# 卸载rpm -e --nodeps vim-minimal-7.4.629-5.el6_8.1.x86_64 yumyum 相关命令 123456789101112131415161718192021222324252627282930313233343536# 安装yum install -y vim# 卸载yum remove vim# 重置缓存yum clean allyum makecache# yum配置目录 /etc/yum.repos.d/xx.repo # 只下载安装包 方法1yum install yum-plugin-downloadonly -y # centos6之前需要此命令yum install mysql-server --downloadonly --downloaddir=/data/packages# 只下载安装包 方法2yum install yum-utils -y # 专门的下载工具yum downloader lsof --resolve --destdir=/data/mydepot/ # 默认不会下载对应的依赖文件，需要添加 resolve参数# 查看可用的rpm包yum list available &#x27;graphviz*&#x27;# yum 下载 rpm 包yum install --downloaddir=/tmp/whj/ --downloadonly glibc-devel.i6861. 获取镜像源： 例如 CentOS-6.6-x4_64-bin-DVD1.iso2. 清理yum文件： yum clean all3. 缓存yum文件： yum makecache4. 挂载镜像： monut -t iso9660 -o loop CentOS-6.6-x4_64-bin-DVD1.iso /iso_mnt # mount挂载的源不同对应的目录不同5. 修改配置文件：/etc/yum.repos.d/xxx.repo # 例如 file.repo[file]baseurl=file:///iso_mnt/ # 对应目录位置 修改gpgcheck=1enabled=1gpgkey=file:///iso_mnt/RPM-GPG-KEY-CentOS-6 # 对应目录位置 修改6.清理yum文件&amp;缓存yum文件：yum clean all &amp;&amp; yum makecache date123456789101112131415161718192021222324252627282930313233343536373839Bash命令定义时间变量LOG_TIME=`date +%H:%M:%S`获取前天日期：`date -d -2day +%Y%m%d`依次类推比如获取10天前的日期：`date -d -10day +%Y%m%d`或n天前的 `date -d &quot;n days ago&quot; +%y%m%d`明天：`date -d tomorrow +%y%m%d`注意以上中间有空格至于你需要什么样的日期时间格式，就需要应用相关的时间域参数来实现咯相关时间域如下：% H 小时(00..23)% I 小时(01..12)% k 小时(0..23)% l 小时(1..12)% M 分(00..59)% p 显示出AM或PM% r 时间(hh：mm：ss AM或PM)，12小时% s 从1970年1月1日00：00：00到目前经历的秒数% S 秒(00..59)% T 时间(24小时制)(hh:mm:ss)% X 显示时间的格式(％H:％M:％S)% Z 时区 日期域% a 星期几的简称( Sun..Sat)% A 星期几的全称( Sunday..Saturday)% b 月的简称(Jan..Dec)% B 月的全称(January..December)% c 日期和时间( Mon Nov 8 14：12：46 CST 1999)% d 一个月的第几天(01..31)% D 日期(mm／dd／yy)% h 和%b选项相同% j 一年的第几天(001..366)% m 月(01..12)% w 一个星期的第几天(0代表星期天)% W 一年的第几个星期(00..53，星期一为第一天)% x 显示日期的格式(mm/dd/yy)% y 年的最后两个数字( 1999则是99)% Y 年(例如：1970，1996等) pippip 相关常用命令 123456789101112131415161718192021222324252627# 搜索包pip search xlrd# 查看包版本pip list# 生成环境依赖文件pip freeze &gt; requirement.txt# 下载安装包 方式1pip --downloadonly --downloaddir=/tmp/ xlrd# 下载安装包 方式2 - 会下载对应依赖pip download xx# 查看可更新包：pip list --outdated --format=columns# 批量下载并更新：pip install pip-reviewpip-review --local --interactive# 寻找pip中是否存在此安装包pip search file# 查看安装包时安装了哪些文件：pip show --files SomePackage# 查看哪些包有更新：pip show --files SomePackage# 更新一个软件：pip install --upgrade SomePackage# 安装pip install xlrd# 卸载pip uninstall xlrd 配置国内 pip 源 12345678910# 配置 国内pip源 ~/.pip/pip.conf[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com#豆瓣：https://pypi.douban.com/simple#中国科学技术大学：https://mirrors.ustc.edu.cn/pypi/web/simple/#清华大学TUNA：https://pypi.tuna.tsinghua.edu.cn/simple#https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/ 其他命令 1234# pip安装包 --no-index 不使用requirement.txt的顺序pip install -r /data/xcdw_pacakages/requirement_rqma.txt --find-link=/data/xcdw_pacakages/packages_sgq--no-index# 使用豆瓣源下载pip instal Pillow -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 1234# 该命令可以跳过安装错误的库，继续安装while read requirement; do pip2 install $requirement; done &lt; requirements.txt tar12345678910# 压缩常用命令tar -zcf xxx.tar.gz xxx_dir_xxx-v 显示详细的处理文件# 解压常用命令tar -zxvf xxx.tar.gz# 解压 xz 压缩包tar xvJf node-v6.10.1-linux-x64.tar.xz zip/unzipzip -P qwe123 a.zip -r ssss 12345678910# zip 参数说明-P 加密-r 压缩目录# 压缩并指定目录zip -r /home/kms/kms.zip /home/kms/server/kms# 解压并指定目录unzip /home/kms/kms.zip -d /home/kms/server/kms alias12# ~/.bash_profilealias pip=&quot; pip --trusted-host mirrors.aliyun.com &quot; wgetwget 参数解释、用法: https://blog.csdn.net/endall/article/details/1571220 12# 做站点镜像wget xxxx -r -np 下载整个目录，不包含上层目录 grepgrep -r 递归查询子目录grep -i 查询不区分大小写grep -n 显示查询出来的文件行号grep -w 精准匹配grep -l 只显示(包含文件内容的)文件名 grep -rn xxx . “.” 只查询本目录以及其下的目录—公司电脑只有这样才能查询，具体原因，可能是设置了相关权限等 find忽略大小写 -inamefind / -iname ‘csv‘ 12345678910111213141516171819# 查找500M以上的文件sudo find / -size +500M /swap.img# 查找整整500M的文件sudo find / -size 500M# 查找小于500M的文件sudo find / -size -500M# 查找大于100M且小于500M的文件sudo find / -size -500M -size +100M其他查找单位- b 512-byte blocks (this is the default if no suffix is used)- c bytes- w two-byte words- k Kilobytes- M Megabytes- G Gigabytes vimvim 键盘图 vim 使用技巧vim 使用技巧 12345678910111213141516171819202122232425262728293031323334353637383940414243# 全局替换%s/old/new/g# 指定行数替换100,120/old/new/g# 文字字符\\ 格式化字符，\\r 换行符/g 全局替换%s 全局查找\\+ 表重复一次或多次 x+ /c 确认替换# 删除文章中的空行g/^s*$/d^s*$ ：匹配空行，其中^表示行首，s表示空字符，包括空格和制表符，*重复0到n个前面的字符，$表示行尾。连起来就是匹配只有空字符的行，也就是空行。/d ：删除该行# 删除行尾空格：:%s= *$==%s全局查找替换=为%s命令的分隔符，如果把=换为/，则该命令可以写为:%s/ *$//” *$”, $表示行尾，*匹配前面0个到n个字符，*前面是空格，因此此正则表达式匹配行尾的0个到n个字符。==，分隔符没有中间没有内容，表示删除匹配空格, 在这里表示删除行尾空格。# 去掉文件中^M^M = Ctrl v + Ctrl m# 删除换行符：:%s/\\n//g# 将连续的两个空行替换成一个空行：:%s/\\n\\n/\\r/g# 删除三行空行：:%s/^\\n\\&#123;3&#125;//# 合并行命令J使两行合并为一行，同时用空格分隔这两行。# 替换str为str+回车回车在vim的输入方法是ctrl+V,会得到^,此时再按回车.会得到^M这个就是回车了因此把全文件所有str换成str回车的语句是:: 1,$ s/str/str^M/g^M用上面的方法输入1,$表示从1到最后一行,s是switch,g是global### vim删除包含指定字符串的所有行:g/something/d # 删除包含something的所有行 .vimrc 配置1234567set nuset ts=4 # 设置 长度为四个空格set expandtab # tab键设置为空格set paste # 智能粘贴set shiftwidth # 程序自动缩进set softtabstop=4/8/16 # tab键为四个空格或者制表符，8为制表符，4为空格，可以同时产生制表符和空格 vim-setVim 中的一些设置 12345678910:set fileformat 设置文件格式:set endofline 设置文件结束符:set noendofline 取消文件结束符:%s/\\n//g 删除换行符:set textwidth 设置行宽:set textwidth 设置行边距:join 合并多行J合并两行 模块命令端口相关12345678910一、查看哪些端口被打开 netstat -anp二、关闭端口号:iptables -A INPUT -p tcp --drop 端口号-j DROP iptables -A OUTPUT -p tcp --dport 端口号-j DROP三、打开端口号：iptables -A INPUT -ptcp --dport 端口号-j ACCEPT四、以下是linux打开端口命令的使用方法。 nc -lp 23 &amp;(打开23端口，即telnet) netstat -an | grep 23 (查看是否打开23端口)五、linux打开端口命令每一个打开的端口，都需要有相应的监听程序才可以db2 top，查看db2进程 文件权限1234567文件默认权限 umask文件隐藏属性 chattr lsatrrwhich 查找path下的命令whereis查找文件 读取数据库。locate查找文件 快于find 读取数据库，但是存在更新慢导致无法查询的情况。文件特殊权限 suid sgid sbitnc -tl 8000 自启动1234567891011121314Linux启动时自动执行命令或脚本方法 #1 - 使用 cron 任务要求;1.cron 守护进程必须处于运行状态(通常情况下都会运行)2. 脚本或 crontab 文件必须包含需要的环境变量方法 #2 - 使用 /etc/rc.d/rc.local要点：1.chmod +x /etc/rc.d/rc.local2.chmod +x /home/gacanepa/script2.sh3.在rc.local文件末尾添加需要执行的脚本命令 sh /home/gacanepa/script2.sh Tips 大全 env 查看当前环境变量 history 查看输入的历史命令 chmod 文件授权 需要一层层授权， 或者 chmod -R xxx 授权其下的所有文件以及文件夹 12注意：不要拿Decimal和str进行比较，会导致结果完全错误。注意：字段的格式 ctrl + w 回退输入的单词 pstree 进程树 time python xxxx sh 脚本中加 time 执行可以显示执行的时间详细情况 nohup time xxx sh 文件中 使用 nohup 调度多个文件，可以多个文件同时执行，(文件之间不能存在依赖) Linux 文件比对vimdiff a.txt b.txt # 效果 左右分割 颜色标记显示 (需要安装 vim 包)diff -wy –suppress-common-lines a.txt b.txt # 效果 左右分割 推荐使用 查看端口netstat -lntp | grep 5000 Linux 命令去重1234567常用命令：sort -u xxxuniq # 去重重复连续出现的记录sort -u 等价于 sort xxx | uniq# 删除Linux文件重复行sort -n test.txt | uniq 删除用户数据userdel -r xxx # 完全删除用户userdel xxx # 只能删除部分用户，像/home/xxx 等需要手动删除Linux 去重 Linux 查看当前占用 CPU 或内存最多的几个进程：12345671. ps命令 1. ps -aux | sort -k4nr | head -102. top工具 1. top之后，大写M，按照内存倒序排序 2. top之后，大写C，按照CPU倒序排序3. ps -aux | sort -k4,4n 切换用户运行 sh 脚本su - fdm -c “Command” 电源关机poweroffrebootshutdown Linux 登录或注销时执行脚本分别使用~.bash_profile 和 ~.bash_logout 可以做到 tailf、tail -f、tail -F 三者区别1234tail -f 等同于--follow=descriptor，根据文件描述符进行追踪，当文件改名或被删除，追踪停止tail -F 等同于--follow=name --retry，根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪tailf 等同于tail -f -n 10(貌似tail -f或-F默认也是打印最后10行，然后追踪文件)，与tail -f不同的是，如果文件不增长，它不会去访问磁盘文件，所以tailf特别适合那些便携机上跟踪日志文件，因为它减少了磁盘访问，可以省电 程序转入前台或者后台运行 Linux ctrl 组合命令jobs //查看任务，返回任务编号 n 和进程号free 查看当前内存使用情况bg %n //将编号为 n 的任务转后台运行fg %n //将编号为 n 的任务转前台运行ctrl+z //挂起当前任务ctrl+c //结束当前任务 发送 Terminal 到当前的程序，强制结束当前程序，比较暴力ctrl+d //结束当前任务或退出 shell, 发送 exit 信号ctrl+|ctrl+s 暂停屏幕输出ctrl+q 恢复屏幕输出ctrl+a 切换到命令行开始ctrl+e 切换到命令行末尾ctrl+y 在光标处粘贴剪切的内容 Linux 查看系统安转的所有源包rpm -qapcp-pmda-kvm-3.10.6-2.el7.x86_64unoconv-0.6-7.el7.noarchtexlive-fp-svn15878.0-38.el7.noarchabrt-python-2.1.11-36.el7.centos.x86_64libcanberra-gtk3-0.30-5.el7.x86_64 Linux 查看 virtualenv 的所有包pip freeze效果如下：tornado==4.3Tornado-JSON==1.2.1urlgrabber==3.10urllib3==1.10.2urwid==1.1.1 其他命令Linux-Tips 功能: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 查看可安装包:rpm -qa | grep filenameyum search filenamepip search filename# 2.动态查看日志，多方查看日志nohuptail -f nohup.out -f# 3.建立文件链接ln -s xx/xxx/xxx/xx.py test.link 建立软链接，相当于快捷方式ln -d xx/xxx/xxx/xx.py test.link 建立硬链接，相当于拷贝一份文件# 4.wget命令wget命令下载某个文件的命令为：wget-P, –directory-prefix=PREFIX [URL地址]，将url连接中的文件保存到目录 PREFIX/下。 2.与目录相关的参数有：-nd –no-directories 不创建目录； -x, –force-directories 强制创建目录； -nH, –no-host-directories 不创建主机目录； –cut-dirs=NUMBER 忽略 NUMBER层远程目录# 6.虚拟机之间的文件传输第一种就是ftp，也就是其中一台Linux安装ftp Server，这样可以另外一台使用ftp的client程序来进行文件的copy。第二种方法就是采用samba服务，类似Windows文件copy 的方式来操作，比较简洁方便。第三种就是利用scp命令来进行文件复制。scp是有Security的文件copy，基于ssh登录。操作起来比较方便，比如要把当前一个文件copy到远程另外一台主机上，可以如下命令。scp /home/daisy/full.tar.gz root@172.19.2.75:/home/root然后会提示你输入另外那台172.19.2.75主机的root用户的登录密码，接着就开始copy了。# 7.Linux 文件的处理 read，open，write等# 8.Linux atime ctime mtimeatime access timectime change timemtime modify time# 10.nosetests 单元测试用于测试某个程序中单独模块的功能nosetests -s xxx.py只会执行 函数名包含test的函数ps： 可以吧其他函数放入test_all():中# 11.获取每月的最大天数import datetimeimport calendarcalendar.monthrange(now_year,now_month)[1]# 12.sqlalchemy.orm框架 - orm字段缺失，导致对应值缺失。当表中有10个字段。但是对应的orm只有8个字段，会导致 数据导入正常执行，但是缺失的两个字段无任何值。注:数据库修改，对应的orm必须修改一致# 14.使用copy模块深拷贝对象浅拷贝，拷贝对应的引用，例如工厂函数，深拷贝，拷贝对象以及引用和引用指向的具体内容# Decimal取两位小数，精度y = Decimal(0.2356).quantize(Decimal(&#x27;0.00&#x27;))y = Deciaml(0.24)# 查看文件夹大小du -ah --max-depth=1 关机命令linux 下常用的关机命令有：shutdown、halt、poweroff、init；重启命令有：reboot。下面本文就主要介绍一些常用的关机命令以及各种关机命令之间的区别和具体用法。 首先来看一下 linux 下比较常用的一些关机命令 关机命令： halt 立刻关机 poweroff 立刻关机 shutdown -h now 立刻关机(root 用户使用) shutdown -h 10 10 分钟后自动关机 如果是通过 shutdown 命令设置关机的话，可以用 shutdown -c 命令取消重启 重启命令： reboot shutdown -r now 立刻重启(root 用户使用) shutdown -r 10 过 10 分钟自动重启(root 用户使用) shutdown -r 20:35 在时间为 20:35 时候重启(root 用户使用) 如果是通过 shutdown 命令设置重启的话，可以用 shutdown -c 命令取消重启 在 linux 下一些常用的关机/重启命令有 shutdown、halt、reboot、及 init，它们都可以达到重启系统的目的，但每个命令的内部工作过程是不同的。 如果是通过 shutdown 命令设置重启或关机的话，可以用 shutdown -c 命令取消重启 几种不同关机命令详解 12345678910111213141516171819202122232425262728293031323334351.shutdown 安全地将系统关机shutdown 命令安全地将系统关机。 有些用户会使用直接断掉电源的方式来关闭 linux，这是十分危险的。因为 linux 与 windows 不同，其后台运行着许多进程，所以强制关机可能会导致进程的数据丢失﹐使系统处于不稳定的状态﹐甚至在有的系统中会损坏硬件设备。而在系统关机前使用 shutdown 命令﹐系统管理员会通知所有登录的用户系统将要关闭。并且 login 指令会被冻结﹐即新的用户不能再登录。直接关机或者延迟一定的时间才关机都是可能的﹐还可能重启。这是由所有进程〔process〕都会收到系统所送达的信号〔signal〕决定的。这让像 vi 之类的程序有时间储存目前正在编辑的文档﹐而像处理邮件〔mail〕和新闻〔news〕的程序则可以正常地离开等等。shutdown 执行它的工作是送信号〔signal〕给 init 程序﹐要求它改变 runlevel。Runlevel 0 被用来停机〔halt〕﹐runlevel 6 是用来重新激活〔reboot〕系统﹐而 runlevel 1 则是被用来让系统进入管理工作可以进行的状态﹔这是预设的﹐假定没有-h 也没有-r 参数给 shutdown。要想了解在停机〔halt〕或者重新开机〔reboot〕过程中做了哪些动作﹐你可以在这个文件/etc/inittab 里看到这些 runlevels 相关的资料。shutdown 参数说明: [-t] 在改变到其它 runlevel 之前﹐告诉 init 多久以后关机。 [-r] 重启计算器。 [-k] 并不真正关机﹐只是送警告信号给每位登录者〔login〕。 [-h] 关机后关闭电源〔halt〕。 [-n] 不用 init﹐而是自己来关机。不鼓励使用这个选项﹐而且该选项所产生的后果往往不总是你所预期得到的。 [-c] cancel current process 取消目前正在执行的关机程序。所以这个选项当然没有时间参数﹐但是可以输入一个用来解释的讯息﹐而这信息将会送到每位使用者。 [-f] 在重启计算器〔reboot〕时忽略 fsck。[-F] 在重启计算器〔reboot〕时强迫 fsck。 [-time] 设定关机〔shutdown〕前的时间。2.halt 调用 shutdown -h, 文件系统写操作完成后就会停止内核其实 halt 就是调用 shutdown -h。halt 执行时﹐杀死应用进程﹐执行 sync 系统调用﹐文件系统写操作完成后就会停止内核。 参数说明: [-n] 防止 sync 系统调用﹐它用在用 fsck 修补根分区之后﹐以阻止内核用老版本的超级块〔superblock〕覆盖修补过的超级块。 [-w] 并不是真正的重启或关机﹐只是写 wtmp〔/var/log/wtmp〕纪录。 [-d] 不写 wtmp 纪录〔已包含在选项[-n]中〕。 [-f] 没有调用 shutdown 而强制关机或重启。 [-i] 关机〔或重启〕前﹐关掉所有的网络接口。 [-p] 该选项为缺省选项。就是关机时调用 poweroff。3.reboot 引发主机重启 reboot 的工作过程差不多跟 halt 一样﹐不过它是引发主机重启﹐而 halt 是关机。它的参数与 halt 相差不多。4.init 终止所有的用户进程﹑守护进程等 init 是所有进程的祖先﹐它的进程号始终为 1﹐所以发送 TERM 信号给 init 会终止所有的用户进程﹑守护进程等。shutdown 就是使用这种机制。init 定义了 8 个运行级别(runlevel)， init 0 为关机﹐init 1 为重启。关于 init 可以长篇大论﹐这里就不再叙述。另外还有 telinit 命令可以改变 init 的运行级别﹐比如﹐telinit -iS 可使系统进入单用户模式﹐并且得不到使用 shutdown 时的信息和等待时间。 TODO 其他命令1234567891011ps -ef 查看进程异常否，是否存在攻击。js查看数据类型 alert(typeof xxx)test -e filenaem 判断文件名是否存在。vi中 ctrl按键配合方向键 有奇效---对于调到句首 句尾grep -rn &quot;xxx&quot; . 当前路径中搜索，公司电脑也可使用crtl+p/n vi中的命令补全grep精准查找 grep -w &quot;xxx&quot; 或者 grep &quot;\\&lt;xxx\\&gt;&quot;vi中查看文件名，文件路径:file :pwd :ls#历史打开的文件","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Virtualenvwrapper","slug":"Languages/Linux/linux-virtualenvwarapper","date":"2021-10-23T11:54:51.113Z","updated":"2021-10-23T11:54:51.113Z","comments":true,"path":"Languages/Linux/linux-virtualenvwarapper.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-virtualenvwarapper.md/","excerpt":"","text":"虚拟环境 整合工具 将所有虚拟环境整合在一个目录下 管理（新增，删除，复制）虚拟环境 快速切换虚拟环境 部署使用 12345678pip install virtualenvwrapper # 创建目录用来存放虚拟环境mkdir ~/.virtualenvs# 在 ~/.bashrc 中添加入戏下export WORKON_HOME=~/.virtualenvssource /usr/local/bin/virtualenvwrapper.sh # 根据安装目录修改# 运行， 即可source ~/.bashrc 常用命令 12345678910111213workon:列出虚拟环境列表lsvirtualenv:同上mkvirtualenv :新建虚拟环境workon [虚拟环境名称]:切换虚拟环境rmvirtualenv :删除虚拟环境deactivate: 离开虚拟环境 https://www.jianshu.com/p/3abe52adfa2b","categories":[],"tags":[]},{"title":"Yum源配置","slug":"Languages/Linux/linux-yum","date":"2021-10-23T11:54:51.113Z","updated":"2021-10-23T11:54:51.114Z","comments":true,"path":"Languages/Linux/linux-yum.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-yum.md/","excerpt":"","text":"yum 源说明配置文件说明 123456# 指定挂载的目录下的BaseOS以及AppStream目录baseurl# 是否校验gpgcheck# 是否启动该镜像enable Centos8-本地源配置CentOS8 yum 源本地配置 12345678910111213141516171819202122232425262728293031323334# 移除原有repo文件mkdir /etc/yum.repos.d/bakmv /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak/.# 新增 本地 /etc/yum.repos.d/local.repo[c8-media-BaseOS]name=CentOS-BaseOS-$releasever - Mediabaseurl=file:///data/yum_data/BaseOS file:///data/yum_data/BaseOS file:///data/yum_data/BaseOSgpgcheck=0enabled=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial[c8-media-AppStream]name=CentOS-AppStream-$releasever - Mediabaseurl=file:///data/yum_data/AppStream file:///data/yum_data/AppStream file:///data/yum_data/AppStreamgpgcheck=0enabled=1gpgkey=file:///etc/pki/rpm-g# 配置本地 yum 时，使用gpgcheck=0，不校验# yum install -y epel-release 自动配置yum源仓库，非必需# 重设定yumyum clean allyum makecache# 查看镜像库yum repolist# 校验是否正常yum install svn -y 问题记录 12345678910# 问题说明Couldn t open file /etc/pki/rpm-g# 解决方法去除gpgcheck校验# 详细日志warning: /yum_data/AppStream/Packages/apr-1.6.3-9.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEYCentOS-AppStream-8 - Media 0.0 B/s | 0 B 00:00Curl error (37): Couldn t read a file:// file for file:///etc/pki/rpm-g [Couldn t open file /etc/pki/rpm-g] CentOS6/7-本地源配置注：如果 nfs 已经挂起，可以直接使用 NFS 挂起的镜像作为源镜像。 说明: 生成服务器内部不允许联网时，需要配置本地 yum。其他情况无需配置 123456789101112131415161718192021222324252627282930313233343536# &gt; 获取当前CentOS版本的官网最全镜像，此处以6.9为例# 切换root用户操作su - root# &gt; 通过光驱配置本地yum源# 配置DVD1mkdir -p /data/software/centos6mount -o loop CentOS-6.9-x86_64-bin-DVD1.iso /mntcp -r /mnt/* /data/software/centos6umount /mnt# 配置DVD2mount -o loop CentOS-6.9-x86_64-bin-DVD1.iso /mntcp -r /mnt/* /data/software/centos6 # 其中部分文件夹需要覆盖，一直选择y即可umount /mnt# 配置yumcd /etc/yum.repos.d/mkdir bakmv *repo bak/vi local.repo# local.repo 文件内容如下[iso]name=centos6baseurl=file:///data/software/centos6gpgcheck=0enabled=1# 重设定yumyum clean allyum makecache# 配置验证看是上述是否有报错。# 安装 vimyum install vim -y安装vim成功, 即无报错","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-术语介绍","slug":"Languages/Linux/linux-term-info","date":"2021-10-23T11:54:51.112Z","updated":"2021-10-23T11:54:51.112Z","comments":true,"path":"Languages/Linux/linux-term-info.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-term-info.md/","excerpt":"","text":"术语字符集就是字符，尤其是非英语字符在系统内的编码方式，也就是通常所说的内码，所有的字符集都放在/usr/share/i18n/charmaps，所有的字符集也都是用 Unicode 编号索引的。 操作系统标准输入输出Linux 的大部分命令都具有标准的输入/输出设备端口，下图列出了标准设备信息: 名称 描述 含义 设备 说明 STDIN 0 标准输入 键盘 命令在执行时所要的输入数据通过它来取得 STDOUT 1 标准输出 显示器 命令在执行后的输出结果从该端口送出 STDERR 2 标准错误 显示器 命令执行时的错误信息通过该端口送出 .bash_profile 文件介绍/etc/profile此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d 目录的配置文件中搜集 shell 的设置. /etc/bashrc为每一个运行 bash shell 的用户执行此文件.当 bash shell 被打开时,该文件被读取. ~/.bash_profile每个用户都可使用该文件输入专用于自己使用的 shell 信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc 文件. ~/.bashrc该文件包含专用于你的 bash shell 的 bash 信息,当登录时以及每次打开新的 shell 时,该该文件被读取. ~/.bash_logout当每次退出系统(退出 bash shell)时,执行该文件. X86、X64 和 X86_64 区别参考链接：https://blog.csdn.net/u010758410/article/details/76320530 X86: intel 的开发的一种 32 位指令集. X86_64: x86 CPU 开始迈向 64 位的时候 X64: x86_64,x64,AMD64 基本上是同一个东西.一种 64 位指令集 x86、x86_64 主要的区别就是 32 位和 64 位的问题，x86 中只有 8 个 32 位通用寄存器.x86_64 把这 8 个通用寄存器扩展成了 64 位的，并且比 x86 增加了若干个寄存器 代码开发原则代码开发原则 **SRP 单一职责原则(Single Responsibility Principle)**：就一个类而言，应该仅有一个引起它变化的原因。 **OCP 开放-封闭原则(Open Closure Principle)**：软件实体(类，模块，函数等)应该可以扩展的，但不可修改。 **LSPLiskov 替换原则(Liskov Substitution Principle)**：子类型必须能够替换它们的基类型 **DIP 依赖倒置原则(Dependence Inversion Principle)**：抽象不应该依赖于细节，细节应该依赖于抽象。 **ISP 接口隔离原则(Interface Segregation Principle)**：不应该强迫客户依赖与它们不用的方法。接口属于客户，不属于它所在的类层次结构。 REP 重用发布等价原则(Release Reuse Equivalency Principle)：重用粒度就是发布粒度。 **CCP 共同封闭原则(Common Closure Principle)**：包中 所有类应该对于同一类性质的变化应该是共同封闭的。一个变化若对包产生影响，则将对包中所有的类产生影响。而对其它的包不造成影响。 **CRP 共同重用原则(Common Resue Principle)**：一个包中的所有类应该是共同重用的。如果重用了包中的一个类，那么就要重用包中的所有类。 **ADP 无环依赖原则(Acyclic Dependencies Principle)**：在包的依赖关系图中不允许存在环。 **SDP 稳定依赖原则(Stable Dependencies Principle)**：易变化包不应该依赖稳定包。 **SAP 稳定抽象原则(Stable Abstract Principle)**：朝着抽象方向扩展。 详细描述参考链接： https://blog.csdn.net/qq_16234613/article/details/54933742?utm_source=copy ORM说明 对象关系映射(英语：(Object Relational Mapping，简称 ORM，或 O/RM，或 O/R mapping)，是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换 对象关系映射(Object-Relational Mapping)提供了概念性的、易于理解的模型化数据的方法。ORM 方法论基于三个核心原则： 简单：以最基本的形式建模数据。 传达性：数据库结构被任何人都能理解的语言文档化。 精确性：基于数据模型创建正确标准化的结构。 PIP 安装和解压安装的区别pip 安装会检查依赖软件，依赖没有安转，则无法安装。安装成功即完全 OK解压安转，先安装成功，程序运行的时候，会缺失相关依赖，需要后续安装。 编码，gbk 和 utf-8 的区别gbk-包含简体中文和繁体，空间较小，占用空间少，运行速度快。 ps:gb2312 只支持简体中文字符utf-8 支持所有国家的语言，占用空间大，运行速度较慢 什么是 SSL","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"trash-cli 防止误删文件","slug":"Languages/Linux/linux-trash","date":"2021-10-23T11:54:51.112Z","updated":"2021-10-23T11:54:51.112Z","comments":true,"path":"Languages/Linux/linux-trash.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-trash.md/","excerpt":"","text":"trash-cli 安装1234cd /tmphttps://github.com/andreafrancia/trash-clicd trash-clisudo python setup.py install 命令说明123456789101112131415161718192021222324trash == trash-put == 删除trash-empty 清空trash-list 列出回收站trash-restore 恢复文件trash-rm 删除回收站中指定文件# 安全删除rm ./*# 查看回收站➜ /tmp rl2015-05-28 19:59:54 /tmp/redis-stable# 清空回收站trash-empty# 清空10天以前放入回收站的文件trash-empty 10# 还原文件➜ /tmp trash-restore 0 2015-05-28 19:59:54 /tmp/redis-stableWhat file to restore [0..0]: 输入对应序号还原","categories":[],"tags":[]},{"title":"Linux-SSH配置","slug":"Languages/Linux/linux-ssh","date":"2021-10-23T11:54:51.111Z","updated":"2021-10-23T11:54:51.111Z","comments":true,"path":"Languages/Linux/linux-ssh.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-ssh.md/","excerpt":"","text":"简介SSH(远程连接工具)连接原理：ssh 服务是一个守护进程(demon)，系统后台监听客户端的连接，ssh 服务端的进程名为 sshd,负责实时监听客户端的请求(IP 22 端口)，包括公共秘钥等交换等信息。ssh 服务端由 2 部分组成： openssh(提供 ssh 服务) openssl(提供加密的程序)ssh 的客户端可以用 XSHELL，Securecrt, Mobaxterm 等工具进行连接 功能模块-配置 SSH 免密码登录1234567891011121314151617181920212223242526272829303132配置1：ssh免密钥登录设置客户端配置 – 服务器11.查看~/.ssh文件夹,若已经存在有公钥文件(id_rsa.pub),私钥文件(id_rsa),则可以跳过客户端配置.2.生成密钥文件.$ ssh-keygen然后一路回车.然后~/.ssh下会生成id_rsa.pub和id_rsa, 其中id_rsa文件起到唯一标识你的客户机的作用.注意:不要改这两个文件的文件名,ssh登陆时会读取id_rsa文件.# 服务器配置 – 服务器21.修改sshd配置文件(/etc/ssh/sshd_config).找到以下内容，并去掉注释符”#“========================= RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys=========================2.配置authorized_keys文件.若’~/.ssh/authorized_keys’不存在,则建立.ssh文件夹和authorized_keys文件.将上文中客户机id_rsa.pub的内容拷贝到authorized_keys中.注意:1) .ssh目录的权限必须是7002) .ssh/authorized_keys文件权限必须是6003.重启sshd.$ /etc/init.d/sshd restart # 非必需# 测试客户机执行:ssh -v user@host (-v 调试模式)会显示一些登陆信息.# 关键命令chmod 700 ~/.sshchmod 600 ~/.ssh/authorized_keys/etc/init.d/sshd restart # 非必需 功能模块-只允许密钥登录(禁用密码登录)为了服务器主机安全，需要设定密钥登录，并且指定 root 不可远程登录。 [toc] 步骤 1：生成客户端密钥生成密钥方式有如下两种： Linux 主机 Win 主机-Xshell 软件 步骤 2：添加密钥到服务端将 id_rsa.pub 中内容复制到 ~/.ssh/authorized_keys 步骤 3：修改服务端配置文件配置文件修改后生效，需要重启服务配置文件：/etc/ssh/sshd_config重启服务：service sshd restart 或 /bin/systemctl restart sshd.service 开启密钥登录 12RSAAuthentication yes # 启用 RSA 认证 # 非必需修改，不存在时不创建不修改。PubkeyAuthentication yes # 启用公钥私钥配对认证方式 禁止 root 远程登录 1PermitRootLogin yes # 禁止 root 远程登录 关闭密码登陆方式 12PasswordAuthentication noChallengeResponseAuthentication no 修改完成后重启服务 1/bin/systemctl restart sshd.service SSH 配置文件常用配置项说明: 1 SSH 客户端配置文件： /etc/ssh/ssh_config 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960[root@WOM ~]# cat /etc/ssh/ssh_config# $OpenBSD: ssh_config,v 1.25 2009/02/17 01:28:32 djm Exp $# This is the ssh client system-wide configuration file. See# ssh_config(5) for more information. This file provides defaults for# users, and the values can be changed in per-user configuration files# or on the command line.# Configuration data is parsed as follows:# 1. command line options# 2. user-specific file# 3. system-wide file# Any configuration value is only changed the first time it is set.# Thus, host-specific definitions should be at the beginning of the# configuration file, and defaults at the end.# Site-wide defaults for some commonly used options. For a comprehensive# list of available options, their meanings and defaults, please see the# ssh_config(5) man page.# Host *# ForwardAgent no# ForwardX11 no# RhostsRSAAuthentication no# RSAAuthentication yes# PasswordAuthentication yes# HostbasedAuthentication no# GSSAPIAuthentication no# GSSAPIDelegateCredentials no# GSSAPIKeyExchange no# GSSAPITrustDNS no# BatchMode no# CheckHostIP yes# AddressFamily any# ConnectTimeout 0# StrictHostKeyChecking ask# IdentityFile ~/.ssh/identity# IdentityFile ~/.ssh/id_rsa# IdentityFile ~/.ssh/id_dsa# Port 22# Protocol 2,1# Cipher 3des# Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc# MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160# EscapeChar ~# Tunnel no# TunnelDevice any:any# PermitLocalCommand no# VisualHostKey noHost * GSSAPIAuthentication yes# If this option is set to yes then remote X11 clients will have full access# to the original X11 display. As virtually no X11 client supports the untrusted# mode correctly we set this to yes. ForwardX11Trusted yes# Send locale-related environment variables SendEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES SendEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT SendEnv LC_IDENTIFICATION LC_ALL LANGUAGE SendEnv XMODIFIERS SSH 服务端配置文件： /etc/ssh/sshd_config 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139[root@WOM ~]# cat /etc/ssh/sshd_config# $OpenBSD: sshd_config,v 1.80 2008/07/02 02:24:18 djm Exp $# This is the sshd server system-wide configuration file. See# sshd_config(5) for more information.# This sshd was compiled with PATH=/usr/local/bin:/bin:/usr/bin# The strategy used for options in the default sshd_config shipped with# OpenSSH is to specify options with their default value where# possible, but leave them commented. Uncommented options change a# default value.#Port 22#AddressFamily any#ListenAddress 0.0.0.0#ListenAddress ::# Disable legacy (protocol version 1) support in the server for new# installations. In future the default will change to require explicit# activation of protocol 1Protocol 2# HostKey for protocol version 1#HostKey /etc/ssh/ssh_host_key# HostKeys for protocol version 2#HostKey /etc/ssh/ssh_host_rsa_key#HostKey /etc/ssh/ssh_host_dsa_key# Lifetime and size of ephemeral version 1 server key#KeyRegenerationInterval 1h#ServerKeyBits 1024# Logging# obsoletes QuietMode and FascistLogging#SyslogFacility AUTHSyslogFacility AUTHPRIV#LogLevel INFO# Authentication:#LoginGraceTime 2m#PermitRootLogin yes#StrictModes yes#MaxAuthTries 6#MaxSessions 10#RSAAuthentication yes#PubkeyAuthentication yes#AuthorizedKeysFile .ssh/authorized_keys#AuthorizedKeysCommand none#AuthorizedKeysCommandRunAs nobody# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts#RhostsRSAAuthentication no# similar for protocol version 2#HostbasedAuthentication no# Change to yes if you don&#x27;t trust ~/.ssh/known_hosts for# RhostsRSAAuthentication and HostbasedAuthentication#IgnoreUserKnownHosts no# Don&#x27;t read the user&#x27;s ~/.rhosts and ~/.shosts files#IgnoreRhosts yes# To disable tunneled clear text passwords, change to no here!#PasswordAuthentication no#PermitEmptyPasswords noPasswordAuthentication yes# Change to no to disable s/key passwords#ChallengeResponseAuthentication yesChallengeResponseAuthentication no# Kerberos options#KerberosAuthentication no#KerberosOrLocalPasswd yes#KerberosTicketCleanup yes#KerberosGetAFSToken no#KerberosUseKuserok yes# GSSAPI options#GSSAPIAuthentication noGSSAPIAuthentication yes#GSSAPICleanupCredentials yesGSSAPICleanupCredentials yes#GSSAPIStrictAcceptorCheck yes#GSSAPIKeyExchange no# Set this to &#x27;yes&#x27; to enable PAM authentication, account processing,# and session processing. If this is enabled, PAM authentication will# be allowed through the ChallengeResponseAuthentication and# PasswordAuthentication. Depending on your PAM configuration,# PAM authentication via ChallengeResponseAuthentication may bypass# the setting of &quot;PermitRootLogin without-password&quot;.# If you just want the PAM account and session checks to run without# PAM authentication, then enable this but set PasswordAuthentication# and ChallengeResponseAuthentication to &#x27;no&#x27;.#UsePAM noUsePAM yes# Accept locale-related environment variablesAcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGESAcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENTAcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGEAcceptEnv XMODIFIERS#AllowAgentForwarding yes#AllowTcpForwarding yes#GatewayPorts no#X11Forwarding noX11Forwarding yes#X11DisplayOffset 10#X11UseLocalhost yes#PrintMotd yes#PrintLastLog yes#TCPKeepAlive yes#UseLogin no#UsePrivilegeSeparation yes#PermitUserEnvironment no#Compression delayed#ClientAliveInterval 0#ClientAliveCountMax 3#ShowPatchLevel no#UseDNS yes#PidFile /var/run/sshd.pid#MaxStartups 10:30:100#PermitTunnel no#ChrootDirectory none# no default banner path#Banner none# override default of no subsystemsSubsystem sftp /usr/libexec/openssh/sftp-server# Example of overriding settings on a per-user basis#Match User anoncvs# X11Forwarding no# AllowTcpForwarding no# ForceCommand cvs server Resources参考链接： Linux 实现密钥登陆： https://www.cnblogs.com/gsxx/p/4447390.html Linux ssh 命令详解： https://www.cnblogs.com/ftl1012/p/ssh.html Linux：SSH 服务配置文件详解： https://www.cnblogs.com/Spiro-K/p/6685943.html","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"SVN-技术文档","slug":"Languages/Linux/linux-svn","date":"2021-10-23T11:54:51.111Z","updated":"2021-10-23T11:54:51.111Z","comments":true,"path":"Languages/Linux/linux-svn.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-svn.md/","excerpt":"","text":"SVN 是 Subversion 的简称，是一个开放源代码的版本控制系统，相较于 RCS、CVS，它采用了分支管理系统，它的设计目标就是取代 CVS。互联网上很多版本控制服务已从 CVS 迁移到 Subversion。说得简单一点 SVN 就是用于多个人共同开发同一个项目，共用资源的目的。 Linux:涉及 SVN 的同步、更新以及同步到项目目录SVN 基础用法：项目或者日常所需足以SVN 进阶用法：svn 的问题难点等SVN 终极用法：涉及 svn 的合并，分流，标签 tag 等很少使用的命令，了解即可。Linux 中 SVN 扩充使用用法SVN 使用注意事项:SVN 细节 tips： SVN 插件SVN Excel 比对https://blog.csdn.net/ccpat/article/details/50725774 基础用法 1.安装SVN yum install subversion 2.下载文件 svn co 用户名 密码 80001 80001 外网：svn co https://115.239.176.61:10081/svn/lqr/fb 出现输入用户名密码，之后会选择是否永久保存密码。保存/不保存都可。 内网：svn co https://155.104.1.106:81/svn/lqr/fb 3.添加文件到版本库，新增加的文件需要此操作 svn add filename 添加文件到版本库控制 svn ci -m &quot;&quot; filename 上传文件 4.上传文件 svn ci -m &quot;注释&quot; filename 5.更新文件 svn up filename 6.比对本地和版本库中那些文件不同 svn st 比对此目录下包含所有子目录的文件，显示状态如下： 描述：输出WC中文件和目录的状态。如果WC提交，这些状态就会同步到库里。 一般状态有 &#39; &#39; 没有修改 &#39;A&#39; 新增 &#39;D&#39; 删除 &#39;M&#39; 修改 &#39;R&#39; 替代 &#39;C&#39; 冲突 &#39;I&#39; 忽略 &#39;?&#39; 未受控 &#39;!&#39; 丢失，一般是将受控文件直接删除导致 7.比对文件 svn diff filename 比对当前文件和svn版本上文件的区别 8.删除文件 svn delete filename svn ci -m&quot;注释&quot; filename 会删除版本库的文件，其他人电脑更新后也会删除 9.导出文件夹 svn export filename 这样不会有.svn文件，直接拷贝会有.svn文件(导致无法放入版本库中) 10.查看文件日志 svn log filename 11.恢复到某一版本 1.暂时恢复，不会影响版本库，但是提交前需要更新 svn up -r 333 filename 2.将版本库中恢复到过去版本 svn merge -r 20:10 filename svn ci -m &quot;注释back to r 10,xxxxx&quot; filename 12.查看svn的信息 svn info 可以查看svn的路径等 13.当svn up 出现 error:need cleanup svn cleanup 当up失败时，清除失败文件重新up 14.移动文件 svn move filename 在版本库中移动文件，当需要修改文件路径时，需要这么做。 15.重命名文件 svn rename filename 修改版本库中的文件名。 16.svn 删除版本库目录下所有中.svn文件 svn 删除版本库目录下所有中.svn 文件 12find . -type d -name “.svn”|xargs rm -rf 或者find . -type d -iname ”.svn” -exec rm -rf &#123;&#125; \\; 进阶用法1.svn up 更新过程中遇到冲突 1.显示信息：选择: (p) 推迟，(df) 显示全部差异，(e) 编辑,(mc) 我的版本, (tc) 他人的版本,(s) 显示全部选项: 2.冲突出现时，一般按 p 查看冲突文件，再解决冲突，解决之后，svn resolved filename 表示冲突已经解决 2.svn up 文件返回的信息$ svn updateU INSTALL 文件本地未修改G README 文件本地已修改，修改内容无冲突，自动合并C bar.c 文件本地已修改，修改内容有冲突，需要手动解决 3.对于多个文件的提交1.svn st 得到差异文件 2.拷贝内容至编辑器，同类文件批量替换，例如 M –&gt; svn ci -m “注释” 3.直接提交即可。 4.其他 svn ci -m”xxxx”web/a.py 会上传所有的的文件svn ci -m”xxxx” web/a.py 只会上传一个 svn ci -m”” * 会上传当前目录以及子目录下的所有文件，一般不用 1.svn ci -m”注释” xx.py 如果后续的 xx.py 等未添加，会上传当前目录所有文件。 SVN 终极用法–很少用的功能 SVN 使用 log list cat diff 查看所有以及特定文件版本信息svn log 展示给你主要信息：每个版本附加在版本上的作者与日期信息和所有路径修改。svn diff 显示特定修改的行级详细信息。svn cat 取得在特定版本的某一个文件显示在当前屏幕。svn list 显示一个目录在某一版本存在的文件。使用 svn xxx 时，可以用 svn diff -c http://xxxxx/test.py 用路径来做处理-v 显示详细信息 svn log –verbose(-v)，详细模式下，显示路径修改的历史svn log -r 8 -vsvn log –quiet(-v) 禁止显示日志信息的主要部分svn log -v -q 只显示修改的文件名svn diff -r 2:3 test.pysvn diff –change(-c) test.py 与前一个修订版本的文件比较svn cat -r 2 test.py 仅仅查看，某个版本的内容svn cat -r 2 test.py &gt; test_2.py 重定向输出svn list 不下载文件到本地目录的情况下来查看目录中的文件。 svn delete 之后未提交的文件恢复，svn revert(恢复)svn 误删除文件之后的恢复(已经提交)。Windows 的文件恢复1.svn showlog 找到被删除的文件 2.右键文件选择 revert changes from this revision3.(或许需要更新)便可查看被删除的文件svn log | more 查看所有的版本信息(当页面无法显示所有的 log 时) 注意事项1.不要直接替换文件，然后上传，应该用 svn up 更新无冲突后，在 svn ci 上传 2.如果需要拿出来文件，可以 svn co 从 xxxxx/xx/xx/xx/fb/xx 直接 svn 下载所需的文件夹，然后再 svn up 和 svn ci 上传文件 3.如果替换文件(不推荐)–必须在上传前，svn up 并且被替换文件无修改，无冲突(必须要被替换文件没有任何修改痕迹)等，才可以替换。否则容易遗失。 4.如上 功能详解TortoiseSVN 是 windows 下其中一个非常优秀的 SVN 客户端工具。通过使用它，我们可以可视化的管理我们的版本库。不过由于它只是一个客户端，所以它不能对版本库进行权限管理。 TortoiseSVN 不是一个独立的窗口程序，而是集成在 windows 右键菜单中，使用起来比较方便。 TortoiseSVN 每个菜单项都表示什么意思 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710801、SVN Checkout(SVN取出)点击SVN Checkout，弹出检出提示框，在URL of repository输入框中输入服务器仓库地址，在Checkout directory输入框中输入本地工作拷贝的路径，点击确定，即可检出服务器上的配置库。02、SVN Update(SVN更新)如果配置库在本地已有工作拷贝，则取得最新版本只是执行SVN Update即可，点击SVN Update，系统弹出更新提示框，点击确定，则把服务器是最新版本更新下来03、Import(导入)选择要提交到服务器的目录，右键选择TortoiseSVN----Import，系统弹出导入提示框，在URL of repository输入框中输入服务器仓库地址，在Import Message输入框中输入导入日志信息，点击确定，则文件导入到服务器仓库中。04、Add(加入)如果有多个文件及文件夹要提交到服务器，我们可以先把这些要提交的文件加入到提交列表中，要执行提交操作，一次性把所有文件提交，如图，可以选择要提交的文件，然后点击执行提交(SVN Commit),即可把所有文件一次性提交到服务器上05、Resolving Conflicts(解决冲突) 有时你从档案库更新文件会有冲突。冲突产生于两人都修改文件的某一部分。解决冲突只能靠人而不是机器。当产生冲突时，你应该打开冲突的文件，查找以&lt;&lt;&lt;&lt;&lt;&lt;&lt;开始的行。冲突部分被标记：&lt;&lt;&lt;&lt;&lt;&lt;&lt; filenameyour changes=======code merged from repository&gt;&gt;&gt;&gt;&gt;&gt;&gt; revisionSubversion为每个冲突文件产生三个附加文件：filename.ext.mine更新前的本地文件。filename.ext.rOLDREV你作改动的基础版本。filename.ext.rNEWREV更新时从档案库得到的最新版本。使用快捷菜单的编辑冲突Edit Conflict命令来解决冲突。然后从快捷菜单中执行已解决Resolved命令，将改动送交到档案库。请注意，解决命令并不解决冲突，而仅仅是删除filename.ext.mineandfilename.ext.r*文件并允许你送交。06、Check for Modifications(检查更新)点击Check for Modifications,系统列表所以待更新的文件及文件夹的状态.07、Revision Graph(版本分支图)查看文件的分支,版本结构,可以点击Revision Graph,系统以图形化形式显示版本分支.08、Rename(改名) SVN支持文件改名,点击Rename,弹出文件名称输入框,输入新的文件名称,点击确定,再把修改提交,即可完成文件改名09、Delete(删除) SVN支持文件删除,而且操作简单,方便,选择要删除的文件,点击Delete,再把删除操作提交到服务器10、Moving(移动) 选择待移动的文件和文件夹；按住右键拖动right-drag文件(夹)到跟踪拷贝内的新地方；松开左键；在弹出菜单中选择move files in Subversion to here11、Revert(还原) 还原操作,如刚才对文件做了删除操作,现在把它还原回来,点击删除后,再点击提交,会出现如上的提示框,点击删除后,再点击Revert,即已撤销删除操作,如果这时候点击提交,则系统弹出提示框:没有文件被修改或增加,不能提交12、Branch/Tag(分支/标记) 当需要创建分支，点击Branch/Tag，在弹出的提示框中，输入分支文件名，输入日志信息，点击确定，分支创建成功，然后可查看文件的版本分支情况13、Switch(切换) 文件创建分支后，你可以选择在主干工作，还是在分支工作，这时候你可以通过Switch来切换。14、Merge(合并) 主干和分支的版本进行合并，在源和目的各输入文件的路径，版本号，点击确定。系统即对文件进行合并，如果存在冲突，请参考冲突解决。15、Export(导出) 把整个工作拷贝导出到本地目录下,导出的文件将不带svn文件标志,文件及文件夹没有绿色的”√”符号标志。16、Relocate(重新定位) 当服务器上的文件库目录已经改变，我们可以把工作拷贝重新定位，在To URL输入框中输入新的地址17、Add to Ignore List(添加到忽略列表) 大多数项目会有一些文件(夹)不需要版本控制，如编译产生的*.obj, *.lst,等。每次送交，TortoiseSVN提示那些文件不需要控制，挺烦的。这时候可以把这些文件加入忽略列表。18、SVN其它相关功能 客户端修改用户密码: 打开浏览器,在地址栏内输入http://192.168.1.250/cgi-bin/ChangePasswd,启动客户端修改用户密码的界面,输入正确的用户名,旧密码,新密码(注意密码的位数应该不小于6,尽量使用安全的密码),点击修改即可.19、SVN Commit(版本提交)把自己工作拷贝所做的修改提交到版本库中，这样别人在获取最新版本(Update)的时候就可以看到你的修改了。20、Show log(显示日志)显示当前文件(夹)的所有修改历史。SVN支持文件以及文件夹独立的版本追溯。21、Repo-Browser(查看当前版本库)查看当前版本库，这是TortoiseSVN查看版本库的入口，通过这个菜单项，我们就可以进入配置库的资源管理器，然后就可以对配置库的文件夹进行各种管理，相当于我们打开我的电脑进行文件管理一样。22、Revision Graph(版本图形)查看当前项目或文件的修订历史图示。如果项目比较大型的话，一般会建多个分支，并且多个里程碑(稳定版本发布)，通过这里，我们就可以看到项目的全貌。23、Resolved(解决冲突)如果当前工作拷贝和版本库上的有冲突，不能自动合并到一起，那么当你提交修改的时候，tortoisesvn就会提示你存在冲突，这时候你就可以通过这个菜单项来解决冲突。冲突的解决有两种，一种是保留某一份拷贝，例如使用配置库覆盖当前工作拷贝，或者反过来。还有一种是手动解决冲突，对于文本文件，可以使用tortoiseSVN自带的工具，它会列出存在冲突的地方，然后你就可以和提交者讨论怎么解决这个冲突。同时它也对Word有很好的支持24、Update to Revision(更新至版本)从版本库中获取某一个历史版本。这个功能主要是方便查看历史版本用，而不是回滚版本。注意：获取下来之后，对这个文件不建议进行任何操作。如果你做了修改，那么当你提交的时候SVN会提示你，当前版本已失效(即不是最新版本)，无法提交，需要先update一下。这样你所做的修改也就白费了。25、Revert(回滚)如果你对工作拷贝做了一些修改，但是你又不想要了，那么你可以使用这个选项把所做的修改撤销26、Cleanup(清除状态)如果当前工作拷贝有任何问题的话，可以使用这个选项进行修正。例如，有些文件原来是版本控制的，但是你没有通过tortoiseSVN就直接删除了，但是tortoiseSVN还是保留着原来的信息(每个文件夹下都有一个.svn的隐藏文件夹，存放着当前文件夹下所有文件夹的版本信息)所以这就会产生一些冲突。可以使用cleanup来清理一下。27、GetLock/ReleaseLock(加锁/解锁)如果你不想别人修改某个文件的话，那么你就可以把这个文件进行加锁，这样可以保证只有你对这个文件有修改权。除非你释放了锁，否则别人不可能提交任何修改到配置库中28、Branch/tag(分支/标签) Branch是分支的意思。例如当在设计一个东西的时候，不同的人有不同的实现，但是没有经过实践检验，谁也不想直接覆盖掉其他人的设计，所以可以引出不同的分支。将来如果需要，可以将这些分支进行合并。 tag是打标签的意思。通常当项目开发到一定程度，已经可以稳定运行的时候，可以对其打上一个标签，作为稳定版。将来可以方便的找到某个特定的版本(当然我们也可以使用版本号来查找，但是数字毕竟不方便)SVN对于分支和标签都是采用类似Linux下硬链接的方式(同一个文件可以存在两个地方，删除一个不会影响另一个，所做修改会影响另一个)，来管理文件的，而不是简单的复制一份文件的拷贝，所以不会有浪费存储空间的问题存在。29、Export(导出)这个功能是方便我们部署用。当我们需要发布一个稳定版本时，就可以使用这个功能将整个工程导出到某个文件夹，新的文件夹将不会包含任何版本信息了。30、Relocate(版本库转移)当我们版本库发生转移的时候就需要用到这个功能了。例如我原先的版本库是建在U盘上的，现在转移到(复制整个配置库文件夹)开发服务器上，使用https代替文件系统的访问。因此就需要将原来的工作拷贝的目标版本库重新定位到开发服务器上。31、create patch(创建补丁)创建补丁。如果管理员不想让任何人都随便提交修改，而是都要经过审核才能做出修改，那么其他人就可以通过创建补丁的方式，把修改信息(补丁文件)发送给管理员，管理员审核通过之后就可以使用apply patch提交这次修改了。 功能详解 2123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189SVN命令简介svn add [path]别名：无描述：添加文件或目录到你的wc，打上新增标记。这些文件会在下一次你提交wc的时候提交到svn服务器。在提交前，你也可以用svn revert撤销新增的文件。访问库：否eg: svn add file.cppsvn blame Target[@REV]别名：praise,annotate,ann描述：显示某个已受控文件的每一行的最后修改版本和作者访问库：是eg: svn blame file.cppeg: svn blame --xml file.cpp ##加上xml参数可以以xml格式显示每一行的属性。svn cat TARGET[@REV]别名：无描述：输出指定目标的内容，这里的目标一般是文件。访问库：是eg:svn cat file.cppeg:svn cat file.cpp -r 2 ##显示版本号为二的file.cpp内容。eg:svn cat file.cpp --revision HEAD ##显示最新版本的file.cpp内容。svn checkout URL[@REV]... [PATH]别名：co描述：检出访问库：否eg:svn checkout file:///var/svn/repos/test file:///var/svn/repos/quiz working-copieseg:svn checkout -r 2 file:///var/svn/repos/test mine ##check out 版本号为2的项目svn cleanup [PATH...]别名：无描述：递归的清理WC中过期的锁和未完成的操作。访问库：否eg：svn cleanupsvn commit [PATH...]别名：ci描述：把你WC的更改提交到仓库访问库：是eg：svn commit -m &quot;added howto section.&quot; ##默认情况下提交必须提供log messagesvn copy SRC[@REV]... DST别名：cp描述:copy操作可以从WC到WC；WC到URL；URL到WC；URL到URL。现在SVN只支持同一个仓库内文件的拷贝，不允许跨仓库操作。访问库：是eg：svn copy -r 11 file:///var/svn/repos/test/trunk \\ file:///var/svn/repos/test/tags/0.6.32-prerelease \\ -m &quot;Forgot to tag at rev 11&quot;##copy命令是创建分支和标记的常用方式。copy到url的操作隐含了提交动作，所以需要提供log messages。svn delete PATH...别名：del，remove，rm描述：删除访问库：如果PATH是库地址时会，删除WC内的文件不会。eg：svn del localfile.cpp ##删除WC里的文件，在下一次提交WC的时候才会真正在仓库里将对应文件删除。eg: svn del file:///var/svn/repos/test/yourfile ##删除仓库里的文件svn diff别名：di描述：用来比较并显示修改点。访问库：eg：svn diff ##最常用的方式，用来显示WC基于最近一次更新以后的所有的本地修改点。eg：svn diff -r 301 bin ## 比较WC和版本301中的bin目录的修改点eg：svn diff -r 3000:3500 file:///var/svn/repos/myProject/trunk ##比较库里主干3000版和3500版的差异。eg：svn diff --summarize --xml http://svn.red-bean.com/repos/test@r2 http://svn.red-bean.com/repos/test ##--summarize --xml 参数将差异情况以xml文档的方式显示出来。svn export [-r REV] URL[@PEGREV] [PATH]svn export [-r REV] PATH1[@PEGREV] [PATH2]别名：无描述：导出一个干净的目录树，不包含所有的受控信息。可以选择从URL或WC中导出。访问库：如果访问的是URL则会。eg：svn export file:///var/svn/repos my-export ##导出到my-export目录。svn help — Help!别名：?,h描述：不用解释了访问库：否。svn import [PATH] URL别名：无描述：导入本地一个目录到库中。但是导入后，本地的目录并不会处于受控状态。访问库：是。eg：svn import -m &quot;New import&quot; myproj http://svn.myProject.com/repos/trunk/miscsvn info [TARGET[@REV]...]别名：无描述：显示指定WC和URL信息。访问库：仅当访问的是库路径时。eg：svn info --xml http://svn.myProject.com/repos/test ##将信息以xml格式显示。svn list [TARGET[@REV]...]别名：ls描述：显示目标下的文件和目录列表。访问库：如果访问的是库地址就会。eg：svn list --verbose file:///var/svn/repos ##--verbose参数表示显示详细信息。svn lock TARGET...别名：无描述：对目标获得修改锁。如果目标已被其他用户锁定，则会抛出警告信息。用--force参数强制从其他用户那里获得锁。访问库：是eg：svn lock --force tree.jpgsvn log [PATH]svn log URL[@REV] [PATH...]别名：无描述：从库中显示log消息。log消息代码 A ：added D：deleted M：modified R：replaced访问库：是eg：svn log -v http://svn.myProject.com/repos/test/ foo.c bar.c ##详细显示指定URL的库中foo.c和bar.c所有版本的log信息。eg：svn log -r 14:15 ##显示当前WC的14和15版本log信息。eg：##如果版本号不连续，只能采用如下方式。$ svn log -r 14 &gt; mylog$ svn log -r 19 &gt;&gt; mylog$ svn log -r 27 &gt;&gt; mylogsvn move SRC... DST别名：mv, rename, ren描述：等同于svn copy命令跟个svn delete命令。WC到URL的重命名是不被允许的。访问库：只有当访问库地址时。eg：svn move foo.c bar.c ##将foo.c改名成bar.c。svn resolve PATH...别名：无描述：将冲突的文件标记为已解决，并且删掉冲突产生的临时文件。注意这个命令并不是能把冲突解决，解决冲突还是得靠人工。访问库：否eg：svn resolve --accept mine-full foo.c ##1.5版本后，加上--accept参数，尝试自动处理冲突。svn resolved PATH...别名：无描述：已过时，被resolve --accept取代。去除冲突的状态和冲突临时文件。访问库：否svn revert PATH...别名：无描述：还原WC中所有的本地更改。访问库：否eg：svn revert --depth=infinity . ##将整个目录所有文件还原svn status [PATH...]别名：stat, st描述：输出WC中文件和目录的状态。如果WC提交，这些状态就会同步到库里。一般状态有 &#x27; &#x27; 没有修改&#x27;A&#x27; 新增&#x27;D&#x27; 删除&#x27;M&#x27; 修改&#x27;R&#x27; 替代&#x27;C&#x27; 冲突&#x27;I&#x27; 忽略&#x27;?&#x27; 未受控&#x27;!&#x27; 丢失，一般是将受控文件直接删除导致访问库：加上--show-updates参数时会eg：svn status wcsvn switch URL[@PEGREV] [PATH]svn switch --relocate FROM TO [PATH...]别名：sw描述：将WC转向一个其他的库地址同步访问库：是eg：svn sw http://svn.myProject.com/repos/trunk/vendors . ##将当前WC切换到另一个URLsvn unlock TARGET...别名：无描述：解锁访问库：是eg：svn unlock somefilesvn update [PATH...]别名：up描述：更新WC，更新反馈有如下几种分类。 A 新增B 锁破坏D 删除U 更新C 冲突G 合并E 存在的访问库：是eg：svn up -r22 ##更新到一个指定版本ps:如何去除SVN中保存的用户授权密码在Subversion安装目录下找到auth/svn.simple目录，将下面的文件删除即可。如果在乌龟中，可以setting-&gt;saved data-&gt;Authentication Data 点 clear 即可。参考资料：http://svnbook.red-bean.com/en/1.5/svn.ref.svn.c.checkout.html 功能详解 3123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310*** 转载请注明作者longdick http://longdick.javaeye.com**/SVN版本：1.5 及更新版本名词说明：WC：Working Copy 你的工作区Versioned：受控的；受版本控制的SVN是什么？ *SVN是开源的版本控制系统。 *比CVS更多的特性。一个更好的CVS？因此SVN具有大部分CVS拥有的特性。 *不仅仅是文件受控，目录也加入版本控制。 *复制，删除，重命名这些操作都是受控的。 *特殊作用的元数据(属性)。 *提交事务原子性。提交完成之前任何一个部分都不会正真生效。版本号基于提交，而不是基于文件。提交时的log message也是依附于提交的那个版本。 *创建分支和标记非常简单。简单的通过copy命令就可以创建分支和标记。 *合并跟踪。在合并时协助你处理所有的更改点。 *文件锁定。svn支持文件锁定修改策略。 *Unix的link可以受控了。前提是WC必须在Unix下。 *可选的Apache network server，基于WEBDAV/DeltaV 协议。熟悉Apache的管理员会很喜欢这一点。 *内置的server选择(svnserve)。如果不想用Apache，可以试试Svn自己的server：svnserve。同样也能提供授权和验证，ssh通道等功能。 *方便解析的输出。svn的输出尽量做到方便阅读和方便机器解析。 *冲突解决交互性良好。svn命令行客户端提供多种不同的方式解决冲突。 *svn提供一个实用工具，svnsync来实现从主库到只读附属库的同步。 *持续写入代理功能让只读的附属库专门处理所有的读请求。所有的写请求交给主库处理。这个功能只在使用Apache WebDAV server的时候才有效。 *基于本地化的客户机服务器体系，分层的库，明晰的API方便扩展。 *高效处理二进制文件。 *性能消耗与更改点的数量成正比。 *svn的api可以和多种语言集成。Python，Perl,Java,Ruby(svn本身是用C写的) *ChangeLists功能。Svn的安装分客户端和服务端。你可以在如下地址找到下载：http://subversion.tigris.org/这篇文章主要介绍的是svn客户端的命令，你至少需要安装客户端。默认就是以SVN做版本控制的。如果你不想在自己机器上安装服务版，google code是个练习svn命令的好地方。http://code.google.com上申请托管项目很简单，但是现在不支持svn lock。目前最大支持1G空间。以下是svn客户端常用命令一览：svn add [path]别名：无描述：添加文件或目录到你的wc，打上新增标记。这些文件会在下一次你提交wc的时候提交到svn服务器。在提交前，你也可以用svn revert撤销新增的文件。访问库：否eg: svn add file.cppsvn blame Target[@REV]别名：praise,annotate,ann描述：显示某个已受控文件的每一行的最后修改版本和作者访问库：是eg: svn blame file.cppeg: svn blame --xml file.cpp ##加上xml参数可以以xml格式显示每一行的属性。svn cat TARGET[@REV]别名：无描述：输出指定目标的内容，这里的目标一般是文件。访问库：是eg:svn cat file.cppeg:svn cat file.cpp -r 2 ##显示版本号为二的file.cpp内容。eg:svn cat file.cpp --revision HEAD ##显示最新版本的file.cpp内容。svn changelist CLNAME TARGET...svn changelist --remove TARGET别名：cl描述：可以将wc中的文件从逻辑上分组.访问库：否eg:svn cl clName file.cpp file2.cpp file3.cpp ##将file.cpp等三个文件加入名叫clName的changelisteg:svn commit --changelist clName -m &quot;ci&quot; ##将clName下的所有文件提交svn checkout URL[@REV]... [PATH]别名：co描述：检出访问库：否eg:svn checkout file:///var/svn/repos/test file:///var/svn/repos/quiz working-copieseg:svn checkout -r 2 file:///var/svn/repos/test mine ##check out 版本号为2的项目svn cleanup [PATH...]别名：无描述：递归的清理WC中过期的锁和未完成的操作。访问库：否eg：svn cleanupsvn commit [PATH...]别名：ci描述：把你WC的更改提交到仓库访问库：是eg：svn commit -m &quot;added howto section.&quot; ##默认情况下提交必须提供log messagesvn copy SRC[@REV]... DST别名：cp描述:copy操作可以从WC到WC；WC到URL；URL到WC；URL到URL。现在SVN只支持同一个仓库内文件的拷贝，不允许跨仓库操作。访问库：是eg：svn copy -r 11 file:///var/svn/repos/test/trunk \\ file:///var/svn/repos/test/tags/0.6.32-prerelease \\ -m &quot;Forgot to tag at rev 11&quot;##copy命令是创建分支和标记的常用方式。copy到url的操作隐含了提交动作，所以需要提供log messages。svn delete PATH...别名：del，remove，rm描述：删除访问库：如果PATH是库地址时会，删除WC内的文件不会。eg：svn del localfile.cpp ##删除WC里的文件，在下一次提交WC的时候才会真正在仓库里将对应文件删除。eg: svn del file:///var/svn/repos/test/yourfile ##删除仓库里的文件svn diff别名：di描述：用来比较并显示修改点。访问库：eg：svn diff ##最常用的方式，用来显示WC基于最近一次更新以后的所有的本地修改点。eg：svn diff -r 301 bin ## 比较WC和版本301中的bin目录的修改点eg：svn diff -r 3000:3500 file:///var/svn/repos/myProject/trunk ##比较库里主干3000版和3500版的差异。eg：svn diff --summarize --xml http://svn.red-bean.com/repos/test@r2 http://svn.red-bean.com/repos/test ##--summarize --xml 参数将差异情况以xml文档的方式显示出来。svn export [-r REV] URL[@PEGREV] [PATH]svn export [-r REV] PATH1[@PEGREV] [PATH2]别名：无描述：导出一个干净的目录树，不包含所有的受控信息。可以选择从URL或WC中导出。访问库：如果访问的是URL则会。eg：svn export file:///var/svn/repos my-export ##导出到my-export目录。svn help — Help!别名：?,h描述：不用解释了访问库：否。svn import [PATH] URL别名：无描述：导入本地一个目录到库中。但是导入后，本地的目录并不会处于受控状态。访问库：是。eg：svn import -m &quot;New import&quot; myproj http://svn.myProject.com/repos/trunk/miscsvn info [TARGET[@REV]...]别名：无描述：显示指定WC和URL信息。访问库：仅当访问的是库路径时。eg：svn info --xml http://svn.myProject.com/repos/test ##将信息以xml格式显示。svn list [TARGET[@REV]...]别名：ls描述：显示目标下的文件和目录列表。访问库：如果访问的是库地址就会。eg：svn list --verbose file:///var/svn/repos ##--verbose参数表示显示详细信息。svn lock TARGET...别名：无描述：对目标获得修改锁。如果目标已被其他用户锁定，则会抛出警告信息。用--force参数强制从其他用户那里获得锁。访问库：是eg：svn lock --force tree.jpgsvn log [PATH]svn log URL[@REV] [PATH...]别名：无描述：从库中显示log消息。log消息代码 A ：added D：deleted M：modified R：replaced访问库：是eg：svn log -v http://svn.myProject.com/repos/test/ foo.c bar.c ##详细显示指定URL的库中foo.c和bar.c所有版本的log信息。eg：svn log -r 14:15 ##显示当前WC的14和15版本log信息。eg：##如果版本号不连续，只能采用如下方式。$ svn log -r 14 &gt; mylog$ svn log -r 19 &gt;&gt; mylog$ svn log -r 27 &gt;&gt; mylogsvn merge sourceURL1[@N] sourceURL2[@M] [WCPATH]svn merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]svn merge [[-c M]... | [-r N:M]...] [SOURCE[@REV] [WCPATH]]别名：无描述：合并两个受控源的不同之处，存放到一个WC里。访问库：只有当访问库地址时。eg：svn merge --reintegrate http://svn.example.com/repos/calc/branches/my-calc-branch ##合并分支上的改变项到WC，往往用于分支合并到主干。eg：svn merge -r 156:157 http://svn.example.com/repos/calc/branches/my-calc-branch ##将制定URL版本156到157的所有更新合并到WC。svn mkdir PATH...svn mkdir URL...别名：无描述：在WC或库路径创建目录访问库：只有当访问库地址时。eg：svn mkdir newdirsvn move SRC... DST别名：mv, rename, ren描述：等同于svn copy命令跟个svn delete命令。WC到URL的重命名是不被允许的。访问库：只有当访问库地址时。eg：svn move foo.c bar.c ##将foo.c改名成bar.c。svn propdel PROPNAME [PATH...]svn propdel PROPNAME --revprop -r REV [TARGET]别名：pdel, pd描述：从受控文件，目录等删除属性。第二种是删除某个指定版本上的附加属性。访问库：只有当访问库地址时。eg：svn propdel svn:mime-type someFile ##从someFile上移除svn:mime-type这个属性。svn propedit PROPNAME TARGET...svn propedit PROPNAME --revprop -r REV [TARGET]别名：pedit, pe描述：编辑属性访问库：只有当访问库地址时。eg：svn propedit svn:keywords file.c ##修改file.c上的svn:keywords属性。svn propget PROPNAME [TARGET[@REV]...]svn propget PROPNAME --revprop -r REV [URL]别名：pget,pg描述：从文件，目录或版本取得指定属性的值。访问库：只有当访问库地址时。eg：svn propget svn:keywords file.c ##从file.c中取得svn:keywords属性的值svn proplist [TARGET[@REV]...]svn proplist --revprop -r REV [TARGET]别名：plist, pl描述：列出文件、目录或版本上的所有附加属性访问库：只有当访问库地址时。eg：svn proplist --verbose file.csvn propset PROPNAME [PROPVAL | -F VALFILE] PATH...svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [TARGET]别名：pset,ps描述：给文件、目录或版本附加属性并赋值访问库：只有当访问库地址时。eg：svn propset svn:mime-type image/jpeg file.jpg ##给file.jpg附加属性svn:mime-type 其值为image/jpegeg:svn propset --revprop -r 25 svn:log &quot;Journaled about trip to New York.&quot;##给版本25补上log messageeg:svn propset svn:ignore &#x27;.classpath&#x27; .##在本地忽略掉.classpath文件svn resolve PATH...别名：无描述：将冲突的文件标记为已解决，并且删掉冲突产生的临时文件。注意这个命令并不是能把冲突解决，解决冲突还是得靠人工。访问库：否eg：svn resolve --accept mine-full foo.c ##1.5版本后，加上--accept参数，尝试自动处理冲突。svn resolved PATH...别名：无描述：已过时，被resolve --accept取代。去除冲突的状态和冲突临时文件。访问库：否svn revert PATH...别名：无描述：还原WC中所有的本地更改。访问库：否eg：svn revert --depth=infinity . ##将整个目录所有文件还原svn status [PATH...]别名：stat, st描述：输出WC中文件和目录的状态。如果WC提交，这些状态就会同步到库里。一般状态有 &#x27; &#x27; 没有修改&#x27;A&#x27; 新增&#x27;D&#x27; 删除&#x27;M&#x27; 修改&#x27;R&#x27; 替代&#x27;C&#x27; 冲突&#x27;I&#x27; 忽略&#x27;?&#x27; 未受控&#x27;!&#x27; 丢失，一般是将受控文件直接删除导致访问库：加上--show-updates参数时会eg：svn status wcsvn switch URL[@PEGREV] [PATH]svn switch --relocate FROM TO [PATH...]别名：sw描述：将WC转向一个其他的库地址同步访问库：是eg：svn sw http://svn.myProject.com/repos/trunk/vendors . ##将当前WC切换到另一个URLsvn unlock TARGET...别名：无描述：解锁访问库：是eg：svn unlock somefilesvn update [PATH...]别名：up描述：更新WC，更新反馈有如下几种分类。 A 新增B 锁破坏D 删除U 更新C 冲突G 合并E 存在的访问库：是eg：svn up -r22 ##更新到一个指定版本ps:如何去除SVN中保存的用户授权密码在Subversion安装目录下找到auth/svn.simple目录，将下面的文件删除即可。如果在乌龟中，可以setting-&gt;saved data-&gt;Authentication Data 点 clear 即可。参考资料：http://svnbook.red-bean.com/en/1.5/svn.ref.svn.c.checkout.html 功能模块SVN EXCEL 比对工具SVN WORD 比对工具SVN 创建分支12345678910# copy trunksvn copy svn://127.0.0.1/repos/trunk svn://127.0.0.1/repos/tags/suzhou-prod-1.1.1.190920_release -m &quot;创建tags suzhou-prod-1.1.1.190920_release&quot;# 在其中修改提交即可 提交到单独的分支 branchs/branch_01如果SVN中显示(env) [scfan@scfan tags]$ svn st suzhou-prod-1.1.1.190920_release? suzhou-prod-1.1.1.190920_release但是里面内容已经提交了mv suzhou-prod-1.1.1.190920_release suzhou-prod-1.1.1.190920_release_baksvn up 即可 提交时 忽略文件/文件夹@创建日期: 2018-06-28@创建作者: scfan 方法 1: 配置忽略文件对版本库修改，客户端无影响。 123456789101112131415161718192021222324252627步骤1：配置SVN默认编辑器vi ~/.bash_profile最后一行加上：export SVN_EDITOR=vim # 定义svn editor为vim编辑步骤2：让配置生效source ~/.bash_profile步骤3.设置忽略文件：先切换到项目目录，如test输入：svn propedit svn:ignore . #‘.’号需加上，代表当前目录；输入需要忽略的文件/文件夹如：conf/db.php #代表忽略conf文件下db.php这个文件uploads #代表忽略uploads这个文件夹以上忽略的文件都是该项目目录的相对路径！步骤4：检验忽略是否成功然后使用svn st查看，会显示：M conf/db.php我们需要提交，然后这个svn:ignore属性才会起作用svn ci -m &#x27;忽略test.php文件&#x27;这时候，无论你如何修改conf/db.php文件，再使用svn st时，也不会出现修改提示符合M了。 方法 2：配置客户端对客户端修改，版本库无影响。 12345678svn 客户端的配置对 svn 命令的配置文件修改即可。进入个人用户目录$ vim .subversion/config找到包含 [miscellany] 这一行，取消注释，然后编辑包含 global-ignores 的那一行，取消注释，并添加需要过滤文件的通配符即可。如下所示：注意开头不能有空格，否则svn会报错。global-ignores = *.so *.a *.o *.lo *.la .*.rej *.rej .*~ *~ .#* .DS_Store这个配置是对客户端的修改，对版本库没有任何影响。同时，这个配置也是全局的，适用于本机所有 svn 管理的项目。","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Linux-关机前执行脚本","slug":"Languages/Linux/linux-restart-scripts","date":"2021-10-23T11:54:51.110Z","updated":"2021-10-23T11:54:51.110Z","comments":true,"path":"Languages/Linux/linux-restart-scripts.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-restart-scripts.md/","excerpt":"","text":"Centos7 关机和重启前执行自定义脚本Centos7 关机和重启前执行自定义脚本 创建服务: vim /etc/systemd/system/my-powerdown.service创建该文件然后加入下面的内容，需要把ExecStart=/home/my_script这一行换成自己的脚本路径 1234567891011121314[Unit]Description=close services before reboot and shutdownDefaultDependencies=noBefore=shutdown.target reboot.target halt.target# This works because it is installed in the target and will be# executed before the target state is entered# Also consider kexec.target[Service]Type=oneshotExecStart=/home/my_script #your path and filename[Install]WantedBy=halt.target reboot.target shutdown.target 启动服务: 12345678910# 执行命令：systemctl start my-powerdown.service# 启动刚写好的服务。systemctl status my-powerdown.service由于本服务指定了只执行一次。所以运行 enable 服务 不起作用。可以将启动服务的命令加到开机执行脚本中。这样就保证了服务一直是开启状态。保证你设置的脚本能够在关机前正常运行","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-功能模块-服务器时间同步","slug":"Languages/Linux/linux-ntpd","date":"2021-10-23T11:54:51.109Z","updated":"2021-10-23T11:54:51.109Z","comments":true,"path":"Languages/Linux/linux-ntpd.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-ntpd.md/","excerpt":"","text":"tags: 时间同步 ntdp chrony Linux 说明: 分布式多台服务器时需要配置时间同步机制。 对于集群或者跨服务器的系统而言，需要统一服务器时间 能够连接外网的机器可以所有机器和网络时间同步 不能连接外网的机器可以所有机器和第一台同步 主机需要和网络时间同步。 ntpd 时间同步前置依赖 多主机必须在 /etc/hosts 中有注册信息 多主机之间可以互相访问 12# 安装 ntpyum install ntp ntpdate -y 服务器配置 1234567891011121314151617181920212223# 配置文件 如图所示，增加 restrict，并注释原本的 server。# 需要修改 restrict 的 IP 网段。其他不变服务器 1 ------------------------------------ ntp 服务器[root@ES1 ~]# vim /etc/ntp.confrestrict 192.168.0.0 mask 255.255.0.0 nomodify notrapserver 127.127.1.0fudge 127.127.1.0stratum 8# 开启服务 &amp; 查看服务状态service ntpd restart &amp;&amp; service ntpd status[root@ES1 ~]# ntpq -premote refid st t when poll reach delay offset jitter==============================================================================*LOCAL(0) .LOCL. 5 l 11 64 377 0.000 0.000 0.000[root@ES1 ~]# ntpq -4premote refid st t when poll reach delay offset jitter==============================================================================*LOCAL(0) .LOCL. 5 l 46 64 377 0.000 0.000 0.000[root@ES1 ~]# ntpq -6premote refid st t when poll reach delay offset jitter==============================================================================\\*LOCAL(0) .LOCL. 5 l 53 64 377 0.000 0.000 0.000 客户端配置 123456789101112131415161718服务器 2 ------------------------------------ 同步跟随于服务器 1 的时间[root@ES2 ~]# yum install ntp -y[root@ES2 ~]# vim /etc/ntp.conf注释# server 0# server 1# server 2# server 3server ES1 # ES1 是 服务器 1 的主机名称[root@ES2 ~]# service ntpd restart[root@ES2 ~]# ntpq -p ES1 或 ntpq -p local# 设置开机自启chkconfig ntpd onsystemctl enable ntpd注：修改完后非立即生效，需要等待 15min 左右。使用 date 查看当前服务器时间 chrony 时间同步 chrony 时间同步参考链接 详解：Linux Chrony 设置服务器集群同步时间 ntp ntpd 是古老的时间同步命令，chrony 是新出已经给应用到 CentoS7 之后的时间同步命令，建议使用 chrony . 网络时间同步修改配置文件 /etc/chrony.conf 12345678910111213141516171819202122232425262728293031323334# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).# pool 2.centos.pool.ntp.org iburst## 上游公共 ntp 服务器server 0.centos.pool.ntp.org iburst # 增加远程网络server 1.centos.pool.ntp.org iburst # 增加远程网络server 2.centos.pool.ntp.org iburst # 增加远程网络server 3.centos.pool.ntp.org iburst # 增加远程网络# Record the rate at which the system clock gains/losses time.driftfile /var/lib/chrony/drift# Allow the system clock to be stepped in the first three updates# if its offset is larger than 1 second.makestep 1.0 3# Enable kernel synchronization of the real-time clock (RTC).rtcsync# Enable hardware timestamping on all interfaces that support it.#hwtimestamp *# Increase the minimum number of selectable sources required to adjust# the system clock.#minsources 2# Allow NTP client access from local network.#allow 192.168.0.0/16allow 192.168.0.0/16 # 添加本机网段# Serve time even if not synchronized to a time source.#local stratum 10local stratum 10 # 解除注释 配置 chrony 123456789101112131415161718192021222324252627282930313233[root@fdm ~]# systemctl restart chronyd.service[root@fdm ~]# systemctl enable chronyd.service[root@fdm ~]# dateFri Jun 12 00:58:00 CST 2020[root@fdm ~]# chronyc sources -v210 Number of sources = 1 .-- Source mode &#x27;^&#x27; = server, &#x27;=&#x27; = peer, &#x27;#&#x27; = local clock. / .- Source state &#x27;*&#x27; = current synced, &#x27;+&#x27; = combined , &#x27;-&#x27; = not combined,| / &#x27;?&#x27; = unreachable, &#x27;x&#x27; = time may be in error, &#x27;~&#x27; = time too variable.|| .- xxxx [ yyyy ] +/- zzzz|| Reachability register (octal) -. | xxxx = adjusted offset,|| Log2(Polling interval) --. | | yyyy = measured offset,|| \\ | | zzzz = estimated error.|| | | \\MS Name/IP address Stratum Poll Reach LastRx Last sample===============================================================================^? 203.107.6.88 0 6 0 - +0ns[ +0ns] +/- 0ns[root@fdm ~]# timedatectl Local time: Tue 2020-06-16 10:40:24 CST Universal time: Tue 2020-06-16 02:40:24 UTC RTC time: Thu 2020-06-11 11:12:33 Time zone: Asia/Shanghai (CST, +0800)System clock synchronized: yes NTP service: active RTC in local TZ: no[root@fdm ~]# dateTue Jun 16 10:40:31 CST 2020 集群时间同步常用命令123456789101112## 查看 ntp_servers 状态chronyc sources -v## 查看 ntp_sync 状态chronyc sourcestats -v## 查看 ntp_servers 是否在线chronyc activity -v## 查看 ntp 详细信息chronyc tracking -v 附件参考链接：CentOS 下 NTP 安装配置","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"","slug":"Languages/Linux/linux-pip","date":"2021-10-23T11:54:51.109Z","updated":"2021-10-23T11:54:51.109Z","comments":true,"path":"Languages/Linux/linux-pip.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-pip.md/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Linux-Raid配置","slug":"Languages/Linux/linux-raid","date":"2021-10-23T11:54:51.109Z","updated":"2021-10-23T11:54:51.110Z","comments":true,"path":"Languages/Linux/linux-raid.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-raid.md/","excerpt":"","text":"附件参考资源 [*] 服务器 RAID0，RAID1,RAID10,RAID3，RAID5 详细解说","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-Locale","slug":"Languages/Linux/linux-locale","date":"2021-10-23T11:54:51.108Z","updated":"2021-10-23T11:54:51.108Z","comments":true,"path":"Languages/Linux/linux-locale.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-locale.md/","excerpt":"","text":"Locale 是根据计算机用户所使用的语言，所在国家或者地区，以及当地的文化传统所定义的一个软件运行时的语言环境。 Locale 包括语言(Language), 地域 (Territory) 和字符集(Codeset)。一个 locale 的书写格式为: **语言[_地域[.字符集]]**。完全的 locale 表达方式是 **[语言[_地域][.字符集] [@修正值]*。zhCN.GB2312 ＝中文*中华人民共和国＋国标 2312 字符集。 Locale 基本概念123456781 名称： 对外的接口，用来建立(语系+字符集)的映射关系2 语系： 决定了该语言包括哪些字符(unicode的字符序号来定义的，字符序号和字符编码不是一回事，字符序号是统一的)，以及这些字符的表现格式等3 字符集： 用于该语系的字符编码4 字体 用于把字符集的编码转换成屏幕上的字体显示 locale 涉及到的配置123456781 /etc/sysconfig/i18n： 设置默认的语系名称(缺省设置，每个登录用户可以自己设置来覆盖缺省值)2 /usr/lib/locale/： 语系名称文件(记录所有 语系+字符集 的映射关系)3 /usr/share/i18n/locales/： 所有的语系文件(记录语系中包含哪些字符序号，有哪些表现形式)4 /usr/share/i18n/charmaps/： 所有的字符编码文件 locale 涉及到的环境变量12341 LC_ALL2 LC_*3 LANG(环境变量，通常用这个就行了)4 LC_ALL &gt; LC_* &gt; LANG Locale 常量含义1234567891011121314LANG=语言LC_CTYPE=语言符号及分类LC_NUMERIC=数字LC_TIME=时间LC_COLLATE=比较和习惯LC_MONETARY=货币LC_MESSAGES=信息表达LC_PAPER=默认纸张尺寸大小LC_NAME=姓名书写方式LC_ADDRESS=地址书写方式LC_TELEPHONE=电话号码书写方式LC_MEASUREMENT=度量衡表达方式LC_IDENTIFICATION=对locale自身包含信息的概述LC_ALL= 从优先级角度：LCALL &gt; LC* &gt; LANG Locale 常用命令1234567# 查看现有语言环境locale# 可用语言环境locale -a# 临时修改语言环境export LANG=en_US.UTF-8export LANG=zh_CN.UTF-8 永久修改系统级字符集: 12345678910/etc/sysconfig/i18n# 英文版系统：LANG=&quot;en_US.UTF-8&quot;SYSFONT=&quot;latarcyrheb-sun16&quot;# 中文版系统：LANG=&quot;zh_CN.UTF-8&quot;或者LANG=&quot;zh_CN.gbk&quot;SYSFONT=&quot;latarcyrheb-sun16&quot;","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"网络配置","slug":"Languages/Linux/linux-network","date":"2021-10-23T11:54:51.108Z","updated":"2021-10-23T11:54:51.108Z","comments":true,"path":"Languages/Linux/linux-network.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-network.md/","excerpt":"","text":"说明: 详细文档详见 印象笔记中《配置静态IP》 Cenots7-网络配置TODO Centos8-网络配置12345678910111213141516171819202122232425# 重启网络nmcli c reload# 桥接网络-配置静态网络(仅供参考)# 文件 /etc/sysconfig/network-scripts/ifcfg-enp0s3TYPE=&quot;Ethernet&quot;PROXY_METHOD=&quot;none&quot;BROWSER_ONLY=&quot;no&quot;DEFROUTE=&quot;yes&quot;IPV4_FAILURE_FATAL=&quot;no&quot;IPV6INIT=&quot;yes&quot;IPV6_AUTOCONF=&quot;yes&quot;IPV6_DEFROUTE=&quot;yes&quot;IPV6_FAILURE_FATAL=&quot;no&quot;IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;NAME=&quot;enp0s3&quot;UUID=&quot;8b27dabc-8940-4697-be98-57ac96559def&quot;DEVICE=&quot;enp0s3&quot;ONBOOT=&quot;yes&quot;# BOOTPROTO=&quot;dhcp&quot;BOOTPROTO=&quot;static&quot;IPADDR=192.168.0.177GATEWAY=192.168.0.102 # 根据实际修改NETMASK=255.255.255.0","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-NFS配置","slug":"Languages/Linux/linux-nfs","date":"2021-10-23T11:54:51.108Z","updated":"2021-10-23T11:54:51.108Z","comments":true,"path":"Languages/Linux/linux-nfs.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-nfs.md/","excerpt":"","text":"环境说明： CentOS8.1.19 配置 NFS容器内部配置 NFS 特殊说明 在 docker 中开启 NFS 服务需要挂载主机的目录，才能通过 NFS 共享。 exp: docker run -dit -v /mnt:/data xxxx, 只有容器内的 nfs_data 才可以进行 nfs 共享 环境说明 Docker 容器 服务器 IP 172.21.0.111 容器内目录 /data Docker 容器 客户端 IP 172.21.0.150 容器内目录 /nfs_data 注意事项: 服务器关机时，先关闭 NFS 客户端，最后关闭 NFS 服务端。 服务器开机时，先开启 NFS 服务端，最后开启 NFS 客户端。 服务器配置因为 centos7 自带了 rpcbind，所以不用安装 rpc 服务，rpc 监听在 111 端口，可以使用 ss -tnulp | grep 111 查看 rpc 服务是否自动启动，如果没有启动，就 systemctl start rpcbind 启动 rpc 服务。rpc 在 nfs 服务器搭建过程中至关重要，因为 rpc 能够获得 nfs 服务器端的端口号等信息，nfs 服务器端通过 rpc 获得这些信息后才能连接 nfs 服务器端 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 安装 nfs 服务yum -y install nfs-utils# 查看 nfs 服务是否安装成功[root@b9fed615b76b ~]#nfs-utils-2.3.3-31.el8.x86_64# 修改文件 /etc/exports 添加如下内容/data 172.21.0.0/24(rw,sync,no_root_squash,insecure)# TODO exports 中 rw,sync,no_root_squash,insecure 参数说明# 启动服务 耗时 10s-1min 不等systemctl restart nfs-server# 查看 NFS[root@b9fed615b76b ~]# rpcinfo -p 172.21.0.111 program vers proto port service 100000 4 tcp 111 portmapper 100000 3 tcp 111 portmapper 100000 2 tcp 111 portmapper 100000 4 udp 111 portmapper 100000 3 udp 111 portmapper 100000 2 udp 111 portmapper 100005 1 udp 20048 mountd 100005 1 tcp 20048 mountd 100005 2 udp 20048 mountd 100005 2 tcp 20048 mountd 100005 3 udp 20048 mountd 100005 3 tcp 20048 mountd 100003 3 tcp 2049 nfs 100003 4 tcp 2049 nfs 100227 3 tcp 2049 nfs_acl 100021 1 udp 43144 nlockmgr 100021 3 udp 43144 nlockmgr 100021 4 udp 43144 nlockmgr 100021 1 tcp 44159 nlockmgr 100021 3 tcp 44159 nlockmgr 100021 4 tcp 44159 nlockmgr# 检查 export 内容是否正常[root@b9fed615b76b ~]# showmount -e localhostExport list for localhost:/data 172.21.0.0/24# 修改 NFS 目录权限，不然其他用户无法修改chown -R 777 /data# 开机自启服务systemctl enable nfs-serversystemctl enable rpcbind 客户端配置12345678910111213141516# 安装 NFS 服务, 利用附带的 showmount 工具，查看nfs服务是否正常yum -y install nfs-utils# 检测rpc是否启动rpcinfo -p# 使用showmount -e 查看 nfs 服务[root@85d31196f0c6 neo4j-community-3.3.5]# showmount -e 172.21.0.111Export list for 172.21.0.111:/data 172.21.0.0/24# 挂载到本地目录(服务器重启后失效)mount -t nfs 172.21.0.111:/data /nfs_data# 自动挂载nfs功能 (可选) - 远程nfs存在问题时，会导致重启慢(需要根据需求配置)# 加入 /etc/rc.d/rc.local 即可 必选配置Linux 关机或重启时提示 A stop job is running forLinux 关机或重启时提示 A stop job is running for .. 导致关机慢。 修改方法 1234567vim /etc/systemd/system.conf修改下面两个变量为： 生产服务器60s,开发服务器10sDefaultTimeoutStartSec=60sDefaultTimeoutStopSec=60sDefaultRestartSec=100ms# 执行命令systemctl daemon-reload 可选配置挂载优化在企业工作场景，一般来说，NFS 服务器共享的只是普通静态数据(图片、附件、视频)，不需要执行 suid、exec 等权限，挂载的这个文件系统只能作为数据存取之用，无法执行程序，对于客户端来讲增加了安全性，例如：很多木马篡改站点文件都是由上传入口上传的程序到存储目录，然后执行的。 因此在挂载的时候，用下面的命令很有必要： 12# 安全挂载 只做数据存取 无法执行程序 根据需求使用mount -t nfs -o nosuid,noexec,nodev,rw 172.21.0.111:/data /nfs_data 附件问题记录reason given by server: No such file or directory1234567891011# 问题背景[root@f3a3540cb8e5 ~]# mount -t nfs 192.168.101.74:/data_storage/fdm_neo4j/import /data/neo4j_import_datamount.nfs: mounting 192.168.101.74:/data_storage/fdm_neo4j/import failed, reason given by server: No such file or directory# 原有 /etc/exports 配置/data_storage/fdm_neo4j/import 172.16.2.0/24(rw,sync,no_root_squash,insecure)# 解决方案增加 fsid=0 参数后，重启服务/data_storage/fdm_neo4j/import 172.16.2.0/24(rw,sync,no_root_squash,insecure,fsid=0)systemctl restart nfs-server 参考资源 Docker 下配置 nfs 详见此文档：Linux 下的 NFS 系统简介","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-HTTPS证书配置","slug":"Languages/Linux/linux-https-cert","date":"2021-10-23T11:54:51.107Z","updated":"2021-10-23T11:54:51.107Z","comments":true,"path":"Languages/Linux/linux-https-cert.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-https-cert.md/","excerpt":"","text":"环境说明 CentOS 8.1.1 httpd 2.4.37 机器 IP: 192.168.172.73 主机名: fdm 说明事项 文件修改前备份 证书等位置 储存在 /etc/httpd/extra/https_cert 配置说明证书配置生成服务器证书, root 用户 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 创建目录mkdir -p /etc/httpd/extra/https_cert/cd /etc/httpd/extra/https_cert/# 建立服务器密钥 必须2048以上，否则会提示 ee key too small，从而无法启动Apache[root@fdm https_cert]# openssl genrsa -des3 2048 &gt; /etc/httpd/extra/https_cert/server.keyGenerating RSA private key, 2048 bit long modulus (2 primes).....................+++++.+++++e is 65537 (0x010001)Enter pass phrase:Verifying - Enter pass phrase:# 从密钥中删除密码(以避免系统启动后被询问口令)[root@fdm https_cert]# openssl rsa -in /etc/httpd/extra/https_cert/server.key &gt; /etc/httpd/extra/https_cert/server2.keyEnter pass phrase for /usr/local/apache/conf/server.key:writing RSA key[root@fdm https_cert]# mv /etc/httpd/extra/https_cert/server2.key /etc/httpd/extra/https_cert/server.keymv: overwrite &#x27;/etc/httpd/extra/https_cert/server.key&#x27;? y# 建立服务器密钥请求文件[root@fdm https_cert]# openssl req -new -key /etc/httpd/extra/https_cert/server.key -out /etc/httpd/extra/https_cert/server.csrYou are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#x27;.&#x27;, the field will be left blank.-----Country Name (2 letter code) [XX]:State or Province Name (full name) []:Locality Name (eg, city) [Default City]:Organization Name (eg, company) [Default Company Ltd]:Organizational Unit Name (eg, section) []:Common Name (eg, your name or your server s hostname) []:fdmEmail Address []:Please enter the following extra attributesto be sent with your certificate requestA challenge password []:An optional company name []:# 建立服务器证书[root@fdm conf]# openssl x509 -in /etc/httpd/extra/https_cert/server.csr -out /etc/httpd/extra/https_cert/server.crt -req -signkey /etc/httpd/extra/https_cert/server.key -days 365Signature oksubject=C = XX, L = Default City, O = Default Company Ltd, CN = fdmGetting Private key[root@fdm https_cert]# pwd/etc/httpd/extra/https_cert[root@fdm https_cert]# lltotal 12-rw-r--r-- 1 root root 1155 Jun 19 18:21 server.crt-rw-r--r-- 1 root root 972 Jun 19 18:20 server.csr-rw-r--r-- 1 root root 1679 Jun 19 18:20 server.key# 项目用户 fdm 需要有证书的读写权限chmod 777 -R /etc/httpd/extra/https_cert/server* Apache 配置安装依赖包123yum install httpd -yyum install openssl openssl-devel httpd-devel -yyum install mod_ssl -y fdm.conf 配置文件路径 /etc/httpd/conf.d/fdm.conf 123456789101112# 配置原有 HTTP服务User fdmGroup fdm# HTTP&lt;VirtualHost *:80&gt; DocumentRoot &quot;/home/fdm/quick/web/fdm&quot; &lt;Directory &quot;/home/fdm/quick/web/fdm&quot;&gt; options Indexes MultiViews AllowOverride all Allow from all &lt;/Directory&gt;&lt;/VirtualHost&gt; ssl.conf 配置文件路径 /etc/httpd/conf.d/ssl.conf 修改内容如下: 1234567891011121314151617181920212223242526272829# 如果 ssl.conf 文件不存在，yum install mod_ssl -y# 增加 LoadModuleLoadModule ssl_module modules/mod_ssl.so# 修改 Listen 443Listen 443 https# 增加 指定证书路径SSLCertificateFile /etc/httpd/extra/https_cert/server.crt# 增加 指定Key路径SSLCertificateKeyFile /etc/httpd/extra/https_cert/server.key# 增加 VirtualHost&lt;VirtualHost *:443&gt; DocumentRoot &quot;/home/fdm/quick/web/fdm&quot; ServerName 192.168.172.73:443 &lt;Proxy *&gt; Order deny,allow Allow from all &lt;/Proxy&gt; SSLEngine On SSLProxyEngine On SSLProxyVerify none SSLProxyCheckPeerCN off SSLProxyCheckPeerName off SSLCertificateFile &quot;/etc/httpd/extra/https_cert/server.crt&quot; SSLCertificateKeyFile &quot;/etc/httpd/extra/https_cert/server.key&quot; ProxyRequests Off ProxyPreserveHost On&lt;/VirtualHost&gt; 文件内容如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260## This is the Apache server configuration file providing SSL support.# It contains the configuration directives to instruct the server how to# serve pages over an https connection. For detailing information about these# directives see &lt;URL:http://httpd.apache.org/docs/2.2/mod/mod_ssl.html&gt;## Do NOT simply read the instructions in here without understanding# what they do. They&#x27;re here only as hints or reminders. If you are unsure# consult the online docs. You have been warned.#LoadModule ssl_module modules/mod_ssl.so# When we also provide SSL we have to listen to the# the HTTPS port in addition.#Listen 443 https# HTTP -&gt; HTTPS# &lt;IfModule mod_rewrite.c&gt;# RewriteEngine On# RewriteBase /# RewriteCond %&#123;SERVER_PORT&#125; 80# RewriteRule ^(.*)$ https://blog.mimvp.com/$1 [R=301,L]# &lt;/IfModule&gt;# HTTPS -&gt; HTTP# &lt;IfModule mod_rewrite.c&gt;# RewriteEngine On# RewriteBase /# RewriteCond %&#123;SERVER_PORT&#125; 443# RewriteRule ^(.*)$ https://blog.mimvp.com/$1 [R=301,L]# &lt;/IfModule&gt;#### SSL Global Context#### All SSL configuration in this context applies both to## the main server and all SSL-enabled virtual hosts.### Pass Phrase Dialog:# Configure the pass phrase gathering process.# The filtering dialog program (`builtin&#x27; is a internal# terminal dialog) has to provide the pass phrase on stdout.SSLPassPhraseDialog builtin# Inter-Process Session Cache:# Configure the SSL Session Cache: First the mechanism# to use and second the expiring timeout (in seconds).SSLSessionCache shmcb:/var/cache/mod_ssl/scache(512000)SSLSessionCacheTimeout 300# Semaphore:# Configure the path to the mutual exclusion semaphore the# SSL engine uses internally for inter-process synchronization.# SSLMutex defaultMutex default# Pseudo Random Number Generator (PRNG):# Configure one or more sources to seed the PRNG of the# SSL library. The seed data should be of good random quality.# WARNING! On some platforms /dev/random blocks if not enough entropy# is available. This means you then cannot use the /dev/random device# because it would lead to very long connection times (as long as# it requires to make more entropy available). But usually those# platforms additionally provide a /dev/urandom device which doesn&#x27;t# block. So, if available, use this one instead. Read the mod_ssl User# Manual for more details.SSLRandomSeed startup file:/dev/urandom 256SSLRandomSeed connect builtin#SSLRandomSeed startup file:/dev/random 512#SSLRandomSeed connect file:/dev/random 512#SSLRandomSeed connect file:/dev/urandom 512## Use &quot;SSLCryptoDevice&quot; to enable any supported hardware# accelerators. Use &quot;openssl engine -v&quot; to list supported# engine names. NOTE: If you enable an accelerator and the# server does not start, consult the error logs and ensure# your accelerator is functioning properly.#SSLCryptoDevice builtin#SSLCryptoDevice ubsec#### SSL Virtual Host Context##&lt;VirtualHost _default_:443&gt;# General setup for the virtual host, inherited from global configuration#DocumentRoot &quot;/var/www/html&quot;#ServerName www.example.com:443# Use separate log files for the SSL virtual host; note that LogLevel# is not inherited from httpd.conf.ErrorLog logs/ssl_error_logTransferLog logs/ssl_access_logLogLevel warn# SSL Engine Switch:# Enable/Disable SSL for this virtual host.SSLEngine on# SSL Protocol support:# List the enable protocol levels with which clients will be able to# connect. Disable SSLv2 access by default:SSLProtocol all -SSLv2# SSL Cipher Suite:# List the ciphers that the client is permitted to negotiate.# See the mod_ssl documentation for a complete list.SSLCipherSuite DEFAULT:!EXP:!SSLv2:!DES:!IDEA:!SEED:+3DES# Server Certificate:# Point SSLCertificateFile at a PEM encoded certificate. If# the certificate is encrypted, then you will be prompted for a# pass phrase. Note that a kill -HUP will prompt again. A new# certificate can be generated using the genkey(1) command.# SSLCertificateFile /etc/pki/tls/certs/localhost.crtSSLCertificateFile /etc/httpd/extra/https_cert/server.crt# Server Private Key:# If the key is not combined with the certificate, use this# directive to point at the key file. Keep in mind that if# you&#x27;ve both a RSA and a DSA private key you can configure# both in parallel (to also allow the use of DSA ciphers, etc.)# SSLCertificateKeyFile /etc/pki/tls/private/localhost.keySSLCertificateKeyFile /etc/httpd/extra/https_cert/server.key# Server Certificate Chain:# Point SSLCertificateChainFile at a file containing the# concatenation of PEM encoded CA certificates which form the# certificate chain for the server certificate. Alternatively# the referenced file can be the same as SSLCertificateFile# when the CA certificates are directly appended to the server# certificate for convinience.#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt# Certificate Authority (CA):# Set the CA certificate verification path where to find CA# certificates for client authentication or alternatively one# huge file containing all of them (file must be PEM encoded)#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt# Client Authentication (Type):# Client certificate verification type and depth. Types are# none, optional, require and optional_no_ca. Depth is a# number which specifies how deeply to verify the certificate# issuer chain before deciding the certificate is not valid.#SSLVerifyClient require#SSLVerifyDepth 10# Access Control:# With SSLRequire you can do per-directory access control based# on arbitrary complex boolean expressions containing server# variable checks and other lookup directives. The syntax is a# mixture between C and Perl. See the mod_ssl documentation# for more details.#&lt;Location /&gt;#SSLRequire ( %&#123;SSL_CIPHER&#125; !~ m/^(EXP|NULL)/ \\# and %&#123;SSL_CLIENT_S_DN_O&#125; eq &quot;Snake Oil, Ltd.&quot; \\# and %&#123;SSL_CLIENT_S_DN_OU&#125; in &#123;&quot;Staff&quot;, &quot;CA&quot;, &quot;Dev&quot;&#125; \\# and %&#123;TIME_WDAY&#125; &gt;= 1 and %&#123;TIME_WDAY&#125; &lt;= 5 \\# and %&#123;TIME_HOUR&#125; &gt;= 8 and %&#123;TIME_HOUR&#125; &lt;= 20 ) \\# or %&#123;REMOTE_ADDR&#125; =~ m/^192\\.76\\.162\\.[0-9]+$/#&lt;/Location&gt;# SSL Engine Options:# Set various options for the SSL engine.# o FakeBasicAuth:# Translate the client X.509 into a Basic Authorisation. This means that# the standard Auth/DBMAuth methods can be used for access control. The# user name is the `one line&#x27; version of the client&#x27;s X.509 certificate.# Note that no password is obtained from the user. Every entry in the user# file needs this password: `xxj31ZMTZzkVA&#x27;.# o ExportCertData:# This exports two additional environment variables: SSL_CLIENT_CERT and# SSL_SERVER_CERT. These contain the PEM-encoded certificates of the# server (always existing) and the client (only existing when client# authentication is used). This can be used to import the certificates# into CGI scripts.# o StdEnvVars:# This exports the standard SSL/TLS related `SSL_*&#x27; environment variables.# Per default this exportation is switched off for performance reasons,# because the extraction step is an expensive operation and is usually# useless for serving static content. So one usually enables the# exportation for CGI and SSI requests only.# o StrictRequire:# This denies access when &quot;SSLRequireSSL&quot; or &quot;SSLRequire&quot; applied even# under a &quot;Satisfy any&quot; situation, i.e. when it applies access is denied# and no other module can change it.# o OptRenegotiate:# This enables optimized SSL connection renegotiation handling when SSL# directives are used in per-directory context.#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire&lt;Files ~ &quot;\\.(cgi|shtml|phtml|php3?)$&quot;&gt; SSLOptions +StdEnvVars&lt;/Files&gt;&lt;Directory &quot;/var/www/cgi-bin&quot;&gt; SSLOptions +StdEnvVars&lt;/Directory&gt;# SSL Protocol Adjustments:# The safe and default but still SSL/TLS standard compliant shutdown# approach is that mod_ssl sends the close notify alert but doesn&#x27;t wait for# the close notify alert from client. When you need a different shutdown# approach you can use one of the following variables:# o ssl-unclean-shutdown:# This forces an unclean shutdown when the connection is closed, i.e. no# SSL close notify alert is send or allowed to received. This violates# the SSL/TLS standard but is needed for some brain-dead browsers. Use# this when you receive I/O errors because of the standard approach where# mod_ssl sends the close notify alert.# o ssl-accurate-shutdown:# This forces an accurate shutdown when the connection is closed, i.e. a# SSL close notify alert is send and mod_ssl waits for the close notify# alert of the client. This is 100% SSL/TLS standard compliant, but in# practice often causes hanging connections with brain-dead browsers. Use# this only for browsers where you know that their SSL implementation# works correctly.# Notice: Most problems of broken clients are also related to the HTTP# keep-alive facility, so you usually additionally want to disable# keep-alive for those clients, too. Use variable &quot;nokeepalive&quot; for this.# Similarly, one has to force some clients to use HTTP/1.0 to workaround# their broken HTTP/1.1 implementation. Use variables &quot;downgrade-1.0&quot; and# &quot;force-response-1.0&quot; for this.SetEnvIf User-Agent &quot;.*MSIE.*&quot; \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0# Per-Server Logging:# The home of a custom SSL log file. Use this when you want a# compact non-error SSL logfile on a virtual host basis.CustomLog logs/ssl_request_log \\ &quot;%t %h %&#123;SSL_PROTOCOL&#125;x %&#123;SSL_CIPHER&#125;x \\&quot;%r\\&quot; %b&quot;&lt;/VirtualHost&gt;&lt;VirtualHost *:443&gt; DocumentRoot &quot;/home/fdm/quick/web/fdm&quot; ServerName 192.168.172.73:443 &lt;Proxy *&gt; Order deny,allow Allow from all &lt;/Proxy&gt; SSLEngine On SSLProxyEngine On SSLProxyVerify none SSLProxyCheckPeerCN off SSLProxyCheckPeerName off SSLCertificateFile &quot;/etc/httpd/extra/https_cert/server.crt&quot; SSLCertificateKeyFile &quot;/etc/httpd/extra/https_cert/server.key&quot; ProxyRequests Off ProxyPreserveHost On&lt;/VirtualHost&gt; httpd.conf 配置文件路径: /etc/httpd/conf/httpd.conf 文件无需修改 文件内容如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363## This is the main Apache HTTP server configuration file. It contains the# configuration directives that give the server its instructions.# See &lt;URL:http://httpd.apache.org/docs/2.4/&gt; for detailed information.# In particular, see# &lt;URL:http://httpd.apache.org/docs/2.4/mod/directives.html&gt;# for a discussion of each configuration directive.## See the httpd.conf(5) man page for more information on this configuration,# and httpd.service(8) on using and configuring the httpd service.## Do NOT simply read the instructions in here without understanding# what they do. They&#x27;re here only as hints or reminders. If you are unsure# consult the online docs. You have been warned.## Configuration and logfile names: If the filenames you specify for many# of the server&#x27;s control files begin with &quot;/&quot; (or &quot;drive:/&quot; for Win32), the# server will use that explicit path. If the filenames do *not* begin# with &quot;/&quot;, the value of ServerRoot is prepended -- so &#x27;log/access_log&#x27;# with ServerRoot set to &#x27;/www&#x27; will be interpreted by the# server as &#x27;/www/log/access_log&#x27;, where as &#x27;/log/access_log&#x27; will be# interpreted as &#x27;/log/access_log&#x27;.## ServerRoot: The top of the directory tree under which the server&#x27;s# configuration, error, and log files are kept.## Do not add a slash at the end of the directory path. If you point# ServerRoot at a non-local disk, be sure to specify a local disk on the# Mutex directive, if file-based mutexes are used. If you wish to share the# same ServerRoot for multiple httpd daemons, you will need to change at# least PidFile.#ServerRoot &quot;/etc/httpd&quot;## Listen: Allows you to bind Apache to specific IP addresses and/or# ports, instead of the default. See also the &lt;VirtualHost&gt;# directive.## Change this to Listen on specific IP addresses as shown below to# prevent Apache from glomming onto all bound IP addresses.##Listen 12.34.56.78:80Listen 80Listen 8000Listen 8001Listen 8888## Dynamic Shared Object (DSO) Support## To be able to use the functionality of a module which was built as a DSO you# have to place corresponding `LoadModule&#x27; lines at this location so the# directives contained in it are actually available _before_ they are used.# Statically compiled modules (those listed by `httpd -l&#x27;) do not need# to be loaded here.## Example:# LoadModule foo_module modules/mod_foo.so#Include conf.modules.d/*.conf## If you wish httpd to run as a different user or group, you must run# httpd as root initially and it will switch.## User/Group: The name (or #number) of the user/group to run httpd as.# It is usually good practice to create a dedicated user and group for# running httpd, as with most system services.#User apacheGroup apache# &#x27;Main&#x27; server configuration## The directives in this section set up the values used by the &#x27;main&#x27;# server, which responds to any requests that aren&#x27;t handled by a# &lt;VirtualHost&gt; definition. These values also provide defaults for# any &lt;VirtualHost&gt; containers you may define later in the file.## All of these directives may appear inside &lt;VirtualHost&gt; containers,# in which case these default settings will be overridden for the# virtual host being defined.### ServerAdmin: Your address, where problems with the server should be# e-mailed. This address appears on some server-generated pages, such# as error documents. e.g. admin@your-domain.com#ServerAdmin root@localhost## ServerName gives the name and port that the server uses to identify itself.# This can often be determined automatically, but we recommend you specify# it explicitly to prevent problems during startup.## If your host doesn&#x27;t have a registered DNS name, enter its IP address here.##ServerName www.example.com:80ServerName localhost:80## Deny access to the entirety of your server&#x27;s filesystem. You must# explicitly permit access to web content directories in other# &lt;Directory&gt; blocks below.## &lt;Directory /&gt;# AllowOverride none# Require all denied# &lt;/Directory&gt;## Note that from this point forward you must specifically allow# particular features to be enabled - so if something&#x27;s not working as# you might expect, make sure that you have specifically enabled it# below.### DocumentRoot: The directory out of which you will serve your# documents. By default, all requests are taken from this directory, but# symbolic links and aliases may be used to point to other locations.#DocumentRoot &quot;/var/www/html&quot;## Relax access to content within /var/www.#&lt;Directory &quot;/var/www&quot;&gt; AllowOverride None # Allow open access: Require all granted&lt;/Directory&gt;# Further relax access to the default document root:&lt;Directory &quot;/var/www/html&quot;&gt; # # Possible values for the Options directive are &quot;None&quot;, &quot;All&quot;, # or any combination of: # Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews # # Note that &quot;MultiViews&quot; must be named *explicitly* --- &quot;Options All&quot; # doesn&#x27;t give it to you. # # The Options directive is both complicated and important. Please see # http://httpd.apache.org/docs/2.4/mod/core.html#options # for more information. # Options Indexes FollowSymLinks # # AllowOverride controls what directives may be placed in .htaccess files. # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords: # Options FileInfo AuthConfig Limit # AllowOverride None # # Controls who can get stuff from this server. # Require all granted&lt;/Directory&gt;## DirectoryIndex: sets the file that Apache will serve if a directory# is requested.#&lt;IfModule dir_module&gt; DirectoryIndex index.html&lt;/IfModule&gt;## The following lines prevent .htaccess and .htpasswd files from being# viewed by Web clients.#&lt;Files &quot;.ht*&quot;&gt; Require all denied&lt;/Files&gt;## ErrorLog: The location of the error log file.# If you do not specify an ErrorLog directive within a &lt;VirtualHost&gt;# container, error messages relating to that virtual host will be# logged here. If you *do* define an error logfile for a &lt;VirtualHost&gt;# container, that host&#x27;s errors will be logged there and not here.#ErrorLog &quot;logs/error_log&quot;## LogLevel: Control the number of messages logged to the error_log.# Possible values include: debug, info, notice, warn, error, crit,# alert, emerg.#LogLevel warn&lt;IfModule log_config_module&gt; # # The following directives define some format nicknames for use with # a CustomLog directive (see below). # LogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%&#123;Referer&#125;i\\&quot; \\&quot;%&#123;User-Agent&#125;i\\&quot;&quot; combined LogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b&quot; common &lt;IfModule logio_module&gt; # You need to enable mod_logio.c to use %I and %O LogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%&#123;Referer&#125;i\\&quot; \\&quot;%&#123;User-Agent&#125;i\\&quot; %I %O&quot; combinedio &lt;/IfModule&gt; # # The location and format of the access logfile (Common Logfile Format). # If you do not define any access logfiles within a &lt;VirtualHost&gt; # container, they will be logged here. Contrariwise, if you *do* # define per-&lt;VirtualHost&gt; access logfiles, transactions will be # logged therein and *not* in this file. # #CustomLog &quot;logs/access_log&quot; common # # If you prefer a logfile with access, agent, and referer information # (Combined Logfile Format) you can use the following directive. # CustomLog &quot;logs/access_log&quot; combined&lt;/IfModule&gt;&lt;IfModule alias_module&gt; # # Redirect: Allows you to tell clients about documents that used to # exist in your server&#x27;s namespace, but do not anymore. The client # will make a new request for the document at its new location. # Example: # Redirect permanent /foo http://www.example.com/bar # # Alias: Maps web paths into filesystem paths and is used to # access content that does not live under the DocumentRoot. # Example: # Alias /webpath /full/filesystem/path # # If you include a trailing / on /webpath then the server will # require it to be present in the URL. You will also likely # need to provide a &lt;Directory&gt; section to allow access to # the filesystem path. # # ScriptAlias: This controls which directories contain server scripts. # ScriptAliases are essentially the same as Aliases, except that # documents in the target directory are treated as applications and # run by the server when requested rather than as documents sent to the # client. The same rules about trailing &quot;/&quot; apply to ScriptAlias # directives as to Alias. # ScriptAlias /cgi-bin/ &quot;/var/www/cgi-bin/&quot;&lt;/IfModule&gt;## &quot;/var/www/cgi-bin&quot; should be changed to whatever your ScriptAliased# CGI directory exists, if you have that configured.#&lt;Directory &quot;/var/www/cgi-bin&quot;&gt; AllowOverride None Options None Require all granted&lt;/Directory&gt;&lt;IfModule mime_module&gt; # # TypesConfig points to the file containing the list of mappings from # filename extension to MIME-type. # TypesConfig /etc/mime.types # # AddType allows you to add to or override the MIME configuration # file specified in TypesConfig for specific file types. # #AddType application/x-gzip .tgz # # AddEncoding allows you to have certain browsers uncompress # information on the fly. Note: Not all browsers support this. # #AddEncoding x-compress .Z #AddEncoding x-gzip .gz .tgz # # If the AddEncoding directives above are commented-out, then you # probably should define those extensions to indicate media types: # AddType application/x-compress .Z AddType application/x-gzip .gz .tgz # # AddHandler allows you to map certain file extensions to &quot;handlers&quot;: # actions unrelated to filetype. These can be either built into the server # or added with the Action directive (see below) # # To use CGI scripts outside of ScriptAliased directories: # (You will also need to add &quot;ExecCGI&quot; to the &quot;Options&quot; directive.) # #AddHandler cgi-script .cgi # For type maps (negotiated resources): #AddHandler type-map var # # Filters allow you to process content before it is sent to the client. # # To parse .shtml files for server-side includes (SSI): # (You will also need to add &quot;Includes&quot; to the &quot;Options&quot; directive.) # AddType text/html .shtml AddOutputFilter INCLUDES .shtml&lt;/IfModule&gt;## Specify a default charset for all content served; this enables# interpretation of all content as UTF-8 by default. To use the# default browser choice (ISO-8859-1), or to allow the META tags# in HTML content to override this choice, comment out this# directive:#AddDefaultCharset UTF-8&lt;IfModule mime_magic_module&gt; # # The mod_mime_magic module allows the server to use various hints from the # contents of the file itself to determine its type. The MIMEMagicFile # directive tells the module where the hint definitions are located. # MIMEMagicFile conf/magic&lt;/IfModule&gt;## Customizable error responses come in three flavors:# 1) plain text 2) local redirects 3) external redirects## Some examples:#ErrorDocument 500 &quot;The server made a boo boo.&quot;#ErrorDocument 404 /missing.html#ErrorDocument 404 &quot;/cgi-bin/missing_handler.pl&quot;#ErrorDocument 402 http://www.example.com/subscription_info.html### EnableMMAP and EnableSendfile: On systems that support it,# memory-mapping or the sendfile syscall may be used to deliver# files. This usually improves server performance, but must# be turned off when serving from networked-mounted# filesystems or if support for these functions is otherwise# broken on your system.# Defaults if commented: EnableMMAP On, EnableSendfile Off##EnableMMAP offEnableSendfile on# Supplemental configuration## Load config files in the &quot;/etc/httpd/conf.d&quot; directory, if any.IncludeOptional conf.d/*.conf 服务配置123456# 重启服务/bin/systemctl restart httpd.service# 查看服务状态/bin/systemctl status httpd.service# 查看服务日志, exp: error.logll -srt /var/log/httpd/ 项目配置TODO gunicorn 模式存在 [SSLV3_ALERT_CERTIFICATE_UNKNOWN] sslv3 alert certificate unknown 问题 TODO JS-ip_config.js 存在修改处，如何通过 env 控制？ 或者统一控制。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# tools.pydef start_web(): &quot;&quot;&quot;开始Web后台服务, 试用Gunicorn作为服务器 其参数配置请至setting/gun.conf进行配置 &quot;&quot;&quot; print(&quot;Start Web Server, Saving Log To Web.log..&quot;) if Config.REQUESTS_METHOD == &#x27;HTTP&#x27;: os.system(&quot;nohup gunicorn -c fdm/base/gun.conf fdm.views:app &gt;&gt; web.log &amp;&quot;) elif Config.REQUESTS_METHOD == &#x27;HTTPS&#x27;: # 正常 # gunicorn --certfile=/etc/httpd/extra/https_cert/server.crt --keyfile=/etc/httpd/extra/https_cert/server.key --bind 0.0.0.0:3000 fdm.views:app # TODO 有问题 os.system(&quot;nohup gunicorn -c fdm/base/gun.conf --certfile=%s --keyfile=%s fdm.views:app &gt;&gt; web.log &amp;&quot; % (Config.HTTPS_SERVER_CERT_PATH, Config.HTTPS_SERVER_KEY_PATH)) print(&quot;Web Server Started.&quot;)# tools.pydef run_app(ip): &quot;&quot;&quot;单例后台服务器, 将输出日志信息 主要用于开发与校验运行情况 :param str ip: 服务启动IP地址 &quot;&quot;&quot; stop_web() if Config.REQUESTS_METHOD == &#x27;HTTP&#x27;: web_app.run(host=ip, port=web_app.config[&quot;PORT&quot;], debug=True, use_debugger=True, use_reloader=True) elif Config.REQUESTS_METHOD == &#x27;HTTPS&#x27;: ctx = (Config.HTTPS_SERVER_CERT_PATH, Config.HTTPS_SERVER_KEY_PATH) web_app.run(host=ip, port=web_app.config[&quot;PORT&quot;], debug=True, use_debugger=True, use_reloader=True, ssl_context=ctx)# /home/fdm/.fdm_profileexport REQUESTS_METHOD=HTTPSexport HTTPS_SERVER_CERT_PATH=/etc/httpd/extra/https_cert/server.crtexport HTTPS_SERVER_KEY_PATH=/etc/httpd/extra/https_cert/server.key# fdm/base/settings.py&quot;&quot;&quot; 是否启用 HTTPS&quot;&quot;&quot;REQUESTS_METHOD = os.environ.get(&quot;REQUESTS_METHOD&quot;, &quot;HTTP&quot;).upper()REQUESTS_METHODS = [&#x27;HTTPS&#x27;, &#x27;HTTP&#x27;]REQUESTS_METHOD = REQUESTS_METHOD if REQUESTS_METHOD in REQUESTS_METHODS else &#x27;HTTP&#x27;# 证书路径 需授权至此用户可以访问HTTPS_SERVER_CERT_PATH = os.environ.get(&quot;HTTPS_SERVER_CERT_PATH&quot;, &quot;/etc/httpd/extra/https_cert/server.crt&quot;)HTTPS_SERVER_KEY_PATH = os.environ.get(&quot;HTTPS_SERVER_KEY_PATH&quot;, &quot;/etc/httpd/extra/https_cert/server.key&quot;)if not os.path.exists(HTTPS_SERVER_CERT_PATH) or not os.path.exists(HTTPS_SERVER_KEY_PATH): logging.warning(&#x27;&gt; 存在HTTPS相关文件[%s]-[%s]缺失, 自动切换到 HTTP模式&#x27;, HTTPS_SERVER_CERT_PATH, HTTPS_SERVER_KEY_PATH) HTTPS_SERVER_CERT_PATH = &#x27;HTTP&#x27;# fdm/js/ip_config.jsvar idv_url = [&quot;http://&quot;, ip, &quot;:&quot;, port].join(&quot;&quot;);var idv_url = [&quot;https://&quot;, ip, &quot;:&quot;, port].join(&quot;&quot;); 项目登录界面: http://192.168.172.73 https://192.168.172.73 附件其他配置1234567# Flask-HTTPS 加载ssl证书app.run(&#x27;0.0.0.0&#x27;, debug=True, port=11000, ssl_context=(&#x27;path/xxxx.pem&#x27;, &#x27;path/xxxx.key&#x27;))# Flask-HTTPS 在后台服务中加入response.headers.add(&quot;Content-Security-Policy&quot;, &quot;upgrade-insecure-requests&quot;)# HTML-HTTPS 在需要的页面中加入&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt; 参考资源 Apache 使用 ssl 模块配置 HTTPS 配置 HTTPS 证书后，浏览器出现不安全提示的解决方法 服务器已部署 SSL 开启 https 协议为什么浏览器仍然提示不安全？ 使用 openssl 生成 https 证书 https 网页加载 http 资源导致的页面报错及解决方案HTTPS 常见部署问题及解决方案 记一次从 HTTP 升级 HTTPS 完全指南 什么是混合内容在服务器上启用 HTTPS 无法从 HTTPS 访问 http api，由于浏览器同源策略，这是不可实现的。必须要将 api 修改为支持 https 方式Calling http api from https website [duplicate] 问题记录[SSLV3_ALERT_CERTIFICATE_UNKNOWN] sslv3 alert certificate unknown123456789# reboot_server 命令报错gunicorn -c fdm/base/gun.conf --certfile=%s --keyfile=%s fdm.views:app# 此命令不报错gunicorn --certfile=/etc/httpd/extra/https_cert/server.crt --keyfile=/etc/httpd/extra/https_cert/server.key --bind 0.0.0.0:3000 fdm.views:app# 日志详情[2020-06-19 21:12:28 +0800] [4780] [DEBUG] Invalid request from ip=192.168.172.2: [SSL: SSLV3_ALERT_CERTIFICATE_UNKNOWN] sslv3 alert certificate unknown (_ssl.c:2607)[2020-06-19 21:12:28 +0800] [4780] [DEBUG] Failed to send error message. code 400, message Bad request syntax 问题原因 由于 Flask 没有 ssl 证书，所以无法访问 https 站点 解决方案 购买 ssl 证书，参考链接: 在 Flask 中配置 ssl 证书，将 http 升级为 https 日志详情 123456789# 场景登录时报错# 前台服务 试图访问HTTPS后台报错GET https://192.168.172.73:3000/LoginToken/Login?code=%E5%88%86%E6%9E%90%E5%91%98&amp;password=e10adc3949ba59abbe56e057f20f883e net::ERR_SSL_PROTOCOL_ERROR# 后台服务报错[2020-06-19 12:01:26,652] PID:22944-werkzeug: [_internal.py-_log-122] ERROR : 192.168.172.2 - - [19/Jun/2020 12:01:26] code 400, message Bad request syntax (&#x27;\\x16\\x03\\x01\\x02\\x00\\x01\\x00\\x01ü\\x03\\x03Æ¼ãßV\\x9eN.&#x27;)[2020-06-19 12:01:26,654] PID:22944-werkzeug: [_internal.py-_log-122] INFO : 192.168.172.2 - - [19/Jun/2020 12:01:26] &quot;üÆ¼ãßVN.&quot; HTTPStatus.BAD_REQUEST -","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-功能模块","slug":"Languages/Linux/linux-function","date":"2021-10-23T11:54:51.107Z","updated":"2021-10-23T11:54:51.107Z","comments":true,"path":"Languages/Linux/linux-function.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-function.md/","excerpt":"","text":"功能模块删除乱码文件 tips步骤 1：查看文件的 num 1ls -li 步骤 2：查看确定文件 12# 避免误删其他文件find . -inum 1490945 步骤 3： 删除指定文件 1find . -inum 1490945 -exec rm &#123;&#125; -rf \\; 问题记录Linux 关机或重启时提示 A stop job is running forLinux 关机或重启时提示 A stop job is running for .. 导致关机慢。 修改方法 1234567vim /etc/systemd/system.conf修改下面两个变量为：DefaultTimeoutStartSec=10sDefaultTimeoutStopSec=10sDefaultRestartSec=100ms# 执行命令systemctl daemon-reload 硬盘格式化123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 格式化 2T 以上硬盘[root@es1 java_install]# fdisk -lDisk /dev/sda: 299.5 GB, 299506860032 bytes255 heads, 63 sectors/track, 36412 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk identifier: 0x000680cf Device Boot Start End Blocks Id System/dev/sda1 * 1 64 512000 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 64 6438 51200000 82 Linux swap / Solaris/dev/sda3 6438 36413 240774144 83 LinuxWARNING: GPT (GUID Partition Table) detected on &#x27;/dev/sdb&#x27;! The util fdisk doesn&#x27;t support GPT. Use GNU Parted.Disk /dev/sdb: 3998.6 GB, 3998614552576 bytes255 heads, 63 sectors/track, 486137 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisk identifier: 0x00000000 Device Boot Start End Blocks Id System/dev/sdb1 1 267350 2147483647+ ee GPTPartition 1 does not start on physical sector boundary.[root@es1 java_install]# parted /dev/sdbGNU Parted 2.1Using /dev/sdbWelcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.(parted) pModel: LSI MR9260-8i (scsi)Disk /dev/sdb: 3999GBSector size (logical/physical): 512B/4096BPartition Table: gptNumber Start End Size File system Name Flags(parted) mklabel gptWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?Yes/No? yes(parted) mkpartPartition name? []? sdb1File system type? [ext2]? ext4Start? 0End? 3999GBWarning: The resulting partition is not properly aligned for best performance.Ignore/Cancel? Ignore(parted) pModel: LSI MR9260-8i (scsi)Disk /dev/sdb: 3999GBSector size (logical/physical): 512B/4096BPartition Table: gptNumber Start End Size File system Name Flags1 17.4kB 3999GB 3999GB sdb1(parted) quitInformation: You may need to update /etc/fstab.[root@es1 java_install]# mkfs.ext4 /dev/sdb1mke2fs 1.41.12 (17-May-2010)/dev/sdb1 alignment is offset by 3072 bytes.This may result in very poor performance, (re)-partitioning suggested.Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=1 blocks, Stripe width=0 blocks244056064 inodes, 976224247 blocks48811212 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=429496729629792 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 102400000, 214990848, 512000000, 550731776, 644972544Writing inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: doneThis filesystem will be automatically checked every 28 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override. 硬盘分区安装 50T 服务器系统时，由于默认 ext4 分区格式，但是由于 CentOS 自带的软件 mkfs.ext4 只支持 16T，所以 50T 盘未分区导致的一系列问题 123456789101112131415161718192021222324# 安装xfs工具，用于格式化16t以上分区。# CentoS自带的mkfs.ext4只支持16T[root@data3 ~]# yum install -y xfsprogs[root@data3 ~]# yum install -y parted# 格式化分区[root@data2 ~]# parted(parted) select /dev/sdb(parted) print(parted) mklabel msdos(parted) quit# 创建逻辑卷[root@data3 ~]# pvs[root@data3 ~]# pvcreate /dev/sdb[root@data3 ~]# pvs[root@data3 ~]# vgcreate bank_data /dev/sdb[root@data3 ~]# vgscan[root@data3 ~]# lvcreate -L 54.50t -n lv_bank_data bank_data[root@data3 ~]# lvscan[root@data3 ~]# mkfs -t xfs /dev/bank_data/lv_bank_data[root@data3 ~]# mkdir -p /bank_data[root@data3 ~]# mount /dev/bank_data/lv_bank_data /bank_data[root@data3 ~]# chmod 777 -R /bank_data/# 修改 /etc/fstab文件 增加 xfs 自启动/dev/mapper/bank_data/lv_bank_data /bank_data xfs defaults 0 0 fdisk 最大 2T 参考链接: Linux 的逻辑卷管理 问题记录123456789101112131415161718192021222324252627# 问题简述：WARNING: GPT (GUID Partition Table) detected on ‘/dev/sdb’! The util fdisk doesn’t support GPT. Use GNU Parted.出现场景：fdisk -l解决方法：[root@data2 ~]# parted(parted) select /dev/sdb # 选择出问题的磁盘(parted) print(parted) mklabel msdos(parted) quitfdisk -l # 即发现已经解决# 问题简述：Can’t open /dev/sdb exclusively. Mounted filesystem?[root@data2 ~]# pvcreate /dev/sdbCan’t open /dev/sdb exclusively. Mounted filesystem?[root@data2 ~]# ll /dev/mapper总用量 0lrwxrwxrwx. 1 root root 7 2月 8 20:20 bank_data-lv_bank_data -&gt; ../dm-3crw-rw----. 1 root root 10, 58 2月 7 20:35 controllrwxrwxrwx. 1 root root 7 2月 8 20:20 vg_data2-lv_home -&gt; ../dm-2lrwxrwxrwx. 1 root root 7 2月 8 20:20 vg_data2-lv_root -&gt; ../dm-0lrwxrwxrwx. 1 root root 7 2月 8 20:20 vg_data2-lv_swap -&gt; ../dm-1[root@data2 ~]# dmsetup remove bank_data-lv_bank_data[root@data2 ~]# pvcreate /dev/sdbDevice /dev/sdb not found (or ignored by filtering). Linux 软件autopep8autopep8 格式自动优化：代码规范参考链接：http://hao.jobbole.com/autopep8/命令： 1autopep8 --in-place --aggressive --aggressive test_model_logic_v2.py SVNSVN 是 Subversion 的简称，是一个开放源代码的版本控制系统，相较于 RCS、CVS，它采用了分支管理系统，它的设计目标就是取代 CVS。互联网上很多版本控制服务已从 CVS 迁移到 Subversion。说得简单一点 SVN 就是用于多个人共同开发同一个项目，共用资源的目的。 SVN 常用命令 svn up svn ci -m “update_msg” sss.py svn log 展示给你主要信息：每个版本附加在版本上的作者与日期信息和所有路径修改。 svn diff 显示特定修改的行级详细信息。 svn cat 取得在特定版本的某一个文件显示在当前屏幕。 svn list 显示一个目录在某一版本存在的文件。 svn rename svn merge 1234567# 获取 某个版本下更新的所有文件列表# 获取第666版本到目前所有改动文件的列表，并导出到exportFile.txt下(注：不包含第666版本)svn diff -r 666:HEAD --summarize https://svnIP &gt; exportFile.txt# 获取 5248到5251更新的版本文件 【不包含5248】(env) [fdm@fdm quick]$ svn diff -r 5248:5251 --summarize &gt; a.log 删除目录下所有.svnsvn 删除版本库目录下所有中.svn 文件 12345# 方法1find . -type d -name “.svn”|xargs rm -rf# 方法2find . -type d -iname ”.svn” -exec rm -rf &#123;&#125; \\; Pylint如何使用 Pylint 来规范 Python 代码风格https://www.ibm.com/developerworks/cn/linux/l-cn-pylint/ pylint 的配置与使用https://blog.csdn.net/jinguangliu/article/details/43674771 项目使用 123456789101112131415161718192021222324Pylintp基础配置： 见项目~/packages_py/1.sh 直接在项目虚拟环境中运行 sh 1.sh 即可安装pylint包 见项目~/packages_py/pylint.conf 涉及pylint的相关参数 Line65: disable=C,R,W,E,F # 表示忽略 pylint显示的错误级别 Line113:ignored-calssed=optparse.Values,thread._local._thred._local # 表示忽略 项目代码中某些字符 在项目目录中 server或者sqs层 运行命令 pylint --rcfile=~/packages_py/pylint.conf server/ 即可得到检查文档 如在运行中报 server/__init__.py 文件存在 touch server/__init__.py 创建文件即可。 如在运行中报 no function module ,说明命令中包含绝对路径，改为相对路径在指定位置运行即可。项目使用：检查sqs或server的E F级别 修改~/packages_py/pylint.conf Line65: disable=C,R,W,E,F 改为 disable=C,R,W 由于scope_session报错过多 ，修改 Line113:ignored-calssed 后面加上 ,scope_session即可过滤. 项目目录运行 pylint --rcfile=~/packages_py/pylint.conf server/ | tee check3.0.txt项目使用：检查C注释中的 missing-docstring 修改~/packages_py/pylint.conf Line65: disable=C,R,W,E,F 改为 disable=R,W,bad-whitespace,....... 等等 将 missing-docstring之外的Messages中的message id(检查文档中可得到)全部过滤即可 项目目录运行 pylint --rcfile=~/packages_py/pylint.conf server/ | tee check3.0.txt 查看 ipython 历史命令由于 ipython 每次关闭后，没有日志文件，需要找回 ipython 的输入命令 两种办法： 用%hist保存后把%开头的删掉再执行。 用%logstart 和%logstop。它会把你所用的%命令对应的的 python 代码 (如下面的 magic…) 12345678# %logstart 默认输出日志 ipython_log.pyIn [7]: %logstart /tmp/test_log.pyIn [8]: a = 10In [9]: b = a*a# 查看变量In [10]: %whoa b In [10]: %logstop 环境脚本头规范每个 Script 头部信息 Script 的功能 Script 的版本信息 script 的作者与联络方式 script 的版权宣告方式 script 的历史记录 script 内特殊的指令，使用绝对路径的方式来下达 script 运作时需要的环境变量预先宣告与设定 使用 vim 比对文件不同1vim -d source.txt subject.txt 效果如下所示 passwd 标准输入，设置用户密码echo “PASSWORD” | passwd–stdin USERNAME passwd[OPTIONS] UserName: 修改指定用户的密码，仅 root 用户权限 passwd: 修改自己的密码 常用选项：-d：删除指定用户密码-l:锁定指定用户-u:解锁指定用户-e:强制用户下次登录修改密码(密码马上过期:chage -d0 username)-f：强制执行(配合其他选项使用)-n mindays: 指定最短使用期限-x maxdays：最大使用期限-w warndays：提前多少天开始警告-i inactivedays：非活动期限–stdin：从标准输入接收用户密码echo “PASSWORD” | passwd–stdin USERNAME Linux-模块命令Linux 软件autopep8autopep8 格式自动优化：代码规范参考链接：http://hao.jobbole.com/autopep8/命令： 1autopep8 --in-place --aggressive --aggressive test_model_logic_v2.py SVNSVN 是 Subversion 的简称，是一个开放源代码的版本控制系统，相较于 RCS、CVS，它采用了分支管理系统，它的设计目标就是取代 CVS。互联网上很多版本控制服务已从 CVS 迁移到 Subversion。说得简单一点 SVN 就是用于多个人共同开发同一个项目，共用资源的目的。 SVN 常用命令 svn up svn ci -m “update_msg” sss.py svn log 展示给你主要信息：每个版本附加在版本上的作者与日期信息和所有路径修改。 svn diff 显示特定修改的行级详细信息。 svn cat 取得在特定版本的某一个文件显示在当前屏幕。 svn list 显示一个目录在某一版本存在的文件。 svn rename svn merge 删除目录下所有.svnsvn 删除版本库目录下所有中.svn 文件 12345# 方法1find . -type d -name “.svn”|xargs rm -rf# 方法2find . -type d -iname ”.svn” -exec rm -rf &#123;&#125; \\; Pylint如何使用 Pylint 来规范 Python 代码风格https://www.ibm.com/developerworks/cn/linux/l-cn-pylint/ pylint 的配置与使用https://blog.csdn.net/jinguangliu/article/details/43674771 项目使用 123456789101112131415161718192021222324Pylintp基础配置： 见项目~/packages_py/1.sh 直接在项目虚拟环境中运行 sh 1.sh 即可安装pylint包 见项目~/packages_py/pylint.conf 涉及pylint的相关参数 Line65: disable=C,R,W,E,F # 表示忽略 pylint显示的错误级别 Line113:ignored-calssed=optparse.Values,thread._local._thred._local # 表示忽略 项目代码中某些字符 在项目目录中 server或者sqs层 运行命令 pylint --rcfile=~/packages_py/pylint.conf server/ 即可得到检查文档 如在运行中报 server/__init__.py 文件存在 touch server/__init__.py 创建文件即可。 如在运行中报 no function module ,说明命令中包含绝对路径，改为相对路径在指定位置运行即可。项目使用：检查sqs或server的E F级别 修改~/packages_py/pylint.conf Line65: disable=C,R,W,E,F 改为 disable=C,R,W 由于scope_session报错过多 ，修改 Line113:ignored-calssed 后面加上 ,scope_session即可过滤. 项目目录运行 pylint --rcfile=~/packages_py/pylint.conf server/ | tee check3.0.txt项目使用：检查C注释中的 missing-docstring 修改~/packages_py/pylint.conf Line65: disable=C,R,W,E,F 改为 disable=R,W,bad-whitespace,....... 等等 将 missing-docstring之外的Messages中的message id(检查文档中可得到)全部过滤即可 项目目录运行 pylint --rcfile=~/packages_py/pylint.conf server/ | tee check3.0.txt Linux 技术笔记查看 ipython 历史命令由于 ipython 每次关闭后，没有日志文件，需要找回 ipython 的输入命令 两种办法： 用%hist保存后把%开头的删掉再执行。 用%logstart 和%logstop。它会把你所用的%命令对应的的 python 代码 (如下面的 magic…) 12345678# %logstart 默认输出日志 ipython_log.pyIn [7]: %logstart /tmp/test_log.pyIn [8]: a = 10In [9]: b = a*a# 查看变量In [10]: %whoa b In [10]: %logstop 环境脚本头规范每个 Script 头部信息 Script 的功能 Script 的版本信息 script 的作者与联络方式 script 的版权宣告方式 script 的历史记录 script 内特殊的指令，使用绝对路径的方式来下达 script 运作时需要的环境变量预先宣告与设定 使用 vim 比对文件不同1vim -d source.txt subject.txt 效果如下所示 passwd 标准输入，设置用户密码echo “PASSWORD” | passwd–stdin USERNAME passwd[OPTIONS] UserName: 修改指定用户的密码，仅 root 用户权限 passwd: 修改自己的密码 常用选项：-d：删除指定用户密码-l:锁定指定用户-u:解锁指定用户-e:强制用户下次登录修改密码(密码马上过期:chage -d0 username)-f：强制执行(配合其他选项使用)-n mindays: 指定最短使用期限-x maxdays：最大使用期限-w warndays：提前多少天开始警告-i inactivedays：非活动期限–stdin：从标准输入接收用户密码echo “PASSWORD” | passwd–stdin USERNAME Linux 常见问题yum-database disk image is malformed错误：database disk image is malformed解决方法：yum clean dbcache 12345678910111213[root@WOM ~]# yum install vim -y已加载插件：fastestmirror, refresh-packagekit, security设置安装进程Loading mirror speeds from cached hostfile* base: mirrors.shu.edu.cn* epel: mirrors.tongji.edu.cn* extras: mirrors.shu.edu.cn* updates: mirrors.shu.edu.cn错误：database disk image is malformed[root@WOM ~]# yum clean dbcache已加载插件：fastestmirror, refresh-packagekit, securityCleaning repos: base bintray--sbt-rpm epel extras updates8 sqlite 文件已删除 Linux 编译基础知识https://blog.csdn.net/qq_41035588/article/details/80296051 https://blog.csdn.net/Com_ma/article/details/79414952 https://www.cnblogs.com/stefan-liu/p/5172424.html https://pandas.pydata.org/pandas-docs/stable/10min.html https://blog.csdn.net/su_buju/article/details/77144582 Linux 常用软件[toc] virtualenv虚拟环境 virtualenv 用于创建独立的 Python 环境，多个 Python 相互独立，互不影响，它能够： 在没有权限的情况下安装新套件 不同应用可以使用不同的套件版本 套件升级不影响其他应用 123456789101112# 安装pip install virtualenv# 创建虚拟环境vitualenv XXX# 创建独立，无root包依赖的环境virtualenv --no-site-packages [虚拟环境名称]# 启动环境. ~/env/bin/activate 或source ~/env/bin/activate virtualenvwrappervirtualenv 管理软件 Virtaulenvwrapper 是 virtualenv 的扩展包，用于更方便管理虚拟环境，它可以做： 将所有虚拟环境整合在一个目录下 管理(新增，删除，复制)虚拟环境 切换虚拟环境 … 12345678910111213# 安装使用 virtualenvwrapperpip install virtualenvwrapper- mkdir $HOME/.virtualenvs- 在~/.bashrc中添加行： export WORKON_HOME=$HOME/.virtualenvs- 在~/.bashrc中添加行：source /usr/bin/virtualenvwrapper.sh- 运行： source ~/.bashrc# 常用命令lsvirtualenv 列出虚拟环境列表mkvirtualenv 新建虚拟环境workon 启动/切换虚拟环境rmvirtualenv 删除虚拟环境deactivate 离开虚拟环境","categories":[],"tags":[]},{"title":"Linux-性能监控工具","slug":"Languages/Linux/linux-cmdn-tools","date":"2021-10-23T11:54:51.106Z","updated":"2021-10-23T11:54:51.106Z","comments":true,"path":"Languages/Linux/linux-cmdn-tools.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-cmdn-tools.md/","excerpt":"","text":"tags: 2020年 06月 Linux 性能测试 性能监控 性能优化 CentOS8 性能测试监控工具常见性能工具: 序号 命令 说明 1 dstat 多类型资源统计工具 2 atop. 相比 top 更好的 ASCII 码体验 3 nmon 类 Unix 系统的性能监控 4 slabtop 显示内核 slab 缓存信息 5 sar 性能监控和瓶颈检查 6 saidar 简单的统计监控工具 7 top 经典的 Linux 任务管理工具 8 sysdig 系统进程的高级视图 9 netstat 显示开放的端口和连接 10 tcpdump 洞察网络封包 11 vmstat 虚拟内存统计信息 12 free 内存统计信息 13 htop 更加友好的 top 14 SS 网络管理的现代替代品 15 Isof 列表显示打开的文件 16 iftop 类似 top 的了网络连接工具 17 iperf 网络性能工具 18 smem 高级内存报表工具 图形化或基于 Web 的性能工具:| 序号 | 命令 | 说明 || —- | ——- | —————————- || 22 | Icinga | Nagios 的社区分支版本 || 23 | Nagios | 最为流行的监控工具 || 24 | Linuxprocessexplorer | Linux 下的 procexp || 25 | Collectl | 性能监控工具 || 26 | MRTG | 经典网络流量监控图形工具 || 27 | Monit | 简单易用的监控工具 || 28 | Munin | 为服务器提供监控和提醒服务 | 表格详见 文件 附件-知识树表格数据.xlsx 附件参考资源 linux 中查看网卡流量六种方法 Linux：查看网络信息和网络监控命令 Linux 查看当前使用的网卡 以及 查看某进程使用的网络带宽情况 以及 端口占用的情况 Linux 性能监测：网络篇","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-功能模块-FTP配置","slug":"Languages/Linux/linux-ftp","date":"2021-10-23T11:54:51.106Z","updated":"2021-10-23T11:54:51.106Z","comments":true,"path":"Languages/Linux/linux-ftp.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-ftp.md/","excerpt":"","text":"环境说明: CentOS7.5+ or CentOS8 注意事项： 配置单向网关或防火墙策略时，外部网络变动时，容器内部不会变动，容器以及 docker 都需要重启才可以更新。 ftplib 连接前置依赖说明 信息说明 服务器 A-本机服务器 服务器 B-远程服务器 注意事项 服务器 A 可以 ssh 连接访问服务器 B 用户 服务器 AB 都要配置好 vsftpd Linux 系统配置1234567891011121314151617181920# 服务器AB都要配置# 关闭selinuxsed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/&quot; /etc/selinux/configsetenforce 0# 安装 vsftpdyum install vsftpd -y# 修改 data_connection 超时时间默认120s,避免网络产生问题/etc/vsftpd/vsftpd.conf# 修改 idle_session_timeout=60000/etc/vsftpd/vsftpd.conf# Centos6service vsftpd restartchkconfig vsftpd on# Centos8systemctl restart vsftpdsystemctl enable vsftpd.service Ubuntu 安装 vsftpdUbuntu 配置 vsftpd 不同于 CentOS8 1234567891011121314151617181920212223242526272829303132333435363738# 安装 vsftpdsudo apt-get install vsftpd -ysudo systemctl start vsftpdsudo systemctl enable vsftpd# 备份配置文件sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.bak# 修改文件 /etc/vsftpd.conf, 添加如下内容listen=NOlisten_ipv6=YESanonymous_enable=NOlocal_enable=YESwrite_enable=YESlocal_umask=022dirmessage_enable=YESuse_localtime=YESxferlog_enable=YESconnect_from_port_20=YESchroot_local_user=YESsecure_chroot_dir=/var/run/vsftpd/empty# pam_service_name=vsftpdpam_service_name=ftppasv_enable=Yespasv_min_port=10000pasv_max_port=11000# user_sub_token=$USER# local_root=/home/$USER/ftpuserlist_enable=YESuserlist_file=/etc/vsftpd.userlistuserlist_deny=NO# sudo vim /etc/vsftpd.userlist 添加如下内容ftdm # 远程连接的用户# 重启服务sudo systemctl restart vsftpdsudo systemctl status vsftpd 在 Ubuntu 18.04 LTS 上安装和配置 VSFTPD 服务器 项目使用说明123456789101112131415161718192021222324# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 服务器B-配置useradd fdmecho &quot;qwe123&quot; | passwd fdm --stdinmkdir /bank_datachown fdm:fdm -R /bank_data# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 服务器A-配置# 修改配置文件#### item [FTP_CONFIG] 远程FTP目录,用于获取远程服务器文件export FTP_HOSTADDR=192.168.100.162export FTP_USERNAME=fdmexport FTP_PASSWORD=qwe123export FTP_PORT=21export FTP_MONITOR_DIR=/bank_dataexport DAILY_MODE=SURVEY# 建表python tools.py --rebuild_orm sys_info_datasetpython tools.py --rebuild_orm sys_info_dataset_detail# 开启FTP监控python tools.py --start_ftp_monitor# 开启日批模式python tools.py --start_daily_job_monitor paramiko参考链接: Python SSH、FTP 连接 附件参考链接 vsftpd.conf-Manager vsftpd.conf.default Python-ftplib vsftpd 主动模式&amp;被动模式 VSFTP 配置说明 问题记录500 OOPS:cannot change directory:/rootftplib 连接时 selinux 未关闭导致的这个错误。 解决方法 关闭 selinux setsebool ftpd_disable_trans 1 或者 setsebool ftp_home_dir 1 1234567891011121314今天在使用Filezilla连接Linux的时候不能成功，显示&quot;500 OOPS:cannot change directory:/root&quot; 错误，如何解决呢？参考链接：https://www.cnblogs.com/jinxiblog/p/6698698.html默认下是没有开启FTP的支持，所以访问时都被阻止了解决：1. 查看SELinux设置# getsebool -a | grep ftp发现 ftpd_disable_trans –&gt; off 或者 ftp_home_dir–&gt;off2. 使用setsebool命令开启# setsebool ftpd_disable_trans 1 或者 # setsebool ftp_home_dir 13. 查看当前状态是否是on的状态# getsebool -a|grep ftp此时 ftpd_disable_trans –&gt; on 或者 ftp_home_dir–&gt;on4. 最后重启 # service vsftpd restartOK，问题解决了。 ftplib.FTP().connect Time Out注：宿主机外部网络变更时，容器内部网络不会变更，需要重启容器和 docker.service. 123456789101112131415# 问题背景尝试修改防火墙策略，内容如下1.仅当客户端在21端口向服务端发送数据请求时可以通过2.服务器向客户端发送请求无法通过3.VSftpd服务在服务器端，启动项目服务在客户端。4.使用容器启动的项目服务，通过项目服务获取服务器的指定目录。# 问题内容客户端容器服务已关闭，修改防火墙策略之后，容器内部服务无法正常启动。问题原因# 解决方案关闭 容器，重启docker service,重新启动项目服务关键点: 宿主机外部网络变更时，容器内部网络不会变更，需要重启容器和docker.service","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"Linux-Centos8部署配置","slug":"Languages/Linux/linux-centos8","date":"2021-10-23T11:54:51.105Z","updated":"2021-10-23T11:54:51.105Z","comments":true,"path":"Languages/Linux/linux-centos8.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-centos8.md/","excerpt":"","text":"tags: 2019 年 Linux Centos7 环境说明: 系统版本: CentOS7.5 功能升级内核https://blog.csdn.net/qq_21165007/article/details/102723438 安装无线网卡https://blog.csdn.net/qq_21165007/article/details/102723438 安装中文输入法CentOS7 中安装中文输入法 安装 GoogleCrhome 浏览器CentOS7 安装 GoogleCrhome 浏览器 tags: Linux Centos8 使用文档 2020年 06月 文档内容 包含 CentOS8 的基础系统设置 常用模块功能 优化 使用优化 &amp; 性能优化等 使用总结 模块功能配置网络重启网络ncmli c 安装 Python21234567891011121314151617在CentOS 8上安装Python 2Python 2软件包也包含在默认的CentOS 8存储库中。要安装Python 2，请输入以下命令：$ sudo dnf install python2通过键入以下命令验证安装：$ python2 --version输出应如下所示内容：Python 2.7.15要执行Python 2，请输入python2，然后运行pip并输入pip2。 安装 Python312345678910111213141516171819202122232425在CentOS 8上安装Python 3要在CentOS 8上安装Python 3，请以root或sudo用户身份在终端中运行以下命令：$ sudo dnf install python3要验证安装，请输入以下命令检查Python版本：$ python3 --version参考：在Linux系统中检查Python版本(Python Version)的方法。在选写本文时，CentOS存储库中可用的Python 3的最新版本是“3.6.x”：Python 3.6.8注：该命令还会安装pip。要运行Python，你需要明确输入python3并运行pip输入pip3。你应该始终喜欢使用yum或dnf安装发行版提供的python模块，因为它们受支持并经过测试可以在CentOS 8上正常工作，仅在虚拟环境中使用pip，Python虚拟环境允许你将Python模块安装在特定项目的隔离位置，而不必全局安装，这样，你不必担心会影响其他Python项目。Python 3模块软件包的名称以“python3”为前缀，例如，要安装paramiko模块，应运行：$ sudo dnf install python3-paramiko 设置默认 Python 版本(Unversioned Python 命令)1234567891011121314151617如果你有希望在系统路径中找到python命令的应用程序，则需要创建unversioned python命令并设置默认版本。要将Python 3设置为系统范围内的非版本化python命令，请使用Alternatives实用程序：$ sudo alternatives --set python /usr/bin/python3对于Python 2，输入：$ sudo alternatives --set python /usr/bin/python2Alternatives命令创建一个指向指定python版本的symlink python。在终端中键入python --version，你应该看到默认的Python版本。要更改默认版本，请使用上面的命令之一，如果要删除未版本控制的python命令，请输入：$ sudo alternatives --auto python 附件参考资源 在 CentOS 8 上安装 Python 3 和 Python 2，及设置默认 Python 版本","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"},{"name":"centos8","slug":"centos8","permalink":"http://fansichao.github.com/blog/tags/centos8/"}]},{"title":"Linux-BashShell","slug":"Languages/Linux/linux-bashshell","date":"2021-10-23T11:54:51.105Z","updated":"2021-10-23T11:54:51.105Z","comments":true,"path":"Languages/Linux/linux-bashshell.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-bashshell.md/","excerpt":"","text":"tags: Linux Bash Shell Script 2019 年 12 月 BashShell 简介bash shell 是一个命令解释器，它在操作系统的最外层，负责用户程序与内核进行交互操作的一种接口，将用户输入的命令翻译给操作系统，并将处理后的结果输出至屏幕。 bash shell 的作用 使用 shell 实现对 Linux 系统的大部分管理，例如：文件管理、用户管理、权限管理、磁盘管理、网络管理、软件管理、应用管理…… BashShell 使用语法功能模块Tips检查文件是否存在12345678910111213141516171819202122232425262728293031323334353637383940if [ ! -d $&#123;config_path&#125; ]; then echo &quot;&gt;&gt;&gt; 配置文件$&#123;config_path&#125;不存在&quot; exit 0fi#shell判断文件夹是否存在if [ ! -d &quot;/Top&quot; ]; then mkdir -p /Topfi#shell判断文件,目录是否存在或者具有权限folder=&quot;/Top&quot;file=&quot;/Top/test.txt&quot;# -x 参数判断 $folder 是否存在并且是否具有可执行权限if [ ! -x &quot;$folder&quot;]; then mkdir &quot;$folder&quot;fi# -d 参数判断 $folder 是否存在if [ ! -d &quot;$folder&quot;]; then mkdir &quot;$folder&quot;fi# -f 参数判断 $file 是否存在if [ ! -f &quot;$file&quot; ]; then touch &quot;$file&quot;fi# -n 判断一个&quot;变量&quot;是否有值if [ ! -n &quot;$file&quot; ]; then echo &quot;$file 变量为空！&quot; exit 0fi# 判断两个变量的字符串内容是否相同if [ &quot;$file1&quot; = &quot;$file2&quot; ]; then echo &quot;$file1 equal $file2&quot;else echo &quot;$file1 not equal $file2&quot;fi 检查字符串是否在其中12345STR=&#x27;GNU/Linux is an operating system&#x27;SUB=&#x27;Linux&#x27;if [[ &quot;$STR&quot; == *&quot;$SUB&quot;* ]]; then echo &quot;It&#x27;s there.&quot;fi https://www.linuxidc.com/Linux/2019-08/159866.htm 检查字符串是否存在文件中1234567if cat $&#123;bash_path&#125; | grep &quot;source $&#123;out_path&#125;&quot; &gt; /dev/null 2&gt;&amp;1then # echo &quot;source $&#123;out_path&#125; 已经存在&quot; continueelse echo &quot;source $&#123;out_path&#125;&quot; &gt;&gt; $&#123;bash_path&#125;fi 解决 sudo 默认密码12sudo_password=qwe123echo $&#123;sudo_password&#125; | sudo -S sh -c &quot;echo &#x27;ssss&#x27; &gt; /root/1.log&quot; 读取配置文件 config.ini配置文件config.ini 12345[CONFIG_NAME]KEY1 = val1KEY2 = val2[CONFIG_NAME2]KEY3 = val3 配置脚本 build_env.sh 内容，只能 . build_env.sh执行,否则需要手动su - xxx使环境变量生效 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677(env) [scfan@fdm ~]$ cat build_env.sh#!/bin/bash# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 项目配置 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 功能说明# - 项目配置虚拟环境变量# - 参数检查-在项目代码中检查# - 支持参数清理,支持多次运行# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 参数配置 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 可修改config_path=config.iniout_path=~/.fdm_profile# 不可修改bash_path=~/.bash_profileif [ ! -f $&#123;config_path&#125; ]; then echo &quot;&gt;&gt;&gt; 配置文件$&#123;config_path&#125;不存在&quot; exit 0fi# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 读取配置文件 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;# 读取配置文件 所有信息# 删除空白行# 删除左右空格 `echo $name | awk &#x27;$1=$1&#x27;`# 检查是否包含字符 [[ $name =~ &quot;[&quot; ]]function read_config()&#123; # 读取配置文件 IFS=&quot;=&quot; while read -r name value do if [ &quot;$name&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$value&quot; == &quot;&quot; ] &amp;&amp; [[ $name =~ &quot;[&quot; ]] &amp;&amp; [[ $name =~ &quot;]&quot; ]]; then echo &quot;# item $name&quot; &gt;&gt; $&#123;out_path&#125; elif [ &quot;$name&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$value&quot; != &quot;&quot; ]; then # 去除左右空格 name=`echo $name | awk &#x27;$1=$1&#x27;` value=`echo $value | awk &#x27;$1=$1&#x27;` echo &quot;export $&#123;name&#125;=$&#123;value&#125;&quot; &gt;&gt; $&#123;out_path&#125; else tmp=0 fi done &lt; $&#123;config_path&#125;&#125;# &gt;&gt;&gt; 读取配置文件-方式2-仅供参考# __readINI [配置文件路径+名称] [节点名] [键值]# function __readINI() &#123;# INIFILE=$1; SECTION=$2; ITEM=$3# _readIni=`awk -F &#x27;=&#x27; &#x27;/[&#x27;$SECTION&#x27;]/&#123;a=1&#125;a==1&amp;&amp;$1~/&#x27;$ITEM&#x27;/&#123;print $2;exit&#125;&#x27; $INIFILE`# echo $&#123;_readIni&#125;# &#125;# _IP=( $( __readINI $config_path Project_Name PROJECT_NAME ) )# echo $&#123;_IP&#125; &gt;&gt; $&#123;out_path&#125;function set_config()&#123; # 使配置文件生效 if cat $&#123;bash_path&#125; | grep &quot;source $&#123;out_path&#125;&quot; &gt; /dev/null 2&gt;&amp;1 then # echo &quot;source $&#123;out_path&#125; 已经存在&quot; tmp=0 else echo &quot;source $&#123;out_path&#125;&quot; &gt;&gt; $&#123;bash_path&#125; fi . $&#123;bash_path&#125;&#125;function clean_config()&#123; # 清理配置 echo &quot;&quot; &gt; $&#123;out_path&#125;&#125;clean_config;read_config;set_config; 脚本输出结果 12345# item [CONFIG_NAME]export KEY1=val1export KEY2=val2# item [CONFIG_NAME2]export KEY3=val3 问题记录sudo pip command not found123# 解决 sudo pip 失败的问题echo &quot;alias sudo=&#x27;sudo env PATH=$PATH&#x27;&quot; &gt;&gt; ~/.bashrcsource ~/.bashrc sudo echo Permission denied 权限不够的问题1234# 如下解决方案sudo sh -c &#x27;echo &quot;This is testPage.&quot; &gt;&gt; /usr/local/nginx/html/index.html&#x27;sudo tee version.txt &lt;&lt;&lt; &quot;要插入内容&quot;echo qwe123 | sudo -S sh -c &quot;echo &#x27;ssss&#x27; &gt; /root/1.log&quot;","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://fansichao.github.com/blog/tags/shell/"}]},{"title":"Linux-性能测试工具","slug":"Languages/Linux/linux-cmdn-test","date":"2021-10-23T11:54:51.105Z","updated":"2021-10-23T11:54:51.106Z","comments":true,"path":"Languages/Linux/linux-cmdn-test.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-cmdn-test.md/","excerpt":"","text":"TODO 待完善 安装说明12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879说明:1. 性能测试，安装系统后和安装项目后各测试一遍。并记录信息。2. 记录 fio’以及systeminfo的信息。根据nmon查看性能瓶颈。文件如下：nmon16d_x86.tar.gzfio-2.1.10.tar.gzdio.pysysteminfo.shlibpcap-1.4.0-4.20130826git2dbcaa1.el6.x86_64.rpmlibpcap-devel-1.4.0-4.20130826git2dbcaa1.el6.x86_64.rpmiftop-0.17.tar.gziperf-1.7.0-1.1.el3.rf.x86_64.rpm## 依赖安装yum install openssh-clients -yyum install readline-devel.* gcc zlib zlib-devel openssl openssl-devel -yyum install dmidecode -y########## 安装nmonroot 用户# 创建目录 nmon_filemkdir nmon_file &amp;&amp; cd nmon_file &amp;&amp; tail -zxvf /data/software/CetnOS/cmdn_packages/nmon16d_x86.tar.gz &amp;&amp; ./nmon_x86_64_centos6# 给予权限####### 安装fiotar -zxvf /data/software/CetnOS/cmdn_packages/fio-2.1.10.tar.gzcd fio-2.1.10./configure &amp;&amp; make all &amp;&amp; make install &amp;&amp; make clean &amp;&amp; make distclean## 测试详细信息fio -filename=/dev/sda -direct=1 -iodepth 1 -thread -rw=read -ioengine=psync -bs=16k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest###### 使用systeminfo，查看系统大体性能。sh /data/software/CetnOS/cmdn_packages/systeminfo.sh###### nmon使用命令c cpum memoryd diskn net##### iftop 使用命令 看网络，端口使用情况 TODO 联网安装参考链接：http://www.vpser.net/manage/iftop.htmlyum install flex byacc libpcap ncurses ncurses-devel libpcap-devel -ytar zxvf iftop-0.17.tar.gzcd iftop-0.17. /configuremake &amp;&amp; make installiftop##### iftop 离线安装rpm -ivh /data/software/CetnOS/cmdn_packages/libpcap-1.4.0-4.20130826git2dbcaa1.el6.x86_64.rpmrpm -ivh /data/software/CetnOS/cmdn_packages/libpcap-devel-1.4.0-4.20130826git2dbcaa1.el6.x86_64.rpmyum install flex byacc libpcap ncurses ncurses-devel libpcap-devel -ytar zxvf /data/software/CetnOS/cmdn_packages/iftop-0.17.tar.gzcd iftop-0.17./configure &amp;&amp; make &amp;&amp; make installiftopiftop -B -i eth0#### iperf测试带宽用的。参考链接：http://blog.csdn.net/lin_credible/article/details/8670330# 安装rpm -ivh iperf-1.7.0-1.1.el3.rf.x86_64.rpm参考链接：http://man.linuxde.net/iperf详细使用参见如下文档：","categories":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"}]},{"title":"ReadMe-Linux 软件技术","slug":"Languages/Linux/README","date":"2021-10-23T11:54:51.104Z","updated":"2021-10-23T11:54:51.104Z","comments":true,"path":"Languages/Linux/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/README.md/","excerpt":"","text":"Linux 思维导图 Linux-目录索引 Linux 知识 Linux-常用命令 Linux-功能模块 Linux-术语介绍 Linux-BashShell Linux 功能模块 FTP 文件传输功能 Locale 语言环境 Network 网络配置 NFS : 远程服务器-文件共享 Ntpd : 远程服务器-时间同步 Raid : 磁盘阵列-磁盘备份 SSH : 网络服务程序 yum 源配置 ： Linux-包管理工具 Centos8 使用记录 HTTPS 证书配置 Virtualenv-虚拟环境 Linux 工具脚本等 性能测试工具 性能监控工具 关机前执行脚本 参考资源 Linux 基础知识 BashShell 基础知识","categories":[],"tags":[]},{"title":"Apache","slug":"Languages/Linux/linux-apache","date":"2021-10-23T11:54:51.104Z","updated":"2021-10-23T11:54:51.104Z","comments":true,"path":"Languages/Linux/linux-apache.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Linux/linux-apache.md/","excerpt":"","text":"Apache 简介 Apache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩充，将 Perl/Python 等解释器编译到服务器中。同时 Apache 音译为阿帕奇，是北美印第安人的一个部落，叫阿帕奇族，在美国的西南部。也是一个基金会的名称、一种武装直升机等等. 百度百科 Apache Apacheweb 服务器软件拥有以下特性： 1.支持最新的 HTTP/1.1 通信协议 2.拥有简单而强有力的基于文件的配置过程 3.支持通用网关接口 4.支持基于 IP 和基于域名的虚拟主机 5.支持多种方式的 HTTP 认证 6.集成 Perl 处理模块 7.集成代理服务器模块 8.支持实时监视服务器状态和定制服务器日志 9.支持服务器端包含指令(SSI) 10.支持安全 Socket 层(SSL) 11.提供用户会话过程的跟踪 12.支持 FastCGI 13.通过第三方模块可以支持 JavaServlets Apache 功能TODO Apache 功能 后置,暂无需求 Apache 参数详解参考链接: centos7 部署 Apache 服务器 其他Centos7-Apache 配置示例步骤 1 配置 scfan.conf 配置文件: 123456789101112# /etc/httpd/conf.d/scfan.confUser scfanGroup scfan&lt;VirtualHost *:80&gt; DocumentRoot &quot;/home/scfan/project/FISAMS/branches/branch_scfan/src/web/fdm&quot; &lt;Directory &quot;/home/scfan/project/FISAMS/branches/branch_scfan/src/web/fdm&quot;&gt; options Indexes MultiViews AllowOverride all Allow from all &lt;/Directory&gt;&lt;/VirtualHost&gt; 步骤 2 重命名 welcome.conf: 12# 重命名后不会再显示 testing 123 而是会显示详细报错mv /etc/httpd/conf.d/welcome.conf /etc/httpd/conf.d/welcome.conf.bak 步骤 3 重启服务: 1/bin/systemctl restart httpd.service 报错: StackOverFlow - You don’t have permission to access / on this server.,后续步骤已解决此问题,此处可供参考 步骤 4 目录授权: 12345678910# 采用单层授权, 避免整个目录文件都权限被变更[root@fdm conf]# chmod +x /home/scfan/project/FISAMS/branches/branch_scfan/src/web/fdm[root@fdm conf]# chmod +x /home/scfan/project/FISAMS/branches/branch_scfan/src/web/[root@fdm conf]# chmod +x /home/scfan/project/FISAMS/branches/branch_scfan/src/[root@fdm conf]# chmod +x /home/scfan/project/FISAMS/branches/branch_scfan/[root@fdm conf]# chmod +x /home/scfan/project/FISAMS/branches/[root@fdm conf]# chmod +x /home/scfan/project/FISAMS/[root@fdm conf]# chmod +x /home/scfan/project[root@fdm conf]# chmod +x /home/scfan[root@fdm conf]# chmod +x /home 步骤 5 修改 配置文件 /etc/httpd/conf/httpd.conf: 1234567891011121314# 配置监听端口 对应 scfan.conf 配置文件41 #Listen 12.34.56.78:8042 Listen 8043 Listen 888844 LimitRequestLine 40940 # 限制 Apache 请求长度,根据实际需要增加# 注释如下代码105 # &lt;Directory /&gt;106 # AllowOverride none107 # Require all denied108 # &lt;/Directory&gt;# 解决方法vi /etc/httpd/conf/httpd.conf 加入一句 ServerName localhost:80 步骤 6 重启服务: 1/bin/systemctl restart httpd.service 1234567891011121314151617181920212223242526# 查看Apache服务状态时,显示 Could not reliably determine the server&#x27;s fully qualified domain name[root@41d129b3de9a ~]# /bin/systemctl status httpd.service● httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled) Active: active (running) since Fri 2020-04-10 11:28:31 UTC; 3s ago Docs: man:httpd(8) man:apachectl(8) Process: 13192 ExecStop=/bin/kill -WINCH $&#123;MAINPID&#125; (code=exited, status=0/SUCCESS) Main PID: 13199 (httpd) Status: &quot;Processing requests...&quot; CGroup: /docker/41d129b3de9ac86439cf7cf46d42d061b26ab31c138520d2090f9d5a9b1f0757/system.slice/httpd.service ├─13199 /usr/sbin/httpd -DFOREGROUND ├─13200 /usr/sbin/httpd -DFOREGROUND ├─13201 /usr/sbin/httpd -DFOREGROUND ├─13202 /usr/sbin/httpd -DFOREGROUND ├─13203 /usr/sbin/httpd -DFOREGROUND └─13204 /usr/sbin/httpd -DFOREGROUND ‣ 13199 /usr/sbin/httpd -DFOREGROUNDApr 10 11:28:31 41d129b3de9a systemd[1]: Starting The Apache HTTP Server...Apr 10 11:28:31 41d129b3de9a httpd[13199]: AH00558: httpd: Could not reliably determine the server&#x27;s fully qualified domain name, using 172.18.0.86. Set the &#x27;Ser...his messageApr 10 11:28:31 41d129b3de9a systemd[1]: Started The Apache HTTP Server.Hint: Some lines were ellipsized, use -l to show in full.# 解决方法vi /etc/httpd/conf/httpd.conf 加入一句 ServerName localhost:80 Apache 测试页面Apache 测试页意味着: Apache 测试页，意味着您的服务器已正确配置并可以使用。从技术上讲，此页面是首次安装 Apache Web 服务器时的默认索引页面。 那么如何使 Apache 测试页消失呢: 只需打开/var/www/index.html 文件并对其进行修改或删除文件(尽管它可能会触发新的错误)。在 Red Hat Enterprise Linux/CentOS/Fedora Core 下，重命名或删除文件/etc/httpd/conf.d/welcome.conf 以确保您没有看到 Apache 测试页。 您现在可以将内容添加到目录/var/www/html/中。请注意，在您这样做之前，访问您网站的用户将看到默认页面，而不是您的内容。要防止使用此页面，请遵循文件/etc/httpd/conf.d/welcome.conf 中的说明。 常用命令123# 查看 Apache日志/var/log/httpd 附件参考资源使用 &amp; 简单配置 &amp; 复杂配置 &amp; 参数详解 &amp; 相关说明 Centos7 配置 Apache 实现 HTTPS Centos7 下配置 Apache 的虚拟主机 CentOS 7 Apache 服务的安装与配置 centos7 上搭建 http 服务器以及设置目录访问 问题Apache has not been designed to serve pages while running as root问题说明: root 用户下无法启动 httpd 服务 日志信息: 12345678910111213141516171819[root@cf8d90d17e9a ~]# systemctl status httpd.service● httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled) Active: failed (Result: exit-code) since Mon 2019-12-16 02:06:58 UTC; 25s ago Docs: man:httpd(8) man:apachectl(8) Process: 9553 ExecStop=/bin/kill -WINCH $&#123;MAINPID&#125; (code=exited, status=1/FAILURE) Process: 9552 ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND (code=exited, status=1/FAILURE) Main PID: 9552 (code=exited, status=1/FAILURE)Dec 16 02:06:58 cf8d90d17e9a systemd[1]: Starting The Apache HTTP Server...Dec 16 02:06:58 cf8d90d17e9a httpd[9552]: AH00526: Syntax error on line 1 of /etc/httpd/conf.d/fdm.conf:Dec 16 02:06:58 cf8d90d17e9a httpd[9552]: Error:\\tApache has not been designed to serve pages while\\n\\trunning as root. There are known ...Dec 16 02:06:58 cf8d90d17e9a systemd[1]: httpd.service: main process exited, code=exited, status=1/FAILUREDec 16 02:06:58 cf8d90d17e9a kill[9553]: kill: cannot find process &quot;&quot;Dec 16 02:06:58 cf8d90d17e9a systemd[1]: httpd.service: control process exited, code=exited status=1Dec 16 02:06:58 cf8d90d17e9a systemd[1]: Failed to start The Apache HTTP Server.Dec 16 02:06:58 cf8d90d17e9a systemd[1]: Unit httpd.service entered failed state.Dec 16 02:06:58 cf8d90d17e9a systemd[1]: httpd.service failed. 解决方法: 用于 /etc/httpd/conf.d/fdm.conf 配置中 User 和 Group 不能为root,修改为其他用户即可 12345678910User fdmGroup fdm&lt;VirtualHost *:80&gt; DocumentRoot /home/fdm/web/fdm &lt;Directory /home/fdm/web/fdm&gt; options Indexes MultiViews AllowOverride all Allow from all &lt;/Directory&gt;&lt;/VirtualHost&gt; Forbidden You don’t have permission to access xxx.html问题说明: 文件权限不足 解决方法 1: 12345# 一层层授权chmod +x /dirachmod +x /dira/dirb/chmod +x /dira/dirb/index.html# 或者 直接 chmod 777 -R /dira/dirb/index.html 解决方法 2: 修改配置文件/etc/httpd/conf/httpd.conf 1DocumentRoot &quot;/home/fdm/web/fdm&quot; 解决方法 3:修改配置文件/etc/httpd/conf/httpd.conf 12345# 注释如下代码105 # &lt;Directory /&gt;106 # AllowOverride none107 # Require all denied108 # &lt;/Directory&gt; 以上情况,不同问题解决方法不同,可以叠加使用。 Failed to connect to bus: No such file or directory123# Docker中安装 apache[root@6431285efdee conf.d]# /bin/systemctl restart httpd.serviceFailed to connect to bus: No such file or directory 参考链接：https://github.com/microsoft/WSL/issues/2941 123# 解决方案 启动dbus$ sudo mkdir -p /run/dbus$ sudo dbus-daemon --system 12345678[root@6431285efdee conf.d]# /bin/systemctl restart httpd.serviceFailed to restart httpd.service: Failed to activate service &#x27;org.freedesktop.systemd1&#x27;: timed out (service_start_timeout=25000ms)See system logs and &#x27;systemctl status httpd.service&#x27; for details.[root@6431285efdee conf.d]# systemctl status httpd.serviceFailed to get properties: Connection timed out","categories":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"}],"tags":[{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"}]},{"title":"Go","slug":"Languages/Go/readme","date":"2021-10-23T11:54:51.103Z","updated":"2021-10-23T11:54:51.103Z","comments":true,"path":"Languages/Go/readme.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Go/readme.md/","excerpt":"","text":"GO 开发指南 目录索引 Go-简介 Go-环境配置 参考资源 GO-菜鸟教程 GO 语言中文网 Go 语言每日推荐","categories":[],"tags":[]},{"title":"Go","slug":"Languages/Go/go-env-config","date":"2021-10-23T11:54:51.077Z","updated":"2021-10-23T11:54:51.077Z","comments":true,"path":"Languages/Go/go-env-config.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Go/go-env-config.md/","excerpt":"","text":"开发环境配置.bash_profile配置 1234567891011121314151617# 配置 $GOPATH/bin 可以直接使用 bin/xxx 命令export GOROOT=/usr/lib/golang/export GOPATH=~/goexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin# &gt;&gt;&gt;&gt;&gt;&gt;&gt; Go Proxy 加速# 启用 Go Modules 功能go env -w GO111MODULE=on# 配置 GOPROXY 环境变量，以下三选一# 1. 七牛 CDNgo env -w GOPROXY=https://goproxy.cn,direct# 2. 阿里云go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct# 3. 官方# go env -w GOPROXY=https://goproxy.io,direct GOROOT 目录介绍$GOPATH 环境变量定义了 Go 工作区的路径。一般设置为 $HOME/go $GOROOT 定义的是 Go 的代码，编译器和工具的区域。 一般设置为 /usr/lib/golang 123456GOPATH.├── bin 存放通过 go install 按照的命令├── pkg 存储预编译目标文件的地方，以加速程序的后续编译.仅编译遇到问题需要处理删除├── src 所有 .go 文件或源代码的位置│ └── github.com ResourcesGO-社区 wiki Go 国内加速镜像 https://geektutu.com/post/quick-go-gin.html Golang爬虫全攻略https://www.jianshu.com/p/4e53d4727152 Pholcus（幽灵蛛）是一款纯 Go 语言编写的支持分布式的高并发爬虫软件https://github.com/henrylee2cn/pholcus GO常见问题cannot find main module; see ‘go help modules’ https://blog.csdn.net/mr_oldcold/article/details/100759488","categories":[],"tags":[]},{"title":"Go 语言简介","slug":"Languages/Go/go-info","date":"2021-10-23T11:54:51.077Z","updated":"2021-10-23T11:54:51.078Z","comments":true,"path":"Languages/Go/go-info.md/","link":"","permalink":"http://fansichao.github.com/blog/Languages/Go/go-info.md/","excerpt":"","text":"tags: Go 什么是 GO 语言Go 是一种过程编程语言，可用于快速机器代码编译。它是一种静态类型的编译语言。它提供了并发机制，可以轻松开发多核和联网的机器级程序。它是快速，动态类型和解释语言；它提供对接口和类型嵌入的支持。 Go 语言是由 Google 的 Robert Griesemer，Rob Pike 和 Ken Thompson 于 2007 年开发，但于 2009 年作为开源编程语言推出。 Go 语言的优缺点优点： 它有很大的社区支持 它得到了谷歌的支持 它提供快速的编译时间 它简单易行 它用于提供高性能。 缺点： Go 语言中缺少一些库，尤其是 UI 工具包。 对于 Go，所有库文件必须具有单个包。 它不支持泛型 在处理多个项目时，它会在其他工件上创建依赖关系因子 go 语言的特点语言设计： Go 语言的设计者有意识地保持语言简单易懂。整个细节都在少量（一部分）页面中，并且通过语言中的面向对象支持做出了一些有趣的设计决策。对此，语言是固执的，并推荐一种实现事物的惯用方法。它更喜欢组合而不是继承。在 Go 语言中，“少花钱多办事”就是口头禅。 包管理： Go 将现代开发人员处理开源项目的工作流合并在一起，并将其包含在管理外部包的方式中。工具中直接提供了对获取外部包和用一组简单命令发布您自己的包的支持。 强大的标准库： Go 具有强大的标准库，以包的形式分发。 静态类型： Go 是静态类型语言。因此，在这个编译器中，不仅可以成功编译代码，还可以确保类型转换和兼容性。由于这个特性，Go 避免了我们在动态类型语言中遇到的所有问题。 测试支持： Go 本身为我们提供了单元测试功能。简单来说：这是一种简单的机制，可以将单元测试与代码并行地编写；因此我们可以通过自己的测试了解代码覆盖率。这可以很容易地作为示例用于生成代码文档。 平台独立： Go 语言就像 Java 语言一样，支持平台独立。由于其模块化设计和模块化，即代码被编译并转换为尽可能小的二进制形式，因此，它不需要依赖性。它的代码可以在任何平台上编译，也可以在任何服务器和应用程序上编译。 GO 语言应用场景Go 语言主要用作服务器端开发，其定位是用来开发“大型软件”的 Go 语言作为服务器编程语言，很适合处理日志、数据打包、虚拟机处理、文件系统、分布式系统、数据库代理等；网络编程方面，Go 语言广泛应用于 Web 应用、API 应用、下载应用等；除此之外，Go 语言还可用于内存数据库和云平台领域，目前国外很多云平台都是采用 Go 开发。 参考资源Go 语言的优缺点介绍","categories":[],"tags":[]},{"title":"Spark-使用文档","slug":"BigData/bigdata-spark","date":"2021-10-23T11:54:51.074Z","updated":"2021-10-23T11:54:51.074Z","comments":true,"path":"BigData/bigdata-spark.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-spark.md/","excerpt":"","text":"1.1. Spark 说明Apache Spark 是一个围绕速度、易用性和复杂分析构建的大数据处理框架，最初在 2009 年由加州大学伯克利分校的 AMPLab 开发，并于 2010 年成为 Apache 的开源项目之一，与 Hadoop 和 Storm 等其他大数据和 MapReduce 技术相比，Spark 有如下优势： Spark 提供了一个全面、统一的框架用于管理各种有着不同性质(文本数据、图表数据等)的数据集和数据源(批量数据或实时的流数据)的大数据处理的需求 官方资料介绍 Spark 可以将 Hadoop 集群中的应用在内存中的运行速度提升 100 倍，甚至能够将应用在磁盘上的运行速度提升 10 倍 Spark 官网 1.2. Spark 框架spark 运行流程图 Spark 架构 详见参考链接：https://blog.csdn.net/swing2008/article/details/60869183 1.3. Hadoop 说明Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。 Hadoop 实现了一个分布式文件系统(Hadoop Distributed File System)，简称 HDFS。 Hadoop 的框架最核心的设计就是：HDFS 和 MapReduce。HDFS 为海量的数据提供了存储，而 MapReduce 则为海量的数据提供了计算 Hadoop 百度百科 Hadoop 优点: 高可靠性。Hadoop 按位存储和处理数据的能力值得人们信赖。 高扩展性。Hadoop 是在可用的计算机集簇间分配数据并完成计算任务的，这些集簇可以方便地扩展到数以千计的节点中。 高效性。Hadoop 能够在节点之间动态地移动数据，并保证各个节点的动态平衡，因此处理速度非常快。 高容错性。Hadoop 能够自动保存数据的多个副本，并且能够自动将失败的任务重新分配。 低成本。与一体机、商用数据仓库以及 QlikView、Yonghong Z-Suite 等数据集市相比，hadoop 是开源的，项目的软件成本因此会大大降低。 Hadoop 框架Hadoop 有两个核心模块，分布式存储模块 HDFS和分布式计算模块 Mapreduce. 1.4. Yarn 框架说明由于原有框架 JobTracker/TaskTracker 需要大规模的调整来修复它在可扩展性，内存消耗，线程模型，可靠性和性能上的缺陷,所以推出了 Yarn 框架。 参考链接：https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-yarn/ Yarn 框架核心在于将资源管理和任务调度/监控拆分。 资源管理器: 全局管理所有应用程序计算资源的分配 每一个应用的 ApplicationMaster 负责相应的调度和协调 ResourceManager 和每一台机器的节点管理服务器能够管理用户在那台机器上的进程并能对计算进行组织 ResourceManager :中心服务，调度和启动 Job 中的 ApplicationMaster,并监控 ApplicationMaster 存在情况 NodeManager : 负责 Container 状态的维护，并向 ResourceManager 返回日志 ApplicationMaster :负责一个 Job 生命周期内的所有工作 2. Spark 环境部署不同部署模式 Standalone 模式：独立部署模式 Apache Mesos Hadoop YARN Kubernetes 版本说明: Spark 2.4.0 Scala 2.12 Spark 和 Hadoop 版本必须相互配合 2.1. 安装 ScalaSpark 支持 Scala、Java 和 Python 等语言，不过 Spark 是采用 Scala 语言开发，所以必须先安装 Scala. 步骤 1：下载Scala-2.12.7 下载地址 1wget https://downloads.lightbend.com/scala/2.12.7/scala-2.12.7.tgz 步骤 2：解压 1234# 创建目录tar -zxvf scala-2.12.7.tgzsudo mv scala-2.12.7 /usr/local/scalasudo chown scfan:scfan -R /usr/local/scala 步骤 3：配置环境变量 12345# 打开文件sudo vim /etc/profile# 添加内容如下export SCALA_HOME=/usr/local/scalaexport PATH=$SCALA_HOME/bin:$PATH 步骤 4：生效与验证 123456(env) [scfan@WOM ~]$ source /etc/profile(env) [scfan@WOM ~]$ scalaWelcome to Scala 2.12.7 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_171).Type in expressions for evaluation. Or try :help.scala&gt; 2.2. 安装 Spark步骤 1：下载 1wget http://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz 步骤 2：解压 123tar -zxvf spark-2.4.0-bin-hadoop2.7.tgzsudo mv spark-2.4.0-bin-hadoop2.7 /usr/local/sparksudo chown -R scfan:scfan /usr/local/spark 步骤 3：配置环境变量 123456# 打开文件sudo vim /etc/profile# 添加内容如下# Spark pathexport SPARK_HOME=/usr/local/sparkexport PATH=$SPARK_HOME/bin:$PATH 步骤 4：生效与验证 12345678910111213141516171819(env) [scfan@WOM ~]$ source /etc/profile(env) [scfan@WOM spark]$ source /etc/profile(env) [scfan@WOM spark]$ pysparkPython 2.7.11 (default, Apr 10 2018, 16:42:22)[GCC 4.4.7 20120313 (Red Hat 4.4.7-18)] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.2018-12-06 15:37:54 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicableSetting default log level to &quot;WARN&quot;.To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ &#x27;_/ /__ / .__/\\_,_/_/ /_/\\_\\ version 2.4.0 /_/Using Python version 2.7.11 (default, Apr 10 2018 16:42:22)SparkSession available as &#x27;spark&#x27;.&gt;&gt;&gt; 步骤 5：启动 Spark 12345678910111213141516171819(env) [scfan@WOM spark]$ ./bin/spark-shell --master local[2]2018-12-06 15:49:10 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicableSetting default log level to &quot;WARN&quot;.To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).Spark context Web UI available at http://WOM:4040Spark context available as &#x27;sc&#x27; (master = local[2], app id = local-1544082590634).Spark session available as &#x27;spark&#x27;.Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ &#x27;_/ /___/ .__/\\_,_/_/ /_/\\_\\ version 2.4.0 /_/Using Scala version 2.11.12 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_171)Type in expressions to have them evaluated.Type :help for more information.scala&gt; 页面 UI: http://WOM:4040 2.3. 安装 Hadoop(本地单节点)安装步骤 安装 JDK 1.8+ 设置 SSH 无密钥登录 下载安装 Hadoop 设置环境变量 设置 Hadoop 配置文件 创建并格式化 HDFS 目录 启动 Hadoop 打开 Web 页面 2.3.1. 下载安装 Hadoop官网：https://hadoop.apache.org/releases.html 12345678# 下载wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz# 解压tar -zxvf hadoop-2.7.7.tar.gz# 迁移sudo mv hadoop-2.7.7 /usr/local/hadoop# 授权sudo chown scfan:scfan -R usr/local/hadoop 2.3.2. 设置环境变量文件 /etc/profile 12345678910111213141516## hadoop homeexport HADOOP_HOME=/usr/local/hadoop# hadoop pathexport PATH=$PATH:$HADOOP_HOME/binexport PATH=$PATH:$HADOOP_HOME/sbin# hadoop else envexport HADOOP_MAPRED_HOME=$HADOOP_HOMEexport HADOOP_COMMON_HOME=$HADOOP_HOMEexport HADOOP_HDFS_HOME=$HADOOP_HOMEexport YARN_HOME=$HADOOP_HOMEexport HADOOP_PREFIX=$HADOOP_HOMEexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop# hadoop libexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH 2.3.3. 修改 Hadoop 配置文件配置文件：/usr/local/hadoop/etc/hadoop/hadoop-env.sh 1export JAVA_HOME=/usr/java/jdk1.8.0_171 HDFS 默认名称 /usr/local/hadoop/etc/hadoop/core-site.xml 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; MapReduce 配置 /usr/local/hadoop/etc/hadoop/yarn-site.xml 123456789101112131415161718192021222324&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt; &lt;!-- 后续如果 spark-yarn 部署报错，需要解开此处 &lt;property&gt; &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt; &lt;value&gt;master:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt; &lt;value&gt;master:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt; &lt;value&gt;master:8031&lt;/value&gt; &lt;/property&gt; --&gt;&lt;/configuration&gt; Job 配置 /usr/local/hadoop/etc/hadoop/mapred-site.xml 12345678&lt;?xml version=&quot;1.0&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;vaule&gt;yarn&lt;/vaule&gt; &lt;/property&gt;&lt;/configuration&gt; HDFS 分布式文件系统 /usr/local/hadoop/etc/hadoop/hdfs-site.xml 1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;vlaue&gt;3&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;vlaue&gt;file:/usr/local/hadoop/hadoop_data/hdfs/namenode&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;vlaue&gt;file:/usr/local/hadoop/hadoop_data/hdfs/datanode&lt;/vlaue&gt; &lt;/property&gt;&lt;/configuration&gt; 2.3.4. 格式化目录12345# 创建存储目录mkdir -p /usr/local/hadoop/hadoop_data/hdfs/namenode/mkdir -p /usr/local/hadoop/hadoop_data/hdfs/datanode/# 进行格式化(如果报错，删除namenode下文件夹current)hadoop namenode -format # 会删除HDFS数据 2.3.5. 查看页面1234# 启动HDFSstart-dfs.sh# 启动Yarnstart-yarn.sh Hadoop 界面： http://localhost:8088HDFS 界面： http://localhost:50070 2.4. 部署 Spark Standalone Mode参考链接： http://spark.apache.org/docs/latest/spark-standalone.html 本地单机模式 123456# 启动主节点 默认端口8080./sbin/start-master.sh -h localhost --webui-port 8080# 启动子节点./sbin/start-slave.sh &lt;master-spark-URL&gt;例如: &lt;master-spark-URL&gt; 可以在页面localhost:8080上面查看./sbin/start-slave.sh spark://localhost:7077 2.5. 部署 Spark Mesos 模式参考链接： http://spark.apache.org/docs/latest/running-on-mesos.html Mesos 安装参考链接：https://open.mesosphere.com/downloads/mesos/ 123# 下载系统对应 rpm 包wget http://repos.mesosphere.com/el/6/x86_64/RPMS/mesos-1.7.0-2.0.1.el6.x86_64.rpmrpm -ivh mesos-1.7.0-2.0.1.el6.x86_64.rpm 前端 WebUI 启动命令 1mesos master --ip=localhost --work_dir=/var/lib/mesos 前端 WebUI 地址:http://localhost:5050/#/ 2.6. 部署 Spark Yarn参考链接： http://spark.apache.org/docs/latest/running-on-yarn.html 123456789101112命令参数:./bin/spark-submit --class path.to.your.Class --master yarn --deploy-mode cluster [options] &lt;app jar&gt; [app options]命令样例:$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \\ --master yarn \\ --deploy-mode cluster \\ --driver-memory 4g \\ --executor-memory 2g \\ --executor-cores 1 \\ --queue thequeue \\ examples/jars/spark-examples*.jar \\ 10 2.6.1. 问题记录问题说明 123456789101112# 执行命令$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \\ --master yarn \\ --deploy-mode cluster \\ --driver-memory 4g \\ --executor-memory 2g \\ --executor-cores 1 \\ --queue thequeue \\ examples/jars/spark-examples*.jar \\ 10# 报错如下2018-12-07 16:19:07 INFO Client:871 - Retrying connect to server: 0.0.0.0/0.0.0.0:8032. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS) 问题解决yarn-site.xml 增加如下内容 123456789101112&lt;property&gt; &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt; &lt;value&gt;master:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt; &lt;value&gt;master:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt; &lt;value&gt;master:8031&lt;/value&gt; &lt;/property&gt; 2.7. 部署 Spark KubernetesSpark Kubernetes: https//spark.apache.org/docs/latest/running-on-kubernetes.html kubernetes 官网：https://kubernetes.io/ TODO 3. Spark 数据统计3.1. SparkRDD 使用RDD - 弹性分布式数据集 RDD 是可以并行操作的容错的容错集合。创建 RDD 有两种方法：并行化 驱动程序中的现有集合，或引用外部存储系统中的数据集 官网 RDD 参考链接：http://spark.apache.org/docs/latest/rdd-programming-guide.html#resilient-distributed-datasets-rdds Spark 启动bin/pyspark Spark 初始化 创建 SparkContext 对象，告知 Spark 如何访问集群。 appName 参数是应用程序在群集 UI 上显示的名称 master 是 URL 1234567&gt;&gt;&gt; from pyspark import SparkContext, SparkConf&gt;&gt;&gt; appName=&quot;fdm&quot;&gt;&gt;&gt; master=&quot;mesos://localhost:5050&quot;&gt;&gt;&gt; conf = SparkConf().setAppName(appName).setMaster(master)&gt;&gt;&gt; sc = SparkContext(conf=conf)&gt;&gt;&gt; sc&lt;SparkContext master=local[*] appName=PySparkShell&gt; 并行化集合 1234&gt;&gt;&gt; data = [1, 2, 3, 4, 5]&gt;&gt;&gt; distData = sc.parallelize(data)&gt;&gt;&gt; print distDataParallelCollectionRDD[0] at parallelize at PythonRDD.scala:195 外部数据集支持导入本地数据集、HDFS://xxxxxx 等 123&gt;&gt;&gt; distFile = sc.textFile(&quot;data.txt&quot;)&gt;&gt;&gt; distFiledata.txt MapPartitionsRDD[2] at textFile at NativeMethodAccessorImpl.java:0 可写类型： int float double bool byte null dict保存和加载 SequenceFiles 1234&gt;&gt;&gt; rdd = sc.parallelize(range(1, 4)).map(lambda x: (x, &quot;a&quot; * x))&gt;&gt;&gt; rdd.saveAsSequenceFile(&quot;path/to/file&quot;)&gt;&gt;&gt; sorted(sc.sequenceFile(&quot;path/to/file&quot;).collect())[(1, u&#x27;a&#x27;), (2, u&#x27;aa&#x27;), (3, u&#x27;aaa&#x27;)] 3.2. SparkDataFrame 使用官网 DataFrame 参考链接：http://spark.apache.org/docs/latest/sql-programming-guide.html 初始化 Spark Session 1234567from pyspark.sql import SparkSessionspark = SparkSession \\ .builder \\ .appName(&quot;Python Spark SQL basic example&quot;) \\ .config(&quot;spark.some.config.option&quot;, &quot;some-value&quot;) \\ .getOrCreate() 创建 DataFrame 1234567891011# spark is an existing SparkSessiondf = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)# Displays the content of the DataFrame to stdoutdf.show()# +----+-------+# | age| name|# +----+-------+# |null|Michael|# | 30| Andy|# | 19| Justin|# +----+-------+ 3.3. SparkSQL 使用官网参考链接：http://spark.apache.org/docs/latest/sql-distributed-sql-engine.html#running-the-thrift-jdbcodbc-server 启动 Thrift JDBC / ODBC 服务器 1./sbin/start-thriftserver.sh 访问前端 UI 1http://localhost:4042/SQL/ 使用 beeline 来测试 Thrift JDBC / ODBC 服务器： 123./bin/beelinebeeline&gt; !connect jdbc:hive2://localhost:10000# 输入用户名和空白密码 启动 spark-sql 1./bin/spark-sql Spark 问题整理Service ‘SparkUI’ could not bind on port 4040. Attempting port 4041.问题：运行 Spark 脚本报错 12self.spark = SparkSession.builder.master(self.MASTER).appName(self.APPNAME).getOrCreate() 原因：由于启动一个 Spark context 时，SparkUI 默认会使用 4040 端口，当 4040 端口被占用时，则尝试使用另外一个端口 解决步骤：关闭 Spark-Shell 即可 错误日志: 123452018-12-27 09:38:59 WARN Utils:66 - Service &#x27;SparkUI&#x27; could not bind on port 4040. Attempting port 4041.I1227 09:39:02.612689 26652 sched.cpp:232] Version: 1.7.0I1227 09:39:02.619974 26650 sched.cpp:336] New master detected at master@192.168.172.70:5050I1227 09:39:02.620997 26650 sched.cpp:356] No credentials provided. Attempting to register without authentication Spark 操作细节Mesos 使用Messos 安装&amp;配置mesos 官方部署文档 Mesos 启动 &amp; 关闭12345678910111213141516171819202122232425262728cd /usr/local/spark./bin/spark-shell --master mesos://192.168.172.70:5050/etc/mesos-master/etc/mesos-slave# 关闭 mesos-master[root@WOM mesos-master]# netstat -lntp | grep 5050[root@WOM mesos-master]# kill -9 XXXX# 启动 mesoso-mastermesos-master --work_dir=/usr/local/mesos/master_data --log_dir=/usr/local/mesos/master_logs --no-hostname_lookup --ip=192.168.172.70 --cluster=wom# 启动master-salvemesos-slave --work_dir=/usr/local/mesos/salves_data --log_dir=/usr/local/mesos/salves_logs --master=192.168.172.70:5050 --no-hostname_lookup --ip=192.168.172.70 --port=5052# 启动 Spark./sbin/start-master.sh -h localhost --webui-port 8080(env) [scfan@WOM spark]$ bin/spark-shell --master mesos://192.168.172.70:5050 --total-executor-cores 1 --driver-memory 512M --executor-memory 512M## 2.4. 部署Spark Standalone Mode参考链接：- http://spark.apache.org/docs/latest/spark-standalone.html本地单机模式# 启动主节点 默认端口8080./sbin/start-master.sh -h localhost --webui-port 8080# 启动子节点./sbin/start-slave.sh &lt;master-spark-URL&gt;例如: &lt;master-spark-URL&gt; 可以在页面localhost:8080上面查看./sbin/start-slave.sh spark://localhost:7077 删除 mesos 工作目录123456789101112如果我需要一个新的mesos集群，我需要master的干净工作目录。但问题不在于10.142.55.202约瑟夫吴说。我清除了所有的word_dir，并摆脱了这个问题。如何清理工作目录：找到mesos-master工作目录$ cat /etc/mesos-master/work_dir/var/lib/mesos去掉它$ rm -rf /var/lib/mesos Initial job has not accepted any resources; check your cluster UI to ensure that workers are registered and have sufficient resources当前的集群的可用资源不能满足应用程序所请求的资源 资源分 2 类： cores 和 ramCore 代表对执行可用的 executor slotsRam 代表每个 Worker 上被需要的空闲内存来运行你的 Application。解决方法：应用不要请求多余空闲可用资源的关闭掉已经执行结束的 Application 解决方法： 执行参数修改内存大小 释放内存，增加内存大小 export SPARK_WORKER_MEMORY=512Mexport SPARK_DAEMON_MEMORY=256M 这些–executor-memory、–driver-memory 你是否能先指定得更小些(比如 50M、100M) 1.因为提交任务的节点不能和 worker 节点交互，因为提交完任务后提交任务节点上会起一个进程，展示任务进度，大多端口为 4044，工作节点需要反馈进度给该该端口，所以如果主机名或者 IP 在 hosts 中配置不正确。所以检查下主机名和 ip 是否配置正确。 2.也有可能是内存不足造成的。内存设置可以根据情况调整下。另外，也检查下 web UI 看看，确保 worker 节点处于 alive 状态。 Sparktags: 202101 大数据 常用命令123456789# 查看分区目录hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200916/part-00109,# 删除分区目录数据后，也必须删除要分区alter table db_dwd_test.dwd_ei_basic_tsc_tax_illegal_ds drop partition (p_date=&#x27;20200917&#x27;);# 进入 调试环境~/spark/bin/pyspark --master $&#123;master_ip&#125; --total-executor-cores 5# 执行任务~/spark/bin/spark-sql --master &#123;master_ip&#125; --driver-memory 1g --executor-memory 1g --executor-cores 1 --total-executor-cores 2 xx.py 问题记录分区数量过多a union all b最后的分区数量会变为 a 的分区+b 的分区 12320/09/18 14:12:13 INFO TaskSetManager: Finished task 17432.0 in stage 3.0 (TID 17437) in 503 ms on 192.168.201.8 (executor 1) (17435/17436)20/09/18 14:12:13 INFO TaskSetManager: Finished task 17426.0 in stage 3.0 (TID 17431) in 1312 ms on 192.168.207.96 (executor 0) (17436/17436)20/09/18 14:12:13 INFO TaskSchedulerImpl: Removed TaskSet 3.0, whose tasks have all completed, from pool spark-submit 报 No module 的错误问题说明：使用外部依赖包，报 not module xxxx 可能原因 https://segmentfault.com/q/1010000004569365 问题：No module named tools.utils 12345678910111213141516[An error occurred while calling o35.sql.: org.apache.spark.SparkException: Job aborted due to stage failure: Task 5 in stage 0.0 failed 4 times, most recent failure: Lost task 5.3 in stage 0.0 (TID 43, 192.168.201.40, executor 4): org.apache.spark.api.python.PythonException: Traceback (most recent call last): File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 159, in main func, profiler, deserializer, serializer = read_udfs(pickleSer, infile) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 93, in read_udfs arg_offsets, udf = read_single_udf(pickleSer, infile) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 79, in read_single_udf f, return_type = read_command(pickleSer, infile) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/worker.py&quot;, line 55, in read_command command = serializer._read_with_length(file) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/serializers.py&quot;, line 169, in _read_with_length return self.loads(obj) File &quot;/home/dfs/spark/python/lib/pyspark.zip/pyspark/serializers.py&quot;, line 458, in loads return pickle.loads(obj) File &quot;./scripts.zip/scripts/zhengfujigou.py&quot;, line 19, in &lt;module&gt;ImportError: No module named tools.utils 修改步骤 1：替换 --py-files 为单个 12345678910111213141516 bash /home/scrapyer/spark/bin/spark-submit --master $&#123;spark_ip&#125; \\ --executor-memory 1g \\ --total-executor-cores 20 \\ --py-files /home/scrapyer/workspace/fansichao/workspace/$&#123;frame_dir&#125;/conf.zip \\ --py-files /home/scrapyer/workspace/fansichao/workspace/$&#123;frame_dir&#125;/tools.zip \\ --py-files /home/scrapyer/workspace/fansichao/workspace/$&#123;frame_dir&#125;/scripts.zip \\ $&#123;code_path&#125; $&#123;conf_path&#125; $&#123;p_date&#125; &gt; logs/$&#123;app_name&#125;_$&#123;p_date&#125;.log 2&gt;&amp;1修改为 bash /home/scrapyer/spark/bin/spark-submit --master $&#123;spark_ip&#125; \\ --executor-memory 1g \\ --total-executor-cores 5 \\ --py-files conf.zip,tools.zip,scripts.zip \\ $&#123;code_path&#125; $&#123;conf_path&#125; $&#123;p_date&#125;# &gt; logs/$&#123;app_name&#125;_$&#123;p_date&#125;.log 2&gt;&amp;1 使用同一个 --py-files, 而非多个--py-files !!! 多个 --py-files 在 Thanos 平台上无法真实 Kill 程序。 ResourcesSpark 官方文档 http://spark.apache.org/docs/latest/quick-start.html http://spark.apache.org/docs/latest/rdd-programming-guide.html http://spark.apache.org/docs/latest/sql-programming-guide.html 技术笔记TipsVscode 配置代码行数editor.rulers，默认 79,建议 160 – Spark 提交任务的三种方式https://www.cnblogs.com/itboys/p/9998666.html 参考资源优质博客 Python2 爬虫学习系列教程 https://cuiqingcai.com/1052.html Spark 技术知识Spark 知识术语Spark 分区的区别 Spark 学习目录 https://blog.csdn.net/a544258023/article/details/94635807 常用命令Spark - 重新分区 https://blog.csdn.net/u010720408/article/details/90229461 123456# 查看分区目录 hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200916/part-00109,# Hive中执行 删除分区目录数据后，也必须删除要分区alter table db_dwd_test.dwd_ei_basic_tsc_tax_illegal_ds drop partition (p_date=&#x27;20200917&#x27;); 多个 py-files 使用参考链接：https://www.jianshu.com/p/92be93cfbb97 hivE 数据类型 https://www.cnblogs.com/dangjf/p/10071683.html Spark 数据类型转换 https://blog.csdn.net/an1090239782/article/details/102541024 1234567891011121314ByteType：代表一个字节的整数。范围是-128到127ShortType：代表两个字节的整数。范围是-32768到32767IntegerType：代表4个字节的整数。范围是-2147483648到2147483647LongType：代表8个字节的整数。范围是-9223372036854775808到9223372036854775807FloatType：代表4字节的单精度浮点数 DoubleType：代表8字节的双精度浮点数DecimalType：代表任意精度的10进制数据。通过内部的java.math.BigDecimal支持。BigDecimal由一个任意精度的整型非标度值和一个32位整数组成StringType：代表一个字符串值BinaryType：代表一个byte序列值BooleanType：代表boolean值Datetime类型：TimestampType：代表包含字段年，月，日，时，分，秒的值DateType：代表包含字段年，月，日的值 Spark 问题记录TaskSetManager 过多，分区数过多123456789101112131415161718# 问题背景sql = &quot;&quot;&quot;insert overwrite table &#123;dwd_table&#125; partition(p_date=&#x27;&#123;p_date&#125;&#x27;)&#123;dwd_table&#125; union &#123;ods_table&#125;&quot;&quot;&quot;# 问题描述发现sql执行时，TaskSetManager分配的任务过多，part过多# 解决方案1. 在读取HDFS的时候设置固定的分区数。 数据进入ods时配置好分区数rd = spark_tools.spark_context.textFile(hdfs_path).repartition(200)2. 此sql执行方法修改，先保存为df,再进行df.repartition(200, &quot;p_date&quot;)重新分区后,再保存到数据中。# 其他说明去除 union, 使用 &quot;insert overwrite table &#123;dwd_table&#125;&quot; and &quot;insert into table &#123;dwd_table&#125;&quot;时，会产生 copy 分区，此方法不适用！db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-00199db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-00199_copy_1 详细日志 12345678920/09/18 14:12:13 INFO TaskSetManager: Finished task 17432.0 in stage 3.0 (TID 17437) in 503 ms on 192.168.201.8 (executor 1) (17435/17436)20/09/18 14:12:13 INFO TaskSetManager: Finished task 17426.0 in stage 3.0 (TID 17431) in 1312 ms on 192.168.207.96 (executor 0) (17436/17436)20/09/18 14:12:13 INFO TaskSchedulerImpl: Removed TaskSet 3.0, whose tasks have all completed, from pool20/09/18 14:12:13 INFO DAGScheduler: ResultStage 3 (sql at NativeMethodAccessorImpl.java:0) finished in 1248.035 s20/09/18 14:12:13 INFO DAGScheduler: Job 2 finished: sql at NativeMethodAccessorImpl.java:0, took 1250.992204 s-06729, dest: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-06729, Status:true20/09/18 14:20:15 INFO Hive: Renaming src: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/.hive-staging_hive_2020-09-18_13-51-12_491_7780753504198483023-1/-ext-10000/part-06730, dest: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-06730, Status:true20/09/18 14:20:15 INFO Hive: Renaming src: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/.hive-staging_hive_2020-09-18_13-51-12_491_7780753504198483023-1/-ext-10000/part-06731, dest: hdfs://offline-cluster/user/hive/warehouse/db_dwd_test.db/dwd_ei_basic_tsc_tax_illegal_ds/p_date=20200917/part-06731, Status:true","categories":[],"tags":[]},{"title":"大数据可视化","slug":"BigData/bigdata-visualization-web","date":"2021-10-23T11:54:51.074Z","updated":"2021-10-23T11:54:51.074Z","comments":true,"path":"BigData/bigdata-visualization-web.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-visualization-web.md/","excerpt":"","text":"参考资源大数据分析，数据可视化之美，BI 参考书籍：《鲜活的数据 数据可视化指南》","categories":[],"tags":[]},{"title":"RabbitMQ-消息队列","slug":"BigData/bigdata-rabbitmq","date":"2021-10-23T11:54:51.073Z","updated":"2021-10-23T11:54:51.073Z","comments":true,"path":"BigData/bigdata-rabbitmq.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-rabbitmq.md/","excerpt":"","text":"tags: 202101 Hot RabbitMQ-Install获取镜像的时候要获取 management 版本的, management 版本的才带有管理界面。 123456 (env) [scfan@iZbp11s2mtszc6msuj80h5Z mypro]$ docker search rabbitmq:managementNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmacintoshplus/rabbitmq-management Based on rabbitmq:management whit python and… 6 [OK]xiaochunping/rabbitmq xiaochunping/rabbitmq:management 2018-06-30 4transmitsms/rabbitmq-sharded Fork of rabbitmq:management with sharded_exc… 0yunyan2140/rabbitmq docker pull rabbitmq:management 0 123456789101112131415161718192021(env) [scfan@iZbp11s2mtszc6msuj80h5Z mypro]$ docker pull rabbitmq:managementmanagement: Pulling from library/rabbitmq171857c49d0f: Already exists419640447d26: Already exists61e52f862619: Already exists856781f94405: Already existsfd5f3d3bac09: Already existse526190d8f2c: Already existsbcaa754c1ece: Already exists41118e0c01b4: Already existsac3f2ab39238: Already existscd9ffc55132f: Already existsefec50445663: Pull complete598675d7eebd: Pull completefe4e66a2587e: Pull completeDigest: sha256:70a3b5de3bd8d408cde0b98382887dbb1af1ac6d42c606edccb7edc922a2fcefStatus: Downloaded newer image for rabbitmq:managementdocker.io/library/rabbitmq:management(env) [scfan@iZbp11s2mtszc6msuj80h5Z mypro]$ docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management4314392bfa7de947378bd7594bc98ebb47410b5cbf685d9ed330d218f9133d65 访问地址 http://IP:15672 默认用户名密码 guest guest 如果出现无法访问或者容器无法运行 12345678# 15672（ui管理端口）firewall-cmd --add-port=15672/tcp --permanent# 5672（远程连接端口）firewall-cmd --add-port=5672/tcp --permanent# 重载防火墙firewall-cmd --reload且 阿里云服务器对应的安全组策略需要同样配置 参考链接: Resources Centos8 搭建 RabbitMQ 环境详细记录 Docker 安装部署 RabbitMQ python 操作RabbitMq详解 RabbitMQ遇到的坑","categories":[],"tags":[]},{"title":"ScyllaDB-使用文档","slug":"BigData/bigdata-scylladb","date":"2021-10-23T11:54:51.073Z","updated":"2021-10-23T11:54:51.073Z","comments":true,"path":"BigData/bigdata-scylladb.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-scylladb.md/","excerpt":"","text":"简介说明由于 scylladb 数据库本身就是基于 cassandra 的”优化版”。 ScyllaDB 是用 C++ 重写的 Cassandra，每节点每秒处理 100 万 TPS。ScyllaDB 完全兼容 Apache Cassandra，拥有比 Cassandra 多 10x 倍的吞吐量，降低了延迟。 ScyllaDB 是性能优异的 NoSQL 列存储数据库。 ScyllaDB 在垃圾收集或者 Compaction 的时候不需要暂停；在常规生产负载的时候可以添加和删除节点。 ScyllaDB_结构图 Cassandra 结构图 功能支持ScyllaDB 官网号称 实时大数据数据库: 每个节点的向上扩展性能为 1,000,000s OPS，可横向扩展到数百个节点，并且 99％的延迟小于 1 毫秒 最快的 NoSQL 数据库 最快的分布式数据库 适用于最苛刻应用程序的真正 NoSQL 数据库 ScyllaDB 官网文档 优缺点ScyllDB 优缺点 优点: 低而一致的延迟: 无锁实现和独立的内存管理堆栈消除了对 JVM 或 Linux 页面缓存的低效率依赖，从而提供了一致的低延迟。 永远在线: 跨多个节点和数据中心的自动故障转移和复制可实现可靠的容错能力。 吞吐量提高 10 倍: 用 C ++编写，可压缩硬件的每一性能，并允许每个节点最多进行 1,000,000 次读/写操作 高度可扩展: 自动分片，同类服务器和本地多数据中心实施可实现无缝的线性扩展，而不会影响应用程序的停机时间或性能。 易于使用: Apache Cassandra 的有线协议，丰富的驱动程序以及与 Spark，Presto 和 Graph 工具的集成，可实现资源高效且性能高效的编码。 社区支持: 从第一天开始，Scylla 就成为一个开源数据库，得到了越来越多的贡献者社区的支持。 解决压实，流化和修复: 工作负载调节提供了一系列动态调度算法，以最大程度地减少数据库操作延迟抖动并减少压缩流和修复时间。 最佳总拥有成本: C ++框架提高了效率，可以捕获比现有基础结构高 10 倍的吞吐量，从而创建了强大而高效的 NoSQL 数据库。 自动调节: 全自动和动态的数据库调整可有效管理内部资源，需要零配置，并立即提高性能。 缺点: 多副本之间数据不一致时经常需要手动修复来搞定 虽然 ScyllaDB 能够充分的利用底层硬件的 IOPS，但长时间运行后的 Compaction 带来的冗余 IOPS 消耗. 术语说明https://blog.csdn.net/mytobaby00/article/details/80375196 同类软件综合对比安装部署环境依赖 CentOS7.3+ 64 位机器 Yum 已经配置完毕 需要 Root 用户或者 Sudo 权限 确认所有端口已打开 当前环境 CentOS7.5 非 Root 用户 已关闭 SeLinux、防火墙 官网安装链接 安装 ScyllaDB12345678910# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 安装 ScyllaDByum install -y sudo# 卸载 abrt。 abrt 会和 ScyllaDB 冲突sudo yum remove -y abrt# 配置yum源sudo yum install epel-release -ysudo curl -o /etc/yum.repos.d/scylla.repo -L http://repositories.scylladb.com/scylla/repo/uuidValue/centos/scylladb-3.0.repo# 安装最新版本sudo yum install scylla -y# sudo yum install scylla-3.0.6 -y # 安装指定版本 配置 ScyllaDB参考链接: 官网 ScyllaDB 群集配置 配置文件 1/etc/scylla/scylla.yaml cluster_name 集群的名称，集群中的所有节点必须具有相同的名称 seeds 种子节点在启动过程中用于引导八卦过程并加入集群 listen_address Scylla 用于连接到集群中其他 Scylla 节点的 IP 地址 rpc_address 客户端连接接口的 IP 地址(Thrift，CQL) 修改指定 IP 123456789seed_provider: - class_name: org.apache.cassandra.locator.SimpleSeedProvider parameters: # seeds is actually a comma-delimited list of addresses. # Ex: &quot;&lt;ip1&gt;,&lt;ip2&gt;,&lt;ip3&gt;&quot; - seeds: &quot;192.168.172.72&quot;listen_address: 192.168.172.72rpc_address: 192.168.172.72 Scylla 设置 &amp; 启动命令123# 前置依赖pip install PyYAMLpip install cqlsh 运行 scylla_setup 脚本以调整系统设置 sudo scylla_setup scylla_setup 详细内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100[root@c7c57188b482 software]# scylla_setupSkip any of the following steps by answering &#x27;no&#x27;Do you want to run check your kernel version?Yes - runs a script to verify that the kernel for this instance qualifies to run Scylla. No - skips the kernel check.[YES/no]YESINFO 2019-10-15 01:35:59,324 [shard 0] iotune - /var/tmp/mnt passed sanity checksThis is a supported kernel version.Do you want to verify the ScyllaDB packages are installed?Yes - runs a script to confirm that ScyllaDB is installed. No - skips the installation check.[YES/no]YESDo you want the Scylla server service to automatically start when the Scylla node boots?Yes - Scylla server service automatically starts on Scylla node boot. No - skips this step. Note you will have to start the Scylla Server service manually.[YES/no]yesDo you want to disable SELinux?Yes - disables SELinux. Choosing Yes greatly improves performance. No - keeps SELinux activated.[YES/no]yesTraceback (most recent call last): File &quot;/usr/lib/scylla/scylla_selinux_setup&quot;, line 36, in &lt;module&gt; res = out(&#x27;sestatus&#x27;) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 423, in run with Popen(*popenargs, **kwargs) as process: File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 729, in __init__ restore_signals, start_new_session) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 1364, in _execute_child raise child_exception_type(errno_num, err_msg, err_filename)FileNotFoundError: [Errno 2] No such file or directory: &#x27;sestatus&#x27;: &#x27;sestatus&#x27;SELinux setup failed. Press any key to continue...Do you want to setup Network Time Protocol(NTP) to auto-synchronize the current time on the node?Yes - enables time-synchronization. This keeps the correct time on the node. No - skips this step.[YES/no]yesFailed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: ap.stykers.moe * epel: hkg.mirror.rackspace.com * extras: mirrors.163.com * updates: ap.stykers.moePackage ntp-4.2.6p5-29.el7.centos.x86_64 already installed and latest versionPackage ntpdate-4.2.6p5-29.el7.centos.x86_64 already installed and latest versionNothing to do15 Oct 01:36:45 ntpdate[5717]: adjust time server 5.79.108.34 offset 0.015830 secDo you want to setup RAID0 and XFS?It is recommended to use RAID0 and XFS for Scylla data. If you select yes, you will be prompted to choose the unmounted disks to use for Scylla data. Selected disks are formatted as part of the process.Yes - choose a disk/disks to format and setup for RAID0 and XFS. No - skip this step.[YES/no]noDo you want to enable coredumps?Yes - sets up coredump to allow a post-mortem analysis of the Scylla state just prior to a crash. No - skips this step.[YES/no]yeskernel.core_pattern = |/usr/lib/systemd/systemd-coredump %p %u %g %s %t %e&quot;Do you want to setup a system-wide customized configuration for Scylla?Yes - setup the sysconfig file. No - skips this step.[YES/no]yesDo you want to enable Network Interface Card (NIC) and disk(s) optimization?Yes - optimize the NIC queue and disks settings. Selecting Yes greatly improves performance. No - skip this step.[YES/no]yesERROR: &#x27;disks&#x27; tuning was requested but no disks were found. Your system can&#x27;t be tuned until the issue is fixed.Traceback (most recent call last): File &quot;/usr/lib/scylla/scylla_sysconfig_setup&quot;, line 75, in &lt;module&gt; rps_cpus = out(&#x27;&#123;&#125; --tune net --nic &#123;&#125; --get-cpu-mask&#x27;.format(perftune_base_command(), ifname)) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 438, in run output=stdout, stderr=stderr)subprocess.CalledProcessError: Command &#x27;[&#x27;/usr/lib/scylla/perftune.py&#x27;, &#x27;--tune&#x27;, &#x27;disks&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/data&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/commitlog&#x27;, &#x27;--tune&#x27;, &#x27;net&#x27;, &#x27;--nic&#x27;, &#x27;eth0&#x27;, &#x27;--get-cpu-mask&#x27;]&#x27; returned non-zero exit status 1.NIC queue setup failed. Press any key to continue...Do you want iotune to study your disks IO profile and adapt Scylla to it?Yes - let iotune study my disk(s). Note that this action will take a few minutes. No - skip this step.[YES/no]yesDo you want to install node exporter to export Prometheus data from the node? Note that the Scylla monitoring stack uses this dataYes - install node exporter. No - skip this step.[YES/no]yesnode_exporter already installednode exporter setup failed. Press any key to continue...Do you want to set the CPU scaling governor to Performance level on boot?Yes - sets the CPU scaling governor to performance level. No - skip this step.[YES/no]yesFailed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: ap.stykers.moe * epel: hkg.mirror.rackspace.com * extras: mirrors.163.com * updates: ap.stykers.moePackage kernel-tools-3.10.0-1062.1.2.el7.x86_64 already installed and latest versionNothing to doDo you want to enable fstrim service?Yes - runs fstrim on your SSD. No - skip this step.[YES/no]yesScyllaDB setup finished.Please restart your machine before using ScyllaDB, as you have disabled SELinux. 启动服务 sudo systemctl start scylla-server 运行 nodetool nodetool status 12345678/usr/bin/filter_cassandra_attributes.py:10: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details. attributes.update(load(open(sys.argv[i], &#x27;r&#x27;)))Datacenter: datacenter1=======================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- Address Load Tokens Owns (effective) Host ID RackUN 127.0.0.1 217.36 KiB 256 100.0% d0d39d92-2974-4893-bd36-495391cac39b rack1 运行 cqlsh cqlsh --cqlversion=3.3.1 192.168.172.72 123456(env) [scfan@scfan scyllaDB]$ cqlsh --cqlversion=3.3.1 192.168.172.72Connected to at 192.168.172.72:9042.[cqlsh 5.0.1 | Cassandra 3.0.8 | CQL spec 3.3.1 | Native protocol v4]Use HELP for help.cqlsh&gt;cqlsh&gt; 运行 cassandra-stress 1cassandra-stress write -mode cql3 native Scylla Monitoring(可选,建议安装) 附件问题记录No module named yamlpip install PyYAML No module named cqlshlibpip install cqlsh cannot import name cqlshhandling123456789(env) [scfan@scfan scyllaDB]$ find /usr/lib/ -name cqlshlib/usr/lib/python2.7/site-packages/cqlshlib(env) [scfan@scfan scyllaDB]$ export PYTHONPATH=/usr/lib/python2.7/site-packages/将如下加入到文件 /etc/profile 中# Scyllaexport PYTHONPATH=/usr/lib/python2.7/site-packages/# 使其生效source /etc/profile Unable to connect to any servers12(env) [scfan@scfan scyllaDB]$ cqlshConnection error: (&#x27;Unable to connect to any servers&#x27;, &#123;&#x27;192.168.172.72:9042&#x27;: ProtocolError(&quot;cql_version &#x27;3.0.10&#x27; is not supported by remote (w/ native protocol). Supported versions: [u&#x27;3.3.1&#x27;]&quot;,)&#125;) 解决方法 12# cqlsh --cqlversion=x.x.x host 指定版本和主机IPcqlsh --cqlversion=3.3.1 192.168.172.72 No nodes present in the cluster12345[root@c7c57188b482 software]# nodetool status/usr/bin/filter_cassandra_attributes.py:10: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details. attributes.update(load(open(sys.argv[i], &#x27;r&#x27;)))nodetool: Scylla API server HTTP GET to URL &#x27;/storage_service/ownership/&#x27; failed: runtime error: No nodes present in the cluster. Has this node finished starting up?See &#x27;nodetool help&#x27; or &#x27;nodetool help &lt;command&gt;&#x27;. setting up system keyspace重启后经常报错如下: TODO 原因未知………. 12345678910111213141516171819202122[root@d276413151a0 graph_data]# systemctl status scylla-server.service -l● scylla-server.service - Scylla Server Loaded: loaded (/usr/lib/systemd/system/scylla-server.service; enabled; vendor preset: disabled) Drop-In: /etc/systemd/system/scylla-server.service.d └─capabilities.conf Active: failed (Result: exit-code) since 二 2019-10-15 09:12:10 UTC; 6s ago Process: 7020 ExecStopPost=/usr/lib/scylla/scylla_stop (code=exited, status=0/SUCCESS) Process: 6942 ExecStart=/usr/bin/scylla $SCYLLA_ARGS $SEASTAR_IO $DEV_MODE $CPUSET (code=exited, status=1/FAILURE) Process: 6941 ExecStartPre=/usr/lib/scylla/scylla_prepare (code=exited, status=0/SUCCESS) Main PID: 6942 (code=exited, status=1/FAILURE) Status: &quot;setting up system keyspace&quot;10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 22] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 12] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 4] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 18] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 19] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 scylla[6942]: [shard 16] compaction_manager - Asked to stop10月 15 09:12:10 d276413151a0 systemd[1]: scylla-server.service: main process exited, code=exited, status=1/FAILURE10月 15 09:12:10 d276413151a0 systemd[1]: Failed to start Scylla Server.10月 15 09:12:10 d276413151a0 systemd[1]: Unit scylla-server.service entered failed state.10月 15 09:12:10 d276413151a0 systemd[1]: scylla-server.service failed. 安装日志123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206[root@15b1fad0dfef java_install]# scylla_setupSkip any of the following steps by answering &#x27;no&#x27;Do you want to run check your kernel version?Yes - runs a script to verify that the kernel for this instance qualifies to run Scylla. No - skips the kernel check.[YES/no]YESINFO 2019-10-12 01:33:43,496 [shard 0] iotune - /var/tmp/mnt passed sanity checksThis is a supported kernel version.Do you want to verify the ScyllaDB packages are installed?Yes - runs a script to confirm that ScyllaDB is installed. No - skips the installation check.[YES/no]YESDo you want the Scylla server service to automatically start when the Scylla node boots?Yes - Scylla server service automatically starts on Scylla node boot. No - skips this step. Note you will have to start the Scylla Server service manually.[YES/no]YESCreated symlink from /etc/systemd/system/multi-user.target.wants/scylla-server.service to /usr/lib/systemd/system/scylla-server.service./bin/sh: sudo: command not foundDo you want to disable SELinux?Yes - disables SELinux. Choosing Yes greatly improves performance. No - keeps SELinux activated.[YES/no]YESTraceback (most recent call last): File &quot;/usr/lib/scylla/scylla_selinux_setup&quot;, line 36, in &lt;module&gt; res = out(&#x27;sestatus&#x27;) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 423, in run with Popen(*popenargs, **kwargs) as process: File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 729, in __init__ restore_signals, start_new_session) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 1364, in _execute_child raise child_exception_type(errno_num, err_msg, err_filename)FileNotFoundError: [Errno 2] No such file or directory: &#x27;sestatus&#x27;: &#x27;sestatus&#x27;SELinux setup failed. Press any key to continue...Do you want to setup Network Time Protocol(NTP) to auto-synchronize the current time on the node?Yes - enables time-synchronization. This keeps the correct time on the node. No - skips this step.[YES/no]YESFailed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: mirrors.163.com * epel: hk.mirrors.thegigabit.com * extras: ap.stykers.moe * updates: ap.stykers.moeResolving Dependencies--&gt; Running transaction check---&gt; Package ntp.x86_64 0:4.2.6p5-29.el7.centos will be installed--&gt; Processing Dependency: libopts.so.25()(64bit) for package: ntp-4.2.6p5-29.el7.centos.x86_64---&gt; Package ntpdate.x86_64 0:4.2.6p5-29.el7.centos will be installed--&gt; Running transaction check---&gt; Package autogen-libopts.x86_64 0:5.18-5.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================== Package Arch Version Repository Size==================================================================================================Installing: ntp x86_64 4.2.6p5-29.el7.centos base 548 k ntpdate x86_64 4.2.6p5-29.el7.centos base 86 kInstalling for dependencies: autogen-libopts x86_64 5.18-5.el7 base 66 kTransaction Summary==================================================================================================Install 2 Packages (+1 Dependent package)Total download size: 701 kInstalled size: 1.6 MDownloading packages:(1/3): ntpdate-4.2.6p5-29.el7.centos.x86_64.rpm | 86 kB 00:00:00(2/3): ntp-4.2.6p5-29.el7.centos.x86_64.rpm | 548 kB 00:00:00(3/3): autogen-libopts-5.18-5.el7.x86_64.rpm | 66 kB 00:00:14--------------------------------------------------------------------------------------------------Total 47 kB/s | 701 kB 00:00:14Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : autogen-libopts-5.18-5.el7.x86_64 1/3 Installing : ntpdate-4.2.6p5-29.el7.centos.x86_64 2/3 Installing : ntp-4.2.6p5-29.el7.centos.x86_64 3/3 Verifying : ntp-4.2.6p5-29.el7.centos.x86_64 1/3 Verifying : ntpdate-4.2.6p5-29.el7.centos.x86_64 2/3 Verifying : autogen-libopts-5.18-5.el7.x86_64 3/3Installed: ntp.x86_64 0:4.2.6p5-29.el7.centos ntpdate.x86_64 0:4.2.6p5-29.el7.centosDependency Installed: autogen-libopts.x86_64 0:5.18-5.el7Complete!12 Oct 01:38:44 ntpdate[13000]: adjust time server 116.203.151.74 offset -0.083053 secCreated symlink from /etc/systemd/system/multi-user.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service.Do you want to setup RAID0 and XFS?It is recommended to use RAID0 and XFS for Scylla data. If you select yes, you will be prompted to choose the unmounted disks to use for Scylla data. Selected disks are formatted as part of the process.Yes - choose a disk/disks to format and setup for RAID0 and XFS. No - skip this step.[YES/no]NoDo you want to enable coredumps?Yes - sets up coredump to allow a post-mortem analysis of the Scylla state just prior to a crash. No - skips this step.[YES/no]Yeskernel.core_pattern = |/usr/lib/systemd/systemd-coredump %p %u %g %s %t %e&quot;Do you want to setup a system-wide customized configuration for Scylla?Yes - setup the sysconfig file. No - skips this step.[YES/no]YesDo you want to enable Network Interface Card (NIC) and disk(s) optimization?Yes - optimize the NIC queue and disks settings. Selecting Yes greatly improves performance. No - skip this step.[YES/no]YERROR: &#x27;disks&#x27; tuning was requested but no disks were found. Your system can&#x27;t be tuned until the issue is fixed.Traceback (most recent call last): File &quot;/usr/lib/scylla/scylla_sysconfig_setup&quot;, line 75, in &lt;module&gt; rps_cpus = out(&#x27;&#123;&#125; --tune net --nic &#123;&#125; --get-cpu-mask&#x27;.format(perftune_base_command(), ifname)) File &quot;/usr/lib/scylla/scylla_util.py&quot;, line 280, in out return subprocess.check_output(cmd, shell=shell).strip().decode(&#x27;utf-8&#x27;) File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 356, in check_output **kwargs).stdout File &quot;/usr/lib64/python3.6/subprocess.py&quot;, line 438, in run output=stdout, stderr=stderr)subprocess.CalledProcessError: Command &#x27;[&#x27;/usr/lib/scylla/perftune.py&#x27;, &#x27;--tune&#x27;, &#x27;disks&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/data&#x27;, &#x27;--dir&#x27;, &#x27;/var/lib/scylla/commitlog&#x27;, &#x27;--tune&#x27;, &#x27;net&#x27;, &#x27;--nic&#x27;, &#x27;eth0&#x27;, &#x27;--get-cpu-mask&#x27;]&#x27; returned non-zero exit status 1.NIC queue setup failed. Press any key to continue...Do you want iotune to study your disks IO profile and adapt Scylla to it?Yes - let iotune study my disk(s). Note that this action will take a few minutes. No - skip this step.[YES/no]Ytuning /sys/dev/block/0:99ERROR 2019-10-12 01:42:39,980 [shard 0] iotune - Exception when qualifying filesystem at /var/lib/scylla/dataERROR:root:/var/lib/scylla/data did not pass validation tests, it may not be on XFS and/or has limited disk space.This is a non-supported setup, and performance is expected to be very bad.For better performance, placing your data on XFS-formatted directories is required.To override this error, enable developer mode as follow:sudo /usr/lib/scylla/scylla_dev_mode_setup --developer-mode 1IO configuration setup failed. Press any key to continue...Do you want to install node exporter to export Prometheus data from the node? Note that the Scylla monitoring stack uses this dataYes - install node exporter. No - skip this step.[YES/no]YCreated symlink from /etc/systemd/system/multi-user.target.wants/node-exporter.service to /usr/lib/systemd/system/node-exporter.service.node_exporter successfully installedDo you want to set the CPU scaling governor to Performance level on boot?Yes - sets the CPU scaling governor to performance level. No - skip this step.[YES/no]Failed to set locale, defaulting to CLoaded plugins: fastestmirror, ovlLoading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirror01.idc.hinet.net * extras: ap.stykers.moe * updates: ap.stykers.moeResolving Dependencies--&gt; Running transaction check---&gt; Package kernel-tools.x86_64 0:3.10.0-1062.1.2.el7 will be installed--&gt; Processing Dependency: kernel-tools-libs = 3.10.0-1062.1.2.el7 for package: kernel-tools-3.10.0-1062.1.2.el7.x86_64--&gt; Processing Dependency: libcpupower.so.0()(64bit) for package: kernel-tools-3.10.0-1062.1.2.el7.x86_64--&gt; Running transaction check---&gt; Package kernel-tools-libs.x86_64 0:3.10.0-1062.1.2.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================== Package Arch Version Repository Size==================================================================================================Installing: kernel-tools x86_64 3.10.0-1062.1.2.el7 updates 7.8 MInstalling for dependencies: kernel-tools-libs x86_64 3.10.0-1062.1.2.el7 updates 7.7 MTransaction Summary==================================================================================================Install 1 Package (+1 Dependent package)Total download size: 16 MInstalled size: 310 kDownloading packages:(1/2): kernel-tools-libs-3.10.0-1062.1.2.el7.x86_64.rpm | 7.7 MB 00:00:03kernel-tools-3.10.0-1062.1.2.e FAILEDhttp://centos.ustc.edu.cn/centos/7.7.1908/updates/x86_64/Packages/kernel-tools-3.10.0-1062.1.2.el7.x86_64.rpm: [Errno 12] Timeout on http://centos.ustc.edu.cn/centos/7.7.1908/updates/x86_64/Packages/kernel-tools-3.10.0-1062.1.2.el7.x86_64.rpm: (28, &#x27;Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds&#x27;)Trying other mirror.(2/2): kernel-tools-3.10.0-1062.1.2.el7.x86_64.rpm | 7.8 MB 00:00:03--------------------------------------------------------------------------------------------------Total 472 kB/s | 16 MB 00:00:33Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : kernel-tools-libs-3.10.0-1062.1.2.el7.x86_64 1/2 Installing : kernel-tools-3.10.0-1062.1.2.el7.x86_64 2/2 Verifying : kernel-tools-3.10.0-1062.1.2.el7.x86_64 1/2 Verifying : kernel-tools-libs-3.10.0-1062.1.2.el7.x86_64 2/2Installed: kernel-tools.x86_64 0:3.10.0-1062.1.2.el7Dependency Installed: kernel-tools-libs.x86_64 0:3.10.0-1062.1.2.el7Complete!Created symlink from /etc/systemd/system/multi-user.target.wants/cpupower.service to /usr/lib/systemd/system/cpupower.service.Do you want to enable fstrim service?Yes - runs fstrim on your SSD. No - skip this step.[YES/no]ScyllaDB setup finished.Please restart your machine before using ScyllaDB, as you have disabled SELinux.","categories":[],"tags":[]},{"title":"PrestoDB-SQL","slug":"BigData/bigdata-prestodb","date":"2021-10-23T11:54:51.072Z","updated":"2021-10-23T11:54:51.072Z","comments":true,"path":"BigData/bigdata-prestodb.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-prestodb.md/","excerpt":"","text":"软件简介什么是 Presto 或 PrestoDB？ Presto（或 PrestoDB）是一种开源的分布式 SQL 查询引擎，从头开始设计用于针对任何规模的数据进行快速分析查询。它既可支持非关系数据源，例如 Hadoop 分布式文件系统 (HDFS)、Amazon S3、Cassandra、MongoDB 和 HBase，又可支持关系数据源，例如 MySQL、PostgreSQL、Amazon Redshift、Microsoft SQL Server 和 Teradata。 Presto 可在数据的存储位置查询数据，无需将数据移动到独立的分析系统。查询执行可在纯粹基于内存的架构上平行运行，大多数结果在几秒内即可返回。您将会发现，它已被许多知名公司采用，例如 Facebook、Airbnb、Netflix、Atlassian 和 Nasdaq。 Presto 的发展历史Presto 最初作为 Facebook 的项目启动，针对 300PB 的数据仓库运行交互式分析查询，使用大型基于 Hadoop/HDFS 的集群构建。在构建 Presto 之前，Facebook 使用的是 2008 年创建并推出的 Apache Hive，为 Hadoop 生态系统带来熟悉的 SQL 语法。Hive 在将复杂的 Java MapReduce 作业简化成类似 SQL 的查询方面对 Hadoop 生态系统有着重大影响，同时还能够执行大规模的任务。但是，它未针对交互式查询所需的高速性能进行优化。 在 2012 年，Facebook 数据基础设施组构建了 Presto，这种交互式查询系统能够以 PB 级规模快速运行。它于 2013 年春季在全公司范围内推广。2013 年 11 月，Facebook 将 Presto 作为 Apache 软件许可证下的开源软件，任何人都可以从 Github 上下载。今天，Presto 已成为在 Hadoop 上进行交互式查询的流行选择，获得了来自 Facebook 和其他组织的大量贡献。Facebook 的 Presto 实施的使用者超过一千名员工，他们每天运行超过 30000 次查询，处理的数据达到 1PB。 Presto 工作原理Presto 是在 Hadoop 上运行的分布式系统，使用与经典大规模并行处理 (MPP) 数据库管理系统相似的架构。它有一个协调器节点，与多个工作线程节点同步工作。用户将其 SQL 查询提交给协调器，由其使用自定义查询和执行引擎进行解析、计划并将分布式查询计划安排到工作线程节点之间。它设计用于支持标准 ANSI SQL 语义，包括复杂查询、聚合、联接、左/右外联接、子查询、开窗函数、不重复计数和近似百分位数。 查询编译之后，Presto 将请求处理到工作线程节点之间的多个阶段中。所有处理都在内存中进行，并以流水线方式经过网络中的不同阶段，从而避免不必要的 I/O 开销。添加更多工作线程节点可提高并行能力，并加快处理速度。 为了使 Presto 可扩展到任何数据源，它的设计采用了存储抽象化，以便于轻松地构建可插入的连接器。因此，Presto 拥有大量连接器，既可用于非关系数据源，例如 Hadoop 分布式文件系统 (HDFS)、Amazon S3、Cassandra、MongoDB 和 HBase，又可用于关系源，例如 MySQL、PostgreSQL、Amazon Redshift、Microsoft SQL Server 和 Teradata。数据在其存储位置接受查询，无需将其移动到独立的分析系统中。 语法介绍1 常用命令Base Command1show tables: 格式转换12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061-- 基础格式转换-- cast: 转换为指定类型presto:db_ods_test&gt; select cast(&#x27;2021-01-01&#x27; as date); _col0 ------------ 2021-01-01 (1 row)-- try_cast: 类型转换,支持 异常数据的转换. 避免由数据错误导致程序错误presto:db_ods_test&gt; select try_cast(&#x27;2019-01-22 08:05558:08&#x27; as timestamp); _col0 ------- NULL (1 row)-- 返回当前日期presto:db_ods_test&gt; select current_date,now(); _col0 | _col1 ------------+--------------------------------------- 2021-03-29 | 2021-03-29 11:24:08.734 Asia/Shanghai (1 row)-- format_datetime: timestamp 转为 指定格式字符串presto:db_ods_test&gt; select format_datetime(cast(&#x27;2021-01-01 00:00:00.000&#x27; as timestamp),&#x27;yyyyMMdd&#x27;) ; _col0 ---------- 20210101 (1 row)-- date_format: 字符串时间格式转换presto:db_ods_test&gt; select date_format(date_parse(&#x27;20210101&#x27;,&#x27;%Y%m%d&#x27;),&#x27;%Y-%m-%d&#x27;); _col0 ------------ 2021-01-01 (1 row)-- to_unixtime: 时间戳 转 unix 格式presto:db_ods_test&gt; select to_unixtime(try_cast(&#x27;2019-01-22 08:05:08&#x27; as timestamp)); _col0 --------------- 1.548115508E9 (1 row)-- from_unixtime: unix 转时间戳格式presto:db_ods_test&gt; select from_unixtime(to_unixtime(try_cast(&#x27;2019-01-22 08:05:08&#x27; as timestamp))); _col0 ------------------------- 2019-01-22 08:05:08.000 (1 row)-- format_datetime: 调整时间格式presto:db_ods_test&gt; select format_datetime(cast(&#x27;2019-01-22 08:05:08&#x27; as timestamp),&#x27;yyyy-MM-dd HH:mm:ss&#x27;); _col0 --------------------- 2019-01-22 08:05:08 (1 row)-- date: 返回日期表达式presto:db_ods_test&gt; select date(cast(&#x27;2021-01-01 00:00:00&#x27; as timestamp)); _col0 ------------ 2021-01-01 (1 row) Tips命令123456-- 提取 HOSTpresto:db_ods_test&gt; select url_extract_host(&#x27;http://192.168.1.1//query/abc&#x27;); _col0 ------------- 192.168.1.1 (1 row) 参考资源 Presto官方文档 Presto语法大全","categories":[],"tags":[]},{"title":"大数据之数据质量分析","slug":"BigData/bigdata-quality-analysis","date":"2021-10-23T11:54:51.072Z","updated":"2021-10-23T11:54:51.073Z","comments":true,"path":"BigData/bigdata-quality-analysis.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-quality-analysis.md/","excerpt":"","text":"数据质量互联网是一个建立在数据之上的服务行业，数据质量的好坏直接影响到企业的生存能力和竞争力。如果数据质量不佳，便容易给企业带来以下危害： 干扰运营分析、影响决策 影响算法模型质量，导致服务不够智能化 耗费人力，分析师、算法工程师、数据科学家因为数据质量问题推倒工作重来 数据质量标准 完整性 数据的记录和信息是否完整。如字段信息是否完整、有没有因上游系统出问题而导致的数据丢失、有没有出现正常 100w 的数据今天却没有数据的情况等。 准确性 数据的记录是否正确。简单的如是否出现常识性错误(年龄大于 200 岁，收货金额为负值等)，电话号码、邮箱、ip 等是否符合规范，枚举值是否正确等等。复杂一点的如基于维度的统计指标有没有问题，如平均值、总和、按照枚举值 group by数据分布有没有异常等。 及时性 数据产出是否及时。数仓团队加工数据需要指定几点前必须产出并交给下游业务和相关分析人员。一般决策分析师需要分析前一日的数据(T+1)，如果数据隔几天才能看到，就会失去分析数据的价值。而某些业务甚至有小时级别以及实时的需求，及时性要求也就更高了。 一致性 企业数仓可能存在分支，同一份数据在不同地方需要保持一致；对于一些表的值可能参照另外一些表需要保持一致；对于表的字段类型以及值也需要保持一致(如地点写上海还是上海市，性别是 f、m 还是 0、1 标示等等)。 如何提升数据质量Step 1：事前定义数据的监控规则 数据质量需求 下游主动发现问题、数据产品收集、监控事后问题优化 提炼规则 梳理对应指标、确定对象(多表、单表、字段)、通过影响程度确定资产等级、质量规则制定 Step 2：事中监控和控制数据生产过程 质量监控和工作流无缝对接 支持定时调度 强弱规则控制 ETL 流程 对脏数据进行质量清洗 Step 3：事后分析和问题跟踪 邮件短信报警(相关问题订阅) 稽核报告查询 数据质量报告的概览、历史趋势、异常查询、数据质量表覆盖率 问题分析 异常进行评估、严重程度、影响范围确定、问题分类 表打分和质量趋势 表的打分、表的质量趋势、表异常数据查询、对项目外提供表质量查询。 报警问题跟踪处理 数据质量事件、故障定义、故障处理和定级 要想真正解决数据质量问题，应该从需求开始 明确业务需求并从需求开始控制数据质量 建立数据质量管理机制 探查数据内容、结构和异常 建立数据质量度量并明确目标 设计和实施数据质量业务规则 将数据质量规则构建到数据集成过程中 检查异常并完善规则 对照目标，监测数据质量 对不同数据的数据问题分类处理 历史数据 用数据清洗的办法来解决，清洗的过程要综合使用各类数据源，提升历史数据的质量。 当前数据 当前数据的问题，需要通过从问题定义、问题发现、问题整改、问题跟踪、效果评估 5 个方面来解决 未来数据 未来数据的处理，一般要采用做数据规划的方法来解决，从整个企业信息化的角度出发，规划统一企业数据架构，制定企业数据标准和数据模型。借业务系统改造或者重建的时机，来从根本上提高数据质量 通过对不同时期数据的分类处理，做到事前预防、事中监控、事后改善，有助于从根源上解决数据质量问题，为企业的发展带来突破和创新。 质量监控工具 数据质量监控工具-Apache Griffin Apache Griffin 部署 参考资源 如何提升数据质量 网易猛犸大数据如何提升数据质量","categories":[],"tags":[]},{"title":"Hive","slug":"BigData/bigdata-hive","date":"2021-10-23T11:54:51.071Z","updated":"2021-10-23T11:54:51.071Z","comments":true,"path":"BigData/bigdata-hive.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-hive.md/","excerpt":"","text":"Hive 简介Hive：由 Facebook 开源用于解决海量结构化日志的数据统计。 Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类 SQL 查询功能。 1)Hive 处理的数据存储在 HDFS 2)Hive 分析数据底层的实现是 MapReduce 3)执行程序运行在 Yarn 上 Hive 优缺点 优点 操作接口采用类 SQL 语法，提供快速开发的能力(简单、容易上手)。 避免了去写 MapReduce，减少开发人员的学习成本。 Hive 的执行延迟比较高，因此 Hive 常用于数据分析，对实时性要求不高的场合。 Hive 优势在于处理大数据，对于处理小数据没有优势，因为 Hive 的执行延迟比较高。 Hive 支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。 缺点 1.Hive 的 HQL 表达能力有限 迭代式算法无法表达 数据挖掘方面不擅长，由于 MapReduce 数据处理流程的限制，效率更高的算法却无法实现。 2.Hive 的效率比较低 Hive 自动生成的 MapReduce 作业，通常情况下不够智能化 Hive 调优比较困难，粒度较粗 Hive 架构原理1．用户接口：Client CLI(command-line interface)、JDBC/ODBC(jdbc 访问 hive)、WEBUI(浏览器访问 hive) 2．元数据：Metastore 元数据包括：表名、表所属的数据库(默认是 default)、表的拥有者、列/分区字段、表的类型(是否是外部表)、表的数据所在目录等； 默认存储在自带的 derby 数据库中，推荐使用 MySQL 存储 Metastore 3．Hadoop 使用 HDFS 进行存储，使用 MapReduce 进行计算。 4．驱动器：Driver (1)解析器(SQL Parser)：将 SQL 字符串转换成抽象语法树 AST，这一步一般都用第三方工具库完成，比如 antlr；对 AST 进行语法分析，比如表是否存在、字段是否存在、SQL 语义是否有误。 (2)编译器(Physical Plan)：将 AST 编译生成逻辑执行计划。 (3)优化器(Query Optimizer)：对逻辑执行计划进行优化。 (4)执行器(Execution)：把逻辑执行计划转换成可以运行的物理计划。对于 Hive 来说，就是 MR/Spark。 Hive 通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的 Driver，结合元数据(MetaStore)，将这些指令翻译成 MapReduce，提交到 Hadoop 中执行，最后，将执行返回的结果输出到用户交互接口。 Hive 性能调优NVL：给值为 NULL 的数据赋值，它的格式是 NVL( value，default_value)。 它的功能是如果 value 为 NULL，则 NVL 函数返回 default_value 的值，否则返回 value 的值，如果两个参数都为 NULL ，则返回 NULL。 nvl 可能存在性能问题，建议使用 if(表达式,a,b) TIPs: 打开 Hive，输入 Explain ＋ 语句，就能够看到 SQL 语句解析成 MapReduce 的过程。 Join 和 group by 都会存在分发的情况，所以需要对应处理数据倾斜。 对 Hive 来说，数据量再大，都不怕。数据倾斜，是大难题 常用命令12345678910111213141516171819202122232425262728293031323334353637383940-- 1. 查看系统自带的函数hive&gt; show functions;-- 2. 显示自带的函数的用法hive&gt; desc function upper;-- 设置reduce个数hive (default)&gt; set mapreduce.job.reduces=3;-- 查看设置reduce个数hive (default)&gt; set mapreduce.job.reduces;-- 限制数据返回行数hive (default)&gt; select * from emp limit 5;-- hive查看建表语句show create table tablename;-- 查看hive表结构：describe tablename;desc tablename;-- 删除数据delete from db_dws_test.dws_ei_basic_tsc_tax_illegal_ds where p_date &gt;=&#x27;20200923&#x27;;-- 删除分区use db_dwd_test;alter table db_dws_test.dws_ei_basic_tsc_tax_illegal_ds drop partition (p_date &gt;= &#x27;20200923&#x27;);-- case when 语句select dept_id, case when sex = &#x27;1&#x27; then &#x27;男&#x27; when sex = &#x27;0&#x27; then &#x27;女&#x27; else &#x27;未知&#x27; end as sexfrom emp_sex ;-- 格式化字符串 #,###,###.##format_number(number x, int d) 类型转换Hive-joinJoin 的几种方式 说明: Hive Join 只能支持等值的 join,不支持非等值 join inner join 内连接 left join 左连接 rigth join 右连接 full join 全连接 Join 语句注意事项 1234-- a的所有数据select a.col,b.col from table a left join b on a.key = b.key;-- a - (a和b重叠的数据)select a.col,b.col from table a left join b on a.key = b.key where b.key is null; Hive Join 的执行说明 Hive 总是从左到右顺序执行的，所以建议小表在左侧。 大数据情况下，Hive 会对每个 join 连接对象启动一个 MapReduce 当对 3 个或者更多表进行 join 连接时，如果每个 on 子句都使用相同的连接键的话，那么只会产生一个 MapReduce job。 Hive Join 语句 Hive-正则表达式正则表达式函数12345678910111213141516171819202122232425262728-- like-- 如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合表达式B的正则语法，则为TRUE；否则为FALSEhive&gt; select like(&#x27;football&#x27;, &#x27;__otba%&#x27;); -- _表示任意单个字符，%表示任意字符true-- rlike-- 如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合JAVA正则表达式B的正则语法，则为TRUE；否则为FALSEhive&gt; select &#x27;football&#x27; rlike &#x27;^footba&#x27;;OKtrue-- REGEXP-- 功能和 rlike 类似hive&gt; select regexp(&#x27;football&#x27;, &#x27;^foot&#x27;);OKtrue-- regexp_replace-- 将字符串 A 中的符合 java 正则表达式 B 的部分替换为 Chive&gt; select regexp_replace(&#x27;h234ney&#x27;, &#x27;\\\\d+&#x27;, &#x27;o&#x27;);OKhoney-- REGEXP_EXTRACT-- 将字符串 A 按照 pattern 正则表达式的规则拆分，返回 index 指定的字符，index 从 1 开始计hive&gt; select regexp_extract(&#x27;honeymoon&#x27;, &#x27;hon(.*?)(moon)&#x27;, 2);OKmoon Hive 常用正则表达式语句12345678910111213141516171819202122232425-- 判断是否纯数字 Hive模式下可用SELECT &#x27;123456&#x27; rlike &#x27;^\\\\d+$&#x27;; --true，前面需要是两个\\\\，后面的$必须要带-- 判断是否纯数字select not regexp_like(&#x27;123456&#x27;, &#x27;[^0-9]+&#x27;) ;-- 邮箱提取select regexp_extract(&#x27;我的邮箱是1234@qq.com&#x27;,&#x27;([a-z0-9\\_\\.\\-]+)@([\\da-z\\.\\-]+)\\.([a-z\\.]&#123;2,6&#125;)&#x27;,0);-- 经纬度判断SELECT regexp(&#x27;60.054845,30.324694&#x27;,&#x27;^([1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*)&#123;1&#125;\\\\,([1-9]\\\\d*\\\\.\\\\d*|0\\\\.\\\\d*[1-9]\\\\d*)&#123;1&#125;$&#x27;)-- 小数or整数数据提取select regexp_extract(&#x27;4个2.0GHz&#x27;,&#x27;[0-9]+([.]&#123;1&#125;[0-9]+)&#123;0,1&#125;&#x27;,0);-- URL去参数select regexp_extract(&#x27;http://tool.chinaz.com/regex&#x27;,&#x27;(.*)/$&#x27;,1);或select CONCAT(parse_url(wap_url, &#x27;PROTOCOL&#x27;),&#x27;://&#x27;,parse_url(wap_url, &#x27;HOST&#x27;),parse_url(wap_url, &#x27;PATH&#x27;))-- 提取版本号select regexp_extract(&#x27;android 9.1.0&#x27;,&#x27;[0-9]+(.[0-9]+)*&#x27;) 正则表达式语法参考链接：Python-正则表达说明 TIPS: Python2 中正则表达式对于中文的处理，必须要转换为unicode,否则结果会和预期不一致。 Hive-窗口函数窗口函数样例 12分析函数（max()/sum()/row_number()）+ 窗口子句（over函数）例：row_number() over(partition by uid order by create_time asc) 窗口函数应用场景 Top N 分区排序 —— row_number() 动态 group by 累计计算 层次查询 常用的窗口函数 RANK() ：在分组中排名，相同排名时会留下空位； DENSE_RANK() ：在分组中排名，相同排名时不会留下空位； FIRST_VALUE() ：分组内排序取第一个值； LAST_VALUE() ：分组内排序取最后一个值； NTILE(n) ：将分组数据按顺序切分成 n 份，返回当前所在切片； ROW_NUMGBER() ：在分组中从 1 开始按序记录序列； CUME_DIST() ：小于等于当前值的行数 / 分组总行数（百分比）； PERCENT_RANK() ：（分组内的 RANK 值-1） / （分组内总数-1）； LAG(col, n, DEFAULT) ：在统计窗口内从下往上取第 n 行的值； LEAD(col, n, DEFAULT)：在统计窗口内从上往下取第 n 行的值； Rank DENSE_RANK ROW_NUMBER 的区别 一般常用 row_number() RANK()：排序相同时会重复，总数不会变 DENSE_RANK()：排序相同时会重复，总数会减少 ROW_NUMBER()：会根据顺序计算 数据样例 123456789rank() over(partition by subject order by score desc) rp,dense_rank() over(partition by subject order by score desc) drp,row_number() over(partition by subject order by score desc) rmpname subject score rp drp rmp宋宋 英语 84 1 1 1大海 英语 84 1 1 2婷婷 英语 78 3 2 3孙悟空 英语 68 4 3 4 其他函数Distribute ByDistribute By： 在有些情况下，我们需要控制某个特定行应该到哪个 reducer，通常是为了进行后续的聚集操作。distribute by 子句可以做这件事。distribute by 类似 MR 中 partition(自定义分区)，进行分区，结合 sort by 使用。 对于 distribute by 进行测试，一定要分配多 reduce 进行处理，否则无法看到 distribute by 的效果。 1．distribute by 的分区规则是根据分区字段的 hash 码与 reduce 的个数进行模除后，余数相同的分到一个区。(同一个分区的不一定分区值都相同) 2．Hive 要求 DISTRIBUTE BY 语句要写在 SORT BY 语句之前。 Cluster By当 distribute by 和 sorts by 字段相同时，可以使用 cluster by 方式。 cluster by 除了具有 distribute by 的功能外还兼具 sort by 的功能。但是排序只能是升序排序，不能指定排序规则为 ASC 或者 DESC。 1)以下两种写法等价 12hive (default)&gt; select * from emp cluster by deptno;hive (default)&gt; select * from emp distribute by deptno sort by deptno; Having1．having 与 where 不同点 (1)where 后面不能写分组函数，而 having 后面可以使用分组函数。 (2)having 只用于 group by 分组统计语句。 12345-- 求每个部门的平均工资hive (default)&gt; select deptno, avg(sal) from emp group by deptno;-- 求每个部门的平均薪水大于2000的部门hive (default)&gt; select deptno, avg(sal) avg_sal from emp group by deptno having avg_sal &gt; 2000; 分桶抽样对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive 可以通过对表进行抽样来满足这个需求。 查询表 stu_buck 中的数据。 123456hive (default)&gt; select * from stu_buck tablesample(bucket 1 out of 4 on id);-- tablesample是抽样语句，语法：TABLESAMPLE(BUCKET x OUT OF y)-- y必须是table总bucket数的倍数或者因子。hive根据y的大小，决定抽样的比例。-- x 必须小于 y的值-- table总bucket数为4，tablesample(bucket 1 out of 2)，表示总共抽取(4/2=)2个bucket的数据，抽取第1(x)个和第3(x+y)个bucket的数据。 窗口函数https://www.cnblogs.com/Tunan-Ki/p/11804510.html OVER()： 指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。 CURRENT ROW： 当前行 n PRECEDING： 往前 n 行数据 n FOLLOWING： 往后 n 行数据 UNBOUNDED： 起点，UNBOUNDED PRECEDING 表示从前面的起点， UNBOUNDED FOLLOWING 表示到后面的终点 LAG(col,n,DEFAULT) ： 往前第 n 行数据 第一个参数为列名，第二个参数为往上第 n 行(可选，默认为 1)，第三个参数为默认值(当往上第 n 行为 NULL 时候，取默认值，如不指定，则为 NULL) LEAD(col,n,DEFAULT)： 往后第 n 行数据 第一个参数为列名，第二个参数为往下第 n 行(可选，默认为 1)，第三个参数为默认值(当往下第 n 行为 NULL 时候，取默认值，如不指定，则为 NULL) NTILE(n)： 把有序分区中的行分发到指定数据的组中，各个组有编号，编号从 1 开始，对于每一行，NTILE 返回此行所属的组的编号。注意：n 必须为 int 类型。 Hive 列转行(集合/数组转多行)https://www.cnblogs.com/Tunan-Ki/p/11802667.html 12345678910EXPLODE(col)： explode(col)接受一个数组(或一个map)作为输入，并将数组元素(map)作为单独的行输出。 UDTF可以在SELECT表达式列表中使用，也可以作为LATERAL VIEW的一部分使用。LATERAL VIEW：用在FROM语句后：LATERAL VIEW udtf(expression) tableAlias AS columnAlias解释：用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。 扩展嵌套的 JSON 数据 12345678910111213# prestodb-sqlSELECT json_extract(t.a, &#x27;$.a&#x27;) AS a, json_extract(t.a, &#x27;$.b&#x27;) AS bFROM ( SELECT cast(json_extract(&#x27;&#123;&quot;x&quot;:[&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;,&#123;&quot;a&quot;:3,&quot;b&quot;:4&#125;]&#125;&#x27;, &#x27;$.x&#x27;) AS array&lt;JSON&gt;) AS package_array)CROSS JOIN UNNEST(package_array) AS t(a);# spark-sqlget_json_object Hive 行转列(多行转一个集合/数组)1234567891011121314-- 返回输入字符串连接后的结果，支持任意个输入字符串CONCAT(string A/col, string B/col…)-- 指定分隔符CONCAT_WS(separator, str1, str2,...)： 它是一个特殊形式的 CONCAT()。 第一个参数剩余参数间的分隔符。 分隔符可以是与剩余参数一样的字符串。 如果分隔符是 NULL，返回值也将为 NULL。 这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间-- 去重，返回列表COLLECT_SET(col)： 函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段。 空字段赋值sort by每个 MapReduce 内部排序(Sort By) Sort By：对于大规模的数据集 order by 的效率非常低。在很多情况下，并不需要全局排序，此时可以使用 sort by。 Sort by 为每个 reducer 产生一个排序文件。每个 Reducer 内部进行排序，对全局结果集来说不是排序。 分桶表存储数据分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。 分桶是将数据集分解成更容易管理的若干部分的另一个技术。 分区针对的是数据的存储路径；分桶针对的是数据文件 group by 聚合函数GROUP BY 语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。 order by全局字段排序，只会有一个 MapReducer, 会存在一定性能问题，大数据情况下建议使用 sort by 代替 1select a,save_time from table_name where p_date = &#x27;20300101&#x27; order by save_time desc ; 参考资源Hive-SQL 技巧总结 Hive 博客 hive sql 技巧总结 Hive 博客 Hive 执行原理和 SQL 优化 Hive/HiveSQL 常用优化方法全面总结 Hive 性能优化 HIVE-SQL 优化 Hive 性能优化 Hive 总结篇及 Hive 的优化 Hive 之——Hive SQL 优化 Hive 博客 Hive str2date Hive 常用函数大全 Hive 官方函数 Spark 內建函数","categories":[],"tags":[]},{"title":"Huey-消息队列","slug":"BigData/bigdata-huey","date":"2021-10-23T11:54:51.071Z","updated":"2021-10-23T11:54:51.071Z","comments":true,"path":"BigData/bigdata-huey.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-huey.md/","excerpt":"","text":"环境依赖 Python2.7+ or Python3.4+ Huey 官网 Huey 简介一个轻量 Python2.7+ Python3.4+ 轻巧的消息队列. 功能说明huey 支持： 多进程，多线程或 greenlet 任务执行模型 安排任务在给定时间或在给定延迟后执行 安排重复任务，例如 crontab 自动重试失败的任务 任务优先级 任务结果存储 任务锁定 任务管道和链 不支持项: Huey 服务异常,异常服务无法继续运行，需要重新运行。(根据任务队列进行运行。) 不支持彻底取消，即任务永不使用。 无法暂定任务。任务尚未开始时，可以取消和撤销，任务已经进行后，无法取消。 定时任务精准度为分钟，无法精确到秒。 Huey 对象: Huey Huey 实例 TaskWrapper 不需要 TaskWrapper 直接创建实例。在 Huey.task()与 Huey.periodic_task() 装饰会自动创建相应的 TaskWrapper。 Task 所述 Task 类表示的函数的执行。任务的实例被序列化并排入队列以供使用者执行，消费者反序列化并执行任务功能 Result 结果 Huey 启动参数: 保证 huey 的稳定持续启动,附带 Worker 检查等参数 安装部署安装 Huey1pip install huey 安装 Redis详见 “Module-Redis 文档” 安装 Sqlite31yum install sqlite -y 软件使用1234567891011121314151617# 启动 Redisredis-server /etc/redis.conf# 启动 Huey 命令huey_consumer.py huey_task.huey -l /var/log/app.huey.log -k process -w 2 -q -c 100 -m 10 -v# 运行 指定task任务python huey_main.py(env) [scfan@scfan huey]$ huey_consumer.py huey_main.huey -k process -w 2 1[2019-10-04 17:46:21,985] INFO:huey.consumer:11137:Huey consumer started with 2 process, PID 11137 at 2019-10-04 09:46:21.985333[2019-10-04 17:46:21,985] INFO:huey.consumer:11137:Scheduler runs every 1 second(s).[2019-10-04 17:46:21,985] INFO:huey.consumer:11137:Periodic tasks are enabled.[2019-10-04 17:46:21,986] INFO:huey.consumer:11137:The following commands are available:+ huey_task.add_numbers_10+ huey_task.add_numbers_20 问题记录DENIED Redis is running in protected mode123456789101112131415161718ResponseError: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &#x27;CONFIG SET protected-mode no&#x27; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &#x27;no&#x27;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &#x27;--protected-mode no&#x27; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.[2019-10-04 10:31:51,683] ERROR:huey.consumer.Worker:32427:Error reading from queueTraceback (most recent call last): File &quot;/home/scfan/env/lib/python2.7/site-packages/huey/consumer.py&quot;, line 94, in loop task = self.huey.dequeue() File &quot;/home/scfan/env/lib/python2.7/site-packages/huey/api.py&quot;, line 282, in dequeue data = self.storage.dequeue() File &quot;/home/scfan/env/lib/python2.7/site-packages/huey/storage.py&quot;, line 423, in dequeue timeout=self.read_timeout)[1] File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/client.py&quot;, line 1635, in brpop return self.execute_command(&#x27;BRPOP&#x27;, *keys) File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/client.py&quot;, line 839, in execute_command return self.parse_response(conn, command_name, **options) File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/client.py&quot;, line 853, in parse_response response = connection.read_response() File &quot;/home/scfan/env/lib/python2.7/site-packages/redis/connection.py&quot;, line 717, in read_response raise responseResponseError: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &#x27;CONFIG SET protected-mode no&#x27; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &#x27;no&#x27;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &#x27;--protected-mode no&#x27; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside. 解决方法: Redis 服务处于保护模式, 需要修改配置文件 redis.conf。将 NETWORK 下的 protected-mode yes 修改为 protected-mode no，然后重启 Redis 服务. The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128日志信息 1redis启动警告问题：WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. 解决方法 1234567# 临时修改echo 511 &gt; /proc/sys/net/core/somaxconn# 永久修改echo &quot;net.core.somaxconn= 1024&quot; &gt;&gt; /etc/sysctl.conf# 使其生效sysctl -p# 重启 Redis 服务","categories":[],"tags":[]},{"title":"Kafka学习之路","slug":"BigData/bigdata-kafka","date":"2021-10-23T11:54:51.071Z","updated":"2021-10-23T11:54:51.072Z","comments":true,"path":"BigData/bigdata-kafka.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-kafka.md/","excerpt":"","text":"Kafka 简介Kafka 是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统(也可以当做 MQ 系统)，常见可以用于 web/nginx 日志、访问日志，消息服务等等，Linkedin 于 2010 年贡献给了 Apache 基金会并成为顶级开源项目。 主要应用场景是：日志收集系统和消息系统。 Kafka 主要设计目标如下： 以时间复杂度为 O(1)的方式提供消息持久化能力，即使对 TB 级以上数据也能保证常数时间的访问性能。 高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒 100K 条消息的传输。 支持 Kafka Server 间的消息分区，及分布式消费，同时保证每个 partition 内的消息顺序传输。 同时支持离线数据处理和实时数据处理。 Scale out:支持在线水平扩展 Kafka 就是一种发布-订阅模式 二、Kafka 的优点2.1 解耦2.2 冗余(副本)2.3 扩展性2.4 灵活性&amp;峰值处理能力2.5 可恢复性2.6 顺序保证2.7 缓冲2.8 异步通信 参考资源 Kafka 学习之路 (一)Kafka 的简介 Kafka 学习之路 (二)Kafka 的架构 Kafka 学习之路 (三)Kafka 的高可用 Kafka 学习之路 (四)Kafka 的安装 Kafka 学习之路 (五)Kafka 在 zookeeper 中的存储 Kafka 分布式发布订阅消息系统tags: 202101 Kafka 简介 Kafka 是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统(也可以当做 MQ 系统)，常见可以用于 web/nginx 日志、访问日志，消息服务等等，Linkedin 于 2010 年贡献给了 Apache 基金会并成为顶级开源项目。 主要应用场景是：日志收集系统和消息系统。 Kafka 主要设计目标如下： 以时间复杂度为 O(1)的方式提供消息持久化能力，即使对 TB 级以上数据也能保证常数时间的访问性能。 高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒 100K 条消息的传输。 支持 Kafka Server 间的消息分区，及分布式消费，同时保证每个 partition 内的消息顺序传输。 同时支持离线数据处理和实时数据处理。 Scale out:支持在线水平扩展 Kafka 就是一种发布-订阅模式 二、Kafka 的优点2.1 解耦2.2 冗余(副本)2.3 扩展性2.4 灵活性&amp;峰值处理能力2.5 可恢复性2.6 顺序保证2.7 缓冲2.8 异步通信 常用命令Resources kafka 集群管理工具 kafka-manager 部署安装 Kafka 学习之路 (一)Kafka 的简介 Kafka 学习之路 (二)Kafka 的架构 Kafka 学习之路 (三)Kafka 的高可用 Kafka 学习之路 (四)Kafka 的安装 Kafka 学习之路 (五)Kafka 在 zookeeper 中的存储","categories":[],"tags":[]},{"title":"hbase-使用文档","slug":"BigData/bigdata-hbase","date":"2021-10-23T11:54:51.070Z","updated":"2021-10-23T11:54:51.070Z","comments":true,"path":"BigData/bigdata-hbase.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-hbase.md/","excerpt":"","text":"tags: 大数据 底层存储 分布式 Hbase 2019 年 安装部署环境依赖说明: TODO 未完全 依赖于 Hadoop 环境说明： Hbase==2.2.1 安装 Hbase下载解压Hbase 下载链接(版本更新太快,存在链接失效的可能性): https://mirrors.cnnic.cn/apache/hbase/2.2.1/hbase-2.2.1-bin.tar.gz 123wget https://mirrors.cnnic.cn/apache/hbase/hbase-1.2.9/hbase-1.2.9-bin.tar.gz -P /software/Spark/spark_packages/.(env) [scfan@WOM software]$ tar -zxvf /software/Spark/spark_packages/hbase-1.2.9-bin.tar.gz -C /software/Spark/.(env) [scfan@WOM software]$ mv /software/Spark/hbase-1.2.9/ /software/Spark/hbase 配置环境变量修改文件sudo vim /etc/profile加入下面两行 123# Hbaseexport HBASE_HOME=/software/Spark/hbaseexport PATH=$PATH:$HBASE_HOME/bin 修改配置文件vi /software/Spark/hbase/conf/hbase-env.sh修改 hbase-env.sh，加入下面三行(注意 java 和 hadhoop 路径) 12345# java Home路径export JAVA_HOME=/usr/java/jdk1.8.0_171# Hadoop Home路径export HBASE_CLASSPATH=/software/Spark/spark/confexport HBASE_MANAGES_ZK=true vi /software/Spark/hbase/conf/hbase-site.xml修改 hbase-site.xml(数据路径可自行修改) 1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hbase.cluster.distributed&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.rootdir&lt;/name&gt; &lt;value&gt;file:/software/Spark/data/hbase/hbase_data&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt; &lt;value&gt;/software/Spark/data/hbase/zookeeper_data&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 创建目录cd /software/Spark/data/ &amp;&amp; mkdir hbase/hbase_data hbase/zookeeper_data 启动和验证启动服务 12(env) [scfan@WOM hbase]$ source /etc/profilestart-hbase.sh 验证 12345678910111213141516171819# 输入 Hbase Shell[root@c7c57188b482 software]# hbase shellSLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/root/packages/hugegraph/hadoop-2.7.7/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/root/packages/hugegraph/hbase-2.2.1/lib/client-facing-thirdparty/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]HBase ShellUse &quot;help&quot; to get list of supported commands.Use &quot;exit&quot; to quit this interactive shell.For Reference, please visit: http://hbase.apache.org/2.0/book.html#shellVersion 2.2.1, rf93aaf770cce81caacbf22174dfee2860dbb4810, 2019年 09月 10日 星期二 14:28:27 CSTTook 0.0023 seconds# 输入 List 查看表名称hbase(main):001:0&gt; listTABLE0 row(s)Took 0.4448 seconds=&gt; [] 附件参考链接 推荐阅读 hbase 原理 其他","categories":[],"tags":[]},{"title":"大数据 SQL 优化","slug":"BigData/bigdata-hive-sql","date":"2021-10-23T11:54:51.070Z","updated":"2021-10-23T11:54:51.070Z","comments":true,"path":"BigData/bigdata-hive-sql.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-hive-sql.md/","excerpt":"","text":"原理解析https://cloud.tencent.com/developer/article/1638968 distinct &amp; group bydistinct 需要将 colA 中的所有内容都加载到内存中，大致可以理解为一个 hash 结构，key 自然就是 colA 的所有值。因为是 hash 结构，那运算速度自然就快。最后计算 hash 中有多少 key 就是最终的结果。 count(distinct)吃内存，查询快；group by 空间复杂度小，在时间复杂度允许的情况下，可以发挥他的空间复杂度优势 ! group by 是先排序后分组 语句说明优化建议优化样例1234567-- 低效率 20%-- distinct，导致map阶段无法对输出结果去重，必须将id作为key输出-- 从而 Shuffle大量的数据，并且进行排序聚合等处理SELECT COUNT( DISTINCT id ) FROM TABLE_NAME WHERE ...;-- 高效率 100%SELECT COUNT(*) FROM (SELECT DISTINCT id FROM TABLE_NAME WHERE … ) t; 常用 SQL123456789101112131415-- group by 统计多列select t.a, sum(t.b), count(t.c), count(t.d)from ( select a, b, null c, null d from some_table union all select a, 0 b, c, null d from some_table group by a,c union all select a, 0 b, null c, d from some_table group by a,d) t; 参考资源Hive/HiveSQL 常用优化方法全面总结","categories":[],"tags":[]},{"title":"Flink-流式处理","slug":"BigData/bigdata-flink","date":"2021-10-23T11:54:51.069Z","updated":"2021-10-23T11:54:51.069Z","comments":true,"path":"BigData/bigdata-flink.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-flink.md/","excerpt":"","text":"参考资源https://flink.apache.org/","categories":[],"tags":[]},{"title":"hadoop-使用文档","slug":"BigData/bigdata-hadoop","date":"2021-10-23T11:54:51.069Z","updated":"2021-10-23T11:54:51.069Z","comments":true,"path":"BigData/bigdata-hadoop.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-hadoop.md/","excerpt":"","text":"环境依赖: 当前环境: CentOS7.5 安装部署整体安装过程 前置依赖 Java/SSH 无密钥配置 环境变量配置 修改配置文件 创建格式化 HDFS 目录 安装在目录 /software/Spark/hadoop ,安装在其他目录，配置等对应修改 安装 JavaJava 一键安装脚本 12345678910111213141516# 全程 root 用户安装install_path=/usr/java/file_bash=/etc/profilefile_name=jdk-8u171-linux-x64.tar.gzmkdir -p $install_pathtar -zxf $file_name -C $install_pathecho &quot;&quot;&quot;# jdk javaexport JAVA_HOME=/usr/java/jdk1.8.0_171export JRE_HOME=\\$JAVA_HOME/jreexport CLASSPATH=.:\\$JAVA_HOME/lib:\\$JRE_HOME/libexport PATH=\\$JAVA_HOME/bin:\\$PATH&quot;&quot;&quot; &gt;&gt; $file_bashsource $file_bash 安装包 jdk-8u171-linux-x64.tar.gz 下载 配置 SSH 无密钥登录《参考 SSH 密钥配置文档》 Hadoop 密钥配置较为特殊。如果 Hadoop 安装在非 root 用户。例如。sudo cat /home/scfan/.ssh/id_rsa.pub &gt;&gt; /home/scfan/.ssh/authorized_keyssudo cat /root/.ssh/id_rsa.pub &gt;&gt; /home/scfan/.ssh/authorized_keyssudo cat /home/scfan/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keyssudo cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys需要将密钥加在自己用户和其他用户。chmod 700 /home/scfan/.ssh/chmod 600 /home/scfan/.ssh/authorized_keyschmod 700 /root/.ssh/chmod 600 /root/.ssh/authorized_keys 下载安装 Hadoop1234567891011121314151617181920212223242526272829# 步骤1：下载hadoopwget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz -P /software/Spark/spark_packages/.# 步骤2：解压hadooptar -zxvf /software/Spark/spark_packages/hadoop-2.7.7.tar.gz -C /software/Spark/.mv /software/Spark/hadoop-2.7.7 /software/Spark/hadoop# 步骤3：设置环境变量sudo vim /etc/profile增加如下几行## hadoop homeexport HADOOP_HOME=/software/Spark/hadoop# hadoop pathexport PATH=$PATH:$HADOOP_HOME/binexport PATH=$PATH:$HADOOP_HOME/sbin# hadoop else envexport HADOOP_MAPRED_HOME=$HADOOP_HOMEexport HADOOP_COMMON_HOME=$HADOOP_HOMEexport HADOOP_HDFS_HOME=$HADOOP_HOMEexport YARN_HOME=$HADOOP_HOMEexport HADOOP_PREFIX=$HADOOP_HOMEexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop# hadoop libexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH# 重新加载 /etc/profilesource /etc/profile 设置 Hadoop 配置文件切换到配置文件目录cd /software/Spark/hadoop/etc/hadoop 修改 hadoop_env.sh1234修改原文件中export JAVA_HOME=$&#123;JAVA_HOME&#125;为export JAVA_HOME=/usr/java/jdk1.8.0_171 修改 HDFS 默认名称 core-site.xml123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://192.168.172.70:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 配置 MapReduce yarn-site.xml1234567891011121314151617181920212223&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt; &lt;value&gt;192.168.172.70:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt; &lt;value&gt;192.168.172.70:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt; &lt;value&gt;192.168.172.70:8031&lt;/value&gt; &lt;/property&gt; --&gt;&lt;/configuration&gt; 配置 Job mapred-site.xml拷贝文件cp mapred-site.xml.template mapred-site.xml 添加如下内容 1234567&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;vaule&gt;yarn&lt;/vaule&gt; &lt;/property&gt;&lt;/configuration&gt; HDFS 分布式文件系统 hdfs-site.xml123456789101112131415161718&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;vlaue&gt;3&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.permissions&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;vlaue&gt;file:/software/Spark/data/hadoop_data/hdfs/namenode&lt;/vlaue&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;vlaue&gt;file:/software/Spark/data/hadoop_data/hdfs/datanode&lt;/vlaue&gt; &lt;/property&gt;&lt;/configuration&gt; 创建并格式化 HDFS 目录123456# 创建目录mkdir -p /software/Spark/data/hadoop_data/hdfs/namenodemkdir -p /software/Spark/data/hadoop_data/hdfs/datanode# 格式化目录# 进行格式化(如果报错，需要删除namenode下文件夹current)hadoop namenode -format # 会删除HDFS数据 启动 Hadoop启动 HDFS start-dfs.sh启动 Yarn start-yarn.sh启动所有(含 dfs 和 yarn) start-all.sh 检查启动项至少有如下启动项 123456[root@hbase hadoop]# jps | grep -E &#x27;ResourceManager|DataNode|NodeManager|SecondaryNameNode|NameNode&#x27;26530 DataNode26957 NodeManager26862 ResourceManager26429 NameNode26717 SecondaryNameNode 问题存在未启动情况，查看 start-all.sh 启动日志。或者在对应 spark、hadoop 日志目录下查看信息。 若存在 datanode 未启动(目录视情况而变动)(一般由于多次 format 导致的 name 和 data 的 id 不匹配) 12345(env) [scfan@WOM dfs]$ rm /tmp/hadoop-scfan/dfs/name/*(env) [scfan@WOM dfs]$ rm /tmp/hadoop-scfan/dfs/data/*(env) [scfan@WOM dfs]$ hadoop namenode -format(env) [scfan@WOM dfs]$ stop-all.sh(env) [scfan@WOM dfs]$ start-all.sh 查看页面Hadoop 界面： http://192.168.172.70:8088HDFS 界面： http://192.168.172.70:50070 安装日志 仅供参考 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109[root@c7c57188b482 hadoop]# hadoop namenode -formatDEPRECATED: Use of this script to execute hdfs command is deprecated.Instead use the hdfs command for it.19/10/15 01:12:09 INFO namenode.NameNode: STARTUP_MSG:/************************************************************STARTUP_MSG: Starting NameNodeSTARTUP_MSG: host = c7c57188b482/172.18.0.71STARTUP_MSG: args = [-format]STARTUP_MSG: version = 2.7.7STARTUP_MSG: classpath = /root/software/hadoop/etc/hadoop:/root/software/hadoop/share/hadoop/common/lib/jackson-xc-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/api-asn1-api-1.0.0-M20.jar:/root/software/hadoop/share/hadoop/common/lib/hadoop-auth-2.7.7.jar:/root/software/hadoop/share/hadoop/common/lib/paranamer-2.3.jar:/root/software/hadoop/share/hadoop/common/lib/commons-configuration-1.6.jar:/root/software/hadoop/share/hadoop/common/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/common/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/common/lib/gson-2.2.4.jar:/root/software/hadoop/share/hadoop/common/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/commons-httpclient-3.1.jar:/root/software/hadoop/share/hadoop/common/lib/apacheds-i18n-2.0.0-M15.jar:/root/software/hadoop/share/hadoop/common/lib/curator-client-2.7.1.jar:/root/software/hadoop/share/hadoop/common/lib/hadoop-annotations-2.7.7.jar:/root/software/hadoop/share/hadoop/common/lib/jets3t-0.9.0.jar:/root/software/hadoop/share/hadoop/common/lib/hamcrest-core-1.3.jar:/root/software/hadoop/share/hadoop/common/lib/curator-recipes-2.7.1.jar:/root/software/hadoop/share/hadoop/common/lib/junit-4.11.jar:/root/software/hadoop/share/hadoop/common/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/common/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/common/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/activation-1.1.jar:/root/software/hadoop/share/hadoop/common/lib/commons-collections-3.2.2.jar:/root/software/hadoop/share/hadoop/common/lib/commons-beanutils-core-1.8.0.jar:/root/software/hadoop/share/hadoop/common/lib/commons-digester-1.8.jar:/root/software/hadoop/share/hadoop/common/lib/httpcore-4.2.5.jar:/root/software/hadoop/share/hadoop/common/lib/xz-1.0.jar:/root/software/hadoop/share/hadoop/common/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/common/lib/guava-11.0.2.jar:/root/software/hadoop/share/hadoop/common/lib/commons-beanutils-1.7.0.jar:/root/software/hadoop/share/hadoop/common/lib/xmlenc-0.52.jar:/root/software/hadoop/share/hadoop/common/lib/jackson-jaxrs-1.9.13.jar:/root/software/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar:/root/software/hadoop/share/hadoop/common/lib/commons-logging-1.1.3.jar:/root/software/hadoop/share/hadoop/common/lib/jetty-6.1.26.jar:/root/software/hadoop/share/hadoop/common/lib/mockito-all-1.8.5.jar:/root/software/hadoop/share/hadoop/common/lib/java-xmlbuilder-0.4.jar:/root/software/hadoop/share/hadoop/common/lib/commons-net-3.1.jar:/root/software/hadoop/share/hadoop/common/lib/servlet-api-2.5.jar:/root/software/hadoop/share/hadoop/common/lib/httpclient-4.2.5.jar:/root/software/hadoop/share/hadoop/common/lib/commons-lang-2.6.jar:/root/software/hadoop/share/hadoop/common/lib/zookeeper-3.4.6.jar:/root/software/hadoop/share/hadoop/common/lib/avro-1.7.4.jar:/root/software/hadoop/share/hadoop/common/lib/api-util-1.0.0-M20.jar:/root/software/hadoop/share/hadoop/common/lib/jettison-1.1.jar:/root/software/hadoop/share/hadoop/common/lib/commons-math3-3.1.1.jar:/root/software/hadoop/share/hadoop/common/lib/apacheds-kerberos-codec-2.0.0-M15.jar:/root/software/hadoop/share/hadoop/common/lib/commons-cli-1.2.jar:/root/software/hadoop/share/hadoop/common/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/common/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/common/lib/jsr305-3.0.0.jar:/root/software/hadoop/share/hadoop/common/lib/jetty-sslengine-6.1.26.jar:/root/software/hadoop/share/hadoop/common/lib/stax-api-1.0-2.jar:/root/software/hadoop/share/hadoop/common/lib/jsp-api-2.1.jar:/root/software/hadoop/share/hadoop/common/lib/commons-codec-1.4.jar:/root/software/hadoop/share/hadoop/common/lib/snappy-java-1.0.4.1.jar:/root/software/hadoop/share/hadoop/common/lib/jaxb-api-2.2.2.jar:/root/software/hadoop/share/hadoop/common/lib/jetty-util-6.1.26.jar:/root/software/hadoop/share/hadoop/common/lib/commons-compress-1.4.1.jar:/root/software/hadoop/share/hadoop/common/lib/jsch-0.1.54.jar:/root/software/hadoop/share/hadoop/common/lib/curator-framework-2.7.1.jar:/root/software/hadoop/share/hadoop/common/lib/jersey-json-1.9.jar:/root/software/hadoop/share/hadoop/common/lib/htrace-core-3.1.0-incubating.jar:/root/software/hadoop/share/hadoop/common/lib/slf4j-api-1.7.10.jar:/root/software/hadoop/share/hadoop/common/lib/jaxb-impl-2.2.3-1.jar:/root/software/hadoop/share/hadoop/common/hadoop-nfs-2.7.7.jar:/root/software/hadoop/share/hadoop/common/hadoop-common-2.7.7.jar:/root/software/hadoop/share/hadoop/common/hadoop-common-2.7.7-tests.jar:/root/software/hadoop/share/hadoop/hdfs:/root/software/hadoop/share/hadoop/hdfs/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/hdfs/lib/xercesImpl-2.9.1.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/hdfs/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/hdfs/lib/netty-all-4.0.23.Final.jar:/root/software/hadoop/share/hadoop/hdfs/lib/leveldbjni-all-1.8.jar:/root/software/hadoop/share/hadoop/hdfs/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/hdfs/lib/xml-apis-1.3.04.jar:/root/software/hadoop/share/hadoop/hdfs/lib/guava-11.0.2.jar:/root/software/hadoop/share/hadoop/hdfs/lib/xmlenc-0.52.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-logging-1.1.3.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jetty-6.1.26.jar:/root/software/hadoop/share/hadoop/hdfs/lib/servlet-api-2.5.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-lang-2.6.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-daemon-1.0.13.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-cli-1.2.jar:/root/software/hadoop/share/hadoop/hdfs/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jsr305-3.0.0.jar:/root/software/hadoop/share/hadoop/hdfs/lib/commons-codec-1.4.jar:/root/software/hadoop/share/hadoop/hdfs/lib/jetty-util-6.1.26.jar:/root/software/hadoop/share/hadoop/hdfs/lib/htrace-core-3.1.0-incubating.jar:/root/software/hadoop/share/hadoop/hdfs/hadoop-hdfs-2.7.7-tests.jar:/root/software/hadoop/share/hadoop/hdfs/hadoop-hdfs-2.7.7.jar:/root/software/hadoop/share/hadoop/hdfs/hadoop-hdfs-nfs-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-client-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-xc-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/guice-3.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/activation-1.1.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-collections-3.2.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/leveldbjni-all-1.8.jar:/root/software/hadoop/share/hadoop/yarn/lib/xz-1.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/guava-11.0.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/jackson-jaxrs-1.9.13.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-logging-1.1.3.jar:/root/software/hadoop/share/hadoop/yarn/lib/jetty-6.1.26.jar:/root/software/hadoop/share/hadoop/yarn/lib/servlet-api-2.5.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-lang-2.6.jar:/root/software/hadoop/share/hadoop/yarn/lib/zookeeper-3.4.6.jar:/root/software/hadoop/share/hadoop/yarn/lib/jettison-1.1.jar:/root/software/hadoop/share/hadoop/yarn/lib/aopalliance-1.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-cli-1.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/yarn/lib/guice-servlet-3.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/jsr305-3.0.0.jar:/root/software/hadoop/share/hadoop/yarn/lib/stax-api-1.0-2.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-codec-1.4.jar:/root/software/hadoop/share/hadoop/yarn/lib/zookeeper-3.4.6-tests.jar:/root/software/hadoop/share/hadoop/yarn/lib/javax.inject-1.jar:/root/software/hadoop/share/hadoop/yarn/lib/jaxb-api-2.2.2.jar:/root/software/hadoop/share/hadoop/yarn/lib/jetty-util-6.1.26.jar:/root/software/hadoop/share/hadoop/yarn/lib/commons-compress-1.4.1.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-guice-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jersey-json-1.9.jar:/root/software/hadoop/share/hadoop/yarn/lib/jaxb-impl-2.2.3-1.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-web-proxy-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-registry-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-api-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-sharedcachemanager-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-common-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-applications-unmanaged-am-launcher-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-tests-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-client-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-applicationhistoryservice-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-resourcemanager-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-applications-distributedshell-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-common-2.7.7.jar:/root/software/hadoop/share/hadoop/yarn/hadoop-yarn-server-nodemanager-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/paranamer-2.3.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/log4j-1.2.17.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jersey-core-1.9.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jackson-mapper-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/guice-3.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/hadoop-annotations-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/hamcrest-core-1.3.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/junit-4.11.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jersey-server-1.9.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/protobuf-java-2.5.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jackson-core-asl-1.9.13.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/leveldbjni-all-1.8.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/xz-1.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/asm-3.2.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/avro-1.7.4.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/aopalliance-1.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/netty-3.6.2.Final.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/commons-io-2.4.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/guice-servlet-3.0.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/snappy-java-1.0.4.1.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/javax.inject-1.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/commons-compress-1.4.1.jar:/root/software/hadoop/share/hadoop/mapreduce/lib/jersey-guice-1.9.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-plugins-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-app-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-core-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-common-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.7-tests.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar:/root/software/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-shuffle-2.7.7.jar:/root/software/hadoop/contrib/capacity-scheduler/*.jar:/root/software/hadoop/contrib/capacity-scheduler/*.jarSTARTUP_MSG: build = Unknown -r c1aad84bd27cd79c3d1a7dd58202a8c3ee1ed3ac; compiled by &#x27;stevel&#x27; on 2018-07-18T22:47ZSTARTUP_MSG: java = 1.8.0_171************************************************************/19/10/15 01:12:09 INFO namenode.NameNode: registered UNIX signal handlers for [TERM, HUP, INT]19/10/15 01:12:09 INFO namenode.NameNode: createNameNode [-format]Formatting using clusterid: CID-9b2db537-6224-4ece-ba54-e2eb1da036f219/10/15 01:12:10 INFO namenode.FSNamesystem: No KeyProvider found.19/10/15 01:12:10 INFO namenode.FSNamesystem: fsLock is fair: true19/10/15 01:12:10 INFO namenode.FSNamesystem: Detailed lock hold time metrics enabled: false19/10/15 01:12:10 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit=100019/10/15 01:12:10 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check=true19/10/15 01:12:10 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is set to 000:00:00:00.00019/10/15 01:12:10 INFO blockmanagement.BlockManager: The block deletion will start around 2019 Oct 15 01:12:1019/10/15 01:12:10 INFO util.GSet: Computing capacity for map BlocksMap19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 2.0% max memory 889 MB = 17.8 MB19/10/15 01:12:10 INFO util.GSet: capacity = 2^21 = 2097152 entries19/10/15 01:12:10 INFO blockmanagement.BlockManager: dfs.block.access.token.enable=false19/10/15 01:12:10 INFO blockmanagement.BlockManager: defaultReplication = 319/10/15 01:12:10 INFO blockmanagement.BlockManager: maxReplication = 51219/10/15 01:12:10 INFO blockmanagement.BlockManager: minReplication = 119/10/15 01:12:10 INFO blockmanagement.BlockManager: maxReplicationStreams = 219/10/15 01:12:10 INFO blockmanagement.BlockManager: replicationRecheckInterval = 300019/10/15 01:12:10 INFO blockmanagement.BlockManager: encryptDataTransfer = false19/10/15 01:12:10 INFO blockmanagement.BlockManager: maxNumBlocksToLog = 100019/10/15 01:12:10 INFO namenode.FSNamesystem: fsOwner = root (auth:SIMPLE)19/10/15 01:12:10 INFO namenode.FSNamesystem: supergroup = supergroup19/10/15 01:12:10 INFO namenode.FSNamesystem: isPermissionEnabled = false19/10/15 01:12:10 INFO namenode.FSNamesystem: HA Enabled: false19/10/15 01:12:10 INFO namenode.FSNamesystem: Append Enabled: true19/10/15 01:12:10 INFO util.GSet: Computing capacity for map INodeMap19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 1.0% max memory 889 MB = 8.9 MB19/10/15 01:12:10 INFO util.GSet: capacity = 2^20 = 1048576 entries19/10/15 01:12:10 INFO namenode.FSDirectory: ACLs enabled? false19/10/15 01:12:10 INFO namenode.FSDirectory: XAttrs enabled? true19/10/15 01:12:10 INFO namenode.FSDirectory: Maximum size of an xattr: 1638419/10/15 01:12:10 INFO namenode.NameNode: Caching file names occuring more than 10 times19/10/15 01:12:10 INFO util.GSet: Computing capacity for map cachedBlocks19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 0.25% max memory 889 MB = 2.2 MB19/10/15 01:12:10 INFO util.GSet: capacity = 2^18 = 262144 entries19/10/15 01:12:10 INFO namenode.FSNamesystem: dfs.namenode.safemode.threshold-pct = 0.999000012874603319/10/15 01:12:10 INFO namenode.FSNamesystem: dfs.namenode.safemode.min.datanodes = 019/10/15 01:12:10 INFO namenode.FSNamesystem: dfs.namenode.safemode.extension = 3000019/10/15 01:12:10 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.window.num.buckets = 1019/10/15 01:12:10 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.num.users = 1019/10/15 01:12:10 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,2519/10/15 01:12:10 INFO namenode.FSNamesystem: Retry cache on namenode is enabled19/10/15 01:12:10 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis19/10/15 01:12:10 INFO util.GSet: Computing capacity for map NameNodeRetryCache19/10/15 01:12:10 INFO util.GSet: VM type = 64-bit19/10/15 01:12:10 INFO util.GSet: 0.029999999329447746% max memory 889 MB = 273.1 KB19/10/15 01:12:10 INFO util.GSet: capacity = 2^15 = 32768 entries19/10/15 01:12:10 INFO namenode.FSImage: Allocated new BlockPoolId: BP-2097462600-172.18.0.71-157110193051819/10/15 01:12:10 INFO common.Storage: Storage directory /tmp/hadoop-root/dfs/name has been successfully formatted.19/10/15 01:12:10 INFO namenode.FSImageFormatProtobuf: Saving image file /tmp/hadoop-root/dfs/name/current/fsimage.ckpt_0000000000000000000 using no compression19/10/15 01:12:10 INFO namenode.FSImageFormatProtobuf: Image file /tmp/hadoop-root/dfs/name/current/fsimage.ckpt_0000000000000000000 of size 321 bytes saved in 0 seconds.19/10/15 01:12:10 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 019/10/15 01:12:10 INFO util.ExitUtil: Exiting with status 019/10/15 01:12:10 INFO namenode.NameNode: SHUTDOWN_MSG:/************************************************************SHUTDOWN_MSG: Shutting down NameNode at c7c57188b482/172.18.0.71************************************************************/[root@c7c57188b482 hadoop]# start-dfs.shStarting namenodes on [c7c57188b482]The authenticity of host &#x27;c7c57188b482 (172.18.0.71)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:wNaQZOYKNOWimeyHQIsFwCMyQcWanq3VgKjfmFrH4gw.ECDSA key fingerprint is MD5:dc:f1:fc:16:f2:51:af:a3:cf:59:55:75:e2:0b:89:bd.Are you sure you want to continue connecting (yes/no)? yesc7c57188b482: Warning: Permanently added &#x27;c7c57188b482,172.18.0.71&#x27; (ECDSA) to the list of known hosts.c7c57188b482: starting namenode, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/hadoop-root-namenode-c7c57188b482.outThe authenticity of host &#x27;localhost (127.0.0.1)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:wNaQZOYKNOWimeyHQIsFwCMyQcWanq3VgKjfmFrH4gw.ECDSA key fingerprint is MD5:dc:f1:fc:16:f2:51:af:a3:cf:59:55:75:e2:0b:89:bd.Are you sure you want to continue connecting (yes/no)? yeslocalhost: Warning: Permanently added &#x27;localhost&#x27; (ECDSA) to the list of known hosts.localhost: starting datanode, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/hadoop-root-datanode-c7c57188b482.outStarting secondary namenodes [0.0.0.0]The authenticity of host &#x27;0.0.0.0 (0.0.0.0)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:wNaQZOYKNOWimeyHQIsFwCMyQcWanq3VgKjfmFrH4gw.ECDSA key fingerprint is MD5:dc:f1:fc:16:f2:51:af:a3:cf:59:55:75:e2:0b:89:bd.Are you sure you want to continue connecting (yes/no)? yes0.0.0.0: Warning: Permanently added &#x27;0.0.0.0&#x27; (ECDSA) to the list of known hosts.0.0.0.0: starting secondarynamenode, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/hadoop-root-secondarynamenode-c7c57188b482.out[root@c7c57188b482 hadoop]# start-yarn.shstarting yarn daemonsstarting resourcemanager, logging to /root/software/hadoop/logs/yarn-root-resourcemanager-c7c57188b482.outlocalhost: starting nodemanager, logging to /root/packages/hugegraph/hadoop-2.7.7/logs/yarn-root-nodemanager-c7c57188b482.out[root@c7c57188b482 hadoop]# jps | grep -E &#x27;ResourceManager|DataNode|NodeManager|SecondaryNameNode|NameNode&#x27;3121 SecondaryNameNode2913 DataNode3479 NodeManager3352 ResourceManager2766 NameNode","categories":[],"tags":[]},{"title":"bigdata-clean 大数据清洗","slug":"BigData/bigdata-clean","date":"2021-10-23T11:54:51.068Z","updated":"2021-10-23T11:54:51.068Z","comments":true,"path":"BigData/bigdata-clean.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-clean.md/","excerpt":"","text":"unicode 特殊字符清洗校验程序 i in range(0,10000): a = &#x27;\\\\u&#x27; + str(i).zfill(4) print(a, a.encode(&#x27;utf-8&#x27;).decode(&quot;unicode_escape&quot;))​```bash数据样例\\u0000\\u0001 \u0001\\u0002 \u0002\\u0003 \u0003\\u0004 \u0004\\u0005 \u0005\\u0006 \u0006\\u0007 \u0007\\u0008 \b\\u0009\\u0010 \u0010\\u0011 \u0011\\u0012 \u0012\\u0013 \u0013\\u0014 \u0014\\u0015 \u0015\\u0016 \u0016\\u0017 \u0017\\u0018 \u0018\\u0019 \u0019\\u0020\\u0021 !\\u0022 &quot;\\u0023 #\\u0024 $\\u0025 %\\u0026 &amp;\\u0027 &#x27;\\u0028 (\\u0029 )\\u0030 0\\u0031 1\\u0032 2\\u0033 3\\u0034 4\\u0035 5\\u0036 6\\u0037 7\\u0038 8\\u0039 9\\u0040 @\\u0041 A\\u0042 B\\u0043 C\\u0044 D\\u0045 E\\u0046 F\\u0047 G\\u0048 H\\u0049 I\\u0050 P\\u0051 Q\\u0052 R\\u0053 S\\u0054 T\\u0055 U\\u0056 V\\u0057 W\\u0058 X\\u0059 Y\\u0060 `\\u0061 a\\u0062 b\\u0063 c\\u0064 d\\u0065 e\\u0066 f\\u0067 g\\u0068 h\\u0069 i\\u0070 p\\u0071 q\\u0072 r\\u0073 s\\u0074 t\\u0075 u\\u0076 v\\u0077 w\\u0078 x\\u0079 y\\u0080 \\u0081 \\u0082 \\u0083 \\u0084 \\u0085 \\u0086 \\u0087 \\u0088 \\u0089 \\u0090 \\u0091 \\u0092 \\u0093 \\u0094 \\u0095 \\u0096 \\u0097 \\u0098 \\u0099 \\u0100 Ā\\u0101 ā\\u0102 Ă\\u0103 ă\\u0104 Ą\\u0105 ą\\u0106 Ć\\u0107 ć\\u0108 Ĉ\\u0109 ĉ\\u0110 Đ\\u0111 đ\\u0112 Ē\\u0113 ē\\u0114 Ĕ\\u0115 ĕ\\u0116 Ė\\u0117 ė\\u0118 Ę\\u0119 ę\\u0120 Ġ\\u0121 ġ\\u0122 Ģ\\u0123 ģ\\u0124 Ĥ\\u0125 ĥ\\u0126 Ħ\\u0127 ħ\\u0128 Ĩ\\u0129 ĩ\\u0130 İ\\u0131 ı\\u0132 Ĳ\\u0133 ĳ\\u0134 Ĵ\\u0135 ĵ\\u0136 Ķ\\u0137 ķ\\u0138 ĸ\\u0139 Ĺ\\u0140 ŀ\\u0141 Ł\\u0142 ł\\u0143 Ń\\u0144 ń\\u0145 Ņ\\u0146 ņ\\u0147 Ň\\u0148 ň\\u0149 ŉ\\u0150 Ő\\u0151 ő\\u0152 Œ\\u0153 œ\\u0154 Ŕ\\u0155 ŕ\\u0156 Ŗ\\u0157 ŗ\\u0158 Ř\\u0159 ř\\u0160 Š\\u0161 š\\u0162 Ţ\\u0163 ţ\\u0164 Ť\\u0165 ť\\u0166 Ŧ\\u0167 ŧ\\u0168 Ũ\\u0169 ũ\\u0170 Ű\\u0171 ű\\u0172 Ų\\u0173 ų\\u0174 Ŵ\\u0175 ŵ\\u0176 Ŷ\\u0177 ŷ\\u0178 Ÿ\\u0179 Ź\\u0180 ƀ\\u0181 Ɓ\\u0182 Ƃ\\u0183 ƃ\\u0184 Ƅ\\u0185 ƅ\\u0186 Ɔ\\u0187 Ƈ\\u0188 ƈ\\u0189 Ɖ\\u0190 Ɛ\\u0191 Ƒ\\u0192 ƒ\\u0193 Ɠ\\u0194 Ɣ\\u0195 ƕ\\u0196 Ɩ\\u0197 Ɨ\\u0198 Ƙ\\u0199 ƙ\\u0200 Ȁ\\u0201 ȁ\\u0202 Ȃ\\u0203 ȃ\\u0204 Ȅ\\u0205 ȅ\\u0206 Ȇ\\u0207 ȇ\\u0208 Ȉ\\u0209 ȉ\\u0210 Ȑ\\u0211 ȑ\\u0212 Ȓ\\u0213 ȓ\\u0214 Ȕ\\u0215 ȕ\\u0216 Ȗ\\u0217 ȗ\\u0218 Ș\\u0219 ș\\u0220 Ƞ\\u0221 ȡ\\u0222 Ȣ\\u0223 ȣ\\u0224 Ȥ\\u0225 ȥ\\u0226 Ȧ\\u0227 ȧ\\u0228 Ȩ\\u0229 ȩ\\u0230 Ȱ\\u0231 ȱ\\u0232 Ȳ\\u0233 ȳ\\u0234 ȴ\\u0235 ȵ\\u0236 ȶ\\u0237 ȷ\\u0238 ȸ\\u0239 ȹ\\u0240 ɀ\\u0241 Ɂ\\u0242 ɂ\\u0243 Ƀ\\u0244 Ʉ\\u0245 Ʌ\\u0246 Ɇ\\u0247 ɇ\\u0248 Ɉ\\u0249 ɉ\\u0250 ɐ\\u0251 ɑ\\u0252 ɒ\\u0253 ɓ\\u0254 ɔ\\u0255 ɕ\\u0256 ɖ\\u0257 ɗ\\u0258 ɘ\\u0259 ə\\u0260 ɠ\\u0261 ɡ\\u0262 ɢ\\u0263 ɣ\\u0264 ɤ\\u0265 ɥ\\u0266 ɦ\\u0267 ɧ\\u0268 ɨ\\u0269 ɩ\\u0270 ɰ\\u0271 ɱ\\u0272 ɲ\\u0273 ɳ\\u0274 ɴ\\u0275 ɵ\\u0276 ɶ\\u0277 ɷ\\u0278 ɸ\\u0279 ɹ\\u0280 ʀ\\u0281 ʁ\\u0282 ʂ\\u0283 ʃ\\u0284 ʄ\\u0285 ʅ\\u0286 ʆ\\u0287 ʇ\\u0288 ʈ\\u0289 ʉ\\u0290 ʐ\\u0291 ʑ\\u0292 ʒ\\u0293 ʓ\\u0294 ʔ\\u0295 ʕ\\u0296 ʖ\\u0297 ʗ\\u0298 ʘ\\u0299 ʙ\\u0300 ̀\\u0301 ́\\u0302 ̂\\u0303 ̃\\u0304 ̄\\u0305 ̅\\u0306 ̆\\u0307 ̇\\u0308 ̈\\u0309 ̉\\u0310 ̐\\u0311 ̑\\u0312 ̒\\u0313 ̓\\u0314 ̔\\u0315 ̕\\u0316 ̖\\u0317 ̗\\u0318 ̘\\u0319 ̙\\u0320 ̠\\u0321 ̡\\u0322 ̢\\u0323 ̣\\u0324 ̤\\u0325 ̥\\u0326 ̦\\u0327 ̧\\u0328 ̨\\u0329 ̩\\u0330 ̰\\u0331 ̱\\u0332 ̲\\u0333 ̳\\u0334 ̴\\u0335 ̵\\u0336 ̶\\u0337 ̷\\u0338 ̸\\u0339 ̹\\u0340 ̀\\u0341 ́\\u0342 ͂\\u0343 ̓\\u0344 ̈́\\u0345 ͅ\\u0346 ͆\\u0347 ͇\\u0348 ͈\\u0349 ͉\\u0350 ͐\\u0351 ͑\\u0352 ͒\\u0353 ͓\\u0354 ͔\\u0355 ͕\\u0356 ͖\\u0357 ͗\\u0358 ͘\\u0359 ͙\\u0360 ͠\\u0361 ͡\\u0362 ͢\\u0363 ͣ\\u0364 ͤ\\u0365 ͥ\\u0366 ͦ\\u0367 ͧ\\u0368 ͨ\\u0369 ͩ\\u0370 Ͱ\\u0371 ͱ\\u0372 Ͳ\\u0373 ͳ\\u0374 ʹ\\u0375 ͵\\u0376 Ͷ\\u0377 ͷ\\u0378 ͸\\u0379 ͹\\u0380 ΀\\u0381 ΁\\u0382 ΂\\u0383 ΃\\u0384 ΄\\u0385 ΅\\u0386 Ά\\u0387 ·\\u0388 Έ\\u0389 Ή\\u0390 ΐ\\u0391 Α\\u0392 Β\\u0393 Γ\\u0394 Δ\\u0395 Ε\\u0396 Ζ\\u0397 Η\\u0398 Θ\\u0399 Ι\\u0400 Ѐ\\u0401 Ё\\u0402 Ђ\\u0403 Ѓ\\u0404 Є\\u0405 Ѕ\\u0406 І\\u0407 Ї\\u0408 Ј\\u0409 Љ\\u0410 А\\u0411 Б\\u0412 В\\u0413 Г\\u0414 Д\\u0415 Е\\u0416 Ж\\u0417 З\\u0418 И\\u0419 Й\\u0420 Р\\u0421 С\\u0422 Т\\u0423 У\\u0424 Ф\\u0425 Х\\u0426 Ц\\u0427 Ч\\u0428 Ш\\u0429 Щ\\u0430 а\\u0431 б\\u0432 в\\u0433 г\\u0434 д\\u0435 е\\u0436 ж\\u0437 з\\u0438 и\\u0439 й\\u0440 р\\u0441 с\\u0442 т\\u0443 у\\u0444 ф\\u0445 х\\u0446 ц\\u0447 ч\\u0448 ш\\u0449 щ\\u0450 ѐ\\u0451 ё\\u0452 ђ\\u0453 ѓ\\u0454 є\\u0455 ѕ\\u0456 і\\u0457 ї\\u0458 ј\\u0459 љ\\u0460 Ѡ\\u0461 ѡ\\u0462 Ѣ\\u0463 ѣ\\u0464 Ѥ\\u0465 ѥ\\u0466 Ѧ\\u0467 ѧ\\u0468 Ѩ\\u0469 ѩ\\u0470 Ѱ\\u0471 ѱ\\u0472 Ѳ\\u0473 ѳ\\u0474 Ѵ\\u0475 ѵ\\u0476 Ѷ\\u0477 ѷ\\u0478 Ѹ\\u0479 ѹ\\u0480 Ҁ\\u0481 ҁ\\u0482 ҂\\u0483 ҃\\u0484 ҄\\u0485 ҅\\u0486 ҆\\u0487 ҇\\u0488 ҈\\u0489 ҉\\u0490 Ґ\\u0491 ґ\\u0492 Ғ\\u0493 ғ\\u0494 Ҕ\\u0495 ҕ\\u0496 Җ\\u0497 җ\\u0498 Ҙ\\u0499 ҙ\\u0500 Ԁ\\u0501 ԁ\\u0502 Ԃ\\u0503 ԃ\\u0504 Ԅ\\u0505 ԅ\\u0506 Ԇ\\u0507 ԇ\\u0508 Ԉ\\u0509 ԉ\\u0510 Ԑ\\u0511 ԑ\\u0512 Ԓ\\u0513 ԓ\\u0514 Ԕ\\u0515 ԕ\\u0516 Ԗ\\u0517 ԗ\\u0518 Ԙ\\u0519 ԙ\\u0520 Ԡ\\u0521 ԡ\\u0522 Ԣ\\u0523 ԣ\\u0524 Ԥ\\u0525 ԥ\\u0526 Ԧ\\u0527 ԧ\\u0528 Ԩ\\u0529 ԩ\\u0530 ԰\\u0531 Ա\\u0532 Բ\\u0533 Գ\\u0534 Դ\\u0535 Ե\\u0536 Զ\\u0537 Է\\u0538 Ը\\u0539 Թ\\u0540 Հ\\u0541 Ձ\\u0542 Ղ\\u0543 Ճ\\u0544 Մ\\u0545 Յ\\u0546 Ն\\u0547 Շ\\u0548 Ո\\u0549 Չ\\u0550 Ր\\u0551 Ց\\u0552 Ւ\\u0553 Փ\\u0554 Ք\\u0555 Օ\\u0556 Ֆ\\u0557 ՗\\u0558 ՘\\u0559 ՙ\\u0560 ՠ\\u0561 ա\\u0562 բ\\u0563 գ\\u0564 դ\\u0565 ե\\u0566 զ\\u0567 է\\u0568 ը\\u0569 թ\\u0570 հ\\u0571 ձ\\u0572 ղ\\u0573 ճ\\u0574 մ\\u0575 յ\\u0576 ն\\u0577 շ\\u0578 ո\\u0579 չ\\u0580 ր\\u0581 ց\\u0582 ւ\\u0583 փ\\u0584 ք\\u0585 օ\\u0586 ֆ\\u0587 և\\u0588 ֈ\\u0589 ։\\u0590 ֐\\u0591 ֑\\u0592 ֒\\u0593 ֓\\u0594 ֔\\u0595 ֕\\u0596 ֖\\u0597 ֗\\u0598 ֘\\u0599 ֙\\u0600 ؀\\u0601 ؁\\u0602 ؂\\u0603 ؃\\u0604 ؄\\u0605 ؅\\u0606 ؆\\u0607 ؇\\u0608 ؈\\u0609 ؉\\u0610 ؐ\\u0611 ؑ\\u0612 ؒ\\u0613 ؓ\\u0614 ؔ\\u0615 ؕ\\u0616 ؖ\\u0617 ؗ\\u0618 ؘ\\u0619 ؙ\\u0620 ؠ\\u0621 ء\\u0622 آ\\u0623 أ\\u0624 ؤ\\u0625 إ\\u0626 ئ\\u0627 ا\\u0628 ب\\u0629 ة\\u0630 ذ\\u0631 ر\\u0632 ز\\u0633 س\\u0634 ش\\u0635 ص\\u0636 ض\\u0637 ط\\u0638 ظ\\u0639 ع\\u0640 ـ\\u0641 ف\\u0642 ق\\u0643 ك\\u0644 ل\\u0645 م\\u0646 ن\\u0647 ه\\u0648 و\\u0649 ى\\u0650 ِ\\u0651 ّ\\u0652 ْ\\u0653 ٓ\\u0654 ٔ\\u0655 ٕ\\u0656 ٖ\\u0657 ٗ\\u0658 ٘\\u0659 ٙ\\u0660 ٠\\u0661 ١\\u0662 ٢\\u0663 ٣\\u0664 ٤\\u0665 ٥\\u0666 ٦\\u0667 ٧\\u0668 ٨\\u0669 ٩\\u0670 ٰ\\u0671 ٱ\\u0672 ٲ\\u0673 ٳ\\u0674 ٴ\\u0675 ٵ\\u0676 ٶ\\u0677 ٷ\\u0678 ٸ\\u0679 ٹ\\u0680 ڀ\\u0681 ځ\\u0682 ڂ\\u0683 ڃ\\u0684 ڄ\\u0685 څ\\u0686 چ\\u0687 ڇ\\u0688 ڈ\\u0689 ډ\\u0690 ڐ\\u0691 ڑ\\u0692 ڒ\\u0693 ړ\\u0694 ڔ\\u0695 ڕ\\u0696 ږ\\u0697 ڗ\\u0698 ژ\\u0699 ڙ\\u0700 ܀\\u0701 ܁\\u0702 ܂\\u0703 ܃\\u0704 ܄\\u0705 ܅\\u0706 ܆\\u0707 ܇\\u0708 ܈\\u0709 ܉\\u0710 ܐ\\u0711 ܑ\\u0712 ܒ\\u0713 ܓ\\u0714 ܔ\\u0715 ܕ\\u0716 ܖ\\u0717 ܗ\\u0718 ܘ\\u0719 ܙ\\u0720 ܠ\\u0721 ܡ\\u0722 ܢ\\u0723 ܣ\\u0724 ܤ\\u0725 ܥ\\u0726 ܦ\\u0727 ܧ\\u0728 ܨ\\u0729 ܩ\\u0730 ܰ\\u0731 ܱ\\u0732 ܲ\\u0733 ܳ\\u0734 ܴ\\u0735 ܵ\\u0736 ܶ\\u0737 ܷ\\u0738 ܸ\\u0739 ܹ\\u0740 ݀\\u0741 ݁\\u0742 ݂\\u0743 ݃\\u0744 ݄\\u0745 ݅\\u0746 ݆\\u0747 ݇\\u0748 ݈\\u0749 ݉\\u0750 ݐ\\u0751 ݑ\\u0752 ݒ\\u0753 ݓ\\u0754 ݔ\\u0755 ݕ\\u0756 ݖ\\u0757 ݗ\\u0758 ݘ\\u0759 ݙ\\u0760 ݠ\\u0761 ݡ\\u0762 ݢ\\u0763 ݣ\\u0764 ݤ\\u0765 ݥ\\u0766 ݦ\\u0767 ݧ\\u0768 ݨ\\u0769 ݩ\\u0770 ݰ\\u0771 ݱ\\u0772 ݲ\\u0773 ݳ\\u0774 ݴ\\u0775 ݵ\\u0776 ݶ\\u0777 ݷ\\u0778 ݸ\\u0779 ݹ\\u0780 ހ\\u0781 ށ\\u0782 ނ\\u0783 ރ\\u0784 ބ\\u0785 ޅ\\u0786 ކ\\u0787 އ\\u0788 ވ\\u0789 މ\\u0790 ސ\\u0791 ޑ\\u0792 ޒ\\u0793 ޓ\\u0794 ޔ\\u0795 ޕ\\u0796 ޖ\\u0797 ޗ\\u0798 ޘ\\u0799 ޙ\\u0800 ࠀ\\u0801 ࠁ\\u0802 ࠂ\\u0803 ࠃ\\u0804 ࠄ\\u0805 ࠅ\\u0806 ࠆ\\u0807 ࠇ\\u0808 ࠈ\\u0809 ࠉ\\u0810 ࠐ\\u0811 ࠑ\\u0812 ࠒ\\u0813 ࠓ\\u0814 ࠔ\\u0815 ࠕ\\u0816 ࠖ\\u0817 ࠗ\\u0818 ࠘\\u0819 ࠙\\u0820 ࠠ\\u0821 ࠡ\\u0822 ࠢ\\u0823 ࠣ\\u0824 ࠤ\\u0825 ࠥ\\u0826 ࠦ\\u0827 ࠧ\\u0828 ࠨ\\u0829 ࠩ\\u0830 ࠰\\u0831 ࠱\\u0832 ࠲\\u0833 ࠳\\u0834 ࠴\\u0835 ࠵\\u0836 ࠶\\u0837 ࠷\\u0838 ࠸\\u0839 ࠹\\u0840 ࡀ\\u0841 ࡁ\\u0842 ࡂ\\u0843 ࡃ\\u0844 ࡄ\\u0845 ࡅ\\u0846 ࡆ\\u0847 ࡇ\\u0848 ࡈ\\u0849 ࡉ\\u0850 ࡐ\\u0851 ࡑ\\u0852 ࡒ\\u0853 ࡓ\\u0854 ࡔ\\u0855 ࡕ\\u0856 ࡖ\\u0857 ࡗ\\u0858 ࡘ\\u0859 ࡙\\u0860 ࡠ\\u0861 ࡡ\\u0862 ࡢ\\u0863 ࡣ\\u0864 ࡤ\\u0865 ࡥ\\u0866 ࡦ\\u0867 ࡧ\\u0868 ࡨ\\u0869 ࡩ\\u0870 ࡰ\\u0871 ࡱ\\u0872 ࡲ\\u0873 ࡳ\\u0874 ࡴ\\u0875 ࡵ\\u0876 ࡶ\\u0877 ࡷ\\u0878 ࡸ\\u0879 ࡹ\\u0880 ࢀ\\u0881 ࢁ\\u0882 ࢂ\\u0883 ࢃ\\u0884 ࢄ\\u0885 ࢅ\\u0886 ࢆ\\u0887 ࢇ\\u0888 ࢈\\u0889 ࢉ\\u0890 ࢐\\u0891 ࢑\\u0892 ࢒\\u0893 ࢓\\u0894 ࢔\\u0895 ࢕\\u0896 ࢖\\u0897 ࢗ\\u0898 ࢘\\u0899 ࢙\\u0900 ऀ\\u0901 ँ\\u0902 ं\\u0903 ः\\u0904 ऄ\\u0905 अ\\u0906 आ\\u0907 इ\\u0908 ई\\u0909 उ\\u0910 ऐ\\u0911 ऑ\\u0912 ऒ\\u0913 ओ\\u0914 औ\\u0915 क\\u0916 ख\\u0917 ग\\u0918 घ\\u0919 ङ\\u0920 ठ\\u0921 ड\\u0922 ढ\\u0923 ण\\u0924 त\\u0925 थ\\u0926 द\\u0927 ध\\u0928 न\\u0929 ऩ\\u0930 र\\u0931 ऱ\\u0932 ल\\u0933 ळ\\u0934 ऴ\\u0935 व\\u0936 श\\u0937 ष\\u0938 स\\u0939 ह\\u0940 ी\\u0941 ु\\u0942 ू\\u0943 ृ\\u0944 ॄ\\u0945 ॅ\\u0946 ॆ\\u0947 े\\u0948 ै\\u0949 ॉ\\u0950 ॐ\\u0951 ॑\\u0952 ॒\\u0953 ॓\\u0954 ॔\\u0955 ॕ\\u0956 ॖ\\u0957 ॗ\\u0958 क़\\u0959 ख़\\u0960 ॠ\\u0961 ॡ\\u0962 ॢ\\u0963 ॣ\\u0964 ।\\u0965 ॥\\u0966 ०\\u0967 १\\u0968 २\\u0969 ३\\u0970 ॰\\u0971 ॱ\\u0972 ॲ\\u0973 ॳ\\u0974 ॴ\\u0975 ॵ\\u0976 ॶ\\u0977 ॷ\\u0978 ॸ\\u0979 ॹ\\u0980 ঀ\\u0981 ঁ\\u0982 ং\\u0983 ঃ\\u0984 ঄\\u0985 অ\\u0986 আ\\u0987 ই\\u0988 ঈ\\u0989 উ\\u0990 ঐ\\u0991 ঑\\u0992 ঒\\u0993 ও\\u0994 ঔ\\u0995 ক\\u0996 খ\\u0997 গ\\u0998 ঘ\\u0999 ঙ\\u1000 က\\u1001 ခ\\u1002 ဂ\\u1003 ဃ\\u1004 င\\u1005 စ\\u1006 ဆ\\u1007 ဇ\\u1008 ဈ\\u1009 ဉ\\u1010 တ\\u1011 ထ\\u1012 ဒ\\u1013 ဓ\\u1014 န\\u1015 ပ\\u1016 ဖ\\u1017 ဗ\\u1018 ဘ\\u1019 မ\\u1020 ဠ\\u1021 အ\\u1022 ဢ\\u1023 ဣ\\u1024 ဤ\\u1025 ဥ\\u1026 ဦ\\u1027 ဧ\\u1028 ဨ\\u1029 ဩ\\u1030 ူ\\u1031 ေ\\u1032 ဲ\\u1033 ဳ\\u1034 ဴ\\u1035 ဵ\\u1036 ံ\\u1037 ့\\u1038 း\\u1039 ္\\u1040 ၀\\u1041 ၁\\u1042 ၂\\u1043 ၃\\u1044 ၄\\u1045 ၅\\u1046 ၆\\u1047 ၇\\u1048 ၈\\u1049 ၉\\u1050 ၐ\\u1051 ၑ\\u1052 ၒ\\u1053 ၓ\\u1054 ၔ\\u1055 ၕ\\u1056 ၖ\\u1057 ၗ\\u1058 ၘ\\u1059 ၙ\\u1060 ၠ\\u1061 ၡ\\u1062 ၢ\\u1063 ၣ\\u1064 ၤ\\u1065 ၥ\\u1066 ၦ\\u1067 ၧ\\u1068 ၨ\\u1069 ၩ\\u1070 ၰ\\u1071 ၱ\\u1072 ၲ\\u1073 ၳ\\u1074 ၴ\\u1075 ၵ\\u1076 ၶ\\u1077 ၷ\\u1078 ၸ\\u1079 ၹ\\u1080 ႀ\\u1081 ႁ\\u1082 ႂ\\u1083 ႃ\\u1084 ႄ\\u1085 ႅ\\u1086 ႆ\\u1087 ႇ\\u1088 ႈ\\u1089 ႉ\\u1090 ႐\\u1091 ႑\\u1092 ႒\\u1093 ႓\\u1094 ႔\\u1095 ႕\\u1096 ႖\\u1097 ႗\\u1098 ႘\\u1099 ႙\\u1100 ᄀ\\u1101 ᄁ\\u1102 ᄂ\\u1103 ᄃ\\u1104 ᄄ\\u1105 ᄅ\\u1106 ᄆ\\u1107 ᄇ\\u1108 ᄈ\\u1109 ᄉ\\u1110 ᄐ\\u1111 ᄑ\\u1112 ᄒ\\u1113 ᄓ\\u1114 ᄔ\\u1115 ᄕ\\u1116 ᄖ\\u1117 ᄗ\\u1118 ᄘ\\u1119 ᄙ\\u1120 ᄠ\\u1121 ᄡ\\u1122 ᄢ\\u1123 ᄣ\\u1124 ᄤ\\u1125 ᄥ\\u1126 ᄦ\\u1127 ᄧ\\u1128 ᄨ\\u1129 ᄩ\\u1130 ᄰ\\u1131 ᄱ\\u1132 ᄲ\\u1133 ᄳ\\u1134 ᄴ\\u1135 ᄵ\\u1136 ᄶ\\u1137 ᄷ\\u1138 ᄸ\\u1139 ᄹ\\u1140 ᅀ\\u1141 ᅁ\\u1142 ᅂ\\u1143 ᅃ\\u1144 ᅄ\\u1145 ᅅ\\u1146 ᅆ\\u1147 ᅇ\\u1148 ᅈ\\u1149 ᅉ\\u1150 ᅐ\\u1151 ᅑ\\u1152 ᅒ\\u1153 ᅓ\\u1154 ᅔ\\u1155 ᅕ\\u1156 ᅖ\\u1157 ᅗ\\u1158 ᅘ\\u1159 ᅙ\\u1160 ᅠ\\u1161 ᅡ\\u1162 ᅢ\\u1163 ᅣ\\u1164 ᅤ\\u1165 ᅥ\\u1166 ᅦ\\u1167 ᅧ\\u1168 ᅨ\\u1169 ᅩ\\u1170 ᅰ\\u1171 ᅱ\\u1172 ᅲ\\u1173 ᅳ\\u1174 ᅴ\\u1175 ᅵ\\u1176 ᅶ\\u1177 ᅷ\\u1178 ᅸ\\u1179 ᅹ\\u1180 ᆀ\\u1181 ᆁ\\u1182 ᆂ\\u1183 ᆃ\\u1184 ᆄ\\u1185 ᆅ\\u1186 ᆆ\\u1187 ᆇ\\u1188 ᆈ\\u1189 ᆉ\\u1190 ᆐ\\u1191 ᆑ\\u1192 ᆒ\\u1193 ᆓ\\u1194 ᆔ\\u1195 ᆕ\\u1196 ᆖ\\u1197 ᆗ\\u1198 ᆘ\\u1199 ᆙ\\u1200 ሀ\\u1201 ሁ\\u1202 ሂ\\u1203 ሃ\\u1204 ሄ\\u1205 ህ\\u1206 ሆ\\u1207 ሇ\\u1208 ለ\\u1209 ሉ\\u1210 ሐ\\u1211 ሑ\\u1212 ሒ\\u1213 ሓ\\u1214 ሔ\\u1215 ሕ\\u1216 ሖ\\u1217 ሗ\\u1218 መ\\u1219 ሙ\\u1220 ሠ\\u1221 ሡ\\u1222 ሢ\\u1223 ሣ\\u1224 ሤ\\u1225 ሥ\\u1226 ሦ\\u1227 ሧ\\u1228 ረ\\u1229 ሩ\\u1230 ሰ\\u1231 ሱ\\u1232 ሲ\\u1233 ሳ\\u1234 ሴ\\u1235 ስ\\u1236 ሶ\\u1237 ሷ\\u1238 ሸ\\u1239 ሹ\\u1240 ቀ\\u1241 ቁ\\u1242 ቂ\\u1243 ቃ\\u1244 ቄ\\u1245 ቅ\\u1246 ቆ\\u1247 ቇ\\u1248 ቈ\\u1249 ቉\\u1250 ቐ\\u1251 ቑ\\u1252 ቒ\\u1253 ቓ\\u1254 ቔ\\u1255 ቕ\\u1256 ቖ\\u1257 ቗\\u1258 ቘ\\u1259 ቙\\u1260 በ\\u1261 ቡ\\u1262 ቢ\\u1263 ባ\\u1264 ቤ\\u1265 ብ\\u1266 ቦ\\u1267 ቧ\\u1268 ቨ\\u1269 ቩ\\u1270 ተ\\u1271 ቱ\\u1272 ቲ\\u1273 ታ\\u1274 ቴ\\u1275 ት\\u1276 ቶ\\u1277 ቷ\\u1278 ቸ\\u1279 ቹ\\u1280 ኀ\\u1281 ኁ\\u1282 ኂ\\u1283 ኃ\\u1284 ኄ\\u1285 ኅ\\u1286 ኆ\\u1287 ኇ\\u1288 ኈ\\u1289 ኉\\u1290 ነ\\u1291 ኑ\\u1292 ኒ\\u1293 ና\\u1294 ኔ\\u1295 ን\\u1296 ኖ\\u1297 ኗ\\u1298 ኘ\\u1299 ኙ\\u1300 ጀ\\u1301 ጁ\\u1302 ጂ\\u1303 ጃ\\u1304 ጄ\\u1305 ጅ\\u1306 ጆ\\u1307 ጇ\\u1308 ገ\\u1309 ጉ\\u1310 ጐ\\u1311 ጑\\u1312 ጒ\\u1313 ጓ\\u1314 ጔ\\u1315 ጕ\\u1316 ጖\\u1317 ጗\\u1318 ጘ\\u1319 ጙ\\u1320 ጠ\\u1321 ጡ\\u1322 ጢ\\u1323 ጣ\\u1324 ጤ\\u1325 ጥ\\u1326 ጦ\\u1327 ጧ\\u1328 ጨ\\u1329 ጩ\\u1330 ጰ\\u1331 ጱ\\u1332 ጲ\\u1333 ጳ\\u1334 ጴ\\u1335 ጵ\\u1336 ጶ\\u1337 ጷ\\u1338 ጸ\\u1339 ጹ\\u1340 ፀ\\u1341 ፁ\\u1342 ፂ\\u1343 ፃ\\u1344 ፄ\\u1345 ፅ\\u1346 ፆ\\u1347 ፇ\\u1348 ፈ\\u1349 ፉ\\u1350 ፐ\\u1351 ፑ\\u1352 ፒ\\u1353 ፓ\\u1354 ፔ\\u1355 ፕ\\u1356 ፖ\\u1357 ፗ\\u1358 ፘ\\u1359 ፙ\\u1360 ፠\\u1361 ፡\\u1362 ።\\u1363 ፣\\u1364 ፤\\u1365 ፥\\u1366 ፦\\u1367 ፧\\u1368 ፨\\u1369 ፩\\u1370 ፰\\u1371 ፱\\u1372 ፲\\u1373 ፳\\u1374 ፴\\u1375 ፵\\u1376 ፶\\u1377 ፷\\u1378 ፸\\u1379 ፹\\u1380 ᎀ\\u1381 ᎁ\\u1382 ᎂ\\u1383 ᎃ\\u1384 ᎄ\\u1385 ᎅ\\u1386 ᎆ\\u1387 ᎇ\\u1388 ᎈ\\u1389 ᎉ\\u1390 ᎐\\u1391 ᎑\\u1392 ᎒\\u1393 ᎓\\u1394 ᎔\\u1395 ᎕\\u1396 ᎖\\u1397 ᎗\\u1398 ᎘\\u1399 ᎙\\u1400 ᐀\\u1401 ᐁ\\u1402 ᐂ\\u1403 ᐃ\\u1404 ᐄ\\u1405 ᐅ\\u1406 ᐆ\\u1407 ᐇ\\u1408 ᐈ\\u1409 ᐉ\\u1410 ᐐ\\u1411 ᐑ\\u1412 ᐒ\\u1413 ᐓ\\u1414 ᐔ\\u1415 ᐕ\\u1416 ᐖ\\u1417 ᐗ\\u1418 ᐘ\\u1419 ᐙ\\u1420 ᐠ\\u1421 ᐡ\\u1422 ᐢ\\u1423 ᐣ\\u1424 ᐤ\\u1425 ᐥ\\u1426 ᐦ\\u1427 ᐧ\\u1428 ᐨ\\u1429 ᐩ\\u1430 ᐰ\\u1431 ᐱ\\u1432 ᐲ\\u1433 ᐳ\\u1434 ᐴ\\u1435 ᐵ\\u1436 ᐶ\\u1437 ᐷ\\u1438 ᐸ\\u1439 ᐹ\\u1440 ᑀ\\u1441 ᑁ\\u1442 ᑂ\\u1443 ᑃ\\u1444 ᑄ\\u1445 ᑅ\\u1446 ᑆ\\u1447 ᑇ\\u1448 ᑈ\\u1449 ᑉ\\u1450 ᑐ\\u1451 ᑑ\\u1452 ᑒ\\u1453 ᑓ\\u1454 ᑔ\\u1455 ᑕ\\u1456 ᑖ\\u1457 ᑗ\\u1458 ᑘ\\u1459 ᑙ\\u1460 ᑠ\\u1461 ᑡ\\u1462 ᑢ\\u1463 ᑣ\\u1464 ᑤ\\u1465 ᑥ\\u1466 ᑦ\\u1467 ᑧ\\u1468 ᑨ\\u1469 ᑩ\\u1470 ᑰ\\u1471 ᑱ\\u1472 ᑲ\\u1473 ᑳ\\u1474 ᑴ\\u1475 ᑵ\\u1476 ᑶ\\u1477 ᑷ\\u1478 ᑸ\\u1479 ᑹ\\u1480 ᒀ\\u1481 ᒁ\\u1482 ᒂ\\u1483 ᒃ\\u1484 ᒄ\\u1485 ᒅ\\u1486 ᒆ\\u1487 ᒇ\\u1488 ᒈ\\u1489 ᒉ\\u1490 ᒐ\\u1491 ᒑ\\u1492 ᒒ\\u1493 ᒓ\\u1494 ᒔ\\u1495 ᒕ\\u1496 ᒖ\\u1497 ᒗ\\u1498 ᒘ\\u1499 ᒙ\\u1500 ᔀ\\u1501 ᔁ\\u1502 ᔂ\\u1503 ᔃ\\u1504 ᔄ\\u1505 ᔅ\\u1506 ᔆ\\u1507 ᔇ\\u1508 ᔈ\\u1509 ᔉ\\u1510 ᔐ\\u1511 ᔑ\\u1512 ᔒ\\u1513 ᔓ\\u1514 ᔔ\\u1515 ᔕ\\u1516 ᔖ\\u1517 ᔗ\\u1518 ᔘ\\u1519 ᔙ\\u1520 ᔠ\\u1521 ᔡ\\u1522 ᔢ\\u1523 ᔣ\\u1524 ᔤ\\u1525 ᔥ\\u1526 ᔦ\\u1527 ᔧ\\u1528 ᔨ\\u1529 ᔩ\\u1530 ᔰ\\u1531 ᔱ\\u1532 ᔲ\\u1533 ᔳ\\u1534 ᔴ\\u1535 ᔵ\\u1536 ᔶ\\u1537 ᔷ\\u1538 ᔸ\\u1539 ᔹ\\u1540 ᕀ\\u1541 ᕁ\\u1542 ᕂ\\u1543 ᕃ\\u1544 ᕄ\\u1545 ᕅ\\u1546 ᕆ\\u1547 ᕇ\\u1548 ᕈ\\u1549 ᕉ\\u1550 ᕐ\\u1551 ᕑ\\u1552 ᕒ\\u1553 ᕓ\\u1554 ᕔ\\u1555 ᕕ\\u1556 ᕖ\\u1557 ᕗ\\u1558 ᕘ\\u1559 ᕙ\\u1560 ᕠ\\u1561 ᕡ\\u1562 ᕢ\\u1563 ᕣ\\u1564 ᕤ\\u1565 ᕥ\\u1566 ᕦ\\u1567 ᕧ\\u1568 ᕨ\\u1569 ᕩ\\u1570 ᕰ\\u1571 ᕱ\\u1572 ᕲ\\u1573 ᕳ\\u1574 ᕴ\\u1575 ᕵ\\u1576 ᕶ\\u1577 ᕷ\\u1578 ᕸ\\u1579 ᕹ\\u1580 ᖀ\\u1581 ᖁ\\u1582 ᖂ\\u1583 ᖃ\\u1584 ᖄ\\u1585 ᖅ\\u1586 ᖆ\\u1587 ᖇ\\u1588 ᖈ\\u1589 ᖉ\\u1590 ᖐ\\u1591 ᖑ\\u1592 ᖒ\\u1593 ᖓ\\u1594 ᖔ\\u1595 ᖕ\\u1596 ᖖ\\u1597 ᖗ\\u1598 ᖘ\\u1599 ᖙ\\u1600 ᘀ\\u1601 ᘁ\\u1602 ᘂ\\u1603 ᘃ\\u1604 ᘄ\\u1605 ᘅ\\u1606 ᘆ\\u1607 ᘇ\\u1608 ᘈ\\u1609 ᘉ\\u1610 ᘐ\\u1611 ᘑ\\u1612 ᘒ\\u1613 ᘓ\\u1614 ᘔ\\u1615 ᘕ\\u1616 ᘖ\\u1617 ᘗ\\u1618 ᘘ\\u1619 ᘙ\\u1620 ᘠ\\u1621 ᘡ\\u1622 ᘢ\\u1623 ᘣ\\u1624 ᘤ\\u1625 ᘥ\\u1626 ᘦ\\u1627 ᘧ\\u1628 ᘨ\\u1629 ᘩ\\u1630 ᘰ\\u1631 ᘱ\\u1632 ᘲ\\u1633 ᘳ\\u1634 ᘴ\\u1635 ᘵ\\u1636 ᘶ\\u1637 ᘷ\\u1638 ᘸ\\u1639 ᘹ\\u1640 ᙀ\\u1641 ᙁ\\u1642 ᙂ\\u1643 ᙃ\\u1644 ᙄ\\u1645 ᙅ\\u1646 ᙆ\\u1647 ᙇ\\u1648 ᙈ\\u1649 ᙉ\\u1650 ᙐ\\u1651 ᙑ\\u1652 ᙒ\\u1653 ᙓ\\u1654 ᙔ\\u1655 ᙕ\\u1656 ᙖ\\u1657 ᙗ\\u1658 ᙘ\\u1659 ᙙ\\u1660 ᙠ\\u1661 ᙡ\\u1662 ᙢ\\u1663 ᙣ\\u1664 ᙤ\\u1665 ᙥ\\u1666 ᙦ\\u1667 ᙧ\\u1668 ᙨ\\u1669 ᙩ\\u1670 ᙰ\\u1671 ᙱ\\u1672 ᙲ\\u1673 ᙳ\\u1674 ᙴ\\u1675 ᙵ\\u1676 ᙶ\\u1677 ᙷ\\u1678 ᙸ\\u1679 ᙹ\\u1680 \\u1681 ᚁ\\u1682 ᚂ\\u1683 ᚃ\\u1684 ᚄ\\u1685 ᚅ\\u1686 ᚆ\\u1687 ᚇ\\u1688 ᚈ\\u1689 ᚉ\\u1690 ᚐ\\u1691 ᚑ\\u1692 ᚒ\\u1693 ᚓ\\u1694 ᚔ\\u1695 ᚕ\\u1696 ᚖ\\u1697 ᚗ\\u1698 ᚘ\\u1699 ᚙ\\u1700 ᜀ\\u1701 ᜁ\\u1702 ᜂ\\u1703 ᜃ\\u1704 ᜄ\\u1705 ᜅ\\u1706 ᜆ\\u1707 ᜇ\\u1708 ᜈ\\u1709 ᜉ\\u1710 ᜐ\\u1711 ᜑ\\u1712 ᜒ\\u1713 ᜓ\\u1714 ᜔\\u1715 ᜕\\u1716 ᜖\\u1717 ᜗\\u1718 ᜘\\u1719 ᜙\\u1720 ᜠ\\u1721 ᜡ\\u1722 ᜢ\\u1723 ᜣ\\u1724 ᜤ\\u1725 ᜥ\\u1726 ᜦ\\u1727 ᜧ\\u1728 ᜨ\\u1729 ᜩ\\u1730 ᜰ\\u1731 ᜱ\\u1732 ᜲ\\u1733 ᜳ\\u1734 ᜴\\u1735 ᜵\\u1736 ᜶\\u1737 ᜷\\u1738 ᜸\\u1739 ᜹\\u1740 ᝀ\\u1741 ᝁ\\u1742 ᝂ\\u1743 ᝃ\\u1744 ᝄ\\u1745 ᝅ\\u1746 ᝆ\\u1747 ᝇ\\u1748 ᝈ\\u1749 ᝉ\\u1750 ᝐ\\u1751 ᝑ\\u1752 ᝒ\\u1753 ᝓ\\u1754 ᝔\\u1755 ᝕\\u1756 ᝖\\u1757 ᝗\\u1758 ᝘\\u1759 ᝙\\u1760 ᝠ\\u1761 ᝡ\\u1762 ᝢ\\u1763 ᝣ\\u1764 ᝤ\\u1765 ᝥ\\u1766 ᝦ\\u1767 ᝧ\\u1768 ᝨ\\u1769 ᝩ\\u1770 ᝰ\\u1771 ᝱\\u1772 ᝲ\\u1773 ᝳ\\u1774 ᝴\\u1775 ᝵\\u1776 ᝶\\u1777 ᝷\\u1778 ᝸\\u1779 ᝹\\u1780 ក\\u1781 ខ\\u1782 គ\\u1783 ឃ\\u1784 ង\\u1785 ច\\u1786 ឆ\\u1787 ជ\\u1788 ឈ\\u1789 ញ\\u1790 ថ\\u1791 ទ\\u1792 ធ\\u1793 ន\\u1794 ប\\u1795 ផ\\u1796 ព\\u1797 ភ\\u1798 ម\\u1799 យ\\u1800 ᠀\\u1801 ᠁\\u1802 ᠂\\u1803 ᠃\\u1804 ᠄\\u1805 ᠅\\u1806 ᠆\\u1807 ᠇\\u1808 ᠈\\u1809 ᠉\\u1810 ᠐\\u1811 ᠑\\u1812 ᠒\\u1813 ᠓\\u1814 ᠔\\u1815 ᠕\\u1816 ᠖\\u1817 ᠗\\u1818 ᠘\\u1819 ᠙\\u1820 ᠠ\\u1821 ᠡ\\u1822 ᠢ\\u1823 ᠣ\\u1824 ᠤ\\u1825 ᠥ\\u1826 ᠦ\\u1827 ᠧ\\u1828 ᠨ\\u1829 ᠩ\\u1830 ᠰ\\u1831 ᠱ\\u1832 ᠲ\\u1833 ᠳ\\u1834 ᠴ\\u1835 ᠵ\\u1836 ᠶ\\u1837 ᠷ\\u1838 ᠸ\\u1839 ᠹ\\u1840 ᡀ\\u1841 ᡁ\\u1842 ᡂ\\u1843 ᡃ\\u1844 ᡄ\\u1845 ᡅ\\u1846 ᡆ\\u1847 ᡇ\\u1848 ᡈ\\u1849 ᡉ\\u1850 ᡐ\\u1851 ᡑ\\u1852 ᡒ\\u1853 ᡓ\\u1854 ᡔ\\u1855 ᡕ\\u1856 ᡖ\\u1857 ᡗ\\u1858 ᡘ\\u1859 ᡙ\\u1860 ᡠ\\u1861 ᡡ\\u1862 ᡢ\\u1863 ᡣ\\u1864 ᡤ\\u1865 ᡥ\\u1866 ᡦ\\u1867 ᡧ\\u1868 ᡨ\\u1869 ᡩ\\u1870 ᡰ\\u1871 ᡱ\\u1872 ᡲ\\u1873 ᡳ\\u1874 ᡴ\\u1875 ᡵ\\u1876 ᡶ\\u1877 ᡷ\\u1878 ᡸ\\u1879 ᡹\\u1880 ᢀ\\u1881 ᢁ\\u1882 ᢂ\\u1883 ᢃ\\u1884 ᢄ\\u1885 ᢅ\\u1886 ᢆ\\u1887 ᢇ\\u1888 ᢈ\\u1889 ᢉ\\u1890 ᢐ\\u1891 ᢑ\\u1892 ᢒ\\u1893 ᢓ\\u1894 ᢔ\\u1895 ᢕ\\u1896 ᢖ\\u1897 ᢗ\\u1898 ᢘ\\u1899 ᢙ\\u1900 ᤀ\\u1901 ᤁ\\u1902 ᤂ\\u1903 ᤃ\\u1904 ᤄ\\u1905 ᤅ\\u1906 ᤆ\\u1907 ᤇ\\u1908 ᤈ\\u1909 ᤉ\\u1910 ᤐ\\u1911 ᤑ\\u1912 ᤒ\\u1913 ᤓ\\u1914 ᤔ\\u1915 ᤕ\\u1916 ᤖ\\u1917 ᤗ\\u1918 ᤘ\\u1919 ᤙ\\u1920 ᤠ\\u1921 ᤡ\\u1922 ᤢ\\u1923 ᤣ\\u1924 ᤤ\\u1925 ᤥ\\u1926 ᤦ\\u1927 ᤧ\\u1928 ᤨ\\u1929 ᤩ\\u1930 ᤰ\\u1931 ᤱ\\u1932 ᤲ\\u1933 ᤳ\\u1934 ᤴ\\u1935 ᤵ\\u1936 ᤶ\\u1937 ᤷ\\u1938 ᤸ\\u1939 ᤹\\u1940 ᥀\\u1941 ᥁\\u1942 ᥂\\u1943 ᥃\\u1944 ᥄\\u1945 ᥅\\u1946 ᥆\\u1947 ᥇\\u1948 ᥈\\u1949 ᥉\\u1950 ᥐ\\u1951 ᥑ\\u1952 ᥒ\\u1953 ᥓ\\u1954 ᥔ\\u1955 ᥕ\\u1956 ᥖ\\u1957 ᥗ\\u1958 ᥘ\\u1959 ᥙ\\u1960 ᥠ\\u1961 ᥡ\\u1962 ᥢ\\u1963 ᥣ\\u1964 ᥤ\\u1965 ᥥ\\u1966 ᥦ\\u1967 ᥧ\\u1968 ᥨ\\u1969 ᥩ\\u1970 ᥰ\\u1971 ᥱ\\u1972 ᥲ\\u1973 ᥳ\\u1974 ᥴ\\u1975 ᥵\\u1976 ᥶\\u1977 ᥷\\u1978 ᥸\\u1979 ᥹\\u1980 ᦀ\\u1981 ᦁ\\u1982 ᦂ\\u1983 ᦃ\\u1984 ᦄ\\u1985 ᦅ\\u1986 ᦆ\\u1987 ᦇ\\u1988 ᦈ\\u1989 ᦉ\\u1990 ᦐ\\u1991 ᦑ\\u1992 ᦒ\\u1993 ᦓ\\u1994 ᦔ\\u1995 ᦕ\\u1996 ᦖ\\u1997 ᦗ\\u1998 ᦘ\\u1999 ᦙ\\u2000 \\u2001 \\u2002 \\u2003 \\u2004 \\u2005 \\u2006 \\u2007 \\u2008 \\u2009 \\u2010 ‐\\u2011 ‑\\u2012 ‒\\u2013 –\\u2014 —\\u2015 ―\\u2016 ‖\\u2017 ‗\\u2018 ‘\\u2019 ’\\u2020 †\\u2021 ‡\\u2022 •\\u2023 ‣\\u2024 ․\\u2025 ‥\\u2026 …\\u2027 ‧\\u2028 \\u2029 \\u2030 ‰\\u2031 ‱\\u2032 ′\\u2033 ″\\u2034 ‴\\u2035 ‵\\u2036 ‶\\u2037 ‷\\u2038 ‸\\u2039 ‹\\u2040 ⁀\\u2041 ⁁\\u2042 ⁂\\u2043 ⁃\\u2044 ⁄\\u2045 ⁅\\u2046 ⁆\\u2047 ⁇\\u2048 ⁈\\u2049 ⁉\\u2050 ⁐\\u2051 ⁑\\u2052 ⁒\\u2053 ⁓\\u2054 ⁔\\u2055 ⁕\\u2056 ⁖\\u2057 ⁗\\u2058 ⁘\\u2059 ⁙\\u2060 ⁠\\u2061 ⁡\\u2062 ⁢\\u2063 ⁣\\u2064 ⁤\\u2065 ⁥\\u2066 ⁦\\u2067 ⁧\\u2068 ⁨\\u2069 ⁩\\u2070 ⁰\\u2071 ⁱ\\u2072 ⁲\\u2073 ⁳\\u2074 ⁴\\u2075 ⁵\\u2076 ⁶\\u2077 ⁷\\u2078 ⁸\\u2079 ⁹\\u2080 ₀\\u2081 ₁\\u2082 ₂\\u2083 ₃\\u2084 ₄\\u2085 ₅\\u2086 ₆\\u2087 ₇\\u2088 ₈\\u2089 ₉\\u2090 ₐ\\u2091 ₑ\\u2092 ₒ\\u2093 ₓ\\u2094 ₔ\\u2095 ₕ\\u2096 ₖ\\u2097 ₗ\\u2098 ₘ\\u2099 ₙ\\u2100 ℀\\u2101 ℁\\u2102 ℂ\\u2103 ℃\\u2104 ℄\\u2105 ℅\\u2106 ℆\\u2107 ℇ\\u2108 ℈\\u2109 ℉\\u2110 ℐ\\u2111 ℑ\\u2112 ℒ\\u2113 ℓ\\u2114 ℔\\u2115 ℕ\\u2116 №\\u2117 ℗\\u2118 ℘\\u2119 ℙ\\u2120 ℠\\u2121 ℡\\u2122 ™\\u2123 ℣\\u2124 ℤ\\u2125 ℥\\u2126 Ω\\u2127 ℧\\u2128 ℨ\\u2129 ℩\\u2130 ℰ\\u2131 ℱ\\u2132 Ⅎ\\u2133 ℳ\\u2134 ℴ\\u2135 ℵ\\u2136 ℶ\\u2137 ℷ\\u2138 ℸ\\u2139 ℹ\\u2140 ⅀\\u2141 ⅁\\u2142 ⅂\\u2143 ⅃\\u2144 ⅄\\u2145 ⅅ\\u2146 ⅆ\\u2147 ⅇ\\u2148 ⅈ\\u2149 ⅉ\\u2150 ⅐\\u2151 ⅑\\u2152 ⅒\\u2153 ⅓\\u2154 ⅔\\u2155 ⅕\\u2156 ⅖\\u2157 ⅗\\u2158 ⅘\\u2159 ⅙\\u2160 Ⅰ\\u2161 Ⅱ\\u2162 Ⅲ\\u2163 Ⅳ\\u2164 Ⅴ\\u2165 Ⅵ\\u2166 Ⅶ\\u2167 Ⅷ\\u2168 Ⅸ\\u2169 Ⅹ\\u2170 ⅰ\\u2171 ⅱ\\u2172 ⅲ\\u2173 ⅳ\\u2174 ⅴ\\u2175 ⅵ\\u2176 ⅶ\\u2177 ⅷ\\u2178 ⅸ\\u2179 ⅹ\\u2180 ↀ\\u2181 ↁ\\u2182 ↂ\\u2183 Ↄ\\u2184 ↄ\\u2185 ↅ\\u2186 ↆ\\u2187 ↇ\\u2188 ↈ\\u2189 ↉\\u2190 ←\\u2191 ↑\\u2192 →\\u2193 ↓\\u2194 ↔\\u2195 ↕\\u2196 ↖\\u2197 ↗\\u2198 ↘\\u2199 ↙\\u2200 ∀\\u2201 ∁\\u2202 ∂\\u2203 ∃\\u2204 ∄\\u2205 ∅\\u2206 ∆\\u2207 ∇\\u2208 ∈\\u2209 ∉\\u2210 ∐\\u2211 ∑\\u2212 −\\u2213 ∓\\u2214 ∔\\u2215 ∕\\u2216 ∖\\u2217 ∗\\u2218 ∘\\u2219 ∙\\u2220 ∠\\u2221 ∡\\u2222 ∢\\u2223 ∣\\u2224 ∤\\u2225 ∥\\u2226 ∦\\u2227 ∧\\u2228 ∨\\u2229 ∩\\u2230 ∰\\u2231 ∱\\u2232 ∲\\u2233 ∳\\u2234 ∴\\u2235 ∵\\u2236 ∶\\u2237 ∷\\u2238 ∸\\u2239 ∹\\u2240 ≀\\u2241 ≁\\u2242 ≂\\u2243 ≃\\u2244 ≄\\u2245 ≅\\u2246 ≆\\u2247 ≇\\u2248 ≈\\u2249 ≉\\u2250 ≐\\u2251 ≑\\u2252 ≒\\u2253 ≓\\u2254 ≔\\u2255 ≕\\u2256 ≖\\u2257 ≗\\u2258 ≘\\u2259 ≙\\u2260 ≠\\u2261 ≡\\u2262 ≢\\u2263 ≣\\u2264 ≤\\u2265 ≥\\u2266 ≦\\u2267 ≧\\u2268 ≨\\u2269 ≩\\u2270 ≰\\u2271 ≱\\u2272 ≲\\u2273 ≳\\u2274 ≴\\u2275 ≵\\u2276 ≶\\u2277 ≷\\u2278 ≸\\u2279 ≹\\u2280 ⊀\\u2281 ⊁\\u2282 ⊂\\u2283 ⊃\\u2284 ⊄\\u2285 ⊅\\u2286 ⊆\\u2287 ⊇\\u2288 ⊈\\u2289 ⊉\\u2290 ⊐\\u2291 ⊑\\u2292 ⊒\\u2293 ⊓\\u2294 ⊔\\u2295 ⊕\\u2296 ⊖\\u2297 ⊗\\u2298 ⊘\\u2299 ⊙\\u2300 ⌀\\u2301 ⌁\\u2302 ⌂\\u2303 ⌃\\u2304 ⌄\\u2305 ⌅\\u2306 ⌆\\u2307 ⌇\\u2308 ⌈\\u2309 ⌉\\u2310 ⌐\\u2311 ⌑\\u2312 ⌒\\u2313 ⌓\\u2314 ⌔\\u2315 ⌕\\u2316 ⌖\\u2317 ⌗\\u2318 ⌘\\u2319 ⌙\\u2320 ⌠\\u2321 ⌡\\u2322 ⌢\\u2323 ⌣\\u2324 ⌤\\u2325 ⌥\\u2326 ⌦\\u2327 ⌧\\u2328 ⌨\\u2329 〈\\u2330 ⌰\\u2331 ⌱\\u2332 ⌲\\u2333 ⌳\\u2334 ⌴\\u2335 ⌵\\u2336 ⌶\\u2337 ⌷\\u2338 ⌸\\u2339 ⌹\\u2340 ⍀\\u2341 ⍁\\u2342 ⍂\\u2343 ⍃\\u2344 ⍄\\u2345 ⍅\\u2346 ⍆\\u2347 ⍇\\u2348 ⍈\\u2349 ⍉\\u2350 ⍐\\u2351 ⍑\\u2352 ⍒\\u2353 ⍓\\u2354 ⍔\\u2355 ⍕\\u2356 ⍖\\u2357 ⍗\\u2358 ⍘\\u2359 ⍙\\u2360 ⍠\\u2361 ⍡\\u2362 ⍢\\u2363 ⍣\\u2364 ⍤\\u2365 ⍥\\u2366 ⍦\\u2367 ⍧\\u2368 ⍨\\u2369 ⍩\\u2370 ⍰\\u2371 ⍱\\u2372 ⍲\\u2373 ⍳\\u2374 ⍴\\u2375 ⍵\\u2376 ⍶\\u2377 ⍷\\u2378 ⍸\\u2379 ⍹\\u2380 ⎀\\u2381 ⎁\\u2382 ⎂\\u2383 ⎃\\u2384 ⎄\\u2385 ⎅\\u2386 ⎆\\u2387 ⎇\\u2388 ⎈\\u2389 ⎉\\u2390 ⎐\\u2391 ⎑\\u2392 ⎒\\u2393 ⎓\\u2394 ⎔\\u2395 ⎕\\u2396 ⎖\\u2397 ⎗\\u2398 ⎘\\u2399 ⎙\\u2400 ␀\\u2401 ␁\\u2402 ␂\\u2403 ␃\\u2404 ␄\\u2405 ␅\\u2406 ␆\\u2407 ␇\\u2408 ␈\\u2409 ␉\\u2410 ␐\\u2411 ␑\\u2412 ␒\\u2413 ␓\\u2414 ␔\\u2415 ␕\\u2416 ␖\\u2417 ␗\\u2418 ␘\\u2419 ␙\\u2420 ␠\\u2421 ␡\\u2422 ␢\\u2423 ␣\\u2424\\u2425 ␥\\u2426 ␦\\u2427 ␧\\u2428 ␨\\u2429 ␩\\u2430 ␰\\u2431 ␱\\u2432 ␲\\u2433 ␳\\u2434 ␴\\u2435 ␵\\u2436 ␶\\u2437 ␷\\u2438 ␸\\u2439 ␹\\u2440 ⑀\\u2441 ⑁\\u2442 ⑂\\u2443 ⑃\\u2444 ⑄\\u2445 ⑅\\u2446 ⑆\\u2447 ⑇\\u2448 ⑈\\u2449 ⑉\\u2450 ⑐\\u2451 ⑑\\u2452 ⑒\\u2453 ⑓\\u2454 ⑔\\u2455 ⑕\\u2456 ⑖\\u2457 ⑗\\u2458 ⑘\\u2459 ⑙\\u2460 ①\\u2461 ②\\u2462 ③\\u2463 ④\\u2464 ⑤\\u2465 ⑥\\u2466 ⑦\\u2467 ⑧\\u2468 ⑨\\u2469 ⑩\\u2470 ⑰\\u2471 ⑱\\u2472 ⑲\\u2473 ⑳\\u2474 ⑴\\u2475 ⑵\\u2476 ⑶\\u2477 ⑷\\u2478 ⑸\\u2479 ⑹\\u2480 ⒀\\u2481 ⒁\\u2482 ⒂\\u2483 ⒃\\u2484 ⒄\\u2485 ⒅\\u2486 ⒆\\u2487 ⒇\\u2488 ⒈\\u2489 ⒉\\u2490 ⒐\\u2491 ⒑\\u2492 ⒒\\u2493 ⒓\\u2494 ⒔\\u2495 ⒕\\u2496 ⒖\\u2497 ⒗\\u2498 ⒘\\u2499 ⒙\\u2500 ─\\u2501 ━\\u2502 │\\u2503 ┃\\u2504 ┄\\u2505 ┅\\u2506 ┆\\u2507 ┇\\u2508 ┈\\u2509 ┉\\u2510 ┐\\u2511 ┑\\u2512 ┒\\u2513 ┓\\u2514 └\\u2515 ┕\\u2516 ┖\\u2517 ┗\\u2518 ┘\\u2519 ┙\\u2520 ┠\\u2521 ┡\\u2522 ┢\\u2523 ┣\\u2524 ┤\\u2525 ┥\\u2526 ┦\\u2527 ┧\\u2528 ┨\\u2529 ┩\\u2530 ┰\\u2531 ┱\\u2532 ┲\\u2533 ┳\\u2534 ┴\\u2535 ┵\\u2536 ┶\\u2537 ┷\\u2538 ┸\\u2539 ┹\\u2540 ╀\\u2541 ╁\\u2542 ╂\\u2543 ╃\\u2544 ╄\\u2545 ╅\\u2546 ╆\\u2547 ╇\\u2548 ╈\\u2549 ╉\\u2550 ═\\u2551 ║\\u2552 ╒\\u2553 ╓\\u2554 ╔\\u2555 ╕\\u2556 ╖\\u2557 ╗\\u2558 ╘\\u2559 ╙\\u2560 ╠\\u2561 ╡\\u2562 ╢\\u2563 ╣\\u2564 ╤\\u2565 ╥\\u2566 ╦\\u2567 ╧\\u2568 ╨\\u2569 ╩\\u2570 ╰\\u2571 ╱\\u2572 ╲\\u2573 ╳\\u2574 ╴\\u2575 ╵\\u2576 ╶\\u2577 ╷\\u2578 ╸\\u2579 ╹\\u2580 ▀\\u2581 ▁\\u2582 ▂\\u2583 ▃\\u2584 ▄\\u2585 ▅\\u2586 ▆\\u2587 ▇\\u2588 █\\u2589 ▉\\u2590 ▐\\u2591 ░\\u2592 ▒\\u2593 ▓\\u2594 ▔\\u2595 ▕\\u2596 ▖\\u2597 ▗\\u2598 ▘\\u2599 ▙\\u2600 ☀\\u2601 ☁\\u2602 ☂\\u2603 ☃\\u2604 ☄\\u2605 ★\\u2606 ☆\\u2607 ☇\\u2608 ☈\\u2609 ☉\\u2610 ☐\\u2611 ☑\\u2612 ☒\\u2613 ☓\\u2614 ☔\\u2615 ☕\\u2616 ☖\\u2617 ☗\\u2618 ☘\\u2619 ☙\\u2620 ☠\\u2621 ☡\\u2622 ☢\\u2623 ☣\\u2624 ☤\\u2625 ☥\\u2626 ☦\\u2627 ☧\\u2628 ☨\\u2629 ☩\\u2630 ☰\\u2631 ☱\\u2632 ☲\\u2633 ☳\\u2634 ☴\\u2635 ☵\\u2636 ☶\\u2637 ☷\\u2638 ☸\\u2639 ☹\\u2640 ♀\\u2641 ♁\\u2642 ♂\\u2643 ♃\\u2644 ♄\\u2645 ♅\\u2646 ♆\\u2647 ♇\\u2648 ♈\\u2649 ♉\\u2650 ♐\\u2651 ♑\\u2652 ♒\\u2653 ♓\\u2654 ♔\\u2655 ♕\\u2656 ♖\\u2657 ♗\\u2658 ♘\\u2659 ♙\\u2660 ♠\\u2661 ♡\\u2662 ♢\\u2663 ♣\\u2664 ♤\\u2665 ♥\\u2666 ♦\\u2667 ♧\\u2668 ♨\\u2669 ♩\\u2670 ♰\\u2671 ♱\\u2672 ♲\\u2673 ♳\\u2674 ♴\\u2675 ♵\\u2676 ♶\\u2677 ♷\\u2678 ♸\\u2679 ♹\\u2680 ⚀\\u2681 ⚁\\u2682 ⚂\\u2683 ⚃\\u2684 ⚄\\u2685 ⚅\\u2686 ⚆\\u2687 ⚇\\u2688 ⚈\\u2689 ⚉\\u2690 ⚐\\u2691 ⚑\\u2692 ⚒\\u2693 ⚓\\u2694 ⚔\\u2695 ⚕\\u2696 ⚖\\u2697 ⚗\\u2698 ⚘\\u2699 ⚙\\u2700 ✀\\u2701 ✁\\u2702 ✂\\u2703 ✃\\u2704 ✄\\u2705 ✅\\u2706 ✆\\u2707 ✇\\u2708 ✈\\u2709 ✉\\u2710 ✐\\u2711 ✑\\u2712 ✒\\u2713 ✓\\u2714 ✔\\u2715 ✕\\u2716 ✖\\u2717 ✗\\u2718 ✘\\u2719 ✙\\u2720 ✠\\u2721 ✡\\u2722 ✢\\u2723 ✣\\u2724 ✤\\u2725 ✥\\u2726 ✦\\u2727 ✧\\u2728 ✨\\u2729 ✩\\u2730 ✰\\u2731 ✱\\u2732 ✲\\u2733 ✳\\u2734 ✴\\u2735 ✵\\u2736 ✶\\u2737 ✷\\u2738 ✸\\u2739 ✹\\u2740 ❀\\u2741 ❁\\u2742 ❂\\u2743 ❃\\u2744 ❄\\u2745 ❅\\u2746 ❆\\u2747 ❇\\u2748 ❈\\u2749 ❉\\u2750 ❐\\u2751 ❑\\u2752 ❒\\u2753 ❓\\u2754 ❔\\u2755 ❕\\u2756 ❖\\u2757 ❗\\u2758 ❘\\u2759 ❙\\u2760 ❠\\u2761 ❡\\u2762 ❢\\u2763 ❣\\u2764 ❤\\u2765 ❥\\u2766 ❦\\u2767 ❧\\u2768 ❨\\u2769 ❩\\u2770 ❰\\u2771 ❱\\u2772 ❲\\u2773 ❳\\u2774 ❴\\u2775 ❵\\u2776 ❶\\u2777 ❷\\u2778 ❸\\u2779 ❹\\u2780 ➀\\u2781 ➁\\u2782 ➂\\u2783 ➃\\u2784 ➄\\u2785 ➅\\u2786 ➆\\u2787 ➇\\u2788 ➈\\u2789 ➉\\u2790 ➐\\u2791 ➑\\u2792 ➒\\u2793 ➓\\u2794 ➔\\u2795 ➕\\u2796 ➖\\u2797 ➗\\u2798 ➘\\u2799 ➙\\u2800 ⠀\\u2801 ⠁\\u2802 ⠂\\u2803 ⠃\\u2804 ⠄\\u2805 ⠅\\u2806 ⠆\\u2807 ⠇\\u2808 ⠈\\u2809 ⠉\\u2810 ⠐\\u2811 ⠑\\u2812 ⠒\\u2813 ⠓\\u2814 ⠔\\u2815 ⠕\\u2816 ⠖\\u2817 ⠗\\u2818 ⠘\\u2819 ⠙\\u2820 ⠠\\u2821 ⠡\\u2822 ⠢\\u2823 ⠣\\u2824 ⠤\\u2825 ⠥\\u2826 ⠦\\u2827 ⠧\\u2828 ⠨\\u2829 ⠩\\u2830 ⠰\\u2831 ⠱\\u2832 ⠲\\u2833 ⠳\\u2834 ⠴\\u2835 ⠵\\u2836 ⠶\\u2837 ⠷\\u2838 ⠸\\u2839 ⠹\\u2840 ⡀\\u2841 ⡁\\u2842 ⡂\\u2843 ⡃\\u2844 ⡄\\u2845 ⡅\\u2846 ⡆\\u2847 ⡇\\u2848 ⡈\\u2849 ⡉\\u2850 ⡐\\u2851 ⡑\\u2852 ⡒\\u2853 ⡓\\u2854 ⡔\\u2855 ⡕\\u2856 ⡖\\u2857 ⡗\\u2858 ⡘\\u2859 ⡙\\u2860 ⡠\\u2861 ⡡\\u2862 ⡢\\u2863 ⡣\\u2864 ⡤\\u2865 ⡥\\u2866 ⡦\\u2867 ⡧\\u2868 ⡨\\u2869 ⡩\\u2870 ⡰\\u2871 ⡱\\u2872 ⡲\\u2873 ⡳\\u2874 ⡴\\u2875 ⡵\\u2876 ⡶\\u2877 ⡷\\u2878 ⡸\\u2879 ⡹\\u2880 ⢀\\u2881 ⢁\\u2882 ⢂\\u2883 ⢃\\u2884 ⢄\\u2885 ⢅\\u2886 ⢆\\u2887 ⢇\\u2888 ⢈\\u2889 ⢉\\u2890 ⢐\\u2891 ⢑\\u2892 ⢒\\u2893 ⢓\\u2894 ⢔\\u2895 ⢕\\u2896 ⢖\\u2897 ⢗\\u2898 ⢘\\u2899 ⢙\\u2900 ⤀\\u2901 ⤁\\u2902 ⤂\\u2903 ⤃\\u2904 ⤄\\u2905 ⤅\\u2906 ⤆\\u2907 ⤇\\u2908 ⤈\\u2909 ⤉\\u2910 ⤐\\u2911 ⤑\\u2912 ⤒\\u2913 ⤓\\u2914 ⤔\\u2915 ⤕\\u2916 ⤖\\u2917 ⤗\\u2918 ⤘\\u2919 ⤙\\u2920 ⤠\\u2921 ⤡\\u2922 ⤢\\u2923 ⤣\\u2924 ⤤\\u2925 ⤥\\u2926 ⤦\\u2927 ⤧\\u2928 ⤨\\u2929 ⤩\\u2930 ⤰\\u2931 ⤱\\u2932 ⤲\\u2933 ⤳\\u2934 ⤴\\u2935 ⤵\\u2936 ⤶\\u2937 ⤷\\u2938 ⤸\\u2939 ⤹\\u2940 ⥀\\u2941 ⥁\\u2942 ⥂\\u2943 ⥃\\u2944 ⥄\\u2945 ⥅\\u2946 ⥆\\u2947 ⥇\\u2948 ⥈\\u2949 ⥉\\u2950 ⥐\\u2951 ⥑\\u2952 ⥒\\u2953 ⥓\\u2954 ⥔\\u2955 ⥕\\u2956 ⥖\\u2957 ⥗\\u2958 ⥘\\u2959 ⥙\\u2960 ⥠\\u2961 ⥡\\u2962 ⥢\\u2963 ⥣\\u2964 ⥤\\u2965 ⥥\\u2966 ⥦\\u2967 ⥧\\u2968 ⥨\\u2969 ⥩\\u2970 ⥰\\u2971 ⥱\\u2972 ⥲\\u2973 ⥳\\u2974 ⥴\\u2975 ⥵\\u2976 ⥶\\u2977 ⥷\\u2978 ⥸\\u2979 ⥹\\u2980 ⦀\\u2981 ⦁\\u2982 ⦂\\u2983 ⦃\\u2984 ⦄\\u2985 ⦅\\u2986 ⦆\\u2987 ⦇\\u2988 ⦈\\u2989 ⦉\\u2990 ⦐\\u2991 ⦑\\u2992 ⦒\\u2993 ⦓\\u2994 ⦔\\u2995 ⦕\\u2996 ⦖\\u2997 ⦗\\u2998 ⦘\\u2999 ⦙\\u3000 \\u3001 、\\u3002 。\\u3003 〃\\u3004 〄\\u3005 々\\u3006 〆\\u3007 〇\\u3008 〈\\u3009 〉\\u3010 【\\u3011 】\\u3012 〒\\u3013 〓\\u3014 〔\\u3015 〕\\u3016 〖\\u3017 〗\\u3018 〘\\u3019 〙\\u3020 〠\\u3021 〡\\u3022 〢\\u3023 〣\\u3024 〤\\u3025 〥\\u3026 〦\\u3027 〧\\u3028 〨\\u3029 〩\\u3030 〰\\u3031 〱\\u3032 〲\\u3033 〳\\u3034 〴\\u3035 〵\\u3036 〶\\u3037 〷\\u3038 〸\\u3039 〹\\u3040 ぀\\u3041 ぁ\\u3042 あ\\u3043 ぃ\\u3044 い\\u3045 ぅ\\u3046 う\\u3047 ぇ\\u3048 え\\u3049 ぉ\\u3050 ぐ\\u3051 け\\u3052 げ\\u3053 こ\\u3054 ご\\u3055 さ\\u3056 ざ\\u3057 し\\u3058 じ\\u3059 す\\u3060 だ\\u3061 ち\\u3062 ぢ\\u3063 っ\\u3064 つ\\u3065 づ\\u3066 て\\u3067 で\\u3068 と\\u3069 ど\\u3070 ば\\u3071 ぱ\\u3072 ひ\\u3073 び\\u3074 ぴ\\u3075 ふ\\u3076 ぶ\\u3077 ぷ\\u3078 へ\\u3079 べ\\u3080 む\\u3081 め\\u3082 も\\u3083 ゃ\\u3084 や\\u3085 ゅ\\u3086 ゆ\\u3087 ょ\\u3088 よ\\u3089 ら\\u3090 ゐ\\u3091 ゑ\\u3092 を\\u3093 ん\\u3094 ゔ\\u3095 ゕ\\u3096 ゖ\\u3097 ゗\\u3098 ゘\\u3099 ゙\\u3100 ㄀\\u3101 ㄁\\u3102 ㄂\\u3103 ㄃\\u3104 ㄄\\u3105 ㄅ\\u3106 ㄆ\\u3107 ㄇ\\u3108 ㄈ\\u3109 ㄉ\\u3110 ㄐ\\u3111 ㄑ\\u3112 ㄒ\\u3113 ㄓ\\u3114 ㄔ\\u3115 ㄕ\\u3116 ㄖ\\u3117 ㄗ\\u3118 ㄘ\\u3119 ㄙ\\u3120 ㄠ\\u3121 ㄡ\\u3122 ㄢ\\u3123 ㄣ\\u3124 ㄤ\\u3125 ㄥ\\u3126 ㄦ\\u3127 ㄧ\\u3128 ㄨ\\u3129 ㄩ\\u3130 ㄰\\u3131 ㄱ\\u3132 ㄲ\\u3133 ㄳ\\u3134 ㄴ\\u3135 ㄵ\\u3136 ㄶ\\u3137 ㄷ\\u3138 ㄸ\\u3139 ㄹ\\u3140 ㅀ\\u3141 ㅁ\\u3142 ㅂ\\u3143 ㅃ\\u3144 ㅄ\\u3145 ㅅ\\u3146 ㅆ\\u3147 ㅇ\\u3148 ㅈ\\u3149 ㅉ\\u3150 ㅐ\\u3151 ㅑ\\u3152 ㅒ\\u3153 ㅓ\\u3154 ㅔ\\u3155 ㅕ\\u3156 ㅖ\\u3157 ㅗ\\u3158 ㅘ\\u3159 ㅙ\\u3160 ㅠ\\u3161 ㅡ\\u3162 ㅢ\\u3163 ㅣ\\u3164 ㅤ\\u3165 ㅥ\\u3166 ㅦ\\u3167 ㅧ\\u3168 ㅨ\\u3169 ㅩ\\u3170 ㅰ\\u3171 ㅱ\\u3172 ㅲ\\u3173 ㅳ\\u3174 ㅴ\\u3175 ㅵ\\u3176 ㅶ\\u3177 ㅷ\\u3178 ㅸ\\u3179 ㅹ\\u3180 ㆀ\\u3181 ㆁ\\u3182 ㆂ\\u3183 ㆃ\\u3184 ㆄ\\u3185 ㆅ\\u3186 ㆆ\\u3187 ㆇ\\u3188 ㆈ\\u3189 ㆉ\\u3190 ㆐\\u3191 ㆑\\u3192 ㆒\\u3193 ㆓\\u3194 ㆔\\u3195 ㆕\\u3196 ㆖\\u3197 ㆗\\u3198 ㆘\\u3199 ㆙\\u3200 ㈀\\u3201 ㈁\\u3202 ㈂\\u3203 ㈃\\u3204 ㈄\\u3205 ㈅\\u3206 ㈆\\u3207 ㈇\\u3208 ㈈\\u3209 ㈉\\u3210 ㈐\\u3211 ㈑\\u3212 ㈒\\u3213 ㈓\\u3214 ㈔\\u3215 ㈕\\u3216 ㈖\\u3217 ㈗\\u3218 ㈘\\u3219 ㈙\\u3220 ㈠\\u3221 ㈡\\u3222 ㈢\\u3223 ㈣\\u3224 ㈤\\u3225 ㈥\\u3226 ㈦\\u3227 ㈧\\u3228 ㈨\\u3229 ㈩\\u3230 ㈰\\u3231 ㈱\\u3232 ㈲\\u3233 ㈳\\u3234 ㈴\\u3235 ㈵\\u3236 ㈶\\u3237 ㈷\\u3238 ㈸\\u3239 ㈹\\u3240 ㉀\\u3241 ㉁\\u3242 ㉂\\u3243 ㉃\\u3244 ㉄\\u3245 ㉅\\u3246 ㉆\\u3247 ㉇\\u3248 ㉈\\u3249 ㉉\\u3250 ㉐\\u3251 ㉑\\u3252 ㉒\\u3253 ㉓\\u3254 ㉔\\u3255 ㉕\\u3256 ㉖\\u3257 ㉗\\u3258 ㉘\\u3259 ㉙\\u3260 ㉠\\u3261 ㉡\\u3262 ㉢\\u3263 ㉣\\u3264 ㉤\\u3265 ㉥\\u3266 ㉦\\u3267 ㉧\\u3268 ㉨\\u3269 ㉩\\u3270 ㉰\\u3271 ㉱\\u3272 ㉲\\u3273 ㉳\\u3274 ㉴\\u3275 ㉵\\u3276 ㉶\\u3277 ㉷\\u3278 ㉸\\u3279 ㉹\\u3280 ㊀\\u3281 ㊁\\u3282 ㊂\\u3283 ㊃\\u3284 ㊄\\u3285 ㊅\\u3286 ㊆\\u3287 ㊇\\u3288 ㊈\\u3289 ㊉\\u3290 ㊐\\u3291 ㊑\\u3292 ㊒\\u3293 ㊓\\u3294 ㊔\\u3295 ㊕\\u3296 ㊖\\u3297 ㊗\\u3298 ㊘\\u3299 ㊙\\u3300 ㌀\\u3301 ㌁\\u3302 ㌂\\u3303 ㌃\\u3304 ㌄\\u3305 ㌅\\u3306 ㌆\\u3307 ㌇\\u3308 ㌈\\u3309 ㌉\\u3310 ㌐\\u3311 ㌑\\u3312 ㌒\\u3313 ㌓\\u3314 ㌔\\u3315 ㌕\\u3316 ㌖\\u3317 ㌗\\u3318 ㌘\\u3319 ㌙\\u3320 ㌠\\u3321 ㌡\\u3322 ㌢\\u3323 ㌣\\u3324 ㌤\\u3325 ㌥\\u3326 ㌦\\u3327 ㌧\\u3328 ㌨\\u3329 ㌩\\u3330 ㌰\\u3331 ㌱\\u3332 ㌲\\u3333 ㌳\\u3334 ㌴\\u3335 ㌵\\u3336 ㌶\\u3337 ㌷\\u3338 ㌸\\u3339 ㌹\\u3340 ㍀\\u3341 ㍁\\u3342 ㍂\\u3343 ㍃\\u3344 ㍄\\u3345 ㍅\\u3346 ㍆\\u3347 ㍇\\u3348 ㍈\\u3349 ㍉\\u3350 ㍐\\u3351 ㍑\\u3352 ㍒\\u3353 ㍓\\u3354 ㍔\\u3355 ㍕\\u3356 ㍖\\u3357 ㍗\\u3358 ㍘\\u3359 ㍙\\u3360 ㍠\\u3361 ㍡\\u3362 ㍢\\u3363 ㍣\\u3364 ㍤\\u3365 ㍥\\u3366 ㍦\\u3367 ㍧\\u3368 ㍨\\u3369 ㍩\\u3370 ㍰\\u3371 ㍱\\u3372 ㍲\\u3373 ㍳\\u3374 ㍴\\u3375 ㍵\\u3376 ㍶\\u3377 ㍷\\u3378 ㍸\\u3379 ㍹\\u3380 ㎀\\u3381 ㎁\\u3382 ㎂\\u3383 ㎃\\u3384 ㎄\\u3385 ㎅\\u3386 ㎆\\u3387 ㎇\\u3388 ㎈\\u3389 ㎉\\u3390 ㎐\\u3391 ㎑\\u3392 ㎒\\u3393 ㎓\\u3394 ㎔\\u3395 ㎕\\u3396 ㎖\\u3397 ㎗\\u3398 ㎘\\u3399 ㎙\\u3400 㐀\\u3401 㐁\\u3402 㐂\\u3403 㐃\\u3404 㐄\\u3405 㐅\\u3406 㐆\\u3407 㐇\\u3408 㐈\\u3409 㐉\\u3410 㐐\\u3411 㐑\\u3412 㐒\\u3413 㐓\\u3414 㐔\\u3415 㐕\\u3416 㐖\\u3417 㐗\\u3418 㐘\\u3419 㐙\\u3420 㐠\\u3421 㐡\\u3422 㐢\\u3423 㐣\\u3424 㐤\\u3425 㐥\\u3426 㐦\\u3427 㐧\\u3428 㐨\\u3429 㐩\\u3430 㐰\\u3431 㐱\\u3432 㐲\\u3433 㐳\\u3434 㐴\\u3435 㐵\\u3436 㐶\\u3437 㐷\\u3438 㐸\\u3439 㐹\\u3440 㑀\\u3441 㑁\\u3442 㑂\\u3443 㑃\\u3444 㑄\\u3445 㑅\\u3446 㑆\\u3447 㑇\\u3448 㑈\\u3449 㑉\\u3450 㑐\\u3451 㑑\\u3452 㑒\\u3453 㑓\\u3454 㑔\\u3455 㑕\\u3456 㑖\\u3457 㑗\\u3458 㑘\\u3459 㑙\\u3460 㑠\\u3461 㑡\\u3462 㑢\\u3463 㑣\\u3464 㑤\\u3465 㑥\\u3466 㑦\\u3467 㑧\\u3468 㑨\\u3469 㑩\\u3470 㑰\\u3471 㑱\\u3472 㑲\\u3473 㑳\\u3474 㑴\\u3475 㑵\\u3476 㑶\\u3477 㑷\\u3478 㑸\\u3479 㑹\\u3480 㒀\\u3481 㒁\\u3482 㒂\\u3483 㒃\\u3484 㒄\\u3485 㒅\\u3486 㒆\\u3487 㒇\\u3488 㒈\\u3489 㒉\\u3490 㒐\\u3491 㒑\\u3492 㒒\\u3493 㒓\\u3494 㒔\\u3495 㒕\\u3496 㒖\\u3497 㒗\\u3498 㒘\\u3499 㒙\\u3500 㔀\\u3501 㔁\\u3502 㔂\\u3503 㔃\\u3504 㔄\\u3505 㔅\\u3506 㔆\\u3507 㔇\\u3508 㔈\\u3509 㔉\\u3510 㔐\\u3511 㔑\\u3512 㔒\\u3513 㔓\\u3514 㔔\\u3515 㔕\\u3516 㔖\\u3517 㔗\\u3518 㔘\\u3519 㔙\\u3520 㔠\\u3521 㔡\\u3522 㔢\\u3523 㔣\\u3524 㔤\\u3525 㔥\\u3526 㔦\\u3527 㔧\\u3528 㔨\\u3529 㔩\\u3530 㔰\\u3531 㔱\\u3532 㔲\\u3533 㔳\\u3534 㔴\\u3535 㔵\\u3536 㔶\\u3537 㔷\\u3538 㔸\\u3539 㔹\\u3540 㕀\\u3541 㕁\\u3542 㕂\\u3543 㕃\\u3544 㕄\\u3545 㕅\\u3546 㕆\\u3547 㕇\\u3548 㕈\\u3549 㕉\\u3550 㕐\\u3551 㕑\\u3552 㕒\\u3553 㕓\\u3554 㕔\\u3555 㕕\\u3556 㕖\\u3557 㕗\\u3558 㕘\\u3559 㕙\\u3560 㕠\\u3561 㕡\\u3562 㕢\\u3563 㕣\\u3564 㕤\\u3565 㕥\\u3566 㕦\\u3567 㕧\\u3568 㕨\\u3569 㕩\\u3570 㕰\\u3571 㕱\\u3572 㕲\\u3573 㕳\\u3574 㕴\\u3575 㕵\\u3576 㕶\\u3577 㕷\\u3578 㕸\\u3579 㕹\\u3580 㖀\\u3581 㖁\\u3582 㖂\\u3583 㖃\\u3584 㖄\\u3585 㖅\\u3586 㖆\\u3587 㖇\\u3588 㖈\\u3589 㖉\\u3590 㖐\\u3591 㖑\\u3592 㖒\\u3593 㖓\\u3594 㖔\\u3595 㖕\\u3596 㖖\\u3597 㖗\\u3598 㖘\\u3599 㖙\\u3600 㘀\\u3601 㘁\\u3602 㘂\\u3603 㘃\\u3604 㘄\\u3605 㘅\\u3606 㘆\\u3607 㘇\\u3608 㘈\\u3609 㘉\\u3610 㘐\\u3611 㘑\\u3612 㘒\\u3613 㘓\\u3614 㘔\\u3615 㘕\\u3616 㘖\\u3617 㘗\\u3618 㘘\\u3619 㘙\\u3620 㘠\\u3621 㘡\\u3622 㘢\\u3623 㘣\\u3624 㘤\\u3625 㘥\\u3626 㘦\\u3627 㘧\\u3628 㘨\\u3629 㘩\\u3630 㘰\\u3631 㘱\\u3632 㘲\\u3633 㘳\\u3634 㘴\\u3635 㘵\\u3636 㘶\\u3637 㘷\\u3638 㘸\\u3639 㘹\\u3640 㙀\\u3641 㙁\\u3642 㙂\\u3643 㙃\\u3644 㙄\\u3645 㙅\\u3646 㙆\\u3647 㙇\\u3648 㙈\\u3649 㙉\\u3650 㙐\\u3651 㙑\\u3652 㙒\\u3653 㙓\\u3654 㙔\\u3655 㙕\\u3656 㙖\\u3657 㙗\\u3658 㙘\\u3659 㙙\\u3660 㙠\\u3661 㙡\\u3662 㙢\\u3663 㙣\\u3664 㙤\\u3665 㙥\\u3666 㙦\\u3667 㙧\\u3668 㙨\\u3669 㙩\\u3670 㙰\\u3671 㙱\\u3672 㙲\\u3673 㙳\\u3674 㙴\\u3675 㙵\\u3676 㙶\\u3677 㙷\\u3678 㙸\\u3679 㙹\\u3680 㚀\\u3681 㚁\\u3682 㚂\\u3683 㚃\\u3684 㚄\\u3685 㚅\\u3686 㚆\\u3687 㚇\\u3688 㚈\\u3689 㚉\\u3690 㚐\\u3691 㚑\\u3692 㚒\\u3693 㚓\\u3694 㚔\\u3695 㚕\\u3696 㚖\\u3697 㚗\\u3698 㚘\\u3699 㚙\\u3700 㜀\\u3701 㜁\\u3702 㜂\\u3703 㜃\\u3704 㜄\\u3705 㜅\\u3706 㜆\\u3707 㜇\\u3708 㜈\\u3709 㜉\\u3710 㜐\\u3711 㜑\\u3712 㜒\\u3713 㜓\\u3714 㜔\\u3715 㜕\\u3716 㜖\\u3717 㜗\\u3718 㜘\\u3719 㜙\\u3720 㜠\\u3721 㜡\\u3722 㜢\\u3723 㜣\\u3724 㜤\\u3725 㜥\\u3726 㜦\\u3727 㜧\\u3728 㜨\\u3729 㜩\\u3730 㜰\\u3731 㜱\\u3732 㜲\\u3733 㜳\\u3734 㜴\\u3735 㜵\\u3736 㜶\\u3737 㜷\\u3738 㜸\\u3739 㜹\\u3740 㝀\\u3741 㝁\\u3742 㝂\\u3743 㝃\\u3744 㝄\\u3745 㝅\\u3746 㝆\\u3747 㝇\\u3748 㝈\\u3749 㝉\\u3750 㝐\\u3751 㝑\\u3752 㝒\\u3753 㝓\\u3754 㝔\\u3755 㝕\\u3756 㝖\\u3757 㝗\\u3758 㝘\\u3759 㝙\\u3760 㝠\\u3761 㝡\\u3762 㝢\\u3763 㝣\\u3764 㝤\\u3765 㝥\\u3766 㝦\\u3767 㝧\\u3768 㝨\\u3769 㝩\\u3770 㝰\\u3771 㝱\\u3772 㝲\\u3773 㝳\\u3774 㝴\\u3775 㝵\\u3776 㝶\\u3777 㝷\\u3778 㝸\\u3779 㝹\\u3780 㞀\\u3781 㞁\\u3782 㞂\\u3783 㞃\\u3784 㞄\\u3785 㞅\\u3786 㞆\\u3787 㞇\\u3788 㞈\\u3789 㞉\\u3790 㞐\\u3791 㞑\\u3792 㞒\\u3793 㞓\\u3794 㞔\\u3795 㞕\\u3796 㞖\\u3797 㞗\\u3798 㞘\\u3799 㞙\\u3800 㠀\\u3801 㠁\\u3802 㠂\\u3803 㠃\\u3804 㠄\\u3805 㠅\\u3806 㠆\\u3807 㠇\\u3808 㠈\\u3809 㠉\\u3810 㠐\\u3811 㠑\\u3812 㠒\\u3813 㠓\\u3814 㠔\\u3815 㠕\\u3816 㠖\\u3817 㠗\\u3818 㠘\\u3819 㠙\\u3820 㠠\\u3821 㠡\\u3822 㠢\\u3823 㠣\\u3824 㠤\\u3825 㠥\\u3826 㠦\\u3827 㠧\\u3828 㠨\\u3829 㠩\\u3830 㠰\\u3831 㠱\\u3832 㠲\\u3833 㠳\\u3834 㠴\\u3835 㠵\\u3836 㠶\\u3837 㠷\\u3838 㠸\\u3839 㠹\\u3840 㡀\\u3841 㡁\\u3842 㡂\\u3843 㡃\\u3844 㡄\\u3845 㡅\\u3846 㡆\\u3847 㡇\\u3848 㡈\\u3849 㡉\\u3850 㡐\\u3851 㡑\\u3852 㡒\\u3853 㡓\\u3854 㡔\\u3855 㡕\\u3856 㡖\\u3857 㡗\\u3858 㡘\\u3859 㡙\\u3860 㡠\\u3861 㡡\\u3862 㡢\\u3863 㡣\\u3864 㡤\\u3865 㡥\\u3866 㡦\\u3867 㡧\\u3868 㡨\\u3869 㡩\\u3870 㡰\\u3871 㡱\\u3872 㡲\\u3873 㡳\\u3874 㡴\\u3875 㡵\\u3876 㡶\\u3877 㡷\\u3878 㡸\\u3879 㡹\\u3880 㢀\\u3881 㢁\\u3882 㢂\\u3883 㢃\\u3884 㢄\\u3885 㢅\\u3886 㢆\\u3887 㢇\\u3888 㢈\\u3889 㢉\\u3890 㢐\\u3891 㢑\\u3892 㢒\\u3893 㢓\\u3894 㢔\\u3895 㢕\\u3896 㢖\\u3897 㢗\\u3898 㢘\\u3899 㢙\\u3900 㤀\\u3901 㤁\\u3902 㤂\\u3903 㤃\\u3904 㤄\\u3905 㤅\\u3906 㤆\\u3907 㤇\\u3908 㤈\\u3909 㤉\\u3910 㤐\\u3911 㤑\\u3912 㤒\\u3913 㤓\\u3914 㤔\\u3915 㤕\\u3916 㤖\\u3917 㤗\\u3918 㤘\\u3919 㤙\\u3920 㤠\\u3921 㤡\\u3922 㤢\\u3923 㤣\\u3924 㤤\\u3925 㤥\\u3926 㤦\\u3927 㤧\\u3928 㤨\\u3929 㤩\\u3930 㤰\\u3931 㤱\\u3932 㤲\\u3933 㤳\\u3934 㤴\\u3935 㤵\\u3936 㤶\\u3937 㤷\\u3938 㤸\\u3939 㤹\\u3940 㥀\\u3941 㥁\\u3942 㥂\\u3943 㥃\\u3944 㥄\\u3945 㥅\\u3946 㥆\\u3947 㥇\\u3948 㥈\\u3949 㥉\\u3950 㥐\\u3951 㥑\\u3952 㥒\\u3953 㥓\\u3954 㥔\\u3955 㥕\\u3956 㥖\\u3957 㥗\\u3958 㥘\\u3959 㥙\\u3960 㥠\\u3961 㥡\\u3962 㥢\\u3963 㥣\\u3964 㥤\\u3965 㥥\\u3966 㥦\\u3967 㥧\\u3968 㥨\\u3969 㥩\\u3970 㥰\\u3971 㥱\\u3972 㥲\\u3973 㥳\\u3974 㥴\\u3975 㥵\\u3976 㥶\\u3977 㥷\\u3978 㥸\\u3979 㥹\\u3980 㦀\\u3981 㦁\\u3982 㦂\\u3983 㦃\\u3984 㦄\\u3985 㦅\\u3986 㦆\\u3987 㦇\\u3988 㦈\\u3989 㦉\\u3990 㦐\\u3991 㦑\\u3992 㦒\\u3993 㦓\\u3994 㦔\\u3995 㦕\\u3996 㦖\\u3997 㦗\\u3998 㦘\\u3999 㦙\\u4000 䀀\\u4001 䀁\\u4002 䀂\\u4003 䀃\\u4004 䀄\\u4005 䀅\\u4006 䀆\\u4007 䀇\\u4008 䀈\\u4009 䀉\\u4010 䀐\\u4011 䀑\\u4012 䀒\\u4013 䀓\\u4014 䀔\\u4015 䀕\\u4016 䀖\\u4017 䀗\\u4018 䀘\\u4019 䀙\\u4020 䀠\\u4021 䀡\\u4022 䀢\\u4023 䀣\\u4024 䀤\\u4025 䀥\\u4026 䀦\\u4027 䀧\\u4028 䀨\\u4029 䀩\\u4030 䀰\\u4031 䀱\\u4032 䀲\\u4033 䀳\\u4034 䀴\\u4035 䀵\\u4036 䀶\\u4037 䀷\\u4038 䀸\\u4039 䀹\\u4040 䁀\\u4041 䁁\\u4042 䁂\\u4043 䁃\\u4044 䁄\\u4045 䁅\\u4046 䁆\\u4047 䁇\\u4048 䁈\\u4049 䁉\\u4050 䁐\\u4051 䁑\\u4052 䁒\\u4053 䁓\\u4054 䁔\\u4055 䁕\\u4056 䁖\\u4057 䁗\\u4058 䁘\\u4059 䁙\\u4060 䁠\\u4061 䁡\\u4062 䁢\\u4063 䁣\\u4064 䁤\\u4065 䁥\\u4066 䁦\\u4067 䁧\\u4068 䁨\\u4069 䁩\\u4070 䁰\\u4071 䁱\\u4072 䁲\\u4073 䁳\\u4074 䁴\\u4075 䁵\\u4076 䁶\\u4077 䁷\\u4078 䁸\\u4079 䁹\\u4080 䂀\\u4081 䂁\\u4082 䂂\\u4083 䂃\\u4084 䂄\\u4085 䂅\\u4086 䂆\\u4087 䂇\\u4088 䂈\\u4089 䂉\\u4090 䂐\\u4091 䂑\\u4092 䂒\\u4093 䂓\\u4094 䂔\\u4095 䂕\\u4096 䂖\\u4097 䂗\\u4098 䂘\\u4099 䂙\\u4100 䄀\\u4101 䄁\\u4102 䄂\\u4103 䄃\\u4104 䄄\\u4105 䄅\\u4106 䄆\\u4107 䄇\\u4108 䄈\\u4109 䄉\\u4110 䄐\\u4111 䄑\\u4112 䄒\\u4113 䄓\\u4114 䄔\\u4115 䄕\\u4116 䄖\\u4117 䄗\\u4118 䄘\\u4119 䄙\\u4120 䄠\\u4121 䄡\\u4122 䄢\\u4123 䄣\\u4124 䄤\\u4125 䄥\\u4126 䄦\\u4127 䄧\\u4128 䄨\\u4129 䄩\\u4130 䄰\\u4131 䄱\\u4132 䄲\\u4133 䄳\\u4134 䄴\\u4135 䄵\\u4136 䄶\\u4137 䄷\\u4138 䄸\\u4139 䄹\\u4140 䅀\\u4141 䅁\\u4142 䅂\\u4143 䅃\\u4144 䅄\\u4145 䅅\\u4146 䅆\\u4147 䅇\\u4148 䅈\\u4149 䅉\\u4150 䅐\\u4151 䅑\\u4152 䅒\\u4153 䅓\\u4154 䅔\\u4155 䅕\\u4156 䅖\\u4157 䅗\\u4158 䅘\\u4159 䅙\\u4160 䅠\\u4161 䅡\\u4162 䅢\\u4163 䅣\\u4164 䅤\\u4165 䅥\\u4166 䅦\\u4167 䅧\\u4168 䅨\\u4169 䅩\\u4170 䅰\\u4171 䅱\\u4172 䅲\\u4173 䅳\\u4174 䅴\\u4175 䅵\\u4176 䅶\\u4177 䅷\\u4178 䅸\\u4179 䅹\\u4180 䆀\\u4181 䆁\\u4182 䆂\\u4183 䆃\\u4184 䆄\\u4185 䆅\\u4186 䆆\\u4187 䆇\\u4188 䆈\\u4189 䆉\\u4190 䆐\\u4191 䆑\\u4192 䆒\\u4193 䆓\\u4194 䆔\\u4195 䆕\\u4196 䆖\\u4197 䆗\\u4198 䆘\\u4199 䆙\\u4200 䈀\\u4201 䈁\\u4202 䈂\\u4203 䈃\\u4204 䈄\\u4205 䈅\\u4206 䈆\\u4207 䈇\\u4208 䈈\\u4209 䈉\\u4210 䈐\\u4211 䈑\\u4212 䈒\\u4213 䈓\\u4214 䈔\\u4215 䈕\\u4216 䈖\\u4217 䈗\\u4218 䈘\\u4219 䈙\\u4220 䈠\\u4221 䈡\\u4222 䈢\\u4223 䈣\\u4224 䈤\\u4225 䈥\\u4226 䈦\\u4227 䈧\\u4228 䈨\\u4229 䈩\\u4230 䈰\\u4231 䈱\\u4232 䈲\\u4233 䈳\\u4234 䈴\\u4235 䈵\\u4236 䈶\\u4237 䈷\\u4238 䈸\\u4239 䈹\\u4240 䉀\\u4241 䉁\\u4242 䉂\\u4243 䉃\\u4244 䉄\\u4245 䉅\\u4246 䉆\\u4247 䉇\\u4248 䉈\\u4249 䉉\\u4250 䉐\\u4251 䉑\\u4252 䉒\\u4253 䉓\\u4254 䉔\\u4255 䉕\\u4256 䉖\\u4257 䉗\\u4258 䉘\\u4259 䉙\\u4260 䉠\\u4261 䉡\\u4262 䉢\\u4263 䉣\\u4264 䉤\\u4265 䉥\\u4266 䉦\\u4267 䉧\\u4268 䉨\\u4269 䉩\\u4270 䉰\\u4271 䉱\\u4272 䉲\\u4273 䉳\\u4274 䉴\\u4275 䉵\\u4276 䉶\\u4277 䉷\\u4278 䉸\\u4279 䉹\\u4280 䊀\\u4281 䊁\\u4282 䊂\\u4283 䊃\\u4284 䊄\\u4285 䊅\\u4286 䊆\\u4287 䊇\\u4288 䊈\\u4289 䊉\\u4290 䊐\\u4291 䊑\\u4292 䊒\\u4293 䊓\\u4294 䊔\\u4295 䊕\\u4296 䊖\\u4297 䊗\\u4298 䊘\\u4299 䊙\\u4300 䌀\\u4301 䌁\\u4302 䌂\\u4303 䌃\\u4304 䌄\\u4305 䌅\\u4306 䌆\\u4307 䌇\\u4308 䌈\\u4309 䌉\\u4310 䌐\\u4311 䌑\\u4312 䌒\\u4313 䌓\\u4314 䌔\\u4315 䌕\\u4316 䌖\\u4317 䌗\\u4318 䌘\\u4319 䌙\\u4320 䌠\\u4321 䌡\\u4322 䌢\\u4323 䌣\\u4324 䌤\\u4325 䌥\\u4326 䌦\\u4327 䌧\\u4328 䌨\\u4329 䌩\\u4330 䌰\\u4331 䌱\\u4332 䌲\\u4333 䌳\\u4334 䌴\\u4335 䌵\\u4336 䌶\\u4337 䌷\\u4338 䌸\\u4339 䌹\\u4340 䍀\\u4341 䍁\\u4342 䍂\\u4343 䍃\\u4344 䍄\\u4345 䍅\\u4346 䍆\\u4347 䍇\\u4348 䍈\\u4349 䍉\\u4350 䍐\\u4351 䍑\\u4352 䍒\\u4353 䍓\\u4354 䍔\\u4355 䍕\\u4356 䍖\\u4357 䍗\\u4358 䍘\\u4359 䍙\\u4360 䍠\\u4361 䍡\\u4362 䍢\\u4363 䍣\\u4364 䍤\\u4365 䍥\\u4366 䍦\\u4367 䍧\\u4368 䍨\\u4369 䍩\\u4370 䍰\\u4371 䍱\\u4372 䍲\\u4373 䍳\\u4374 䍴\\u4375 䍵\\u4376 䍶\\u4377 䍷\\u4378 䍸\\u4379 䍹\\u4380 䎀\\u4381 䎁\\u4382 䎂\\u4383 䎃\\u4384 䎄\\u4385 䎅\\u4386 䎆\\u4387 䎇\\u4388 䎈\\u4389 䎉\\u4390 䎐\\u4391 䎑\\u4392 䎒\\u4393 䎓\\u4394 䎔\\u4395 䎕\\u4396 䎖\\u4397 䎗\\u4398 䎘\\u4399 䎙\\u4400 䐀\\u4401 䐁\\u4402 䐂\\u4403 䐃\\u4404 䐄\\u4405 䐅\\u4406 䐆\\u4407 䐇\\u4408 䐈\\u4409 䐉\\u4410 䐐\\u4411 䐑\\u4412 䐒\\u4413 䐓\\u4414 䐔\\u4415 䐕\\u4416 䐖\\u4417 䐗\\u4418 䐘\\u4419 䐙\\u4420 䐠\\u4421 䐡\\u4422 䐢\\u4423 䐣\\u4424 䐤\\u4425 䐥\\u4426 䐦\\u4427 䐧\\u4428 䐨\\u4429 䐩\\u4430 䐰\\u4431 䐱\\u4432 䐲\\u4433 䐳\\u4434 䐴\\u4435 䐵\\u4436 䐶\\u4437 䐷\\u4438 䐸\\u4439 䐹\\u4440 䑀\\u4441 䑁\\u4442 䑂\\u4443 䑃\\u4444 䑄\\u4445 䑅\\u4446 䑆\\u4447 䑇\\u4448 䑈\\u4449 䑉\\u4450 䑐\\u4451 䑑\\u4452 䑒\\u4453 䑓\\u4454 䑔\\u4455 䑕\\u4456 䑖\\u4457 䑗\\u4458 䑘\\u4459 䑙\\u4460 䑠\\u4461 䑡\\u4462 䑢\\u4463 䑣\\u4464 䑤\\u4465 䑥\\u4466 䑦\\u4467 䑧\\u4468 䑨\\u4469 䑩\\u4470 䑰\\u4471 䑱\\u4472 䑲\\u4473 䑳\\u4474 䑴\\u4475 䑵\\u4476 䑶\\u4477 䑷\\u4478 䑸\\u4479 䑹\\u4480 䒀\\u4481 䒁\\u4482 䒂\\u4483 䒃\\u4484 䒄\\u4485 䒅\\u4486 䒆\\u4487 䒇\\u4488 䒈\\u4489 䒉\\u4490 䒐\\u4491 䒑\\u4492 䒒\\u4493 䒓\\u4494 䒔\\u4495 䒕\\u4496 䒖\\u4497 䒗\\u4498 䒘\\u4499 䒙\\u4500 䔀\\u4501 䔁\\u4502 䔂\\u4503 䔃\\u4504 䔄\\u4505 䔅\\u4506 䔆\\u4507 䔇\\u4508 䔈\\u4509 䔉\\u4510 䔐\\u4511 䔑\\u4512 䔒\\u4513 䔓\\u4514 䔔\\u4515 䔕\\u4516 䔖\\u4517 䔗\\u4518 䔘\\u4519 䔙\\u4520 䔠\\u4521 䔡\\u4522 䔢\\u4523 䔣\\u4524 䔤\\u4525 䔥\\u4526 䔦\\u4527 䔧\\u4528 䔨\\u4529 䔩\\u4530 䔰\\u4531 䔱\\u4532 䔲\\u4533 䔳\\u4534 䔴\\u4535 䔵\\u4536 䔶\\u4537 䔷\\u4538 䔸\\u4539 䔹\\u4540 䕀\\u4541 䕁\\u4542 䕂\\u4543 䕃\\u4544 䕄\\u4545 䕅\\u4546 䕆\\u4547 䕇\\u4548 䕈\\u4549 䕉\\u4550 䕐\\u4551 䕑\\u4552 䕒\\u4553 䕓\\u4554 䕔\\u4555 䕕\\u4556 䕖\\u4557 䕗\\u4558 䕘\\u4559 䕙\\u4560 䕠\\u4561 䕡\\u4562 䕢\\u4563 䕣\\u4564 䕤\\u4565 䕥\\u4566 䕦\\u4567 䕧\\u4568 䕨\\u4569 䕩\\u4570 䕰\\u4571 䕱\\u4572 䕲\\u4573 䕳\\u4574 䕴\\u4575 䕵\\u4576 䕶\\u4577 䕷\\u4578 䕸\\u4579 䕹\\u4580 䖀\\u4581 䖁\\u4582 䖂\\u4583 䖃\\u4584 䖄\\u4585 䖅\\u4586 䖆\\u4587 䖇\\u4588 䖈\\u4589 䖉\\u4590 䖐\\u4591 䖑\\u4592 䖒\\u4593 䖓\\u4594 䖔\\u4595 䖕\\u4596 䖖\\u4597 䖗\\u4598 䖘\\u4599 䖙\\u4600 䘀\\u4601 䘁\\u4602 䘂\\u4603 䘃\\u4604 䘄\\u4605 䘅\\u4606 䘆\\u4607 䘇\\u4608 䘈\\u4609 䘉\\u4610 䘐\\u4611 䘑\\u4612 䘒\\u4613 䘓\\u4614 䘔\\u4615 䘕\\u4616 䘖\\u4617 䘗\\u4618 䘘\\u4619 䘙\\u4620 䘠\\u4621 䘡\\u4622 䘢\\u4623 䘣\\u4624 䘤\\u4625 䘥\\u4626 䘦\\u4627 䘧\\u4628 䘨\\u4629 䘩\\u4630 䘰\\u4631 䘱\\u4632 䘲\\u4633 䘳\\u4634 䘴\\u4635 䘵\\u4636 䘶\\u4637 䘷\\u4638 䘸\\u4639 䘹\\u4640 䙀\\u4641 䙁\\u4642 䙂\\u4643 䙃\\u4644 䙄\\u4645 䙅\\u4646 䙆\\u4647 䙇\\u4648 䙈\\u4649 䙉\\u4650 䙐\\u4651 䙑\\u4652 䙒\\u4653 䙓\\u4654 䙔\\u4655 䙕\\u4656 䙖\\u4657 䙗\\u4658 䙘\\u4659 䙙\\u4660 䙠\\u4661 䙡\\u4662 䙢\\u4663 䙣\\u4664 䙤\\u4665 䙥\\u4666 䙦\\u4667 䙧\\u4668 䙨\\u4669 䙩\\u4670 䙰\\u4671 䙱\\u4672 䙲\\u4673 䙳\\u4674 䙴\\u4675 䙵\\u4676 䙶\\u4677 䙷\\u4678 䙸\\u4679 䙹\\u4680 䚀\\u4681 䚁\\u4682 䚂\\u4683 䚃\\u4684 䚄\\u4685 䚅\\u4686 䚆\\u4687 䚇\\u4688 䚈\\u4689 䚉\\u4690 䚐\\u4691 䚑\\u4692 䚒\\u4693 䚓\\u4694 䚔\\u4695 䚕\\u4696 䚖\\u4697 䚗\\u4698 䚘\\u4699 䚙\\u4700 䜀\\u4701 䜁\\u4702 䜂\\u4703 䜃\\u4704 䜄\\u4705 䜅\\u4706 䜆\\u4707 䜇\\u4708 䜈\\u4709 䜉\\u4710 䜐\\u4711 䜑\\u4712 䜒\\u4713 䜓\\u4714 䜔\\u4715 䜕\\u4716 䜖\\u4717 䜗\\u4718 䜘\\u4719 䜙\\u4720 䜠\\u4721 䜡\\u4722 䜢\\u4723 䜣\\u4724 䜤\\u4725 䜥\\u4726 䜦\\u4727 䜧\\u4728 䜨\\u4729 䜩\\u4730 䜰\\u4731 䜱\\u4732 䜲\\u4733 䜳\\u4734 䜴\\u4735 䜵\\u4736 䜶\\u4737 䜷\\u4738 䜸\\u4739 䜹\\u4740 䝀\\u4741 䝁\\u4742 䝂\\u4743 䝃\\u4744 䝄\\u4745 䝅\\u4746 䝆\\u4747 䝇\\u4748 䝈\\u4749 䝉\\u4750 䝐\\u4751 䝑\\u4752 䝒\\u4753 䝓\\u4754 䝔\\u4755 䝕\\u4756 䝖\\u4757 䝗\\u4758 䝘\\u4759 䝙\\u4760 䝠\\u4761 䝡\\u4762 䝢\\u4763 䝣\\u4764 䝤\\u4765 䝥\\u4766 䝦\\u4767 䝧\\u4768 䝨\\u4769 䝩\\u4770 䝰\\u4771 䝱\\u4772 䝲\\u4773 䝳\\u4774 䝴\\u4775 䝵\\u4776 䝶\\u4777 䝷\\u4778 䝸\\u4779 䝹\\u4780 䞀\\u4781 䞁\\u4782 䞂\\u4783 䞃\\u4784 䞄\\u4785 䞅\\u4786 䞆\\u4787 䞇\\u4788 䞈\\u4789 䞉\\u4790 䞐\\u4791 䞑\\u4792 䞒\\u4793 䞓\\u4794 䞔\\u4795 䞕\\u4796 䞖\\u4797 䞗\\u4798 䞘\\u4799 䞙\\u4800 䠀\\u4801 䠁\\u4802 䠂\\u4803 䠃\\u4804 䠄\\u4805 䠅\\u4806 䠆\\u4807 䠇\\u4808 䠈\\u4809 䠉\\u4810 䠐\\u4811 䠑\\u4812 䠒\\u4813 䠓\\u4814 䠔\\u4815 䠕\\u4816 䠖\\u4817 䠗\\u4818 䠘\\u4819 䠙\\u4820 䠠\\u4821 䠡\\u4822 䠢\\u4823 䠣\\u4824 䠤\\u4825 䠥\\u4826 䠦\\u4827 䠧\\u4828 䠨\\u4829 䠩\\u4830 䠰\\u4831 䠱\\u4832 䠲\\u4833 䠳\\u4834 䠴\\u4835 䠵\\u4836 䠶\\u4837 䠷\\u4838 䠸\\u4839 䠹\\u4840 䡀\\u4841 䡁\\u4842 䡂\\u4843 䡃\\u4844 䡄\\u4845 䡅\\u4846 䡆\\u4847 䡇\\u4848 䡈\\u4849 䡉\\u4850 䡐\\u4851 䡑\\u4852 䡒\\u4853 䡓\\u4854 䡔\\u4855 䡕\\u4856 䡖\\u4857 䡗\\u4858 䡘\\u4859 䡙\\u4860 䡠\\u4861 䡡\\u4862 䡢\\u4863 䡣\\u4864 䡤\\u4865 䡥\\u4866 䡦\\u4867 䡧\\u4868 䡨\\u4869 䡩\\u4870 䡰\\u4871 䡱\\u4872 䡲\\u4873 䡳\\u4874 䡴\\u4875 䡵\\u4876 䡶\\u4877 䡷\\u4878 䡸\\u4879 䡹\\u4880 䢀\\u4881 䢁\\u4882 䢂\\u4883 䢃\\u4884 䢄\\u4885 䢅\\u4886 䢆\\u4887 䢇\\u4888 䢈\\u4889 䢉\\u4890 䢐\\u4891 䢑\\u4892 䢒\\u4893 䢓\\u4894 䢔\\u4895 䢕\\u4896 䢖\\u4897 䢗\\u4898 䢘\\u4899 䢙\\u4900 䤀\\u4901 䤁\\u4902 䤂\\u4903 䤃\\u4904 䤄\\u4905 䤅\\u4906 䤆\\u4907 䤇\\u4908 䤈\\u4909 䤉\\u4910 䤐\\u4911 䤑\\u4912 䤒\\u4913 䤓\\u4914 䤔\\u4915 䤕\\u4916 䤖\\u4917 䤗\\u4918 䤘\\u4919 䤙\\u4920 䤠\\u4921 䤡\\u4922 䤢\\u4923 䤣\\u4924 䤤\\u4925 䤥\\u4926 䤦\\u4927 䤧\\u4928 䤨\\u4929 䤩\\u4930 䤰\\u4931 䤱\\u4932 䤲\\u4933 䤳\\u4934 䤴\\u4935 䤵\\u4936 䤶\\u4937 䤷\\u4938 䤸\\u4939 䤹\\u4940 䥀\\u4941 䥁\\u4942 䥂\\u4943 䥃\\u4944 䥄\\u4945 䥅\\u4946 䥆\\u4947 䥇\\u4948 䥈\\u4949 䥉\\u4950 䥐\\u4951 䥑\\u4952 䥒\\u4953 䥓\\u4954 䥔\\u4955 䥕\\u4956 䥖\\u4957 䥗\\u4958 䥘\\u4959 䥙\\u4960 䥠\\u4961 䥡\\u4962 䥢\\u4963 䥣\\u4964 䥤\\u4965 䥥\\u4966 䥦\\u4967 䥧\\u4968 䥨\\u4969 䥩\\u4970 䥰\\u4971 䥱\\u4972 䥲\\u4973 䥳\\u4974 䥴\\u4975 䥵\\u4976 䥶\\u4977 䥷\\u4978 䥸\\u4979 䥹\\u4980 䦀\\u4981 䦁\\u4982 䦂\\u4983 䦃\\u4984 䦄\\u4985 䦅\\u4986 䦆\\u4987 䦇\\u4988 䦈\\u4989 䦉\\u4990 䦐\\u4991 䦑\\u4992 䦒\\u4993 䦓\\u4994 䦔\\u4995 䦕\\u4996 䦖\\u4997 䦗\\u4998 䦘\\u4999 䦙\\u5000 倀\\u5001 倁\\u5002 倂\\u5003 倃\\u5004 倄\\u5005 倅\\u5006 倆\\u5007 倇\\u5008 倈\\u5009 倉\\u5010 倐\\u5011 們\\u5012 倒\\u5013 倓\\u5014 倔\\u5015 倕\\u5016 倖\\u5017 倗\\u5018 倘\\u5019 候\\u5020 倠\\u5021 倡\\u5022 倢\\u5023 倣\\u5024 値\\u5025 倥\\u5026 倦\\u5027 倧\\u5028 倨\\u5029 倩\\u5030 倰\\u5031 倱\\u5032 倲\\u5033 倳\\u5034 倴\\u5035 倵\\u5036 倶\\u5037 倷\\u5038 倸\\u5039 倹\\u5040 偀\\u5041 偁\\u5042 偂\\u5043 偃\\u5044 偄\\u5045 偅\\u5046 偆\\u5047 假\\u5048 偈\\u5049 偉\\u5050 偐\\u5051 偑\\u5052 偒\\u5053 偓\\u5054 偔\\u5055 偕\\u5056 偖\\u5057 偗\\u5058 偘\\u5059 偙\\u5060 偠\\u5061 偡\\u5062 偢\\u5063 偣\\u5064 偤\\u5065 健\\u5066 偦\\u5067 偧\\u5068 偨\\u5069 偩\\u5070 偰\\u5071 偱\\u5072 偲\\u5073 偳\\u5074 側\\u5075 偵\\u5076 偶\\u5077 偷\\u5078 偸\\u5079 偹\\u5080 傀\\u5081 傁\\u5082 傂\\u5083 傃\\u5084 傄\\u5085 傅\\u5086 傆\\u5087 傇\\u5088 傈\\u5089 傉\\u5090 傐\\u5091 傑\\u5092 傒\\u5093 傓\\u5094 傔\\u5095 傕\\u5096 傖\\u5097 傗\\u5098 傘\\u5099 備\\u5100 儀\\u5101 儁\\u5102 儂\\u5103 儃\\u5104 億\\u5105 儅\\u5106 儆\\u5107 儇\\u5108 儈\\u5109 儉\\u5110 儐\\u5111 儑\\u5112 儒\\u5113 儓\\u5114 儔\\u5115 儕\\u5116 儖\\u5117 儗\\u5118 儘\\u5119 儙\\u5120 儠\\u5121 儡\\u5122 儢\\u5123 儣\\u5124 儤\\u5125 儥\\u5126 儦\\u5127 儧\\u5128 儨\\u5129 儩\\u5130 儰\\u5131 儱\\u5132 儲\\u5133 儳\\u5134 儴\\u5135 儵\\u5136 儶\\u5137 儷\\u5138 儸\\u5139 儹\\u5140 兀\\u5141 允\\u5142 兂\\u5143 元\\u5144 兄\\u5145 充\\u5146 兆\\u5147 兇\\u5148 先\\u5149 光\\u5150 児\\u5151 兑\\u5152 兒\\u5153 兓\\u5154 兔\\u5155 兕\\u5156 兖\\u5157 兗\\u5158 兘\\u5159 兙\\u5160 兠\\u5161 兡\\u5162 兢\\u5163 兣\\u5164 兤\\u5165 入\\u5166 兦\\u5167 內\\u5168 全\\u5169 兩\\u5170 兰\\u5171 共\\u5172 兲\\u5173 关\\u5174 兴\\u5175 兵\\u5176 其\\u5177 具\\u5178 典\\u5179 兹\\u5180 冀\\u5181 冁\\u5182 冂\\u5183 冃\\u5184 冄\\u5185 内\\u5186 円\\u5187 冇\\u5188 冈\\u5189 冉\\u5190 冐\\u5191 冑\\u5192 冒\\u5193 冓\\u5194 冔\\u5195 冕\\u5196 冖\\u5197 冗\\u5198 冘\\u5199 写\\u5200 刀\\u5201 刁\\u5202 刂\\u5203 刃\\u5204 刄\\u5205 刅\\u5206 分\\u5207 切\\u5208 刈\\u5209 刉\\u5210 刐\\u5211 刑\\u5212 划\\u5213 刓\\u5214 刔\\u5215 刕\\u5216 刖\\u5217 列\\u5218 刘\\u5219 则\\u5220 删\\u5221 刡\\u5222 刢\\u5223 刣\\u5224 判\\u5225 別\\u5226 刦\\u5227 刧\\u5228 刨\\u5229 利\\u5230 到\\u5231 刱\\u5232 刲\\u5233 刳\\u5234 刴\\u5235 刵\\u5236 制\\u5237 刷\\u5238 券\\u5239 刹\\u5240 剀\\u5241 剁\\u5242 剂\\u5243 剃\\u5244 剄\\u5245 剅\\u5246 剆\\u5247 則\\u5248 剈\\u5249 剉\\u5250 剐\\u5251 剑\\u5252 剒\\u5253 剓\\u5254 剔\\u5255 剕\\u5256 剖\\u5257 剗\\u5258 剘\\u5259 剙\\u5260 剠\\u5261 剡\\u5262 剢\\u5263 剣\\u5264 剤\\u5265 剥\\u5266 剦\\u5267 剧\\u5268 剨\\u5269 剩\\u5270 剰\\u5271 剱\\u5272 割\\u5273 剳\\u5274 剴\\u5275 創\\u5276 剶\\u5277 剷\\u5278 剸\\u5279 剹\\u5280 劀\\u5281 劁\\u5282 劂\\u5283 劃\\u5284 劄\\u5285 劅\\u5286 劆\\u5287 劇\\u5288 劈\\u5289 劉\\u5290 劐\\u5291 劑\\u5292 劒\\u5293 劓\\u5294 劔\\u5295 劕\\u5296 劖\\u5297 劗\\u5298 劘\\u5299 劙\\u5300 匀\\u5301 匁\\u5302 匂\\u5303 匃\\u5304 匄\\u5305 包\\u5306 匆\\u5307 匇\\u5308 匈\\u5309 匉\\u5310 匐\\u5311 匑\\u5312 匒\\u5313 匓\\u5314 匔\\u5315 匕\\u5316 化\\u5317 北\\u5318 匘\\u5319 匙\\u5320 匠\\u5321 匡\\u5322 匢\\u5323 匣\\u5324 匤\\u5325 匥\\u5326 匦\\u5327 匧\\u5328 匨\\u5329 匩\\u5330 匰\\u5331 匱\\u5332 匲\\u5333 匳\\u5334 匴\\u5335 匵\\u5336 匶\\u5337 匷\\u5338 匸\\u5339 匹\\u5340 區\\u5341 十\\u5342 卂\\u5343 千\\u5344 卄\\u5345 卅\\u5346 卆\\u5347 升\\u5348 午\\u5349 卉\\u5350 卐\\u5351 卑\\u5352 卒\\u5353 卓\\u5354 協\\u5355 单\\u5356 卖\\u5357 南\\u5358 単\\u5359 卙\\u5360 占\\u5361 卡\\u5362 卢\\u5363 卣\\u5364 卤\\u5365 卥\\u5366 卦\\u5367 卧\\u5368 卨\\u5369 卩\\u5370 印\\u5371 危\\u5372 卲\\u5373 即\\u5374 却\\u5375 卵\\u5376 卶\\u5377 卷\\u5378 卸\\u5379 卹\\u5380 厀\\u5381 厁\\u5382 厂\\u5383 厃\\u5384 厄\\u5385 厅\\u5386 历\\u5387 厇\\u5388 厈\\u5389 厉\\u5390 厐\\u5391 厑\\u5392 厒\\u5393 厓\\u5394 厔\\u5395 厕\\u5396 厖\\u5397 厗\\u5398 厘\\u5399 厙\\u5400 吀\\u5401 吁\\u5402 吂\\u5403 吃\\u5404 各\\u5405 吅\\u5406 吆\\u5407 吇\\u5408 合\\u5409 吉\\u5410 吐\\u5411 向\\u5412 吒\\u5413 吓\\u5414 吔\\u5415 吕\\u5416 吖\\u5417 吗\\u5418 吘\\u5419 吙\\u5420 吠\\u5421 吡\\u5422 吢\\u5423 吣\\u5424 吤\\u5425 吥\\u5426 否\\u5427 吧\\u5428 吨\\u5429 吩\\u5430 吰\\u5431 吱\\u5432 吲\\u5433 吳\\u5434 吴\\u5435 吵\\u5436 吶\\u5437 吷\\u5438 吸\\u5439 吹\\u5440 呀\\u5441 呁\\u5442 呂\\u5443 呃\\u5444 呄\\u5445 呅\\u5446 呆\\u5447 呇\\u5448 呈\\u5449 呉\\u5450 呐\\u5451 呑\\u5452 呒\\u5453 呓\\u5454 呔\\u5455 呕\\u5456 呖\\u5457 呗\\u5458 员\\u5459 呙\\u5460 呠\\u5461 呡\\u5462 呢\\u5463 呣\\u5464 呤\\u5465 呥\\u5466 呦\\u5467 呧\\u5468 周\\u5469 呩\\u5470 呰\\u5471 呱\\u5472 呲\\u5473 味\\u5474 呴\\u5475 呵\\u5476 呶\\u5477 呷\\u5478 呸\\u5479 呹\\u5480 咀\\u5481 咁\\u5482 咂\\u5483 咃\\u5484 咄\\u5485 咅\\u5486 咆\\u5487 咇\\u5488 咈\\u5489 咉\\u5490 咐\\u5491 咑\\u5492 咒\\u5493 咓\\u5494 咔\\u5495 咕\\u5496 咖\\u5497 咗\\u5498 咘\\u5499 咙\\u5500 唀\\u5501 唁\\u5502 唂\\u5503 唃\\u5504 唄\\u5505 唅\\u5506 唆\\u5507 唇\\u5508 唈\\u5509 唉\\u5510 唐\\u5511 唑\\u5512 唒\\u5513 唓\\u5514 唔\\u5515 唕\\u5516 唖\\u5517 唗\\u5518 唘\\u5519 唙\\u5520 唠\\u5521 唡\\u5522 唢\\u5523 唣\\u5524 唤\\u5525 唥\\u5526 唦\\u5527 唧\\u5528 唨\\u5529 唩\\u5530 唰\\u5531 唱\\u5532 唲\\u5533 唳\\u5534 唴\\u5535 唵\\u5536 唶\\u5537 唷\\u5538 唸\\u5539 唹\\u5540 啀\\u5541 啁\\u5542 啂\\u5543 啃\\u5544 啄\\u5545 啅\\u5546 商\\u5547 啇\\u5548 啈\\u5549 啉\\u5550 啐\\u5551 啑\\u5552 啒\\u5553 啓\\u5554 啔\\u5555 啕\\u5556 啖\\u5557 啗\\u5558 啘\\u5559 啙\\u5560 啠\\u5561 啡\\u5562 啢\\u5563 啣\\u5564 啤\\u5565 啥\\u5566 啦\\u5567 啧\\u5568 啨\\u5569 啩\\u5570 啰\\u5571 啱\\u5572 啲\\u5573 啳\\u5574 啴\\u5575 啵\\u5576 啶\\u5577 啷\\u5578 啸\\u5579 啹\\u5580 喀\\u5581 喁\\u5582 喂\\u5583 喃\\u5584 善\\u5585 喅\\u5586 喆\\u5587 喇\\u5588 喈\\u5589 喉\\u5590 喐\\u5591 喑\\u5592 喒\\u5593 喓\\u5594 喔\\u5595 喕\\u5596 喖\\u5597 喗\\u5598 喘\\u5599 喙\\u5600 嘀\\u5601 嘁\\u5602 嘂\\u5603 嘃\\u5604 嘄\\u5605 嘅\\u5606 嘆\\u5607 嘇\\u5608 嘈\\u5609 嘉\\u5610 嘐\\u5611 嘑\\u5612 嘒\\u5613 嘓\\u5614 嘔\\u5615 嘕\\u5616 嘖\\u5617 嘗\\u5618 嘘\\u5619 嘙\\u5620 嘠\\u5621 嘡\\u5622 嘢\\u5623 嘣\\u5624 嘤\\u5625 嘥\\u5626 嘦\\u5627 嘧\\u5628 嘨\\u5629 嘩\\u5630 嘰\\u5631 嘱\\u5632 嘲\\u5633 嘳\\u5634 嘴\\u5635 嘵\\u5636 嘶\\u5637 嘷\\u5638 嘸\\u5639 嘹\\u5640 噀\\u5641 噁\\u5642 噂\\u5643 噃\\u5644 噄\\u5645 噅\\u5646 噆\\u5647 噇\\u5648 噈\\u5649 噉\\u5650 噐\\u5651 噑\\u5652 噒\\u5653 噓\\u5654 噔\\u5655 噕\\u5656 噖\\u5657 噗\\u5658 噘\\u5659 噙\\u5660 噠\\u5661 噡\\u5662 噢\\u5663 噣\\u5664 噤\\u5665 噥\\u5666 噦\\u5667 噧\\u5668 器\\u5669 噩\\u5670 噰\\u5671 噱\\u5672 噲\\u5673 噳\\u5674 噴\\u5675 噵\\u5676 噶\\u5677 噷\\u5678 噸\\u5679 噹\\u5680 嚀\\u5681 嚁\\u5682 嚂\\u5683 嚃\\u5684 嚄\\u5685 嚅\\u5686 嚆\\u5687 嚇\\u5688 嚈\\u5689 嚉\\u5690 嚐\\u5691 嚑\\u5692 嚒\\u5693 嚓\\u5694 嚔\\u5695 嚕\\u5696 嚖\\u5697 嚗\\u5698 嚘\\u5699 嚙\\u5700 圀\\u5701 圁\\u5702 圂\\u5703 圃\\u5704 圄\\u5705 圅\\u5706 圆\\u5707 圇\\u5708 圈\\u5709 圉\\u5710 圐\\u5711 圑\\u5712 園\\u5713 圓\\u5714 圔\\u5715 圕\\u5716 圖\\u5717 圗\\u5718 團\\u5719 圙\\u5720 圠\\u5721 圡\\u5722 圢\\u5723 圣\\u5724 圤\\u5725 圥\\u5726 圦\\u5727 圧\\u5728 在\\u5729 圩\\u5730 地\\u5731 圱\\u5732 圲\\u5733 圳\\u5734 圴\\u5735 圵\\u5736 圶\\u5737 圷\\u5738 圸\\u5739 圹\\u5740 址\\u5741 坁\\u5742 坂\\u5743 坃\\u5744 坄\\u5745 坅\\u5746 坆\\u5747 均\\u5748 坈\\u5749 坉\\u5750 坐\\u5751 坑\\u5752 坒\\u5753 坓\\u5754 坔\\u5755 坕\\u5756 坖\\u5757 块\\u5758 坘\\u5759 坙\\u5760 坠\\u5761 坡\\u5762 坢\\u5763 坣\\u5764 坤\\u5765 坥\\u5766 坦\\u5767 坧\\u5768 坨\\u5769 坩\\u5770 坰\\u5771 坱\\u5772 坲\\u5773 坳\\u5774 坴\\u5775 坵\\u5776 坶\\u5777 坷\\u5778 坸\\u5779 坹\\u5780 垀\\u5781 垁\\u5782 垂\\u5783 垃\\u5784 垄\\u5785 垅\\u5786 垆\\u5787 垇\\u5788 垈\\u5789 垉\\u5790 垐\\u5791 垑\\u5792 垒\\u5793 垓\\u5794 垔\\u5795 垕\\u5796 垖\\u5797 垗\\u5798 垘\\u5799 垙\\u5800 堀\\u5801 堁\\u5802 堂\\u5803 堃\\u5804 堄\\u5805 堅\\u5806 堆\\u5807 堇\\u5808 堈\\u5809 堉\\u5810 堐\\u5811 堑\\u5812 堒\\u5813 堓\\u5814 堔\\u5815 堕\\u5816 堖\\u5817 堗\\u5818 堘\\u5819 堙\\u5820 堠\\u5821 堡\\u5822 堢\\u5823 堣\\u5824 堤\\u5825 堥\\u5826 堦\\u5827 堧\\u5828 堨\\u5829 堩\\u5830 堰\\u5831 報\\u5832 堲\\u5833 堳\\u5834 場\\u5835 堵\\u5836 堶\\u5837 堷\\u5838 堸\\u5839 堹\\u5840 塀\\u5841 塁\\u5842 塂\\u5843 塃\\u5844 塄\\u5845 塅\\u5846 塆\\u5847 塇\\u5848 塈\\u5849 塉\\u5850 塐\\u5851 塑\\u5852 塒\\u5853 塓\\u5854 塔\\u5855 塕\\u5856 塖\\u5857 塗\\u5858 塘\\u5859 塙\\u5860 塠\\u5861 塡\\u5862 塢\\u5863 塣\\u5864 塤\\u5865 塥\\u5866 塦\\u5867 塧\\u5868 塨\\u5869 塩\\u5870 塰\\u5871 塱\\u5872 塲\\u5873 塳\\u5874 塴\\u5875 塵\\u5876 塶\\u5877 塷\\u5878 塸\\u5879 塹\\u5880 墀\\u5881 墁\\u5882 墂\\u5883 境\\u5884 墄\\u5885 墅\\u5886 墆\\u5887 墇\\u5888 墈\\u5889 墉\\u5890 墐\\u5891 墑\\u5892 墒\\u5893 墓\\u5894 墔\\u5895 墕\\u5896 墖\\u5897 増\\u5898 墘\\u5899 墙\\u5900 夀\\u5901 夁\\u5902 夂\\u5903 夃\\u5904 处\\u5905 夅\\u5906 夆\\u5907 备\\u5908 夈\\u5909 変\\u5910 夐\\u5911 夑\\u5912 夒\\u5913 夓\\u5914 夔\\u5915 夕\\u5916 外\\u5917 夗\\u5918 夘\\u5919 夙\\u5920 夠\\u5921 夡\\u5922 夢\\u5923 夣\\u5924 夤\\u5925 夥\\u5926 夦\\u5927 大\\u5928 夨\\u5929 天\\u5930 夰\\u5931 失\\u5932 夲\\u5933 夳\\u5934 头\\u5935 夵\\u5936 夶\\u5937 夷\\u5938 夸\\u5939 夹\\u5940 奀\\u5941 奁\\u5942 奂\\u5943 奃\\u5944 奄\\u5945 奅\\u5946 奆\\u5947 奇\\u5948 奈\\u5949 奉\\u5950 奐\\u5951 契\\u5952 奒\\u5953 奓\\u5954 奔\\u5955 奕\\u5956 奖\\u5957 套\\u5958 奘\\u5959 奙\\u5960 奠\\u5961 奡\\u5962 奢\\u5963 奣\\u5964 奤\\u5965 奥\\u5966 奦\\u5967 奧\\u5968 奨\\u5969 奩\\u5970 奰\\u5971 奱\\u5972 奲\\u5973 女\\u5974 奴\\u5975 奵\\u5976 奶\\u5977 奷\\u5978 奸\\u5979 她\\u5980 妀\\u5981 妁\\u5982 如\\u5983 妃\\u5984 妄\\u5985 妅\\u5986 妆\\u5987 妇\\u5988 妈\\u5989 妉\\u5990 妐\\u5991 妑\\u5992 妒\\u5993 妓\\u5994 妔\\u5995 妕\\u5996 妖\\u5997 妗\\u5998 妘\\u5999 妙\\u6000 怀\\u6001 态\\u6002 怂\\u6003 怃\\u6004 怄\\u6005 怅\\u6006 怆\\u6007 怇\\u6008 怈\\u6009 怉\\u6010 怐\\u6011 怑\\u6012 怒\\u6013 怓\\u6014 怔\\u6015 怕\\u6016 怖\\u6017 怗\\u6018 怘\\u6019 怙\\u6020 怠\\u6021 怡\\u6022 怢\\u6023 怣\\u6024 怤\\u6025 急\\u6026 怦\\u6027 性\\u6028 怨\\u6029 怩\\u6030 怰\\u6031 怱\\u6032 怲\\u6033 怳\\u6034 怴\\u6035 怵\\u6036 怶\\u6037 怷\\u6038 怸\\u6039 怹\\u6040 恀\\u6041 恁\\u6042 恂\\u6043 恃\\u6044 恄\\u6045 恅\\u6046 恆\\u6047 恇\\u6048 恈\\u6049 恉\\u6050 恐\\u6051 恑\\u6052 恒\\u6053 恓\\u6054 恔\\u6055 恕\\u6056 恖\\u6057 恗\\u6058 恘\\u6059 恙\\u6060 恠\\u6061 恡\\u6062 恢\\u6063 恣\\u6064 恤\\u6065 恥\\u6066 恦\\u6067 恧\\u6068 恨\\u6069 恩\\u6070 恰\\u6071 恱\\u6072 恲\\u6073 恳\\u6074 恴\\u6075 恵\\u6076 恶\\u6077 恷\\u6078 恸\\u6079 恹\\u6080 悀\\u6081 悁\\u6082 悂\\u6083 悃\\u6084 悄\\u6085 悅\\u6086 悆\\u6087 悇\\u6088 悈\\u6089 悉\\u6090 悐\\u6091 悑\\u6092 悒\\u6093 悓\\u6094 悔\\u6095 悕\\u6096 悖\\u6097 悗\\u6098 悘\\u6099 悙\\u6100 愀\\u6101 愁\\u6102 愂\\u6103 愃\\u6104 愄\\u6105 愅\\u6106 愆\\u6107 愇\\u6108 愈\\u6109 愉\\u6110 愐\\u6111 愑\\u6112 愒\\u6113 愓\\u6114 愔\\u6115 愕\\u6116 愖\\u6117 愗\\u6118 愘\\u6119 愙\\u6120 愠\\u6121 愡\\u6122 愢\\u6123 愣\\u6124 愤\\u6125 愥\\u6126 愦\\u6127 愧\\u6128 愨\\u6129 愩\\u6130 愰\\u6131 愱\\u6132 愲\\u6133 愳\\u6134 愴\\u6135 愵\\u6136 愶\\u6137 愷\\u6138 愸\\u6139 愹\\u6140 慀\\u6141 慁\\u6142 慂\\u6143 慃\\u6144 慄\\u6145 慅\\u6146 慆\\u6147 慇\\u6148 慈\\u6149 慉\\u6150 慐\\u6151 慑\\u6152 慒\\u6153 慓\\u6154 慔\\u6155 慕\\u6156 慖\\u6157 慗\\u6158 慘\\u6159 慙\\u6160 慠\\u6161 慡\\u6162 慢\\u6163 慣\\u6164 慤\\u6165 慥\\u6166 慦\\u6167 慧\\u6168 慨\\u6169 慩\\u6170 慰\\u6171 慱\\u6172 慲\\u6173 慳\\u6174 慴\\u6175 慵\\u6176 慶\\u6177 慷\\u6178 慸\\u6179 慹\\u6180 憀\\u6181 憁\\u6182 憂\\u6183 憃\\u6184 憄\\u6185 憅\\u6186 憆\\u6187 憇\\u6188 憈\\u6189 憉\\u6190 憐\\u6191 憑\\u6192 憒\\u6193 憓\\u6194 憔\\u6195 憕\\u6196 憖\\u6197 憗\\u6198 憘\\u6199 憙\\u6200 戀\\u6201 戁\\u6202 戂\\u6203 戃\\u6204 戄\\u6205 戅\\u6206 戆\\u6207 戇\\u6208 戈\\u6209 戉\\u6210 成\\u6211 我\\u6212 戒\\u6213 戓\\u6214 戔\\u6215 戕\\u6216 或\\u6217 戗\\u6218 战\\u6219 戙\\u6220 戠\\u6221 戡\\u6222 戢\\u6223 戣\\u6224 戤\\u6225 戥\\u6226 戦\\u6227 戧\\u6228 戨\\u6229 戩\\u6230 戰\\u6231 戱\\u6232 戲\\u6233 戳\\u6234 戴\\u6235 戵\\u6236 戶\\u6237 户\\u6238 戸\\u6239 戹\\u6240 所\\u6241 扁\\u6242 扂\\u6243 扃\\u6244 扄\\u6245 扅\\u6246 扆\\u6247 扇\\u6248 扈\\u6249 扉\\u6250 扐\\u6251 扑\\u6252 扒\\u6253 打\\u6254 扔\\u6255 払\\u6256 扖\\u6257 扗\\u6258 托\\u6259 扙\\u6260 扠\\u6261 扡\\u6262 扢\\u6263 扣\\u6264 扤\\u6265 扥\\u6266 扦\\u6267 执\\u6268 扨\\u6269 扩\\u6270 扰\\u6271 扱\\u6272 扲\\u6273 扳\\u6274 扴\\u6275 扵\\u6276 扶\\u6277 扷\\u6278 扸\\u6279 批\\u6280 技\\u6281 抁\\u6282 抂\\u6283 抃\\u6284 抄\\u6285 抅\\u6286 抆\\u6287 抇\\u6288 抈\\u6289 抉\\u6290 抐\\u6291 抑\\u6292 抒\\u6293 抓\\u6294 抔\\u6295 投\\u6296 抖\\u6297 抗\\u6298 折\\u6299 抙\\u6300 挀\\u6301 持\\u6302 挂\\u6303 挃\\u6304 挄\\u6305 挅\\u6306 挆\\u6307 指\\u6308 挈\\u6309 按\\u6310 挐\\u6311 挑\\u6312 挒\\u6313 挓\\u6314 挔\\u6315 挕\\u6316 挖\\u6317 挗\\u6318 挘\\u6319 挙\\u6320 挠\\u6321 挡\\u6322 挢\\u6323 挣\\u6324 挤\\u6325 挥\\u6326 挦\\u6327 挧\\u6328 挨\\u6329 挩\\u6330 挰\\u6331 挱\\u6332 挲\\u6333 挳\\u6334 挴\\u6335 挵\\u6336 挶\\u6337 挷\\u6338 挸\\u6339 挹\\u6340 捀\\u6341 捁\\u6342 捂\\u6343 捃\\u6344 捄\\u6345 捅\\u6346 捆\\u6347 捇\\u6348 捈\\u6349 捉\\u6350 捐\\u6351 捑\\u6352 捒\\u6353 捓\\u6354 捔\\u6355 捕\\u6356 捖\\u6357 捗\\u6358 捘\\u6359 捙\\u6360 捠\\u6361 捡\\u6362 换\\u6363 捣\\u6364 捤\\u6365 捥\\u6366 捦\\u6367 捧\\u6368 捨\\u6369 捩\\u6370 捰\\u6371 捱\\u6372 捲\\u6373 捳\\u6374 捴\\u6375 捵\\u6376 捶\\u6377 捷\\u6378 捸\\u6379 捹\\u6380 掀\\u6381 掁\\u6382 掂\\u6383 掃\\u6384 掄\\u6385 掅\\u6386 掆\\u6387 掇\\u6388 授\\u6389 掉\\u6390 掐\\u6391 掑\\u6392 排\\u6393 掓\\u6394 掔\\u6395 掕\\u6396 掖\\u6397 掗\\u6398 掘\\u6399 掙\\u6400 搀\\u6401 搁\\u6402 搂\\u6403 搃\\u6404 搄\\u6405 搅\\u6406 搆\\u6407 搇\\u6408 搈\\u6409 搉\\u6410 搐\\u6411 搑\\u6412 搒\\u6413 搓\\u6414 搔\\u6415 搕\\u6416 搖\\u6417 搗\\u6418 搘\\u6419 搙\\u6420 搠\\u6421 搡\\u6422 搢\\u6423 搣\\u6424 搤\\u6425 搥\\u6426 搦\\u6427 搧\\u6428 搨\\u6429 搩\\u6430 搰\\u6431 搱\\u6432 搲\\u6433 搳\\u6434 搴\\u6435 搵\\u6436 搶\\u6437 搷\\u6438 搸\\u6439 搹\\u6440 摀\\u6441 摁\\u6442 摂\\u6443 摃\\u6444 摄\\u6445 摅\\u6446 摆\\u6447 摇\\u6448 摈\\u6449 摉\\u6450 摐\\u6451 摑\\u6452 摒\\u6453 摓\\u6454 摔\\u6455 摕\\u6456 摖\\u6457 摗\\u6458 摘\\u6459 摙\\u6460 摠\\u6461 摡\\u6462 摢\\u6463 摣\\u6464 摤\\u6465 摥\\u6466 摦\\u6467 摧\\u6468 摨\\u6469 摩\\u6470 摰\\u6471 摱\\u6472 摲\\u6473 摳\\u6474 摴\\u6475 摵\\u6476 摶\\u6477 摷\\u6478 摸\\u6479 摹\\u6480 撀\\u6481 撁\\u6482 撂\\u6483 撃\\u6484 撄\\u6485 撅\\u6486 撆\\u6487 撇\\u6488 撈\\u6489 撉\\u6490 撐\\u6491 撑\\u6492 撒\\u6493 撓\\u6494 撔\\u6495 撕\\u6496 撖\\u6497 撗\\u6498 撘\\u6499 撙\\u6500 攀\\u6501 攁\\u6502 攂\\u6503 攃\\u6504 攄\\u6505 攅\\u6506 攆\\u6507 攇\\u6508 攈\\u6509 攉\\u6510 攐\\u6511 攑\\u6512 攒\\u6513 攓\\u6514 攔\\u6515 攕\\u6516 攖\\u6517 攗\\u6518 攘\\u6519 攙\\u6520 攠\\u6521 攡\\u6522 攢\\u6523 攣\\u6524 攤\\u6525 攥\\u6526 攦\\u6527 攧\\u6528 攨\\u6529 攩\\u6530 攰\\u6531 攱\\u6532 攲\\u6533 攳\\u6534 攴\\u6535 攵\\u6536 收\\u6537 攷\\u6538 攸\\u6539 改\\u6540 敀\\u6541 敁\\u6542 敂\\u6543 敃\\u6544 敄\\u6545 故\\u6546 敆\\u6547 敇\\u6548 效\\u6549 敉\\u6550 敐\\u6551 救\\u6552 敒\\u6553 敓\\u6554 敔\\u6555 敕\\u6556 敖\\u6557 敗\\u6558 敘\\u6559 教\\u6560 敠\\u6561 敡\\u6562 敢\\u6563 散\\u6564 敤\\u6565 敥\\u6566 敦\\u6567 敧\\u6568 敨\\u6569 敩\\u6570 数\\u6571 敱\\u6572 敲\\u6573 敳\\u6574 整\\u6575 敵\\u6576 敶\\u6577 敷\\u6578 數\\u6579 敹\\u6580 斀\\u6581 斁\\u6582 斂\\u6583 斃\\u6584 斄\\u6585 斅\\u6586 斆\\u6587 文\\u6588 斈\\u6589 斉\\u6590 斐\\u6591 斑\\u6592 斒\\u6593 斓\\u6594 斔\\u6595 斕\\u6596 斖\\u6597 斗\\u6598 斘\\u6599 料\\u6600 昀\\u6601 昁\\u6602 昂\\u6603 昃\\u6604 昄\\u6605 昅\\u6606 昆\\u6607 昇\\u6608 昈\\u6609 昉\\u6610 昐\\u6611 昑\\u6612 昒\\u6613 易\\u6614 昔\\u6615 昕\\u6616 昖\\u6617 昗\\u6618 昘\\u6619 昙\\u6620 映\\u6621 昡\\u6622 昢\\u6623 昣\\u6624 昤\\u6625 春\\u6626 昦\\u6627 昧\\u6628 昨\\u6629 昩\\u6630 昰\\u6631 昱\\u6632 昲\\u6633 昳\\u6634 昴\\u6635 昵\\u6636 昶\\u6637 昷\\u6638 昸\\u6639 昹\\u6640 晀\\u6641 晁\\u6642 時\\u6643 晃\\u6644 晄\\u6645 晅\\u6646 晆\\u6647 晇\\u6648 晈\\u6649 晉\\u6650 晐\\u6651 晑\\u6652 晒\\u6653 晓\\u6654 晔\\u6655 晕\\u6656 晖\\u6657 晗\\u6658 晘\\u6659 晙\\u6660 晠\\u6661 晡\\u6662 晢\\u6663 晣\\u6664 晤\\u6665 晥\\u6666 晦\\u6667 晧\\u6668 晨\\u6669 晩\\u6670 晰\\u6671 晱\\u6672 晲\\u6673 晳\\u6674 晴\\u6675 晵\\u6676 晶\\u6677 晷\\u6678 晸\\u6679 晹\\u6680 暀\\u6681 暁\\u6682 暂\\u6683 暃\\u6684 暄\\u6685 暅\\u6686 暆\\u6687 暇\\u6688 暈\\u6689 暉\\u6690 暐\\u6691 暑\\u6692 暒\\u6693 暓\\u6694 暔\\u6695 暕\\u6696 暖\\u6697 暗\\u6698 暘\\u6699 暙\\u6700 最\\u6701 朁\\u6702 朂\\u6703 會\\u6704 朄\\u6705 朅\\u6706 朆\\u6707 朇\\u6708 月\\u6709 有\\u6710 朐\\u6711 朑\\u6712 朒\\u6713 朓\\u6714 朔\\u6715 朕\\u6716 朖\\u6717 朗\\u6718 朘\\u6719 朙\\u6720 朠\\u6721 朡\\u6722 朢\\u6723 朣\\u6724 朤\\u6725 朥\\u6726 朦\\u6727 朧\\u6728 木\\u6729 朩\\u6730 朰\\u6731 朱\\u6732 朲\\u6733 朳\\u6734 朴\\u6735 朵\\u6736 朶\\u6737 朷\\u6738 朸\\u6739 朹\\u6740 杀\\u6741 杁\\u6742 杂\\u6743 权\\u6744 杄\\u6745 杅\\u6746 杆\\u6747 杇\\u6748 杈\\u6749 杉\\u6750 材\\u6751 村\\u6752 杒\\u6753 杓\\u6754 杔\\u6755 杕\\u6756 杖\\u6757 杗\\u6758 杘\\u6759 杙\\u6760 杠\\u6761 条\\u6762 杢\\u6763 杣\\u6764 杤\\u6765 来\\u6766 杦\\u6767 杧\\u6768 杨\\u6769 杩\\u6770 杰\\u6771 東\\u6772 杲\\u6773 杳\\u6774 杴\\u6775 杵\\u6776 杶\\u6777 杷\\u6778 杸\\u6779 杹\\u6780 枀\\u6781 极\\u6782 枂\\u6783 枃\\u6784 构\\u6785 枅\\u6786 枆\\u6787 枇\\u6788 枈\\u6789 枉\\u6790 析\\u6791 枑\\u6792 枒\\u6793 枓\\u6794 枔\\u6795 枕\\u6796 枖\\u6797 林\\u6798 枘\\u6799 枙\\u6800 栀\\u6801 栁\\u6802 栂\\u6803 栃\\u6804 栄\\u6805 栅\\u6806 栆\\u6807 标\\u6808 栈\\u6809 栉\\u6810 栐\\u6811 树\\u6812 栒\\u6813 栓\\u6814 栔\\u6815 栕\\u6816 栖\\u6817 栗\\u6818 栘\\u6819 栙\\u6820 栠\\u6821 校\\u6822 栢\\u6823 栣\\u6824 栤\\u6825 栥\\u6826 栦\\u6827 栧\\u6828 栨\\u6829 栩\\u6830 栰\\u6831 栱\\u6832 栲\\u6833 栳\\u6834 栴\\u6835 栵\\u6836 栶\\u6837 样\\u6838 核\\u6839 根\\u6840 桀\\u6841 桁\\u6842 桂\\u6843 桃\\u6844 桄\\u6845 桅\\u6846 框\\u6847 桇\\u6848 案\\u6849 桉\\u6850 桐\\u6851 桑\\u6852 桒\\u6853 桓\\u6854 桔\\u6855 桕\\u6856 桖\\u6857 桗\\u6858 桘\\u6859 桙\\u6860 桠\\u6861 桡\\u6862 桢\\u6863 档\\u6864 桤\\u6865 桥\\u6866 桦\\u6867 桧\\u6868 桨\\u6869 桩\\u6870 桰\\u6871 桱\\u6872 桲\\u6873 桳\\u6874 桴\\u6875 桵\\u6876 桶\\u6877 桷\\u6878 桸\\u6879 桹\\u6880 梀\\u6881 梁\\u6882 梂\\u6883 梃\\u6884 梄\\u6885 梅\\u6886 梆\\u6887 梇\\u6888 梈\\u6889 梉\\u6890 梐\\u6891 梑\\u6892 梒\\u6893 梓\\u6894 梔\\u6895 梕\\u6896 梖\\u6897 梗\\u6898 梘\\u6899 梙\\u6900 椀\\u6901 椁\\u6902 椂\\u6903 椃\\u6904 椄\\u6905 椅\\u6906 椆\\u6907 椇\\u6908 椈\\u6909 椉\\u6910 椐\\u6911 椑\\u6912 椒\\u6913 椓\\u6914 椔\\u6915 椕\\u6916 椖\\u6917 椗\\u6918 椘\\u6919 椙\\u6920 椠\\u6921 椡\\u6922 椢\\u6923 椣\\u6924 椤\\u6925 椥\\u6926 椦\\u6927 椧\\u6928 椨\\u6929 椩\\u6930 椰\\u6931 椱\\u6932 椲\\u6933 椳\\u6934 椴\\u6935 椵\\u6936 椶\\u6937 椷\\u6938 椸\\u6939 椹\\u6940 楀\\u6941 楁\\u6942 楂\\u6943 楃\\u6944 楄\\u6945 楅\\u6946 楆\\u6947 楇\\u6948 楈\\u6949 楉\\u6950 楐\\u6951 楑\\u6952 楒\\u6953 楓\\u6954 楔\\u6955 楕\\u6956 楖\\u6957 楗\\u6958 楘\\u6959 楙\\u6960 楠\\u6961 楡\\u6962 楢\\u6963 楣\\u6964 楤\\u6965 楥\\u6966 楦\\u6967 楧\\u6968 楨\\u6969 楩\\u6970 楰\\u6971 楱\\u6972 楲\\u6973 楳\\u6974 楴\\u6975 極\\u6976 楶\\u6977 楷\\u6978 楸\\u6979 楹\\u6980 榀\\u6981 榁\\u6982 概\\u6983 榃\\u6984 榄\\u6985 榅\\u6986 榆\\u6987 榇\\u6988 榈\\u6989 榉\\u6990 榐\\u6991 榑\\u6992 榒\\u6993 榓\\u6994 榔\\u6995 榕\\u6996 榖\\u6997 榗\\u6998 榘\\u6999 榙\\u7000 瀀\\u7001 瀁\\u7002 瀂\\u7003 瀃\\u7004 瀄\\u7005 瀅\\u7006 瀆\\u7007 瀇\\u7008 瀈\\u7009 瀉\\u7010 瀐\\u7011 瀑\\u7012 瀒\\u7013 瀓\\u7014 瀔\\u7015 瀕\\u7016 瀖\\u7017 瀗\\u7018 瀘\\u7019 瀙\\u7020 瀠\\u7021 瀡\\u7022 瀢\\u7023 瀣\\u7024 瀤\\u7025 瀥\\u7026 瀦\\u7027 瀧\\u7028 瀨\\u7029 瀩\\u7030 瀰\\u7031 瀱\\u7032 瀲\\u7033 瀳\\u7034 瀴\\u7035 瀵\\u7036 瀶\\u7037 瀷\\u7038 瀸\\u7039 瀹\\u7040 灀\\u7041 灁\\u7042 灂\\u7043 灃\\u7044 灄\\u7045 灅\\u7046 灆\\u7047 灇\\u7048 灈\\u7049 灉\\u7050 灐\\u7051 灑\\u7052 灒\\u7053 灓\\u7054 灔\\u7055 灕\\u7056 灖\\u7057 灗\\u7058 灘\\u7059 灙\\u7060 灠\\u7061 灡\\u7062 灢\\u7063 灣\\u7064 灤\\u7065 灥\\u7066 灦\\u7067 灧\\u7068 灨\\u7069 灩\\u7070 灰\\u7071 灱\\u7072 灲\\u7073 灳\\u7074 灴\\u7075 灵\\u7076 灶\\u7077 灷\\u7078 灸\\u7079 灹\\u7080 炀\\u7081 炁\\u7082 炂\\u7083 炃\\u7084 炄\\u7085 炅\\u7086 炆\\u7087 炇\\u7088 炈\\u7089 炉\\u7090 炐\\u7091 炑\\u7092 炒\\u7093 炓\\u7094 炔\\u7095 炕\\u7096 炖\\u7097 炗\\u7098 炘\\u7099 炙\\u7100 焀\\u7101 焁\\u7102 焂\\u7103 焃\\u7104 焄\\u7105 焅\\u7106 焆\\u7107 焇\\u7108 焈\\u7109 焉\\u7110 焐\\u7111 焑\\u7112 焒\\u7113 焓\\u7114 焔\\u7115 焕\\u7116 焖\\u7117 焗\\u7118 焘\\u7119 焙\\u7120 焠\\u7121 無\\u7122 焢\\u7123 焣\\u7124 焤\\u7125 焥\\u7126 焦\\u7127 焧\\u7128 焨\\u7129 焩\\u7130 焰\\u7131 焱\\u7132 焲\\u7133 焳\\u7134 焴\\u7135 焵\\u7136 然\\u7137 焷\\u7138 焸\\u7139 焹\\u7140 煀\\u7141 煁\\u7142 煂\\u7143 煃\\u7144 煄\\u7145 煅\\u7146 煆\\u7147 煇\\u7148 煈\\u7149 煉\\u7150 煐\\u7151 煑\\u7152 煒\\u7153 煓\\u7154 煔\\u7155 煕\\u7156 煖\\u7157 煗\\u7158 煘\\u7159 煙\\u7160 煠\\u7161 煡\\u7162 煢\\u7163 煣\\u7164 煤\\u7165 煥\\u7166 煦\\u7167 照\\u7168 煨\\u7169 煩\\u7170 煰\\u7171 煱\\u7172 煲\\u7173 煳\\u7174 煴\\u7175 煵\\u7176 煶\\u7177 煷\\u7178 煸\\u7179 煹\\u7180 熀\\u7181 熁\\u7182 熂\\u7183 熃\\u7184 熄\\u7185 熅\\u7186 熆\\u7187 熇\\u7188 熈\\u7189 熉\\u7190 熐\\u7191 熑\\u7192 熒\\u7193 熓\\u7194 熔\\u7195 熕\\u7196 熖\\u7197 熗\\u7198 熘\\u7199 熙\\u7200 爀\\u7201 爁\\u7202 爂\\u7203 爃\\u7204 爄\\u7205 爅\\u7206 爆\\u7207 爇\\u7208 爈\\u7209 爉\\u7210 爐\\u7211 爑\\u7212 爒\\u7213 爓\\u7214 爔\\u7215 爕\\u7216 爖\\u7217 爗\\u7218 爘\\u7219 爙\\u7220 爠\\u7221 爡\\u7222 爢\\u7223 爣\\u7224 爤\\u7225 爥\\u7226 爦\\u7227 爧\\u7228 爨\\u7229 爩\\u7230 爰\\u7231 爱\\u7232 爲\\u7233 爳\\u7234 爴\\u7235 爵\\u7236 父\\u7237 爷\\u7238 爸\\u7239 爹\\u7240 牀\\u7241 牁\\u7242 牂\\u7243 牃\\u7244 牄\\u7245 牅\\u7246 牆\\u7247 片\\u7248 版\\u7249 牉\\u7250 牐\\u7251 牑\\u7252 牒\\u7253 牓\\u7254 牔\\u7255 牕\\u7256 牖\\u7257 牗\\u7258 牘\\u7259 牙\\u7260 牠\\u7261 牡\\u7262 牢\\u7263 牣\\u7264 牤\\u7265 牥\\u7266 牦\\u7267 牧\\u7268 牨\\u7269 物\\u7270 牰\\u7271 牱\\u7272 牲\\u7273 牳\\u7274 牴\\u7275 牵\\u7276 牶\\u7277 牷\\u7278 牸\\u7279 特\\u7280 犀\\u7281 犁\\u7282 犂\\u7283 犃\\u7284 犄\\u7285 犅\\u7286 犆\\u7287 犇\\u7288 犈\\u7289 犉\\u7290 犐\\u7291 犑\\u7292 犒\\u7293 犓\\u7294 犔\\u7295 犕\\u7296 犖\\u7297 犗\\u7298 犘\\u7299 犙\\u7300 猀\\u7301 猁\\u7302 猂\\u7303 猃\\u7304 猄\\u7305 猅\\u7306 猆\\u7307 猇\\u7308 猈\\u7309 猉\\u7310 猐\\u7311 猑\\u7312 猒\\u7313 猓\\u7314 猔\\u7315 猕\\u7316 猖\\u7317 猗\\u7318 猘\\u7319 猙\\u7320 猠\\u7321 猡\\u7322 猢\\u7323 猣\\u7324 猤\\u7325 猥\\u7326 猦\\u7327 猧\\u7328 猨\\u7329 猩\\u7330 猰\\u7331 猱\\u7332 猲\\u7333 猳\\u7334 猴\\u7335 猵\\u7336 猶\\u7337 猷\\u7338 猸\\u7339 猹\\u7340 獀\\u7341 獁\\u7342 獂\\u7343 獃\\u7344 獄\\u7345 獅\\u7346 獆\\u7347 獇\\u7348 獈\\u7349 獉\\u7350 獐\\u7351 獑\\u7352 獒\\u7353 獓\\u7354 獔\\u7355 獕\\u7356 獖\\u7357 獗\\u7358 獘\\u7359 獙\\u7360 獠\\u7361 獡\\u7362 獢\\u7363 獣\\u7364 獤\\u7365 獥\\u7366 獦\\u7367 獧\\u7368 獨\\u7369 獩\\u7370 獰\\u7371 獱\\u7372 獲\\u7373 獳\\u7374 獴\\u7375 獵\\u7376 獶\\u7377 獷\\u7378 獸\\u7379 獹\\u7380 玀\\u7381 玁\\u7382 玂\\u7383 玃\\u7384 玄\\u7385 玅\\u7386 玆\\u7387 率\\u7388 玈\\u7389 玉\\u7390 玐\\u7391 玑\\u7392 玒\\u7393 玓\\u7394 玔\\u7395 玕\\u7396 玖\\u7397 玗\\u7398 玘\\u7399 玙\\u7400 琀\\u7401 琁\\u7402 琂\\u7403 球\\u7404 琄\\u7405 琅\\u7406 理\\u7407 琇\\u7408 琈\\u7409 琉\\u7410 琐\\u7411 琑\\u7412 琒\\u7413 琓\\u7414 琔\\u7415 琕\\u7416 琖\\u7417 琗\\u7418 琘\\u7419 琙\\u7420 琠\\u7421 琡\\u7422 琢\\u7423 琣\\u7424 琤\\u7425 琥\\u7426 琦\\u7427 琧\\u7428 琨\\u7429 琩\\u7430 琰\\u7431 琱\\u7432 琲\\u7433 琳\\u7434 琴\\u7435 琵\\u7436 琶\\u7437 琷\\u7438 琸\\u7439 琹\\u7440 瑀\\u7441 瑁\\u7442 瑂\\u7443 瑃\\u7444 瑄\\u7445 瑅\\u7446 瑆\\u7447 瑇\\u7448 瑈\\u7449 瑉\\u7450 瑐\\u7451 瑑\\u7452 瑒\\u7453 瑓\\u7454 瑔\\u7455 瑕\\u7456 瑖\\u7457 瑗\\u7458 瑘\\u7459 瑙\\u7460 瑠\\u7461 瑡\\u7462 瑢\\u7463 瑣\\u7464 瑤\\u7465 瑥\\u7466 瑦\\u7467 瑧\\u7468 瑨\\u7469 瑩\\u7470 瑰\\u7471 瑱\\u7472 瑲\\u7473 瑳\\u7474 瑴\\u7475 瑵\\u7476 瑶\\u7477 瑷\\u7478 瑸\\u7479 瑹\\u7480 璀\\u7481 璁\\u7482 璂\\u7483 璃\\u7484 璄\\u7485 璅\\u7486 璆\\u7487 璇\\u7488 璈\\u7489 璉\\u7490 璐\\u7491 璑\\u7492 璒\\u7493 璓\\u7494 璔\\u7495 璕\\u7496 璖\\u7497 璗\\u7498 璘\\u7499 璙\\u7500 甀\\u7501 甁\\u7502 甂\\u7503 甃\\u7504 甄\\u7505 甅\\u7506 甆\\u7507 甇\\u7508 甈\\u7509 甉\\u7510 甐\\u7511 甑\\u7512 甒\\u7513 甓\\u7514 甔\\u7515 甕\\u7516 甖\\u7517 甗\\u7518 甘\\u7519 甙\\u7520 甠\\u7521 甡\\u7522 產\\u7523 産\\u7524 甤\\u7525 甥\\u7526 甦\\u7527 甧\\u7528 用\\u7529 甩\\u7530 田\\u7531 由\\u7532 甲\\u7533 申\\u7534 甴\\u7535 电\\u7536 甶\\u7537 男\\u7538 甸\\u7539 甹\\u7540 畀\\u7541 畁\\u7542 畂\\u7543 畃\\u7544 畄\\u7545 畅\\u7546 畆\\u7547 畇\\u7548 畈\\u7549 畉\\u7550 畐\\u7551 畑\\u7552 畒\\u7553 畓\\u7554 畔\\u7555 畕\\u7556 畖\\u7557 畗\\u7558 畘\\u7559 留\\u7560 畠\\u7561 畡\\u7562 畢\\u7563 畣\\u7564 畤\\u7565 略\\u7566 畦\\u7567 畧\\u7568 畨\\u7569 畩\\u7570 異\\u7571 畱\\u7572 畲\\u7573 畳\\u7574 畴\\u7575 畵\\u7576 當\\u7577 畷\\u7578 畸\\u7579 畹\\u7580 疀\\u7581 疁\\u7582 疂\\u7583 疃\\u7584 疄\\u7585 疅\\u7586 疆\\u7587 疇\\u7588 疈\\u7589 疉\\u7590 疐\\u7591 疑\\u7592 疒\\u7593 疓\\u7594 疔\\u7595 疕\\u7596 疖\\u7597 疗\\u7598 疘\\u7599 疙\\u7600 瘀\\u7601 瘁\\u7602 瘂\\u7603 瘃\\u7604 瘄\\u7605 瘅\\u7606 瘆\\u7607 瘇\\u7608 瘈\\u7609 瘉\\u7610 瘐\\u7611 瘑\\u7612 瘒\\u7613 瘓\\u7614 瘔\\u7615 瘕\\u7616 瘖\\u7617 瘗\\u7618 瘘\\u7619 瘙\\u7620 瘠\\u7621 瘡\\u7622 瘢\\u7623 瘣\\u7624 瘤\\u7625 瘥\\u7626 瘦\\u7627 瘧\\u7628 瘨\\u7629 瘩\\u7630 瘰\\u7631 瘱\\u7632 瘲\\u7633 瘳\\u7634 瘴\\u7635 瘵\\u7636 瘶\\u7637 瘷\\u7638 瘸\\u7639 瘹\\u7640 癀\\u7641 癁\\u7642 療\\u7643 癃\\u7644 癄\\u7645 癅\\u7646 癆\\u7647 癇\\u7648 癈\\u7649 癉\\u7650 癐\\u7651 癑\\u7652 癒\\u7653 癓\\u7654 癔\\u7655 癕\\u7656 癖\\u7657 癗\\u7658 癘\\u7659 癙\\u7660 癠\\u7661 癡\\u7662 癢\\u7663 癣\\u7664 癤\\u7665 癥\\u7666 癦\\u7667 癧\\u7668 癨\\u7669 癩\\u7670 癰\\u7671 癱\\u7672 癲\\u7673 癳\\u7674 癴\\u7675 癵\\u7676 癶\\u7677 癷\\u7678 癸\\u7679 癹\\u7680 皀\\u7681 皁\\u7682 皂\\u7683 皃\\u7684 的\\u7685 皅\\u7686 皆\\u7687 皇\\u7688 皈\\u7689 皉\\u7690 皐\\u7691 皑\\u7692 皒\\u7693 皓\\u7694 皔\\u7695 皕\\u7696 皖\\u7697 皗\\u7698 皘\\u7699 皙\\u7700 眀\\u7701 省\\u7702 眂\\u7703 眃\\u7704 眄\\u7705 眅\\u7706 眆\\u7707 眇\\u7708 眈\\u7709 眉\\u7710 眐\\u7711 眑\\u7712 眒\\u7713 眓\\u7714 眔\\u7715 眕\\u7716 眖\\u7717 眗\\u7718 眘\\u7719 眙\\u7720 眠\\u7721 眡\\u7722 眢\\u7723 眣\\u7724 眤\\u7725 眥\\u7726 眦\\u7727 眧\\u7728 眨\\u7729 眩\\u7730 眰\\u7731 眱\\u7732 眲\\u7733 眳\\u7734 眴\\u7735 眵\\u7736 眶\\u7737 眷\\u7738 眸\\u7739 眹\\u7740 着\\u7741 睁\\u7742 睂\\u7743 睃\\u7744 睄\\u7745 睅\\u7746 睆\\u7747 睇\\u7748 睈\\u7749 睉\\u7750 睐\\u7751 睑\\u7752 睒\\u7753 睓\\u7754 睔\\u7755 睕\\u7756 睖\\u7757 睗\\u7758 睘\\u7759 睙\\u7760 睠\\u7761 睡\\u7762 睢\\u7763 督\\u7764 睤\\u7765 睥\\u7766 睦\\u7767 睧\\u7768 睨\\u7769 睩\\u7770 睰\\u7771 睱\\u7772 睲\\u7773 睳\\u7774 睴\\u7775 睵\\u7776 睶\\u7777 睷\\u7778 睸\\u7779 睹\\u7780 瞀\\u7781 瞁\\u7782 瞂\\u7783 瞃\\u7784 瞄\\u7785 瞅\\u7786 瞆\\u7787 瞇\\u7788 瞈\\u7789 瞉\\u7790 瞐\\u7791 瞑\\u7792 瞒\\u7793 瞓\\u7794 瞔\\u7795 瞕\\u7796 瞖\\u7797 瞗\\u7798 瞘\\u7799 瞙\\u7800 砀\\u7801 码\\u7802 砂\\u7803 砃\\u7804 砄\\u7805 砅\\u7806 砆\\u7807 砇\\u7808 砈\\u7809 砉\\u7810 砐\\u7811 砑\\u7812 砒\\u7813 砓\\u7814 研\\u7815 砕\\u7816 砖\\u7817 砗\\u7818 砘\\u7819 砙\\u7820 砠\\u7821 砡\\u7822 砢\\u7823 砣\\u7824 砤\\u7825 砥\\u7826 砦\\u7827 砧\\u7828 砨\\u7829 砩\\u7830 砰\\u7831 砱\\u7832 砲\\u7833 砳\\u7834 破\\u7835 砵\\u7836 砶\\u7837 砷\\u7838 砸\\u7839 砹\\u7840 础\\u7841 硁\\u7842 硂\\u7843 硃\\u7844 硄\\u7845 硅\\u7846 硆\\u7847 硇\\u7848 硈\\u7849 硉\\u7850 硐\\u7851 硑\\u7852 硒\\u7853 硓\\u7854 硔\\u7855 硕\\u7856 硖\\u7857 硗\\u7858 硘\\u7859 硙\\u7860 硠\\u7861 硡\\u7862 硢\\u7863 硣\\u7864 硤\\u7865 硥\\u7866 硦\\u7867 硧\\u7868 硨\\u7869 硩\\u7870 硰\\u7871 硱\\u7872 硲\\u7873 硳\\u7874 硴\\u7875 硵\\u7876 硶\\u7877 硷\\u7878 硸\\u7879 硹\\u7880 碀\\u7881 碁\\u7882 碂\\u7883 碃\\u7884 碄\\u7885 碅\\u7886 碆\\u7887 碇\\u7888 碈\\u7889 碉\\u7890 碐\\u7891 碑\\u7892 碒\\u7893 碓\\u7894 碔\\u7895 碕\\u7896 碖\\u7897 碗\\u7898 碘\\u7899 碙\\u7900 礀\\u7901 礁\\u7902 礂\\u7903 礃\\u7904 礄\\u7905 礅\\u7906 礆\\u7907 礇\\u7908 礈\\u7909 礉\\u7910 礐\\u7911 礑\\u7912 礒\\u7913 礓\\u7914 礔\\u7915 礕\\u7916 礖\\u7917 礗\\u7918 礘\\u7919 礙\\u7920 礠\\u7921 礡\\u7922 礢\\u7923 礣\\u7924 礤\\u7925 礥\\u7926 礦\\u7927 礧\\u7928 礨\\u7929 礩\\u7930 礰\\u7931 礱\\u7932 礲\\u7933 礳\\u7934 礴\\u7935 礵\\u7936 礶\\u7937 礷\\u7938 礸\\u7939 礹\\u7940 祀\\u7941 祁\\u7942 祂\\u7943 祃\\u7944 祄\\u7945 祅\\u7946 祆\\u7947 祇\\u7948 祈\\u7949 祉\\u7950 祐\\u7951 祑\\u7952 祒\\u7953 祓\\u7954 祔\\u7955 祕\\u7956 祖\\u7957 祗\\u7958 祘\\u7959 祙\\u7960 祠\\u7961 祡\\u7962 祢\\u7963 祣\\u7964 祤\\u7965 祥\\u7966 祦\\u7967 祧\\u7968 票\\u7969 祩\\u7970 祰\\u7971 祱\\u7972 祲\\u7973 祳\\u7974 祴\\u7975 祵\\u7976 祶\\u7977 祷\\u7978 祸\\u7979 祹\\u7980 禀\\u7981 禁\\u7982 禂\\u7983 禃\\u7984 禄\\u7985 禅\\u7986 禆\\u7987 禇\\u7988 禈\\u7989 禉\\u7990 禐\\u7991 禑\\u7992 禒\\u7993 禓\\u7994 禔\\u7995 禕\\u7996 禖\\u7997 禗\\u7998 禘\\u7999 禙\\u8000 耀\\u8001 老\\u8002 耂\\u8003 考\\u8004 耄\\u8005 者\\u8006 耆\\u8007 耇\\u8008 耈\\u8009 耉\\u8010 耐\\u8011 耑\\u8012 耒\\u8013 耓\\u8014 耔\\u8015 耕\\u8016 耖\\u8017 耗\\u8018 耘\\u8019 耙\\u8020 耠\\u8021 耡\\u8022 耢\\u8023 耣\\u8024 耤\\u8025 耥\\u8026 耦\\u8027 耧\\u8028 耨\\u8029 耩\\u8030 耰\\u8031 耱\\u8032 耲\\u8033 耳\\u8034 耴\\u8035 耵\\u8036 耶\\u8037 耷\\u8038 耸\\u8039 耹\\u8040 聀\\u8041 聁\\u8042 聂\\u8043 聃\\u8044 聄\\u8045 聅\\u8046 聆\\u8047 聇\\u8048 聈\\u8049 聉\\u8050 聐\\u8051 聑\\u8052 聒\\u8053 聓\\u8054 联\\u8055 聕\\u8056 聖\\u8057 聗\\u8058 聘\\u8059 聙\\u8060 聠\\u8061 聡\\u8062 聢\\u8063 聣\\u8064 聤\\u8065 聥\\u8066 聦\\u8067 聧\\u8068 聨\\u8069 聩\\u8070 聰\\u8071 聱\\u8072 聲\\u8073 聳\\u8074 聴\\u8075 聵\\u8076 聶\\u8077 職\\u8078 聸\\u8079 聹\\u8080 肀\\u8081 肁\\u8082 肂\\u8083 肃\\u8084 肄\\u8085 肅\\u8086 肆\\u8087 肇\\u8088 肈\\u8089 肉\\u8090 肐\\u8091 肑\\u8092 肒\\u8093 肓\\u8094 肔\\u8095 肕\\u8096 肖\\u8097 肗\\u8098 肘\\u8099 肙\\u8100 脀\\u8101 脁\\u8102 脂\\u8103 脃\\u8104 脄\\u8105 脅\\u8106 脆\\u8107 脇\\u8108 脈\\u8109 脉\\u8110 脐\\u8111 脑\\u8112 脒\\u8113 脓\\u8114 脔\\u8115 脕\\u8116 脖\\u8117 脗\\u8118 脘\\u8119 脙\\u8120 脠\\u8121 脡\\u8122 脢\\u8123 脣\\u8124 脤\\u8125 脥\\u8126 脦\\u8127 脧\\u8128 脨\\u8129 脩\\u8130 脰\\u8131 脱\\u8132 脲\\u8133 脳\\u8134 脴\\u8135 脵\\u8136 脶\\u8137 脷\\u8138 脸\\u8139 脹\\u8140 腀\\u8141 腁\\u8142 腂\\u8143 腃\\u8144 腄\\u8145 腅\\u8146 腆\\u8147 腇\\u8148 腈\\u8149 腉\\u8150 腐\\u8151 腑\\u8152 腒\\u8153 腓\\u8154 腔\\u8155 腕\\u8156 腖\\u8157 腗\\u8158 腘\\u8159 腙\\u8160 腠\\u8161 腡\\u8162 腢\\u8163 腣\\u8164 腤\\u8165 腥\\u8166 腦\\u8167 腧\\u8168 腨\\u8169 腩\\u8170 腰\\u8171 腱\\u8172 腲\\u8173 腳\\u8174 腴\\u8175 腵\\u8176 腶\\u8177 腷\\u8178 腸\\u8179 腹\\u8180 膀\\u8181 膁\\u8182 膂\\u8183 膃\\u8184 膄\\u8185 膅\\u8186 膆\\u8187 膇\\u8188 膈\\u8189 膉\\u8190 膐\\u8191 膑\\u8192 膒\\u8193 膓\\u8194 膔\\u8195 膕\\u8196 膖\\u8197 膗\\u8198 膘\\u8199 膙\\u8200 舀\\u8201 舁\\u8202 舂\\u8203 舃\\u8204 舄\\u8205 舅\\u8206 舆\\u8207 與\\u8208 興\\u8209 舉\\u8210 舐\\u8211 舑\\u8212 舒\\u8213 舓\\u8214 舔\\u8215 舕\\u8216 舖\\u8217 舗\\u8218 舘\\u8219 舙\\u8220 舠\\u8221 舡\\u8222 舢\\u8223 舣\\u8224 舤\\u8225 舥\\u8226 舦\\u8227 舧\\u8228 舨\\u8229 舩\\u8230 舰\\u8231 舱\\u8232 舲\\u8233 舳\\u8234 舴\\u8235 舵\\u8236 舶\\u8237 舷\\u8238 舸\\u8239 船\\u8240 艀\\u8241 艁\\u8242 艂\\u8243 艃\\u8244 艄\\u8245 艅\\u8246 艆\\u8247 艇\\u8248 艈\\u8249 艉\\u8250 艐\\u8251 艑\\u8252 艒\\u8253 艓\\u8254 艔\\u8255 艕\\u8256 艖\\u8257 艗\\u8258 艘\\u8259 艙\\u8260 艠\\u8261 艡\\u8262 艢\\u8263 艣\\u8264 艤\\u8265 艥\\u8266 艦\\u8267 艧\\u8268 艨\\u8269 艩\\u8270 艰\\u8271 艱\\u8272 色\\u8273 艳\\u8274 艴\\u8275 艵\\u8276 艶\\u8277 艷\\u8278 艸\\u8279 艹\\u8280 芀\\u8281 芁\\u8282 节\\u8283 芃\\u8284 芄\\u8285 芅\\u8286 芆\\u8287 芇\\u8288 芈\\u8289 芉\\u8290 芐\\u8291 芑\\u8292 芒\\u8293 芓\\u8294 芔\\u8295 芕\\u8296 芖\\u8297 芗\\u8298 芘\\u8299 芙\\u8300 茀\\u8301 茁\\u8302 茂\\u8303 范\\u8304 茄\\u8305 茅\\u8306 茆\\u8307 茇\\u8308 茈\\u8309 茉\\u8310 茐\\u8311 茑\\u8312 茒\\u8313 茓\\u8314 茔\\u8315 茕\\u8316 茖\\u8317 茗\\u8318 茘\\u8319 茙\\u8320 茠\\u8321 茡\\u8322 茢\\u8323 茣\\u8324 茤\\u8325 茥\\u8326 茦\\u8327 茧\\u8328 茨\\u8329 茩\\u8330 茰\\u8331 茱\\u8332 茲\\u8333 茳\\u8334 茴\\u8335 茵\\u8336 茶\\u8337 茷\\u8338 茸\\u8339 茹\\u8340 荀\\u8341 荁\\u8342 荂\\u8343 荃\\u8344 荄\\u8345 荅\\u8346 荆\\u8347 荇\\u8348 荈\\u8349 草\\u8350 荐\\u8351 荑\\u8352 荒\\u8353 荓\\u8354 荔\\u8355 荕\\u8356 荖\\u8357 荗\\u8358 荘\\u8359 荙\\u8360 荠\\u8361 荡\\u8362 荢\\u8363 荣\\u8364 荤\\u8365 荥\\u8366 荦\\u8367 荧\\u8368 荨\\u8369 荩\\u8370 荰\\u8371 荱\\u8372 荲\\u8373 荳\\u8374 荴\\u8375 荵\\u8376 荶\\u8377 荷\\u8378 荸\\u8379 荹\\u8380 莀\\u8381 莁\\u8382 莂\\u8383 莃\\u8384 莄\\u8385 莅\\u8386 莆\\u8387 莇\\u8388 莈\\u8389 莉\\u8390 莐\\u8391 莑\\u8392 莒\\u8393 莓\\u8394 莔\\u8395 莕\\u8396 莖\\u8397 莗\\u8398 莘\\u8399 莙\\u8400 萀\\u8401 萁\\u8402 萂\\u8403 萃\\u8404 萄\\u8405 萅\\u8406 萆\\u8407 萇\\u8408 萈\\u8409 萉\\u8410 萐\\u8411 萑\\u8412 萒\\u8413 萓\\u8414 萔\\u8415 萕\\u8416 萖\\u8417 萗\\u8418 萘\\u8419 萙\\u8420 萠\\u8421 萡\\u8422 萢\\u8423 萣\\u8424 萤\\u8425 营\\u8426 萦\\u8427 萧\\u8428 萨\\u8429 萩\\u8430 萰\\u8431 萱\\u8432 萲\\u8433 萳\\u8434 萴\\u8435 萵\\u8436 萶\\u8437 萷\\u8438 萸\\u8439 萹\\u8440 葀\\u8441 葁\\u8442 葂\\u8443 葃\\u8444 葄\\u8445 葅\\u8446 葆\\u8447 葇\\u8448 葈\\u8449 葉\\u8450 葐\\u8451 葑\\u8452 葒\\u8453 葓\\u8454 葔\\u8455 葕\\u8456 葖\\u8457 著\\u8458 葘\\u8459 葙\\u8460 葠\\u8461 葡\\u8462 葢\\u8463 董\\u8464 葤\\u8465 葥\\u8466 葦\\u8467 葧\\u8468 葨\\u8469 葩\\u8470 葰\\u8471 葱\\u8472 葲\\u8473 葳\\u8474 葴\\u8475 葵\\u8476 葶\\u8477 葷\\u8478 葸\\u8479 葹\\u8480 蒀\\u8481 蒁\\u8482 蒂\\u8483 蒃\\u8484 蒄\\u8485 蒅\\u8486 蒆\\u8487 蒇\\u8488 蒈\\u8489 蒉\\u8490 蒐\\u8491 蒑\\u8492 蒒\\u8493 蒓\\u8494 蒔\\u8495 蒕\\u8496 蒖\\u8497 蒗\\u8498 蒘\\u8499 蒙\\u8500 蔀\\u8501 蔁\\u8502 蔂\\u8503 蔃\\u8504 蔄\\u8505 蔅\\u8506 蔆\\u8507 蔇\\u8508 蔈\\u8509 蔉\\u8510 蔐\\u8511 蔑\\u8512 蔒\\u8513 蔓\\u8514 蔔\\u8515 蔕\\u8516 蔖\\u8517 蔗\\u8518 蔘\\u8519 蔙\\u8520 蔠\\u8521 蔡\\u8522 蔢\\u8523 蔣\\u8524 蔤\\u8525 蔥\\u8526 蔦\\u8527 蔧\\u8528 蔨\\u8529 蔩\\u8530 蔰\\u8531 蔱\\u8532 蔲\\u8533 蔳\\u8534 蔴\\u8535 蔵\\u8536 蔶\\u8537 蔷\\u8538 蔸\\u8539 蔹\\u8540 蕀\\u8541 蕁\\u8542 蕂\\u8543 蕃\\u8544 蕄\\u8545 蕅\\u8546 蕆\\u8547 蕇\\u8548 蕈\\u8549 蕉\\u8550 蕐\\u8551 蕑\\u8552 蕒\\u8553 蕓\\u8554 蕔\\u8555 蕕\\u8556 蕖\\u8557 蕗\\u8558 蕘\\u8559 蕙\\u8560 蕠\\u8561 蕡\\u8562 蕢\\u8563 蕣\\u8564 蕤\\u8565 蕥\\u8566 蕦\\u8567 蕧\\u8568 蕨\\u8569 蕩\\u8570 蕰\\u8571 蕱\\u8572 蕲\\u8573 蕳\\u8574 蕴\\u8575 蕵\\u8576 蕶\\u8577 蕷\\u8578 蕸\\u8579 蕹\\u8580 薀\\u8581 薁\\u8582 薂\\u8583 薃\\u8584 薄\\u8585 薅\\u8586 薆\\u8587 薇\\u8588 薈\\u8589 薉\\u8590 薐\\u8591 薑\\u8592 薒\\u8593 薓\\u8594 薔\\u8595 薕\\u8596 薖\\u8597 薗\\u8598 薘\\u8599 薙\\u8600 蘀\\u8601 蘁\\u8602 蘂\\u8603 蘃\\u8604 蘄\\u8605 蘅\\u8606 蘆\\u8607 蘇\\u8608 蘈\\u8609 蘉\\u8610 蘐\\u8611 蘑\\u8612 蘒\\u8613 蘓\\u8614 蘔\\u8615 蘕\\u8616 蘖\\u8617 蘗\\u8618 蘘\\u8619 蘙\\u8620 蘠\\u8621 蘡\\u8622 蘢\\u8623 蘣\\u8624 蘤\\u8625 蘥\\u8626 蘦\\u8627 蘧\\u8628 蘨\\u8629 蘩\\u8630 蘰\\u8631 蘱\\u8632 蘲\\u8633 蘳\\u8634 蘴\\u8635 蘵\\u8636 蘶\\u8637 蘷\\u8638 蘸\\u8639 蘹\\u8640 虀\\u8641 虁\\u8642 虂\\u8643 虃\\u8644 虄\\u8645 虅\\u8646 虆\\u8647 虇\\u8648 虈\\u8649 虉\\u8650 虐\\u8651 虑\\u8652 虒\\u8653 虓\\u8654 虔\\u8655 處\\u8656 虖\\u8657 虗\\u8658 虘\\u8659 虙\\u8660 虠\\u8661 虡\\u8662 虢\\u8663 虣\\u8664 虤\\u8665 虥\\u8666 虦\\u8667 虧\\u8668 虨\\u8669 虩\\u8670 虰\\u8671 虱\\u8672 虲\\u8673 虳\\u8674 虴\\u8675 虵\\u8676 虶\\u8677 虷\\u8678 虸\\u8679 虹\\u8680 蚀\\u8681 蚁\\u8682 蚂\\u8683 蚃\\u8684 蚄\\u8685 蚅\\u8686 蚆\\u8687 蚇\\u8688 蚈\\u8689 蚉\\u8690 蚐\\u8691 蚑\\u8692 蚒\\u8693 蚓\\u8694 蚔\\u8695 蚕\\u8696 蚖\\u8697 蚗\\u8698 蚘\\u8699 蚙\\u8700 蜀\\u8701 蜁\\u8702 蜂\\u8703 蜃\\u8704 蜄\\u8705 蜅\\u8706 蜆\\u8707 蜇\\u8708 蜈\\u8709 蜉\\u8710 蜐\\u8711 蜑\\u8712 蜒\\u8713 蜓\\u8714 蜔\\u8715 蜕\\u8716 蜖\\u8717 蜗\\u8718 蜘\\u8719 蜙\\u8720 蜠\\u8721 蜡\\u8722 蜢\\u8723 蜣\\u8724 蜤\\u8725 蜥\\u8726 蜦\\u8727 蜧\\u8728 蜨\\u8729 蜩\\u8730 蜰\\u8731 蜱\\u8732 蜲\\u8733 蜳\\u8734 蜴\\u8735 蜵\\u8736 蜶\\u8737 蜷\\u8738 蜸\\u8739 蜹\\u8740 蝀\\u8741 蝁\\u8742 蝂\\u8743 蝃\\u8744 蝄\\u8745 蝅\\u8746 蝆\\u8747 蝇\\u8748 蝈\\u8749 蝉\\u8750 蝐\\u8751 蝑\\u8752 蝒\\u8753 蝓\\u8754 蝔\\u8755 蝕\\u8756 蝖\\u8757 蝗\\u8758 蝘\\u8759 蝙\\u8760 蝠\\u8761 蝡\\u8762 蝢\\u8763 蝣\\u8764 蝤\\u8765 蝥\\u8766 蝦\\u8767 蝧\\u8768 蝨\\u8769 蝩\\u8770 蝰\\u8771 蝱\\u8772 蝲\\u8773 蝳\\u8774 蝴\\u8775 蝵\\u8776 蝶\\u8777 蝷\\u8778 蝸\\u8779 蝹\\u8780 螀\\u8781 螁\\u8782 螂\\u8783 螃\\u8784 螄\\u8785 螅\\u8786 螆\\u8787 螇\\u8788 螈\\u8789 螉\\u8790 螐\\u8791 螑\\u8792 螒\\u8793 螓\\u8794 螔\\u8795 螕\\u8796 螖\\u8797 螗\\u8798 螘\\u8799 螙\\u8800 蠀\\u8801 蠁\\u8802 蠂\\u8803 蠃\\u8804 蠄\\u8805 蠅\\u8806 蠆\\u8807 蠇\\u8808 蠈\\u8809 蠉\\u8810 蠐\\u8811 蠑\\u8812 蠒\\u8813 蠓\\u8814 蠔\\u8815 蠕\\u8816 蠖\\u8817 蠗\\u8818 蠘\\u8819 蠙\\u8820 蠠\\u8821 蠡\\u8822 蠢\\u8823 蠣\\u8824 蠤\\u8825 蠥\\u8826 蠦\\u8827 蠧\\u8828 蠨\\u8829 蠩\\u8830 蠰\\u8831 蠱\\u8832 蠲\\u8833 蠳\\u8834 蠴\\u8835 蠵\\u8836 蠶\\u8837 蠷\\u8838 蠸\\u8839 蠹\\u8840 血\\u8841 衁\\u8842 衂\\u8843 衃\\u8844 衄\\u8845 衅\\u8846 衆\\u8847 衇\\u8848 衈\\u8849 衉\\u8850 衐\\u8851 衑\\u8852 衒\\u8853 術\\u8854 衔\\u8855 衕\\u8856 衖\\u8857 街\\u8858 衘\\u8859 衙\\u8860 衠\\u8861 衡\\u8862 衢\\u8863 衣\\u8864 衤\\u8865 补\\u8866 衦\\u8867 衧\\u8868 表\\u8869 衩\\u8870 衰\\u8871 衱\\u8872 衲\\u8873 衳\\u8874 衴\\u8875 衵\\u8876 衶\\u8877 衷\\u8878 衸\\u8879 衹\\u8880 袀\\u8881 袁\\u8882 袂\\u8883 袃\\u8884 袄\\u8885 袅\\u8886 袆\\u8887 袇\\u8888 袈\\u8889 袉\\u8890 袐\\u8891 袑\\u8892 袒\\u8893 袓\\u8894 袔\\u8895 袕\\u8896 袖\\u8897 袗\\u8898 袘\\u8899 袙\\u8900 褀\\u8901 褁\\u8902 褂\\u8903 褃\\u8904 褄\\u8905 褅\\u8906 褆\\u8907 複\\u8908 褈\\u8909 褉\\u8910 褐\\u8911 褑\\u8912 褒\\u8913 褓\\u8914 褔\\u8915 褕\\u8916 褖\\u8917 褗\\u8918 褘\\u8919 褙\\u8920 褠\\u8921 褡\\u8922 褢\\u8923 褣\\u8924 褤\\u8925 褥\\u8926 褦\\u8927 褧\\u8928 褨\\u8929 褩\\u8930 褰\\u8931 褱\\u8932 褲\\u8933 褳\\u8934 褴\\u8935 褵\\u8936 褶\\u8937 褷\\u8938 褸\\u8939 褹\\u8940 襀\\u8941 襁\\u8942 襂\\u8943 襃\\u8944 襄\\u8945 襅\\u8946 襆\\u8947 襇\\u8948 襈\\u8949 襉\\u8950 襐\\u8951 襑\\u8952 襒\\u8953 襓\\u8954 襔\\u8955 襕\\u8956 襖\\u8957 襗\\u8958 襘\\u8959 襙\\u8960 襠\\u8961 襡\\u8962 襢\\u8963 襣\\u8964 襤\\u8965 襥\\u8966 襦\\u8967 襧\\u8968 襨\\u8969 襩\\u8970 襰\\u8971 襱\\u8972 襲\\u8973 襳\\u8974 襴\\u8975 襵\\u8976 襶\\u8977 襷\\u8978 襸\\u8979 襹\\u8980 覀\\u8981 要\\u8982 覂\\u8983 覃\\u8984 覄\\u8985 覅\\u8986 覆\\u8987 覇\\u8988 覈\\u8989 覉\\u8990 覐\\u8991 覑\\u8992 覒\\u8993 覓\\u8994 覔\\u8995 覕\\u8996 視\\u8997 覗\\u8998 覘\\u8999 覙\\u9000 退\\u9001 送\\u9002 适\\u9003 逃\\u9004 逄\\u9005 逅\\u9006 逆\\u9007 逇\\u9008 逈\\u9009 选\\u9010 逐\\u9011 逑\\u9012 递\\u9013 逓\\u9014 途\\u9015 逕\\u9016 逖\\u9017 逗\\u9018 逘\\u9019 這\\u9020 造\\u9021 逡\\u9022 逢\\u9023 連\\u9024 逤\\u9025 逥\\u9026 逦\\u9027 逧\\u9028 逨\\u9029 逩\\u9030 逰\\u9031 週\\u9032 進\\u9033 逳\\u9034 逴\\u9035 逵\\u9036 逶\\u9037 逷\\u9038 逸\\u9039 逹\\u9040 遀\\u9041 遁\\u9042 遂\\u9043 遃\\u9044 遄\\u9045 遅\\u9046 遆\\u9047 遇\\u9048 遈\\u9049 遉\\u9050 遐\\u9051 遑\\u9052 遒\\u9053 道\\u9054 達\\u9055 違\\u9056 遖\\u9057 遗\\u9058 遘\\u9059 遙\\u9060 遠\\u9061 遡\\u9062 遢\\u9063 遣\\u9064 遤\\u9065 遥\\u9066 遦\\u9067 遧\\u9068 遨\\u9069 適\\u9070 遰\\u9071 遱\\u9072 遲\\u9073 遳\\u9074 遴\\u9075 遵\\u9076 遶\\u9077 遷\\u9078 選\\u9079 遹\\u9080 邀\\u9081 邁\\u9082 邂\\u9083 邃\\u9084 還\\u9085 邅\\u9086 邆\\u9087 邇\\u9088 邈\\u9089 邉\\u9090 邐\\u9091 邑\\u9092 邒\\u9093 邓\\u9094 邔\\u9095 邕\\u9096 邖\\u9097 邗\\u9098 邘\\u9099 邙\\u9100 鄀\\u9101 鄁\\u9102 鄂\\u9103 鄃\\u9104 鄄\\u9105 鄅\\u9106 鄆\\u9107 鄇\\u9108 鄈\\u9109 鄉\\u9110 鄐\\u9111 鄑\\u9112 鄒\\u9113 鄓\\u9114 鄔\\u9115 鄕\\u9116 鄖\\u9117 鄗\\u9118 鄘\\u9119 鄙\\u9120 鄠\\u9121 鄡\\u9122 鄢\\u9123 鄣\\u9124 鄤\\u9125 鄥\\u9126 鄦\\u9127 鄧\\u9128 鄨\\u9129 鄩\\u9130 鄰\\u9131 鄱\\u9132 鄲\\u9133 鄳\\u9134 鄴\\u9135 鄵\\u9136 鄶\\u9137 鄷\\u9138 鄸\\u9139 鄹\\u9140 酀\\u9141 酁\\u9142 酂\\u9143 酃\\u9144 酄\\u9145 酅\\u9146 酆\\u9147 酇\\u9148 酈\\u9149 酉\\u9150 酐\\u9151 酑\\u9152 酒\\u9153 酓\\u9154 酔\\u9155 酕\\u9156 酖\\u9157 酗\\u9158 酘\\u9159 酙\\u9160 酠\\u9161 酡\\u9162 酢\\u9163 酣\\u9164 酤\\u9165 酥\\u9166 酦\\u9167 酧\\u9168 酨\\u9169 酩\\u9170 酰\\u9171 酱\\u9172 酲\\u9173 酳\\u9174 酴\\u9175 酵\\u9176 酶\\u9177 酷\\u9178 酸\\u9179 酹\\u9180 醀\\u9181 醁\\u9182 醂\\u9183 醃\\u9184 醄\\u9185 醅\\u9186 醆\\u9187 醇\\u9188 醈\\u9189 醉\\u9190 醐\\u9191 醑\\u9192 醒\\u9193 醓\\u9194 醔\\u9195 醕\\u9196 醖\\u9197 醗\\u9198 醘\\u9199 醙\\u9200 鈀\\u9201 鈁\\u9202 鈂\\u9203 鈃\\u9204 鈄\\u9205 鈅\\u9206 鈆\\u9207 鈇\\u9208 鈈\\u9209 鈉\\u9210 鈐\\u9211 鈑\\u9212 鈒\\u9213 鈓\\u9214 鈔\\u9215 鈕\\u9216 鈖\\u9217 鈗\\u9218 鈘\\u9219 鈙\\u9220 鈠\\u9221 鈡\\u9222 鈢\\u9223 鈣\\u9224 鈤\\u9225 鈥\\u9226 鈦\\u9227 鈧\\u9228 鈨\\u9229 鈩\\u9230 鈰\\u9231 鈱\\u9232 鈲\\u9233 鈳\\u9234 鈴\\u9235 鈵\\u9236 鈶\\u9237 鈷\\u9238 鈸\\u9239 鈹\\u9240 鉀\\u9241 鉁\\u9242 鉂\\u9243 鉃\\u9244 鉄\\u9245 鉅\\u9246 鉆\\u9247 鉇\\u9248 鉈\\u9249 鉉\\u9250 鉐\\u9251 鉑\\u9252 鉒\\u9253 鉓\\u9254 鉔\\u9255 鉕\\u9256 鉖\\u9257 鉗\\u9258 鉘\\u9259 鉙\\u9260 鉠\\u9261 鉡\\u9262 鉢\\u9263 鉣\\u9264 鉤\\u9265 鉥\\u9266 鉦\\u9267 鉧\\u9268 鉨\\u9269 鉩\\u9270 鉰\\u9271 鉱\\u9272 鉲\\u9273 鉳\\u9274 鉴\\u9275 鉵\\u9276 鉶\\u9277 鉷\\u9278 鉸\\u9279 鉹\\u9280 銀\\u9281 銁\\u9282 銂\\u9283 銃\\u9284 銄\\u9285 銅\\u9286 銆\\u9287 銇\\u9288 銈\\u9289 銉\\u9290 銐\\u9291 銑\\u9292 銒\\u9293 銓\\u9294 銔\\u9295 銕\\u9296 銖\\u9297 銗\\u9298 銘\\u9299 銙\\u9300 錀\\u9301 錁\\u9302 錂\\u9303 錃\\u9304 錄\\u9305 錅\\u9306 錆\\u9307 錇\\u9308 錈\\u9309 錉\\u9310 錐\\u9311 錑\\u9312 錒\\u9313 錓\\u9314 錔\\u9315 錕\\u9316 錖\\u9317 錗\\u9318 錘\\u9319 錙\\u9320 錠\\u9321 錡\\u9322 錢\\u9323 錣\\u9324 錤\\u9325 錥\\u9326 錦\\u9327 錧\\u9328 錨\\u9329 錩\\u9330 錰\\u9331 錱\\u9332 録\\u9333 錳\\u9334 錴\\u9335 錵\\u9336 錶\\u9337 錷\\u9338 錸\\u9339 錹\\u9340 鍀\\u9341 鍁\\u9342 鍂\\u9343 鍃\\u9344 鍄\\u9345 鍅\\u9346 鍆\\u9347 鍇\\u9348 鍈\\u9349 鍉\\u9350 鍐\\u9351 鍑\\u9352 鍒\\u9353 鍓\\u9354 鍔\\u9355 鍕\\u9356 鍖\\u9357 鍗\\u9358 鍘\\u9359 鍙\\u9360 鍠\\u9361 鍡\\u9362 鍢\\u9363 鍣\\u9364 鍤\\u9365 鍥\\u9366 鍦\\u9367 鍧\\u9368 鍨\\u9369 鍩\\u9370 鍰\\u9371 鍱\\u9372 鍲\\u9373 鍳\\u9374 鍴\\u9375 鍵\\u9376 鍶\\u9377 鍷\\u9378 鍸\\u9379 鍹\\u9380 鎀\\u9381 鎁\\u9382 鎂\\u9383 鎃\\u9384 鎄\\u9385 鎅\\u9386 鎆\\u9387 鎇\\u9388 鎈\\u9389 鎉\\u9390 鎐\\u9391 鎑\\u9392 鎒\\u9393 鎓\\u9394 鎔\\u9395 鎕\\u9396 鎖\\u9397 鎗\\u9398 鎘\\u9399 鎙\\u9400 鐀\\u9401 鐁\\u9402 鐂\\u9403 鐃\\u9404 鐄\\u9405 鐅\\u9406 鐆\\u9407 鐇\\u9408 鐈\\u9409 鐉\\u9410 鐐\\u9411 鐑\\u9412 鐒\\u9413 鐓\\u9414 鐔\\u9415 鐕\\u9416 鐖\\u9417 鐗\\u9418 鐘\\u9419 鐙\\u9420 鐠\\u9421 鐡\\u9422 鐢\\u9423 鐣\\u9424 鐤\\u9425 鐥\\u9426 鐦\\u9427 鐧\\u9428 鐨\\u9429 鐩\\u9430 鐰\\u9431 鐱\\u9432 鐲\\u9433 鐳\\u9434 鐴\\u9435 鐵\\u9436 鐶\\u9437 鐷\\u9438 鐸\\u9439 鐹\\u9440 鑀\\u9441 鑁\\u9442 鑂\\u9443 鑃\\u9444 鑄\\u9445 鑅\\u9446 鑆\\u9447 鑇\\u9448 鑈\\u9449 鑉\\u9450 鑐\\u9451 鑑\\u9452 鑒\\u9453 鑓\\u9454 鑔\\u9455 鑕\\u9456 鑖\\u9457 鑗\\u9458 鑘\\u9459 鑙\\u9460 鑠\\u9461 鑡\\u9462 鑢\\u9463 鑣\\u9464 鑤\\u9465 鑥\\u9466 鑦\\u9467 鑧\\u9468 鑨\\u9469 鑩\\u9470 鑰\\u9471 鑱\\u9472 鑲\\u9473 鑳\\u9474 鑴\\u9475 鑵\\u9476 鑶\\u9477 鑷\\u9478 鑸\\u9479 鑹\\u9480 钀\\u9481 钁\\u9482 钂\\u9483 钃\\u9484 钄\\u9485 钅\\u9486 钆\\u9487 钇\\u9488 针\\u9489 钉\\u9490 钐\\u9491 钑\\u9492 钒\\u9493 钓\\u9494 钔\\u9495 钕\\u9496 钖\\u9497 钗\\u9498 钘\\u9499 钙\\u9500 销\\u9501 锁\\u9502 锂\\u9503 锃\\u9504 锄\\u9505 锅\\u9506 锆\\u9507 锇\\u9508 锈\\u9509 锉\\u9510 锐\\u9511 锑\\u9512 锒\\u9513 锓\\u9514 锔\\u9515 锕\\u9516 锖\\u9517 锗\\u9518 锘\\u9519 错\\u9520 锠\\u9521 锡\\u9522 锢\\u9523 锣\\u9524 锤\\u9525 锥\\u9526 锦\\u9527 锧\\u9528 锨\\u9529 锩\\u9530 锰\\u9531 锱\\u9532 锲\\u9533 锳\\u9534 锴\\u9535 锵\\u9536 锶\\u9537 锷\\u9538 锸\\u9539 锹\\u9540 镀\\u9541 镁\\u9542 镂\\u9543 镃\\u9544 镄\\u9545 镅\\u9546 镆\\u9547 镇\\u9548 镈\\u9549 镉\\u9550 镐\\u9551 镑\\u9552 镒\\u9553 镓\\u9554 镔\\u9555 镕\\u9556 镖\\u9557 镗\\u9558 镘\\u9559 镙\\u9560 镠\\u9561 镡\\u9562 镢\\u9563 镣\\u9564 镤\\u9565 镥\\u9566 镦\\u9567 镧\\u9568 镨\\u9569 镩\\u9570 镰\\u9571 镱\\u9572 镲\\u9573 镳\\u9574 镴\\u9575 镵\\u9576 镶\\u9577 長\\u9578 镸\\u9579 镹\\u9580 門\\u9581 閁\\u9582 閂\\u9583 閃\\u9584 閄\\u9585 閅\\u9586 閆\\u9587 閇\\u9588 閈\\u9589 閉\\u9590 閐\\u9591 閑\\u9592 閒\\u9593 間\\u9594 閔\\u9595 閕\\u9596 閖\\u9597 閗\\u9598 閘\\u9599 閙\\u9600 阀\\u9601 阁\\u9602 阂\\u9603 阃\\u9604 阄\\u9605 阅\\u9606 阆\\u9607 阇\\u9608 阈\\u9609 阉\\u9610 阐\\u9611 阑\\u9612 阒\\u9613 阓\\u9614 阔\\u9615 阕\\u9616 阖\\u9617 阗\\u9618 阘\\u9619 阙\\u9620 阠\\u9621 阡\\u9622 阢\\u9623 阣\\u9624 阤\\u9625 阥\\u9626 阦\\u9627 阧\\u9628 阨\\u9629 阩\\u9630 阰\\u9631 阱\\u9632 防\\u9633 阳\\u9634 阴\\u9635 阵\\u9636 阶\\u9637 阷\\u9638 阸\\u9639 阹\\u9640 陀\\u9641 陁\\u9642 陂\\u9643 陃\\u9644 附\\u9645 际\\u9646 陆\\u9647 陇\\u9648 陈\\u9649 陉\\u9650 限\\u9651 陑\\u9652 陒\\u9653 陓\\u9654 陔\\u9655 陕\\u9656 陖\\u9657 陗\\u9658 陘\\u9659 陙\\u9660 陠\\u9661 陡\\u9662 院\\u9663 陣\\u9664 除\\u9665 陥\\u9666 陦\\u9667 陧\\u9668 陨\\u9669 险\\u9670 陰\\u9671 陱\\u9672 陲\\u9673 陳\\u9674 陴\\u9675 陵\\u9676 陶\\u9677 陷\\u9678 陸\\u9679 陹\\u9680 隀\\u9681 隁\\u9682 隂\\u9683 隃\\u9684 隄\\u9685 隅\\u9686 隆\\u9687 隇\\u9688 隈\\u9689 隉\\u9690 隐\\u9691 隑\\u9692 隒\\u9693 隓\\u9694 隔\\u9695 隕\\u9696 隖\\u9697 隗\\u9698 隘\\u9699 隙\\u9700 需\\u9701 霁\\u9702 霂\\u9703 霃\\u9704 霄\\u9705 霅\\u9706 霆\\u9707 震\\u9708 霈\\u9709 霉\\u9710 霐\\u9711 霑\\u9712 霒\\u9713 霓\\u9714 霔\\u9715 霕\\u9716 霖\\u9717 霗\\u9718 霘\\u9719 霙\\u9720 霠\\u9721 霡\\u9722 霢\\u9723 霣\\u9724 霤\\u9725 霥\\u9726 霦\\u9727 霧\\u9728 霨\\u9729 霩\\u9730 霰\\u9731 霱\\u9732 露\\u9733 霳\\u9734 霴\\u9735 霵\\u9736 霶\\u9737 霷\\u9738 霸\\u9739 霹\\u9740 靀\\u9741 靁\\u9742 靂\\u9743 靃\\u9744 靄\\u9745 靅\\u9746 靆\\u9747 靇\\u9748 靈\\u9749 靉\\u9750 靐\\u9751 靑\\u9752 青\\u9753 靓\\u9754 靔\\u9755 靕\\u9756 靖\\u9757 靗\\u9758 靘\\u9759 静\\u9760 靠\\u9761 靡\\u9762 面\\u9763 靣\\u9764 靤\\u9765 靥\\u9766 靦\\u9767 靧\\u9768 靨\\u9769 革\\u9770 靰\\u9771 靱\\u9772 靲\\u9773 靳\\u9774 靴\\u9775 靵\\u9776 靶\\u9777 靷\\u9778 靸\\u9779 靹\\u9780 鞀\\u9781 鞁\\u9782 鞂\\u9783 鞃\\u9784 鞄\\u9785 鞅\\u9786 鞆\\u9787 鞇\\u9788 鞈\\u9789 鞉\\u9790 鞐\\u9791 鞑\\u9792 鞒\\u9793 鞓\\u9794 鞔\\u9795 鞕\\u9796 鞖\\u9797 鞗\\u9798 鞘\\u9799 鞙\\u9800 頀\\u9801 頁\\u9802 頂\\u9803 頃\\u9804 頄\\u9805 項\\u9806 順\\u9807 頇\\u9808 須\\u9809 頉\\u9810 預\\u9811 頑\\u9812 頒\\u9813 頓\\u9814 頔\\u9815 頕\\u9816 頖\\u9817 頗\\u9818 領\\u9819 頙\\u9820 頠\\u9821 頡\\u9822 頢\\u9823 頣\\u9824 頤\\u9825 頥\\u9826 頦\\u9827 頧\\u9828 頨\\u9829 頩\\u9830 頰\\u9831 頱\\u9832 頲\\u9833 頳\\u9834 頴\\u9835 頵\\u9836 頶\\u9837 頷\\u9838 頸\\u9839 頹\\u9840 顀\\u9841 顁\\u9842 顂\\u9843 顃\\u9844 顄\\u9845 顅\\u9846 顆\\u9847 顇\\u9848 顈\\u9849 顉\\u9850 顐\\u9851 顑\\u9852 顒\\u9853 顓\\u9854 顔\\u9855 顕\\u9856 顖\\u9857 顗\\u9858 願\\u9859 顙\\u9860 顠\\u9861 顡\\u9862 顢\\u9863 顣\\u9864 顤\\u9865 顥\\u9866 顦\\u9867 顧\\u9868 顨\\u9869 顩\\u9870 顰\\u9871 顱\\u9872 顲\\u9873 顳\\u9874 顴\\u9875 页\\u9876 顶\\u9877 顷\\u9878 顸\\u9879 项\\u9880 颀\\u9881 颁\\u9882 颂\\u9883 颃\\u9884 预\\u9885 颅\\u9886 领\\u9887 颇\\u9888 颈\\u9889 颉\\u9890 颐\\u9891 频\\u9892 颒\\u9893 颓\\u9894 颔\\u9895 颕\\u9896 颖\\u9897 颗\\u9898 题\\u9899 颙\\u9900 餀\\u9901 餁\\u9902 餂\\u9903 餃\\u9904 餄\\u9905 餅\\u9906 餆\\u9907 餇\\u9908 餈\\u9909 餉\\u9910 餐\\u9911 餑\\u9912 餒\\u9913 餓\\u9914 餔\\u9915 餕\\u9916 餖\\u9917 餗\\u9918 餘\\u9919 餙\\u9920 餠\\u9921 餡\\u9922 餢\\u9923 餣\\u9924 餤\\u9925 餥\\u9926 餦\\u9927 餧\\u9928 館\\u9929 餩\\u9930 餰\\u9931 餱\\u9932 餲\\u9933 餳\\u9934 餴\\u9935 餵\\u9936 餶\\u9937 餷\\u9938 餸\\u9939 餹\\u9940 饀\\u9941 饁\\u9942 饂\\u9943 饃\\u9944 饄\\u9945 饅\\u9946 饆\\u9947 饇\\u9948 饈\\u9949 饉\\u9950 饐\\u9951 饑\\u9952 饒\\u9953 饓\\u9954 饔\\u9955 饕\\u9956 饖\\u9957 饗\\u9958 饘\\u9959 饙\\u9960 饠\\u9961 饡\\u9962 饢\\u9963 饣\\u9964 饤\\u9965 饥\\u9966 饦\\u9967 饧\\u9968 饨\\u9969 饩\\u9970 饰\\u9971 饱\\u9972 饲\\u9973 饳\\u9974 饴\\u9975 饵\\u9976 饶\\u9977 饷\\u9978 饸\\u9979 饹\\u9980 馀\\u9981 馁\\u9982 馂\\u9983 馃\\u9984 馄\\u9985 馅\\u9986 馆\\u9987 馇\\u9988 馈\\u9989 馉\\u9990 馐\\u9991 馑\\u9992 馒\\u9993 馓\\u9994 馔\\u9995 馕\\u9996 首\\u9997 馗\\u9998 馘\\u9999 香","categories":[],"tags":[]},{"title":"大数据生态圈","slug":"BigData/bigdata-ecosphere","date":"2021-10-23T11:54:51.068Z","updated":"2021-10-23T11:54:51.069Z","comments":true,"path":"BigData/bigdata-ecosphere.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-ecosphere.md/","excerpt":"","text":"1. 大数据生态圈 大数据生态圈 1.1. 大数据常用技术简介 Flume-日志收集工具 sqoop-数据同步传输工具 Zookeeper-分布式协作服务 Hbase-分布式列存储数据库 Hive-数据仓库 Tez OOzie-工作流调度系统 Hue (Hadoop user Experience)大数据协作框架，web 访问 Impala (数据查询系统) Sentry(事件日志记录和汇集的平台)【哨兵】 Solr(全文搜索服务器,基于 lucene) Lucene pig Ambari Storm(实时处理框架)【暴风雨】 Kylin【麒麟】 Kibana Kafka(分布式消息队列) Azkaban(批量工作流任务调度器) Nginx(反向代理服务器) spark 和 spark2(大数据处理的计算引擎) 大数据相关技术简介 参考资源 参考资源 大数据博主 什么是分布式系统！以及分布式系统架构的优缺点！ 大数据生态圈大数据特征： 1)大量化(Volume)：存储量大，增量大 TB-&gt;PB 2)多样化(Variety)： 来源多:搜索引擎，社交网络，通话记录，传感器 格式多:(非)结构化数据 ，文本、日志、视频、图片、地理位置等 3)快速化(Velocity)： 海量数据的处理需求不再局限在离线计算当中 4)价值密度低(Value)： 但是这种价值需要在海量数据之上，通过数据分析与机器学习更快速的挖掘出来 大数据带来的革命性变革： 1)成本降低 2)软件容错，硬件故障视为常态 3)简化分布式并行计算 1.1. 大数据常用技术简介Flume-日志收集工具Flume 数据流提供对日志数据进行简单处理的能力，如过滤、格式转换等。同时，Flume 还具备能够将日志写往各种数据目标的能力。 概念: 架构 agent 用于采集数据 collector 用户数据汇总 storage 是存储系统 sqoop-数据同步传输工具用于 hadoop(hive)与传统数据库的数据传输。 ETL Zookeeper-分布式协作服务一个分布式的，开放源码的分布式应用程序协调服务，是 Google 的 Chubby 一个开源的实现。 Zookeeper 解决分布环境下的数据管理问题：统一命名，状态同步，集群管理，配置同步等。Hadoop 的许多组件依赖于 Zookeeper,它运行在计算集群上面，用户管理 Hadoop 操作。分布式应用程序可以基于 ZooKeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。 快速理解： Zookeeper 的核心功能，文件系统和通信机制。 概念: 核心功能 文件系统 每个目录都是一个 znode 节点；Znode 节点可直接存储数据；类型，持久化 通信机制 客户端监听关心的 Znode 节点；znode 节点有变化时，通知客户端 核心 原子广播，保证了各个 Server 之间的同步。实现这种机制的协作叫做 ZAB 协议。(Zookeeper Atomic BrodCast) ZAB 协议：核心算法 paxos 算法，一种基于消息传递且具有高度容错性的一致性算法。分布式系统中的节点通信存在两种模型，共享内存，消息传递。 paxos 算法解决的问题是一个可能发生上述异常的分布式系统中如何就某个值达成一致，保证不论发生以上任何异常，都不会破坏决策的一致性。 Hbase-分布式列存储数据库hbase 是运行在 hdfs 之上的一种数据库，以键值对的形式存储数据，能够快速在主机内数十亿行数据中定位所需的数据并访问，而 HDFS 缺乏随即读写操作，不能满足实时需求。 概念: 特性: 海量数据存储 准实时查询，100ms 特点： 容量大，百亿行，百万列 面向列，列式存储，可单独对列进行操作 扩展性，底层依赖于 HDFS,动态增加机器即可 可靠性，HDFS 本身也有备份 高性能，LSM 数据结构，Rowkey 有序排序 Hbase 表结构： 列簇，1 张列簇不超过 5 个，列簇没有限制，列只有插入数据才存在，列在列簇中是有序的。eg:个人信息|教育信息|工作经历 不支持条件查询，列动态增加，数据自动切分，高并发读写。 1234567891011121314151617启动方式：输入：habse shell查询表：list查询表数据信息：(1)scan &#x27;表名&#x27; (2)count &#x27;表名&#x27;命令：(注意，复制可能报错，只能手打)# 查看scan &#x27;表名：列簇&#x27;，&#x27;条件&#x27;# 只返回前两行记录scan &#x27;table_name:info&#x27;,&#123;LIMIT =&gt;2&#125;# 查看具体某一行get &#x27;table_name:info&#x27;,&#x27;00123_22&#x27;# 模糊查找某一列数据scan &#x27;table_name:info&#x27;，FILTER=&gt;&quot;ColumnPrefixFilter(&#x27;td_id&#x27;) AND ValueFilter(=,&#x27;substring:$_08_03&#x27;)&quot; Hive-数据仓库Hive 是建立在 hadoop 上的数据仓库基础架构，类似一种 SQL 解析引擎，它将 SQL 语句转成 MapReduce,然后再 Hadoop 上执行。 1234567891011121314151617181920212223242526272829303132333435363738394041启动方式：hive;show tables;select * from table_name;quit;命令：# 创建数据文件hadoop fs -vi /home/testdata.dat# 创建库create database test# 创建表create table test(id int,name string,age string) ROW format DELIMITED FIELDSTERMINATED BY &#x27;\\t&#x27; stored as TEXTFILE;# 加载数据load data local inpath &#x27;/root/data/students.txt&#x27; into table test;# 删除表drop database if exists test;# 大小写转换select lower(&#x27;hello world&#x27;),upper(&#x27;hello world&#x27;)# 去掉前后的空格trim habse 和 hive 的区别 habse 是基于 Haddoop 实现的数据库，不支持 SQL hive 是基于 hadoop 实现的数据仓库，适合海量全量数据，支持类 SQL 操作。 数据仓库的特性 数据仓库用称做数据立方体的多维数据结构建模，它是一个从多个数据源收集的信息存储库，存放在一致的模式下，并且通常驻留在单个站点上。 数据仓库是面向主题的、集成的、其数据是随着时间变化而变化的，其数据是不可修改的。 Facebook 领导的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供完整的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计。像一些 data scientist 就可以直接查询，不需要学习其他编程接口。 Tez支持 DAG 作业的计算框架，对 MapReduce 的进一步拆分 Hortonworks 主推的优化 MapReduce 执行引擎，与 MapReduce 相比较，Tez 在性能方面更加出色。 OOzie-工作流调度系统用来管理 hadoop 任务，工作流调度：工作流程的编排、调整，安排事件的触发执行。OOzie 是一个可扩展的工作体系，集成于 Hadoop 的堆栈，用于协调多个 MapReduce 作业的执行。OOzie 的工作流是放置在控制依赖 DAG(有向无环图 Direct Acyclic Graph)的一组动作(例如，hadoop 的 Map/Reduce 作业，Pig 作业等)，其中指定了动作执行的顺序。OOzie 使用 hPDL(一种 XML 流程定义语言)来描述这个图。 一个基于工作流引擎的开源框架。由 Cloudera 公司贡献给 Apache 的，它能够提供对 Hadoop MapReduce 和 Pig Jobs 的任务调度与协调。 Hue (Hadoop user Experience)大数据协作框架，web 访问访问端口：8889 使用 Hue 我们可以在浏览器端的 Web 控制台上与 Hadoop 集群进行交互来分析处理数据，例如操作 HDFS 上的数据，运行 MapReduce Job,执行 Hive 的 SQL 语句，浏览 Hbase 数据库。 Impala (数据查询系统)提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBASE 的 PB 级的大数据。Impala 没有使用 MapReduce 进行并行运算，所以 Hive 适合于长时间的批处理查询分析，而 Impala 适合于实时交互式 SQL 查询。 Sentry(事件日志记录和汇集的平台)【哨兵】Sentry 是一个开源的实时错误报告工具，支持 Web 前后端、移动应用以及游戏。通常我们所说的 Sentry 是指后端，有 Django 编写。 Solr(全文搜索服务器,基于 lucene)Sentry 是一个独立的企业其搜索应用服务器，它是一个高性能，采用 JAVA5 开发，它对外提供类似于 Web-service 的 API 接口。用户可以通过 HTTP 请求，向搜索引擎提交一定格式的 XML 文件，生成索引。 Lucene它是一套用于全文检索和搜索的开发源代码程序库。Lucene 提供了一个简单却强大的应用接口程序,能够做全文索引和搜索，它是最受欢迎的免费 Java 信息检索程序库。 pigYahoo 开发的，并行地执行数据流处理的引擎，它包含了一种脚本语言，称为 Pig Latin，用来描述这些数据流。Pig Latin 本身提供了许多传统的数据操作，同时允许用户自己开发一些自定义函数用来读取、处理和写数据。在 LinkedIn 也是大量使用 为大型数据集的处理提供抽象，与 MapReduce 相比，Pig 提供了更丰富的数据结构，一般都是多值和嵌套的数据结构。它提供强大的数据变换，包括在 MapReduce 中被忽视的连接 Join 操作。 Ambari一种基于 web 的工具，支持 hadoop 集群的供应、管理和监控。 Storm(实时处理框架)【暴风雨】类似于 Hadoop 的实时处理框架，毫秒级。随着越来越多的场景对 Hadoop 的 MapReduce 高延迟无法容忍，比如网站统计、推荐系统、预警系统、金融系统(高频交易)等等，大数据实时处理解决方法的应用日趋广泛，其中 Strom 成为流计算技术中的佼佼者。 基本概念： Storm 的主从架构由 Nimbus(主结点)、zookeeper(协作框架)、supervisor(从节点)和 worker(各个机器)组成。 1)Nimbus 的作用：接收客户端代码，拆分成多个 task,将 task 信息存入 zookeper;将 task 分配给 supervisor,将映射关系存入 zookeeper;故障检测 2)supervisor 的作用：从 Nimbus 目录读取代码，从 zk 上读取分配的 task;启动工作进程 worker 执行任务；检测运行的工作进度 worker. worker 的作用：从 zk 上去读取分配的 task,并计算出 task 需要给哪些 task 分布消息；启动一个或多个 Executor 线程执行任务 Task. 4)zookeeper 的作用：协调 Nimbus 与 supervisor 进行通信；协调 supervisor 与 worker 进行通信；保证 Nimbus 的高可用性。 Kylin【麒麟】一个开源的分布式分析引擎，为 Hadoop 等大型分布式数据平台之上的超大规模数据集提供通过标准 SQL 查询及多维分析(OLAP)的功能，提供亚秒级的交互分析能力。 Tips:ETL(数据仓库技术) extract,transform,load(抽取)(转换)(加载) Kibana它是一个开源的分析和可视化平台，设计用于和 ElasticSearch 一起工作，你用 Kibana 来搜索，查看并存在 ES 索引中的数据进行交互。 常用端口(ES):5601参考链接：https://blog.csdn.net/u011262847/article/details/78007119 同时附 es-java-api: https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-search.html Kafka(分布式消息队列)端口号：9092 主要用于处理活跃的流式数据，这些数据包括网站的 pv,uv。 概念： 基本组成部分 producer Broker Consumer 基本概念 producer: 消息和数据的生产者，向 kafka 的一个 topic 发布消息的进程、代码、服务，负责发布消息到 Broker. Broker: Kafka 集群包含一个或多个服务器，这种服务被称为 Broker. Consumer: 消息和数据的消费者，订阅消息,向 Broker 读取消息的客户端。 Topic: kafka 消息的类别,每条发布到 kafka 集群的消息都有一个类别，这个类别称为 Topic. Partition： kafka 下数据存储的基本单元,每个 Topic 包含一个或多个 Partition. Consumer Group: 对于同一个 Topic,会广播给不同的 Group。每个 Consumer 属于一个特定的 Consumer Group. Replication Leader: 负责 partition 上 Producer 与 Consumer 的交互。 ReplicaManager: 负责管理当前 Broker 所有分区和副本的信息。 特点 多分区 多副本 多订阅者 基于 zookeeper 调度 应用场景： 消息队列 行为跟踪 元数据监控 日志收集 流处理，时间源 持久性日志 1234567891011121314151617手动导入数据到 Kafka 命令#创建主题,replication-factor 表示该 topic 需要在不同的 broker 中保存几份，partions 为几个分区./kafka-topics.sh --create --zookeeper cdh-node04:2111 --replication-factor 3 -- partitions 1 --topic test01#描述主题./kafka-topic.sh --zookeeper cdh-node04:2111 --describe --topic test01#生产者发送数据./kafka-console-producer.sh --broker-list cdh-node04:2111,cdh-node05:3111 --topic test01 +(复制黏贴的数据【固定格式：一般为 JSON 】)#消费者消费数据./kafaka-console-consumer.sh --zookeeper cdh-node04:2111 --topic test01 (--from-beginning 从头开始查看数据) Azkaban(批量工作流任务调度器)主要用于在一个工作流内以一个特定的顺序运行一组工作和流程，它的配置是通过简单的 key:value 键值对的方式，通过配置中的 dependencies 来设置依赖关系，这个依赖关系是无环的,否则会被视为无效的工作流。相比于 OOzie 的配置复杂度高，Azkaban 有如下有点： 1)通过 job 配置文件快速建立任务和任务之间的依赖关系。 2)提供功能清晰，简单易用的 web UI 界面。 3)提供模块化和可插拔的插件机制，原生支持 command,java,pig,hadoop。 基于 java 开发，代码结构清晰，易于二次开发。 跟上面很像，Linkedin 开源的面向 Hadoop 的开源工作流系统，提供了类似于 cron 的管理任务。 Nginx(反向代理服务器)它是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。Nginx 是一款轻量级的 Web 服务器/反向代理服务器以及电子邮件代理服务器，并在一个 BSD-like 协议下发型，其特点是占有内存小，并发能力强。事实上 nginx 的并发能力确实在同类型的网络服务器中表现较好，中国大陆使用 nginx 网站的有：百度，京东，腾讯，淘宝，网易。 应用： Nginx 实现负载均衡，链接：https://www.cnblogs.com/JimBo-Wang/p/6556360.html spark 和 spark2(大数据处理的计算引擎)Spark 是 UC Berkeley AMP lab 开发的一个集群计算的框架，类似于 Hadoop，但有很多的区别。最大的优化是让计算任务的中间结果可以存储在内存中，不需要每次都写入 HDFS，更适用于需要迭代的 MapReduce 算法场景中，可以获得更好的性能提升。例如一次排序测试中，对 100TB 数据进行排序，Spark 比 Hadoop 快三倍，并且只需要十分之一的机器。Spark 集群目前最大的可以达到 8000 节点，处理的数据达到 PB 级别，在互联网企业中应用非常广泛. 链接：https://www.cnblogs.com/smuxiaolei/p/7663744.html 相关概念： 1)在 spark 中，所有计算都是通过 RDDS 的创建、转化和操作完成的。RDDS(Resilent Distributed datasets,弹性分布式数据集)是并行分布在整个数据集中，是 spark 分发数据和计算的基础抽象类。 2)Spark 运行架构包括集群资源管理器(Cluster Manager),运行作业任务的工作节点(worker Node),每个应用的任务控制节点(Driver)和每个工作节点上负责任务的执行进程(Executor). Spark 程序的执行过程： 1)创建 SparkContext 对象 2)从外部数据源读取数据，创建 fileRDD 对象 3)构建依赖关系，fileRDD-&gt;filterRDD,形成 DAG 4)Cache()缓存，对 filterRDD 进行持久化 5)Count()执行。 spark 基础：http://dblab.xmu.edu.cn/blog/spark/ 与 Hadoop MapReduce 比较： 1)spark 采用多线程来执行任务，而 MapReduce 采用多进程，优点是减少了任务开销。 2)Excutor 中有一个 BlockManager 存储模块，会将内存和磁盘共同作为存储设备，当需要多轮时，可将中间结果存储到这个模块中，下次需要时，可以直接读取，不需要读写到 HDFS 等文件系统中，减少 IO 开销。 3)实例：100T 的数据量，spark 206 个节点，只需 23 分钟；MapReduce 2000 个节点，需要 72 分钟。 链接：http://dblab.xmu.edu.cn/blog/985-2/ RDD 在 Spark 架构中的运行过程(如图所示)：(1)创建 RDD 对象； (2)SparkContext 负责计算 RDD 之间的依赖关系，构建 DAG； (3)DAGScheduler 负责把 DAG 图分解成多个阶段，每个阶段中包含了多个任务，每个任务会被任务调度器分发给各个工作节点(Worker Node)上的 Executor 去执行。 大数据相关技术简介 Platfora 大数据发现和分析平台。 Qlikview 引导分析平台。 Sisense 商业智能软件，专门处理复杂数据的商业智能解决方案。 Sqream 快速、可扩展的大数据分析 SQL 数据库。 Splunk 运维智能平台。 Sumologic 安全的、专门定制的、基于云的机器数据分析服务。 Actian 大数据分析平台。 亚马逊 Redshift PB 级云端数据仓库服务。 CitusData 可扩展 PostgreSQL。 Exasol 用于分析数据的大规模并行处理(MPP)内存数据库。 惠普 Vertica SQL on Hadoop 大数据分析平台。 Mammothdb 与 SQL 兼容的 MPP 分析数据库。 微软 SQL Server 关系数据库管理系统。 甲骨文 Exadata 计算和存储综合系统，针对甲骨文数据库软件进行了优化。 SAP HANA 内存计算平台。 Snowflake 云数据仓库。 Teradata 企业级大数据分析和服务。 数据搜索引擎 Apache Drill 无数据库模式的 SQL 查询引擎，面向 Hadoop、NoSQL 和云存储。 Cloudera Impala 开源大规模并行处理 SQL 查询引擎。 谷歌 BigQuery 全面托管的 NoOps 数据分析服务。 Presto 面向大数据的分布式 SQL 查询引擎。 Spark 用于处理大数据的快速通用引擎。 平台/基础设施 亚马逊网络服务(AWS) 提供云计算服务 思科云 提供基础设施即服务 Heroku 为云端应用程序提供平台即服务 Infochimps 提供云服务的大数据解决方案 微软 Azure 企业级云计算平台。 Rackspace 托管专业服务和云计算服务 Softlayer(IBM) 提供云基础设施即服务 数据基础设施 Cask 面向 Hadoop 解决方案的开源应用程序平台。 Cloudera 提供基于 Hadoop 的软件、支持和服务。 Hortonworks 管理 HDP――开源企业 Apache Hadoop 数据平台。 MAPR 面向大数据部署环境的 Apache Hadoop 技术。 垂直领域应用/数据挖掘 Alpine Data Labs 高级分析平台，可处理 Apache Hadoop 和大数据。 R 免费软件环境，可处理统计计算和图形。 Rapidminer 开源预测分析平台 SAS 软件套件，可以挖掘、改动、管理和检索来自众多数据源的数据。 提取、转换和加载(ETL) IBM Datastage 使用一种高性能并行框架，整合多个系统上的数据。 Informatica 企业数据整合和管理软件。 Kettle-Pentaho Data Integration 提供了强大的提取、转换和加载(ETL)功能。 微软 SSIS 用于构建企业级数据整合和数据转换解决方案的平台。 甲骨文 Data Integrator 全面的数据整合平台。 SAP NetWeaver 为整合来自各个数据源的数据提供了灵活方式。 Talend 提供了开源整合软件产品 Cassandra 键值数据库和列式数据库的混合解决方案。 CouchBase 开源分布式 NoSQL 文档型数据库。 Databricks 使用 Spark 的基于云的大数据处理解决方案。 Datastax 为企业版的 Cassandra 数据库提供商业支持。 IBM DB2 可扩展的企业数据库服务器软件。 MemSQL 分布式内存数据库。 MongoDB 跨平台的文档型数据库。 MySQL 流行的开源数据库。 甲骨文-Oracle等软件 企业数据库软件套件。 PostgresSQL 对象关系数据库管理系统。 Riak 分布式 NoSQL 数据库。 Splice Machine Hadoop 关系数据库管理系统。 VoltDB 内存 NewSQL 数据库。 Actuate 嵌入式分析和报表解决方案。 BiBoard 交互式商业智能仪表板和可视化工具。 Chart.IO 这是面向数据库的企业级分析工具。 IBM Cognos 商业智能和绩效管理软件。 D3.JS 使用 HTML、SVG 和 CSS 可视化显示数据的 JavaScript 库。 Highcharts 面向互联网的交互式 JavaScirpt 图表。 Logi Analytics 自助服务式、基于 Web 的商业智能和分析应用软件。 微软 Power BI 交互式数据探查、可视化和演示工具。 Microstrategy 企业商业智能和分析软件。 甲骨文 Hyperion 企业绩效管理和商业智能系统。 Pentaho 大数据整合和分析解决方案。 SAP Business Objects 商业智能解决方案。 Tableau 专注于商业智能的交互式数据可视化产品系列。 Tibco Jaspersoft 商业智能套件 参考资源 大数据大纲&amp;大数据生态圈所涉及的技术 数据湖 大数据生态圈相关总结 一篇了解大数据架构及 Hadoop 生态圈 大数据生态圈 大数据分析技术领域-2015 相关技术","categories":[],"tags":[]},{"title":"Redis 学习之路","slug":"BigData/bigdata-Redis","date":"2021-10-23T11:54:51.067Z","updated":"2021-10-23T11:54:51.067Z","comments":true,"path":"BigData/bigdata-Redis.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/bigdata-Redis.md/","excerpt":"","text":"参考资源 菜鸟驿站-Redis 教程 Redis-高性能 kv 数据库 内存管理库，可以接受多种数据格式 Redis 部署1234567891011121314# Installyum install lrzsz -ypip install redis# wget http://download.redis.io/releases/redis-5.0.5.tar.gzwget http://download.redis.io/releases/redis-3.2.9.tar.gztar -zxf redis-3.2.9.tar.gz# # 编译并指定安装目录cd redis-3.2.9# # 创建软链接make PREFIX=/usr/local/redis-3.2.9 installln -s /usr/local/redis-3.2.9 /usr/local/rediscp redis.conf /etc/redis.confcp /usr/local/redis/bin/redis-server /usr/local/bin/redis-server 配置 Redis 123456789101112# 配置 overcommit_memory 参数echo &quot;vm.overcommit_memory = 1&quot; &gt;&gt; /etc/sysctl.conf# 使其生效sysctl vm.overcommit_memory=1# 关闭透明大页面-临时echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled# 关闭透明大页面-永久,开机生效echo &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot; &gt;&gt; /etc/rc.local# 修改 redis.confprotected-mode yes 修改为 protected-mode no Redis 使用12# 启动 Redisredis-server /etc/redis.conf 启动页面内容如下 12345678910111213141516171819202122[root@e7489d44f6bf redis-3.2.9]# redis-server /etc/redis.conf _._ _.-``__ &#x27;&#x27;-._ _.-`` `. `_. &#x27;&#x27;-._ Redis 3.2.9 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ &#x27;&#x27;-._ ( &#x27; , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;| Port: 6379 | `-._ `._ / _.-&#x27; | PID: 4682 `-._ `-._ `-./ _.-&#x27; _.-&#x27; |`-._`-._ `-.__.-&#x27; _.-&#x27;_.-&#x27;| | `-._`-._ _.-&#x27;_.-&#x27; | http://redis.io `-._ `-._`-.__.-&#x27;_.-&#x27; _.-&#x27; |`-._`-._ `-.__.-&#x27; _.-&#x27;_.-&#x27;| | `-._`-._ _.-&#x27;_.-&#x27; | `-._ `-._`-.__.-&#x27;_.-&#x27; _.-&#x27; `-._ `-.__.-&#x27; _.-&#x27; `-._ _.-&#x27; `-.__.-&#x27;4682:M 25 Dec 04:20:48.273 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.4682:M 25 Dec 04:20:48.274 # Server started, Redis version 3.2.94682:M 25 Dec 04:20:48.274 * The server is now ready to accept connections on port 6379 Resources 菜鸟驿站-Redis 教程","categories":[],"tags":[]},{"title":"ReadMe-大数据生态圈","slug":"BigData/README","date":"2021-10-23T11:54:51.066Z","updated":"2021-10-23T11:54:51.066Z","comments":true,"path":"BigData/README.md/","link":"","permalink":"http://fansichao.github.com/blog/BigData/README.md/","excerpt":"","text":"目录索引大数据知识 大数据可视化 大数据质量分析 大数据生态圈 大数据详细模块 Hadoop-分布式框架 Hbase-kv-数据库 Spark PrestoDB-数据查询工具 Hive-分布式数据库 Hive-Sql flink : 流式处理 消息队列 RabbitMQ-消息队列 Kafaka-消息队列 其他 ScyllaDb-底层数据库 Huey-任务队列 大数据清洗-异常字符 参考资源","categories":[],"tags":[]},{"title":"ReadMe","slug":"Algorithm/README","date":"2021-10-23T11:54:51.065Z","updated":"2021-10-23T11:54:51.066Z","comments":true,"path":"Algorithm/README.md/","link":"","permalink":"http://fansichao.github.com/blog/Algorithm/README.md/","excerpt":"","text":"算法刷题： 参考链接： https://github.com/youngyangyang04/leetcode-master","categories":[],"tags":[]}],"categories":[{"name":"xxx","slug":"xxx","permalink":"http://fansichao.github.com/blog/categories/xxx/"},{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/categories/module/"},{"name":"hexo","slug":"module/hexo","permalink":"http://fansichao.github.com/blog/categories/module/hexo/"},{"name":"grpah","slug":"module/grpah","permalink":"http://fansichao.github.com/blog/categories/module/grpah/"},{"name":"graph","slug":"module/graph","permalink":"http://fansichao.github.com/blog/categories/module/graph/"},{"name":"docker","slug":"module/docker","permalink":"http://fansichao.github.com/blog/categories/module/docker/"},{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/categories/bigdata/"},{"name":"大数据","slug":"大数据","permalink":"http://fansichao.github.com/blog/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/categories/web/"},{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/categories/python/"},{"name":"python-进阶","slug":"python/python-进阶","permalink":"http://fansichao.github.com/blog/categories/python/python-%E8%BF%9B%E9%98%B6/"},{"name":"python-内置包","slug":"python/python-内置包","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%86%85%E7%BD%AE%E5%8C%85/"},{"name":"python-基础","slug":"python/python-基础","permalink":"http://fansichao.github.com/blog/categories/python/python-%E5%9F%BA%E7%A1%80/"},{"name":"data-structure","slug":"python/data-structure","permalink":"http://fansichao.github.com/blog/categories/python/data-structure/"},{"name":"python-algorithm","slug":"python/python-algorithm","permalink":"http://fansichao.github.com/blog/categories/python/python-algorithm/"},{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/categories/linux/"}],"tags":[{"name":"aaa","slug":"aaa","permalink":"http://fansichao.github.com/blog/tags/aaa/"},{"name":"module","slug":"module","permalink":"http://fansichao.github.com/blog/tags/module/"},{"name":"hexo","slug":"hexo","permalink":"http://fansichao.github.com/blog/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://fansichao.github.com/blog/tags/blog/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://fansichao.github.com/blog/tags/Neo4j/"},{"name":"index","slug":"index","permalink":"http://fansichao.github.com/blog/tags/index/"},{"name":"hugegraph","slug":"hugegraph","permalink":"http://fansichao.github.com/blog/tags/hugegraph/"},{"name":"Graph","slug":"Graph","permalink":"http://fansichao.github.com/blog/tags/Graph/"},{"name":"graph","slug":"graph","permalink":"http://fansichao.github.com/blog/tags/graph/"},{"name":"gremlin","slug":"gremlin","permalink":"http://fansichao.github.com/blog/tags/gremlin/"},{"name":"docker","slug":"docker","permalink":"http://fansichao.github.com/blog/tags/docker/"},{"name":"Database","slug":"Database","permalink":"http://fansichao.github.com/blog/tags/Database/"},{"name":"bigdata","slug":"bigdata","permalink":"http://fansichao.github.com/blog/tags/bigdata/"},{"name":"scylladb","slug":"scylladb","permalink":"http://fansichao.github.com/blog/tags/scylladb/"},{"name":"spark","slug":"spark","permalink":"http://fansichao.github.com/blog/tags/spark/"},{"name":"大数据","slug":"大数据","permalink":"http://fansichao.github.com/blog/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"消息队列","slug":"消息队列","permalink":"http://fansichao.github.com/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"hbase","slug":"hbase","permalink":"http://fansichao.github.com/blog/tags/hbase/"},{"name":"hadoop","slug":"hadoop","permalink":"http://fansichao.github.com/blog/tags/hadoop/"},{"name":"缓存机制","slug":"缓存机制","permalink":"http://fansichao.github.com/blog/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"},{"name":"web","slug":"web","permalink":"http://fansichao.github.com/blog/tags/web/"},{"name":"python","slug":"python","permalink":"http://fansichao.github.com/blog/tags/python/"},{"name":"python-进阶","slug":"python-进阶","permalink":"http://fansichao.github.com/blog/tags/python-%E8%BF%9B%E9%98%B6/"},{"name":"python-内置包","slug":"python-内置包","permalink":"http://fansichao.github.com/blog/tags/python-%E5%86%85%E7%BD%AE%E5%8C%85/"},{"name":"python-基础","slug":"python-基础","permalink":"http://fansichao.github.com/blog/tags/python-%E5%9F%BA%E7%A1%80/"},{"name":"data-structure","slug":"data-structure","permalink":"http://fansichao.github.com/blog/tags/data-structure/"},{"name":"todo","slug":"todo","permalink":"http://fansichao.github.com/blog/tags/todo/"},{"name":"python-algorithm","slug":"python-algorithm","permalink":"http://fansichao.github.com/blog/tags/python-algorithm/"},{"name":"linux","slug":"linux","permalink":"http://fansichao.github.com/blog/tags/linux/"},{"name":"centos8","slug":"centos8","permalink":"http://fansichao.github.com/blog/tags/centos8/"},{"name":"shell","slug":"shell","permalink":"http://fansichao.github.com/blog/tags/shell/"}]}